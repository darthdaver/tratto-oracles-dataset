[
    {
        "id": 26707,
        "oracle": "inputs == null || inputs.size() == 0;",
        "oracleType": "EXCEPT_POST",
        "projectName": "Digital",
        "packageName": "de.neemann.digital.core.wiring",
        "className": "Break",
        "javadocTag": "",
        "methodJavadoc": "",
        "methodSourceCode": "public void setInputs(ObservableValues inputs) throws NodeException{\n    input = inputs.get(0).checkBits(1, null);\n}",
        "classJavadoc": "/**\n * The Break element\n */",
        "classSourceCode": "/*\n * Copyright (c) 2016 Helmut Neemann\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.core.wiring;\n\nimport de.neemann.digital.core.Model;\nimport de.neemann.digital.core.NodeException;\nimport de.neemann.digital.core.ObservableValue;\nimport de.neemann.digital.core.ObservableValues;\nimport de.neemann.digital.core.element.Element;\nimport de.neemann.digital.core.element.ElementAttributes;\nimport de.neemann.digital.core.element.ElementTypeDescription;\nimport de.neemann.digital.core.element.Keys;\n\nimport static de.neemann.digital.core.element.PinInfo.input;\n\n/**\n * The Break element\n */\npublic class Break implements Element {\n\n    /**\n     * The Break description\n     */\n    public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\"))\n            .addAttribute(Keys.ROTATE)\n            .addAttribute(Keys.LABEL)\n            .addAttribute(Keys.ENABLED)\n            .addAttribute(Keys.CYCLES);\n\n    private final int cycles;\n    private final String label;\n    private final boolean enabled;\n    private ObservableValue input;\n\n    /**\n     * Creates a new instance\n     *\n     * @param attributes the attributes\n     */\n    public Break(ElementAttributes attributes) {\n        cycles = attributes.get(Keys.CYCLES);\n        enabled = attributes.get(Keys.ENABLED);\n        label = attributes.getLabel();\n    }\n\n    @Override\n    public void setInputs(ObservableValues inputs) throws NodeException {\n        input = inputs.get(0).checkBits(1, null);\n    }\n\n    /**\n     * @return the break value\n     */\n    public ObservableValue getBreakInput() {\n        return input;\n    }\n\n    /**\n     * @return the timeout cycles\n     */\n    public int getCycles() {\n        return cycles;\n    }\n\n    @Override\n    public ObservableValues getOutputs() {\n        return ObservableValues.EMPTY_LIST;\n    }\n\n    @Override\n    public void registerNodes(Model model) {\n        model.addBreak(this);\n    }\n\n    /**\n     * @return the break label\n     */\n    public String getLabel() {\n        return label;\n    }\n\n    /**\n     * @return true if enabled\n     */\n    public boolean isEnabled() {\n        return enabled;\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "CLI",
                "de.neemann"
            ],
            [
                "Mouse",
                "de.neemann.gui"
            ],
            [
                "LineBreaker",
                "de.neemann.gui"
            ],
            [
                "IconCreator",
                "de.neemann.gui"
            ],
            [
                "ConfirmDialogBuilder",
                "de.neemann.gui"
            ],
            [
                "Resources",
                "de.neemann.gui.language"
            ],
            [
                "Bundle",
                "de.neemann.gui.language"
            ],
            [
                "Language",
                "de.neemann.gui.language"
            ],
            [
                "ToolTipAction",
                "de.neemann.gui"
            ],
            [
                "MyFileChooser",
                "de.neemann.gui"
            ],
            [
                "ClosingWindowListener",
                "de.neemann.gui"
            ],
            [
                "ErrorMessage",
                "de.neemann.gui"
            ],
            [
                "WindowSizeStorage",
                "de.neemann.gui"
            ],
            [
                "Screen",
                "de.neemann.gui"
            ],
            [
                "ToolTipProvider",
                "de.neemann.gui"
            ],
            [
                "InfoDialog",
                "de.neemann.gui"
            ],
            [
                "ValueFormatter",
                "de.neemann.digital.core"
            ],
            [
                "ModelStateObserver",
                "de.neemann.digital.core"
            ],
            [
                "PullDown",
                "de.neemann.digital.core.pld"
            ],
            [
                "Diode",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeBackward",
                "de.neemann.digital.core.pld"
            ],
            [
                "PullUp",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeForward",
                "de.neemann.digital.core.pld"
            ],
            [
                "Node",
                "de.neemann.digital.core"
            ],
            [
                "RAMSinglePort",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualAccess",
                "de.neemann.digital.core.memory"
            ],
            [
                "ByteArrayFromValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "Importer",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "LogisimReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "DataFieldValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "IntelHexReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "BinReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "MultiValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "CounterPreset",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Register",
                "de.neemann.digital.core.memory"
            ],
            [
                "LookUpTable",
                "de.neemann.digital.core.memory"
            ],
            [
                "BlockRAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Counter",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMMangerBase",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManagerFile",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManager",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMInterface",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "EEPROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramCounter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMAsync",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataField",
                "de.neemann.digital.core.memory"
            ],
            [
                "EEPROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMInterface",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataFieldConverter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMSinglePortSel",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramMemory",
                "de.neemann.digital.core.memory"
            ],
            [
                "RegisterFile",
                "de.neemann.digital.core.memory"
            ],
            [
                "ModelStateObserverTyped",
                "de.neemann.digital.core"
            ],
            [
                "Observable",
                "de.neemann.digital.core"
            ],
            [
                "NodeWithoutDelay",
                "de.neemann.digital.core"
            ],
            [
                "ExceptionWithOrigin",
                "de.neemann.digital.core"
            ],
            [
                "ObservableValue",
                "de.neemann.digital.core"
            ],
            [
                "SpeedTest",
                "de.neemann.digital.core"
            ],
            [
                "BurnException",
                "de.neemann.digital.core"
            ],
            [
                "GlobalValues",
                "de.neemann.digital.core"
            ],
            [
                "MIDI",
                "de.neemann.digital.core.io"
            ],
            [
                "RGBLED",
                "de.neemann.digital.core.io"
            ],
            [
                "Out",
                "de.neemann.digital.core.io"
            ],
            [
                "RotEncoder",
                "de.neemann.digital.core.io"
            ],
            [
                "PinControl",
                "de.neemann.digital.core.io"
            ],
            [
                "DipSwitch",
                "de.neemann.digital.core.io"
            ],
            [
                "CommonConnectionType",
                "de.neemann.digital.core.io"
            ],
            [
                "LightBulb",
                "de.neemann.digital.core.io"
            ],
            [
                "Probe",
                "de.neemann.digital.core.io"
            ],
            [
                "Button",
                "de.neemann.digital.core.io"
            ],
            [
                "ButtonLED",
                "de.neemann.digital.core.io"
            ],
            [
                "In",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorUnipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "ProbeMode",
                "de.neemann.digital.core.io"
            ],
            [
                "NotConnected",
                "de.neemann.digital.core.io"
            ],
            [
                "MIDIHelper",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorBipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "Const",
                "de.neemann.digital.core.io"
            ],
            [
                "PowerSupply",
                "de.neemann.digital.core.io"
            ],
            [
                "Ground",
                "de.neemann.digital.core.io"
            ],
            [
                "InValue",
                "de.neemann.digital.core.io"
            ],
            [
                "VDD",
                "de.neemann.digital.core.io"
            ],
            [
                "ServerHolder",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Telnet",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ByteBuffer",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Server",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ElementAttributes",
                "de.neemann.digital.core.element"
            ],
            [
                "Element",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementFactory",
                "de.neemann.digital.core.element"
            ],
            [
                "PinInfo",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescriptions",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "Keys",
                "de.neemann.digital.core.element"
            ],
            [
                "Rotation",
                "de.neemann.digital.core.element"
            ],
            [
                "AttributeListener",
                "de.neemann.digital.core.element"
            ],
            [
                "Key",
                "de.neemann.digital.core.element"
            ],
            [
                "ImmutableList",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementTypeDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "FanIn",
                "de.neemann.digital.core.basic"
            ],
            [
                "NOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "And",
                "de.neemann.digital.core.basic"
            ],
            [
                "XNOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "XOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "Not",
                "de.neemann.digital.core.basic"
            ],
            [
                "NAnd",
                "de.neemann.digital.core.basic"
            ],
            [
                "Function",
                "de.neemann.digital.core.basic"
            ],
            [
                "Or",
                "de.neemann.digital.core.basic"
            ],
            [
                "ExceptionWithOriginInterface",
                "de.neemann.digital.core"
            ],
            [
                "ModelEvent",
                "de.neemann.digital.core"
            ],
            [
                "BacktrackException",
                "de.neemann.digital.core"
            ],
            [
                "PlainSwitch",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGPFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "NFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGNFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PlainSwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "TransGate",
                "de.neemann.digital.core.switching"
            ],
            [
                "SwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Relay",
                "de.neemann.digital.core.switching"
            ],
            [
                "RelayDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Switch",
                "de.neemann.digital.core.switching"
            ],
            [
                "Fuse",
                "de.neemann.digital.core.switching"
            ],
            [
                "Reset",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Stop",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Decoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Delay",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Driver",
                "de.neemann.digital.core.wiring"
            ],
            [
                "DataBus",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "SingleBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "ConnectedBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "AbstractBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "BusModelStateObserver",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "CommonBusValue",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "DriverInvSel",
                "de.neemann.digital.core.wiring"
            ],
            [
                "PriorityEncoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BusSplitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Splitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Multiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitSelector",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Break",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Clock",
                "de.neemann.digital.core.wiring"
            ],
            [
                "AsyncSeq",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Demultiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitsException",
                "de.neemann.digital.core"
            ],
            [
                "NodeInterface",
                "de.neemann.digital.core"
            ],
            [
                "NodeException",
                "de.neemann.digital.core"
            ],
            [
                "FlipflopDAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopD",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRSAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopT",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJKAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJK",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "Monoflop",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRS",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopBit",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "BarrelShifter",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Mul",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Neg",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitExtender",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Add",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Div",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "LeftRightFormat",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "PRNG",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Sub",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BarrelShifterMode",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Comparator",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitCount",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "ObservableValues",
                "de.neemann.digital.core"
            ],
            [
                "Value",
                "de.neemann.digital.core"
            ],
            [
                "IntFormat",
                "de.neemann.digital.core"
            ],
            [
                "SyncAccess",
                "de.neemann.digital.core"
            ],
            [
                "Bits",
                "de.neemann.digital.core"
            ],
            [
                "ProcessInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "StdIOInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "ApplicationVerilogStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "Application",
                "de.neemann.digital.core.extern"
            ],
            [
                "External",
                "de.neemann.digital.core.extern"
            ],
            [
                "Port",
                "de.neemann.digital.core.extern"
            ],
            [
                "PortDefinition",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGHDL",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationIVerilog",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationVHDLStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "VHDLTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGeneric",
                "de.neemann.digital.core.extern"
            ],
            [
                "Options",
                "de.neemann.digital.core.extern"
            ],
            [
                "VerilogTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ExternalFile",
                "de.neemann.digital.core.extern"
            ],
            [
                "ProcessStarter",
                "de.neemann.digital.core.extern"
            ],
            [
                "ModelEventType",
                "de.neemann.digital.core"
            ],
            [
                "Observer",
                "de.neemann.digital.core"
            ],
            [
                "ErrorDetector",
                "de.neemann.digital.core"
            ],
            [
                "Statistics",
                "de.neemann.digital.core.stats"
            ],
            [
                "Countable",
                "de.neemann.digital.core.stats"
            ],
            [
                "Model",
                "de.neemann.digital.core"
            ],
            [
                "Signal",
                "de.neemann.digital.core"
            ],
            [
                "StringList",
                "de.neemann.digital"
            ],
            [
                "XStreamValid",
                "de.neemann.digital"
            ],
            [
                "StatsExport",
                "de.neemann.digital.cli"
            ],
            [
                "SVGExport",
                "de.neemann.digital.cli"
            ],
            [
                "CommandLineTester",
                "de.neemann.digital.cli"
            ],
            [
                "CSVWriter",
                "de.neemann.digital.cli"
            ],
            [
                "BasicCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Argument",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLIException",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Muxer",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentKey",
                "de.neemann.digital.cli.cli"
            ],
            [
                "NamedCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLICommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentBase",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CircuitLoader",
                "de.neemann.digital.cli"
            ],
            [
                "Main",
                "de.neemann.digital.cli"
            ],
            [
                "Modification",
                "de.neemann.digital.undo"
            ],
            [
                "Modifications",
                "de.neemann.digital.undo"
            ],
            [
                "ModifyException",
                "de.neemann.digital.undo"
            ],
            [
                "Copyable",
                "de.neemann.digital.undo"
            ],
            [
                "UndoManager",
                "de.neemann.digital.undo"
            ],
            [
                "ChangedListener",
                "de.neemann.digital.undo"
            ],
            [
                "CircuitRepresentation",
                "de.neemann.digital.fsm"
            ],
            [
                "Transition",
                "de.neemann.digital.fsm"
            ],
            [
                "Movable",
                "de.neemann.digital.fsm"
            ],
            [
                "MouseMovable",
                "de.neemann.digital.fsm"
            ],
            [
                "Optimizer",
                "de.neemann.digital.fsm"
            ],
            [
                "Permute",
                "de.neemann.digital.fsm"
            ],
            [
                "FiniteStateMachineException",
                "de.neemann.digital.fsm"
            ],
            [
                "TransitionTableCreator",
                "de.neemann.digital.fsm"
            ],
            [
                "ValueParser",
                "de.neemann.digital.fsm"
            ],
            [
                "WaitGroup",
                "de.neemann.digital.fsm"
            ],
            [
                "FSMComponent",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMFrame",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "OptimizerDialog",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMDemos",
                "de.neemann.digital.fsm"
            ],
            [
                "FSM",
                "de.neemann.digital.fsm"
            ],
            [
                "State",
                "de.neemann.digital.fsm"
            ],
            [
                "Lang",
                "de.neemann.digital.lang"
            ],
            [
                "LineListenerResolveDontCare",
                "de.neemann.digital.testing"
            ],
            [
                "TestingDataException",
                "de.neemann.digital.testing"
            ],
            [
                "UnitTester",
                "de.neemann.digital.testing"
            ],
            [
                "FolderTestRunner",
                "de.neemann.digital.testing"
            ],
            [
                "TestExecutor",
                "de.neemann.digital.testing"
            ],
            [
                "Transitions",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseDescription",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseElement",
                "de.neemann.digital.testing"
            ],
            [
                "LineEmitterRepeat",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Parser",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppenderBits",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ParserException",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Context",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ModelInitializer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Expression",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterList",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestRow",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitter",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterWhile",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterSimple",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Random",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "SignExtend",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "IfThenElse",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "Function",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "LineListener",
                "de.neemann.digital.testing.parser"
            ],
            [
                "VirtualSignal",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppender",
                "de.neemann.digital.testing.parser"
            ],
            [
                "OperatorPrecedence",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestResultListener",
                "de.neemann.digital.testing"
            ],
            [
                "MatchedValue",
                "de.neemann.digital.testing"
            ],
            [
                "TestResult",
                "de.neemann.digital.testing"
            ],
            [
                "MinimizerInterface",
                "de.neemann.digital.analyse"
            ],
            [
                "LabelNumbering",
                "de.neemann.digital.analyse"
            ],
            [
                "ModelAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "CSVImporter",
                "de.neemann.digital.analyse"
            ],
            [
                "BoolTableExpanded",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableTableModel",
                "de.neemann.digital.analyse"
            ],
            [
                "TableReducer",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "PrimeSelector",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForce",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "LargestFirst",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForceGetAll",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "PrimeSelectorDefault",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BoolTableByteArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "IndependentChecker",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskey",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableExpression",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableBoolArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTable",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRows",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "ThreeStateValue",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskeyExam",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRow",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TruthTableConverter",
                "de.neemann.digital.analyse"
            ],
            [
                "DetermineJKStateMachine",
                "de.neemann.digital.analyse"
            ],
            [
                "Parser",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ParseException",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ModelAnalyserInfo",
                "de.neemann.digital.analyse"
            ],
            [
                "AnalyseException",
                "de.neemann.digital.analyse"
            ],
            [
                "DependencyAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "SubstituteLibrary",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableFormatterHex",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatter",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterTestCase",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterCSV",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterLaTeX",
                "de.neemann.digital.analyse.format"
            ],
            [
                "MinimizerQuineMcCluskey",
                "de.neemann.digital.analyse"
            ],
            [
                "ContextFiller",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "BitSetter",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ContextMap",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Operation",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Context",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NInputs",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NOr",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "ExpressionModifier",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NAnd",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "Constant",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Variable",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionException",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityInclNotVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Equals",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "FormatToExpression",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTable",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Formatter",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatterException",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTableLatex",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Not",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "VariableVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NamedExpression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "MinimizerQuineMcCluskeyExam",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTable",
                "de.neemann.digital.analyse"
            ],
            [
                "SplitPinString",
                "de.neemann.digital.analyse"
            ],
            [
                "CycleDetector",
                "de.neemann.digital.analyse"
            ],
            [
                "DigitalRemoteInterface",
                "de.neemann.digital.gui"
            ],
            [
                "TextSearchFilter",
                "de.neemann.digital.gui"
            ],
            [
                "ExportZipAction",
                "de.neemann.digital.gui"
            ],
            [
                "SettingsBase",
                "de.neemann.digital.gui"
            ],
            [
                "DocumentationLocator",
                "de.neemann.digital.gui"
            ],
            [
                "InitialTutorial",
                "de.neemann.digital.gui.tutorial"
            ],
            [
                "InsertAction",
                "de.neemann.digital.gui"
            ],
            [
                "StatusInterface",
                "de.neemann.digital.gui"
            ],
            [
                "SearchTextField",
                "de.neemann.digital.gui"
            ],
            [
                "SaveAsHelper",
                "de.neemann.digital.gui"
            ],
            [
                "FileHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ReleaseInfo",
                "de.neemann.digital.gui.release"
            ],
            [
                "CheckForNewRelease",
                "de.neemann.digital.gui.release"
            ],
            [
                "StateInterface",
                "de.neemann.digital.gui.state"
            ],
            [
                "StateManager",
                "de.neemann.digital.gui.state"
            ],
            [
                "State",
                "de.neemann.digital.gui.state"
            ],
            [
                "CircuitScrollPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "ItemPicker",
                "de.neemann.digital.gui.components"
            ],
            [
                "LibraryTreeModel",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "SelectTree",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "WindowPosManager",
                "de.neemann.digital.gui.components"
            ],
            [
                "CustomShapeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "TransformHolder",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "BehavioralFixtureCreator",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorFactory",
                "de.neemann.digital.gui.components"
            ],
            [
                "OrderMerger",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementOrderer",
                "de.neemann.digital.gui.components"
            ],
            [
                "ModifyMoveSelected",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteRect",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWires",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfVisualElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyCircuitAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveAndRotElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMeasurementOrdering",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttribute",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "DataEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "CircuitModifierPostClosed",
                "de.neemann.digital.gui.components"
            ],
            [
                "CharDeleter",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "ConsoleTerminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Terminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalInterface",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Keyboard",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "KeyboardDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Editor",
                "de.neemann.digital.gui.components"
            ],
            [
                "VarRectList",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMap",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapComponent",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapDialog",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "MapLayout",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughException",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "CircuitTransferable",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementHelpDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "TestCaseDescriptionDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ValueTableDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestCaseDescriptionEditor",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestAllDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ExpressionListenerOptimizeJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "LaTeXExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "HardwareDescriptionGenerator",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateFile",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateCUPL",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "ExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderOutputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AllSolutionsDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerCSVCondensed",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "BuilderExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionComponent",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "PlainTextExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableReorderManager",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ShowStringDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderInputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ProgressDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "CheckResultListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerStore",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AttributeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ProbeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ColorSchemeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "ROMEditorDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "LabelGenerator",
                "de.neemann.digital.gui.components"
            ],
            [
                "SingleValueDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ExpressionDialog",
                "de.neemann.digital.gui.components.expression"
            ],
            [
                "CircuitComponent",
                "de.neemann.digital.gui.components"
            ],
            [
                "VGA",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicCard",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrix",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "VGADialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "MoveFocusTo",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "ConstraintsBuilder",
                "de.neemann.digital.gui.components"
            ],
            [
                "ScopeTrigger",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphDialog",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphComponent",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "DummyElement",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "ValueTableObserver",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "CircuitModifier",
                "de.neemann.digital.gui.components"
            ],
            [
                "CopiedElementLabelRenamer",
                "de.neemann.digital.gui.components"
            ],
            [
                "TextLineNumber",
                "de.neemann.digital.gui.components"
            ],
            [
                "InsertHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ProgramMemoryLoader",
                "de.neemann.digital.gui"
            ],
            [
                "Main",
                "de.neemann.digital.gui"
            ],
            [
                "StatsDialog",
                "de.neemann.digital.gui"
            ],
            [
                "WindowManager",
                "de.neemann.digital.gui"
            ],
            [
                "Settings",
                "de.neemann.digital.gui"
            ],
            [
                "LibrarySelector",
                "de.neemann.digital.gui"
            ],
            [
                "DigitalUncaughtExceptionHandler",
                "de.neemann.digital.gui"
            ],
            [
                "NumberingWizard",
                "de.neemann.digital.gui"
            ],
            [
                "HandlerInterface",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteSever",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteException",
                "de.neemann.digital.gui.remote"
            ],
            [
                "DigitalHandler",
                "de.neemann.digital.gui.remote"
            ],
            [
                "ModelModifier",
                "de.neemann.digital.gui"
            ],
            [
                "VerilogCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogRenaming",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogGenerator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogTestBenchCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogElement",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogTemplate",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogLibrary",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "CodePrinter",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "CodePrinterStr",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "Statements",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Parser",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ParserException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Statement",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Context",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "FirstClassFunctionCall",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "InnerFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "JavaClass",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "FirstClassFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Func",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Function",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSEvalException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ReferenceToFunc",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToStruct",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToArray",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Reference",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToVar",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Value",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSMap",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSArray",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Separator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLLibrary",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLRenaming",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLGenerator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLEntity",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplate",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplateFunctions",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTestBenchCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "HDLModel",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNode",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNet",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "Printable",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLException",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLPort",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HasName",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "InlineManyToOne",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeAssignments",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "Optimization",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeConstants",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "ReplaceOneToMany",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NameConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "OptimizeExpressions",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "RemoveConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NodeSorterExpressionBased",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "HDLNodeSplitterManyToOne",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeCustom",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeAssignment",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLCircuit",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "ExprVar",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Visitor",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprVarRange",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExpressionOptimizer",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprNot",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprConstant",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprOperate",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprUsingNet",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "HDLNodeBuildIn",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLClockIntegrator",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockIntegratorGeneric",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockInfo",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "HDLNodeSplitterOneToMany",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "FileLocator",
                "de.neemann.digital"
            ],
            [
                "ValueTable",
                "de.neemann.digital.data"
            ],
            [
                "ValueTableModel",
                "de.neemann.digital.data"
            ],
            [
                "DataPlotter",
                "de.neemann.digital.data"
            ],
            [
                "Value",
                "de.neemann.digital.data"
            ],
            [
                "ExpressionExporter",
                "de.neemann.digital.builder"
            ],
            [
                "ExpressionToFileExporter",
                "de.neemann.digital.builder"
            ],
            [
                "RotationByteArrayOutputStream",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "TT2Exporter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "StartATF150xFitter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "OSExecute",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "CreateCHN",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDevice",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDialog",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PL",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATF150xCuplExporter",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PinMap",
                "de.neemann.digital.builder"
            ],
            [
                "PinMapException",
                "de.neemann.digital.builder"
            ],
            [
                "FragmentExpression",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisualElement",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentSameInValue",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "CircuitBuilder",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisitor",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVariable",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Fragment",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Box",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Gal16v8JEDECExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CuplExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "BuilderCollectorGAL",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CleanNameBuilder",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderCollector",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderInterface",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderException",
                "de.neemann.digital.builder"
            ],
            [
                "Gal22v10JEDECExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "Gal22v10CuplExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "FuseMap",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFillerException",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFiller",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "JedecWriter",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "GenericCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibrary",
                "de.neemann.digital.draw.library"
            ],
            [
                "GenericInitCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "Visitor",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryListener",
                "de.neemann.digital.draw.library"
            ],
            [
                "JarComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibraryFolder",
                "de.neemann.digital.draw.library"
            ],
            [
                "CustomElement",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundNotification",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundException",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentSource",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryInterface",
                "de.neemann.digital.draw.library"
            ],
            [
                "ResolveGenerics",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryNode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementTypeDescriptionCustom",
                "de.neemann.digital.draw.library"
            ],
            [
                "InvalidNodeException",
                "de.neemann.digital.draw.library"
            ],
            [
                "NumStringComparator",
                "de.neemann.digital.draw.library"
            ],
            [
                "InputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Interactor",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Drawable",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeBackwardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FuseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DILShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DipSwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LightBulbShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LayoutShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PolarityAwareLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ConstShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BreakShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TextShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegHexShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ProbeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "NotConnectedShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "StepperMotorShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BitSelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericInitCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RectShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "VDDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RAMShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ScopeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DemuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BusSplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullUpShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TestCaseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TunnelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PinControlShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FGFETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TransGateShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ResetShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeForewardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SixteenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "CustomCircuitShapeType",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "InteractorInterface",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeSpecificMatch",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RGBLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RotEncoderShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "IEEEGenericShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEENotShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEAndShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEXOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "ObservableValueReader",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SvgTemplate",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "TransformParser",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "Context",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgException",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgImporter",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "CustomShapeDescription",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "CustomShape",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "FGFETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "OutputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GroundShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "AsyncClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Shape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MissingShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeFactory",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullDownShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DriverShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DataShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DotCreator",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Wire",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Movable",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pins",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Circuit",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Tunnel",
                "de.neemann.digital.draw.elements"
            ],
            [
                "PinException",
                "de.neemann.digital.draw.elements"
            ],
            [
                "ElementOrder",
                "de.neemann.digital.draw.elements"
            ],
            [
                "VisualElement",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pin",
                "de.neemann.digital.draw.elements"
            ],
            [
                "IOState",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireMerger",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireConsistencyChecker",
                "de.neemann.digital.draw.elements"
            ],
            [
                "AsyncSequentialClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelEntry",
                "de.neemann.digital.draw.model"
            ],
            [
                "Net",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelCreator",
                "de.neemann.digital.draw.model"
            ],
            [
                "InverterConfig",
                "de.neemann.digital.draw.model"
            ],
            [
                "NetList",
                "de.neemann.digital.draw.model"
            ],
            [
                "RealTimeClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "Polygon",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Orientation",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Vector",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGSettings",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Transform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorKey",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ExportFactory",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicsImage",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorInterface",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformMatrix",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatLaTeX",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicMinMax",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicTransform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorScheme",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Style",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSkipLines",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "GraphicLineCollector",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "PolygonConverter",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorFloat",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformRotate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Graphic",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleHighContrast",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Parser",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "ParseException",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "PlainTextFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "SVGFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "GraphicsFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "LaTeXFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "Decorate",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Text",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Index",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Sentence",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Blank",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Character",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "ExpressionToText",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Simple",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Export",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleMonochrome",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformTranslate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSwing",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "PolygonParser",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGTokenizer",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GifSequenceWriter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "GifExporter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "ConfigCache",
                "de.neemann.digital.toolchain"
            ],
            [
                "Configuration",
                "de.neemann.digital.toolchain"
            ],
            [
                "Command",
                "de.neemann.digital.toolchain"
            ],
            [
                "FileToCreate",
                "de.neemann.digital.toolchain"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "getMouse",
                "de.neemann.gui",
                "Mouse",
                "/**\n * Returns a mouse event interpreter\n *\n * @return a Mouse interface implementation\n */\nstatic Mouse getMouse() {\n    if (Settings.getInstance().get(Keys.SETTINGS_MAC_MOUSE))\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && !e.isControlDown();\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && e.isControlDown();\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isShiftDown();\n            }\n        };\n    else\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1;\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON3;\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isControlDown();\n            }\n        };\n}"
            ],
            [
                "create",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an icon from a resource\n *\n * @param name name of the resource\n * @return the icon\n */\npublic static Icon create(String name) {\n    return new ImageIcon(createImage(name));\n}"
            ],
            [
                "createImage",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image from a resource\n *\n * @param name name of the resource\n * @return the image\n */\npublic static Image createImage(String name) {\n    try {\n        final float scaling = Screen.getInstance().getScaling();\n        if (scaling == 1) {\n            return getImage(name);\n        } else {\n            BufferedImage image = getImageOrNull(name.substring(0, name.length() - 4) + \"_hi.png\");\n            if (image != null) {\n                int w = (int) (image.getWidth() * scaling / 2);\n                int h = (int) (image.getHeight() * scaling / 2);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            } else {\n                LOGGER.info(\"upscaling of \" + name);\n                image = getImage(name);\n                int w = (int) (image.getWidth() * scaling);\n                int h = (int) (image.getHeight() * scaling);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            }\n        }\n    } catch (IOException e) {\n        throw new RuntimeException(\"Image \" + name + \" not found\", e);\n    }\n}"
            ],
            [
                "createImages",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image list from a resource\n *\n * @param names names of the resource\n * @return the image\n */\npublic static ArrayList<Image> createImages(String... names) {\n    try {\n        ArrayList<Image> list = new ArrayList<Image>(names.length);\n        for (String name : names) {\n            list.add(getImage(name));\n        }\n        return list;\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}"
            ],
            [
                "getCTRLMask",
                "de.neemann.gui",
                "ToolTipAction",
                "/**\n * @return the system specific CTRL mask.\n */\npublic static int getCTRLMask() {\n    int mask = InputEvent.CTRL_DOWN_MASK;\n    if (Screen.isMac())\n        mask = InputEvent.META_DOWN_MASK;\n    return mask;\n}"
            ],
            [
                "checkForSave",
                "de.neemann.gui",
                "ClosingWindowListener",
                "/**\n * Used to check for save! No Window closing is performed!\n *\n * @param parent      the Parent frame\n * @param confirmSave the confirmSafe interface\n * @return true if to proceed\n */\npublic static boolean checkForSave(JFrame parent, ConfirmSave confirmSave) {\n    if (confirmSave.isStateChanged()) {\n        int r = new ConfirmDialogBuilder(SAVE_CHANGES_MESSAGE).setTitle(STATE_CHANGED_MESSAGE).setNoOption(NO_MESSAGE).setYesOption(YES_MESSAGE).setCancleOption(CANCEL_MESSAGE).show(parent);\n        if (r == JOptionPane.YES_OPTION || r == JOptionPane.NO_OPTION) {\n            if (r == JOptionPane.YES_OPTION) {\n                confirmSave.saveChanges();\n                return !confirmSave.isStateChanged();\n            } else\n                return true;\n        } else\n            return false;\n    }\n    return true;\n}"
            ],
            [
                "getParentWindow",
                "de.neemann.gui",
                "ErrorMessage",
                "/**\n * Get the parent window of the given component.\n * If the component is a window this window is returned\n *\n * @param parent the parent component\n * @return the window instance\n */\npublic static Window getParentWindow(Component parent) {\n    if (parent == null)\n        return null;\n    else if (parent instanceof Window)\n        return (Window) parent;\n    else\n        return SwingUtilities.getWindowAncestor(parent);\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the Screen instance\n */\npublic static Screen getInstance() {\n    return InstanceHolder.instance;\n}"
            ],
            [
                "getDefaultFontScaling",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the default font scaling in percent\n */\npublic static int getDefaultFontScaling() {\n    if (// macOS has its own retina handling\n    IS_MAC)\n        return 100;\n    int dpi = getDefaultScreenResolution();\n    int s = (dpi * 100) / 96;\n    if (s > 95 && s < 105)\n        s = 100;\n    return s;\n}"
            ],
            [
                "isLinux",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a windows system\n */\npublic static boolean isLinux() {\n    return IS_LINUX;\n}"
            ],
            [
                "isMac",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a mac\n */\npublic static boolean isMac() {\n    return IS_MAC;\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * @return the singleton instance\n */\npublic static InfoDialog getInstance() {\n    if (instance == null)\n        try {\n            instance = new InfoDialog();\n        } catch (IOException e) {\n            System.out.println(\"error reading InfoDialog \" + e.getMessage());\n        }\n    return instance;\n}"
            ],
            [
                "read",
                "de.neemann.digital.core.memory.importer",
                "Importer",
                "/**\n * Reads the given file to a single data field.\n *\n * @param hexFile   the file to read\n * @param dataBits  the bits used in the data field\n * @param bigEndian uses big endian at import\n * @return the data field\n * @throws IOException IOException\n */\npublic static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException {\n    DataField df = new DataField(1024);\n    read(hexFile, new DataFieldValueArray(df, dataBits), bigEndian);\n    return df;\n}"
            ],
            [
                "getOriginOf",
                "de.neemann.digital.core",
                "ExceptionWithOrigin",
                "/**\n * Returns the file or the files that caused the given exception.\n * If no origin is found null is returned.\n *\n * @param e the exception\n * @return the origin or null;\n */\npublic static String getOriginOf(Throwable e) {\n    while (e != null) {\n        if (e instanceof ExceptionWithOriginInterface) {\n            Set<File> origins = ((ExceptionWithOriginInterface) e).getOrigin();\n            if (origins != null && origins.size() > 0) {\n                StringBuilder sb = new StringBuilder();\n                for (File o : origins) {\n                    if (o != null) {\n                        if (sb.length() > 0)\n                            sb.append(\", \");\n                        sb.append(o.getName());\n                    }\n                }\n                if (sb.length() > 0)\n                    return sb.toString();\n                else\n                    return null;\n            }\n        }\n        e = e.getCause();\n    }\n    return null;\n}"
            ],
            [
                "zMaskString",
                "de.neemann.digital.core",
                "ObservableValue",
                "static String zMaskString(long value, long highZ, int bits) {\n    StringBuilder sb = new StringBuilder();\n    long m = Bits.up(1, bits - 1);\n    for (int i = 0; i < bits; i++) {\n        if ((highZ & m) != 0) {\n            sb.append(\"z\");\n        } else {\n            if ((value & m) != 0) {\n                sb.append(\"1\");\n            } else {\n                sb.append(\"0\");\n            }\n        }\n        m >>>= 1;\n    }\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core",
                "GlobalValues",
                "/**\n * @return returns the global instance\n */\npublic static GlobalValues getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core.io",
                "MIDIHelper",
                "/**\n * @return the MIDIHelper\n */\npublic static MIDIHelper getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new input\n */\npublic static PinInfo input(String name) {\n    return new PinInfo(name, null, Direction.input);\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name        the pins name\n * @param description the pins description\n * @return the new input\n */\npublic static PinInfo input(String name, String description) {\n    return new PinInfo(name, description, Direction.input);\n}"
            ],
            [
                "output",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new output\n */\npublic static PinInfo output(String name) {\n    return new PinInfo(name, null, Direction.output);\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "PinDescription",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "Direction",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "getKeyByName",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Returns the key of the given name.\n * If key does not exist, null is returned.\n *\n * @param name the name of the key\n * @return the key or null\n */\npublic static Key getKeyByName(String name) {\n    return InstanceHolder.INSTANCE.get(name);\n}"
            ],
            [
                "getKeys",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * @return all available keys\n */\npublic static Iterable<Key> getKeys() {\n    return InstanceHolder.INSTANCE.values();\n}"
            ],
            [
                "combine",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "/**\n * Combines two lists\n *\n * @param a   first list\n * @param b   second list\n * @param <T> the Type of the elements\n * @return the new combined list\n */\npublic static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b) {\n    T[] com = Arrays.copyOf(a.items, a.size() + b.size());\n    System.arraycopy(b.items, 0, com, a.size(), b.size());\n    return new ImmutableList<>(com);\n}"
            ],
            [
                "createSwitchModel",
                "de.neemann.digital.core.switching",
                "PlainSwitch",
                "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException {\n    if (input1 instanceof CommonBusValue) {\n        if (input2 instanceof CommonBusValue) {\n            final CommonBusValue in1 = (CommonBusValue) input1;\n            final CommonBusValue in2 = (CommonBusValue) input2;\n            ObservableValue constant = in1.searchConstant();\n            if (constant != null)\n                return new UniDirectionalSwitch(constant, output2);\n            else {\n                constant = in2.searchConstant();\n                if (constant != null)\n                    return new UniDirectionalSwitch(constant, output1);\n                else\n                    return new RealSwitch(in1, output1, in2, output2);\n            }\n        } else\n            return new UniDirectionalSwitch(input1, output2);\n    } else {\n        if (input2 instanceof CommonBusValue) {\n            return new UniDirectionalSwitch(input2, output1);\n        } else {\n            throw new NodeException(Lang.get(\"err_switchHasNoNet\"), output1, output2);\n        }\n    }\n}"
            ],
            [
                "createOneToN",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a one to N splitter\n *\n * @param bits number of outputs\n * @return the splitter\n */\npublic static Splitter createOneToN(int bits) {\n    Ports in = new Ports();\n    in.add(new Port(0, bits));\n    Ports out = new Ports();\n    for (int i = 0; i < bits; i++) out.add(new Port(i, 1));\n    return new Splitter(in, out);\n}"
            ],
            [
                "createNToOne",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a N to one splitter\n *\n * @param bits number of inputs\n * @return the splitter\n */\npublic static Splitter createNToOne(int bits) {\n    Ports in = new Ports();\n    for (int i = 0; i < bits; i++) in.add(new Port(i, 1));\n    Ports out = new Ports();\n    out.add(new Port(0, bits));\n    return new Splitter(in, out);\n}"
            ],
            [
                "ovs",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * Helper to create a {@link ObservableValues} instance\n *\n * @param items the items\n * @return the created instance\n */\npublic static ObservableValues ovs(ObservableValue... items) {\n    return new ObservableValues(items);\n}"
            ],
            [
                "toShortHex",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * Creates a short hex representation of the given value.\n * Use only to represent a value.\n * If confusion is excluded, the prefix '0x' is omitted.\n * Thus 0x1A3 is converted to \"1A3\" which can not be parsed back to a long because \"0x\" is missing.\n *\n * @param value the value\n * @return the hex string\n */\npublic static String toShortHex(long value) {\n    return toShortHex(value, false);\n}"
            ],
            [
                "up",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value up\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long up(long val, int bits) {\n    if (bits < 64)\n        return val << bits;\n    else\n        return 0;\n}"
            ],
            [
                "down",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value down\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long down(long val, int bits) {\n    if (bits < 64)\n        return val >>> bits;\n    else\n        return 0;\n}"
            ],
            [
                "mask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Creates a bit mask with the lowest [bits] bits set.\n *\n * @param bits the number of 1 bits\n * @return a value with the lowest [bits] bits set.\n */\npublic static long mask(int bits) {\n    if (bits < 64)\n        return (1L << bits) - 1;\n    else\n        return -1;\n}"
            ],
            [
                "signedFlagMask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * calculates the signed flag.\n *\n * @param bits the bit count\n * @return the last used bit ( 1<<(bits-1) )\n */\npublic static long signedFlagMask(int bits) {\n    return up(1, bits - 1);\n}"
            ],
            [
                "isNegative",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Returns true if value is negative\n *\n * @param value the value\n * @param bits  the bit count\n * @return true if the last relevant bit is set\n */\npublic static boolean isNegative(long value, int bits) {\n    return (value & signedFlagMask(bits)) != 0;\n}"
            ],
            [
                "signExtend",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Sign extension of the value.\n * signExtend(3,2) returns -1.\n *\n * @param value the value\n * @param bits  number of bits\n * @return the sign extended value\n */\npublic static long signExtend(long value, int bits) {\n    if (bits >= 64)\n        return value;\n    else {\n        if ((value & signedFlagMask(bits)) == 0)\n            return value;\n        else\n            return value | ~mask(bits);\n    }\n}"
            ],
            [
                "binLn2",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Calculates the number of bits needed to store the given value b.\n *\n * @param b number\n * @return number of bits needed to store b\n */\npublic static int binLn2(long b) {\n    int outBits = 1;\n    while ((1L << outBits) <= b) outBits++;\n    return outBits;\n}"
            ],
            [
                "removeBitFromValue",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Removes a bit from a value.\n * This means it shifts the higher bits down. Behaves like removing an item from a list.\n *\n * @param value the value\n * @param bit   the bit to remove\n * @return the new value\n */\npublic static int removeBitFromValue(int value, int bit) {\n    if (bit > 0) {\n        return ((value & (~((1 << (bit + 1)) - 1))) >>> 1) | (value & ((1 << bit) - 1));\n    } else {\n        return value >>> 1;\n    }\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str the string\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str) throws NumberFormatException {\n    return decode(str, false);\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str         the string\n * @param parseFloats if true also floats are parsed\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str, boolean parseFloats) throws NumberFormatException {\n    if (str == null)\n        return 0;\n    str = str.trim();\n    if (str.length() == 0)\n        return 0;\n    if (str.indexOf(':') >= 0)\n        return decodeFixed(str);\n    if (parseFloats && str.indexOf('.') > -1) {\n        try {\n            if (str.endsWith(\"d\") || str.endsWith(\"D\"))\n                return Double.doubleToLongBits(Double.parseDouble(str.substring(0, str.length() - 1)));\n            else\n                return Float.floatToIntBits(Float.parseFloat(str));\n        } catch (java.lang.NumberFormatException e) {\n            throw new NumberFormatException(str, 0);\n        }\n    }\n    int p = 0;\n    boolean neg = false;\n    if (str.charAt(p) == '-') {\n        neg = true;\n        p++;\n    }\n    if (p >= str.length())\n        throw new NumberFormatException(str, p);\n    boolean wasZero = false;\n    while (str.length() > p && str.charAt(p) == '0') {\n        wasZero = true;\n        p++;\n    }\n    if (p >= str.length())\n        return 0;\n    int radix;\n    if (wasZero) {\n        if (neg)\n            throw new NumberFormatException(str, p);\n        switch(str.charAt(p)) {\n            case 'x':\n            case 'X':\n                radix = 16;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            case 'b':\n            case 'B':\n                radix = 2;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            default:\n                radix = 8;\n        }\n    } else {\n        if (str.charAt(p) == '\\'') {\n            if (neg)\n                throw new NumberFormatException(str, p);\n            p++;\n            if (p == str.length())\n                throw new NumberFormatException(str, p);\n            return str.charAt(p);\n        } else\n            radix = 10;\n    }\n    long val = decode(str, p, radix);\n    if (neg)\n        val = -val;\n    return val;\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes the given string starting at position p\n *\n * @param str   the string to decode\n * @param p     the starting position\n * @param radix the radix\n * @return the value\n * @throws NumberFormatException NumberFormatException\n */\npublic static long decode(String str, int p, int radix) throws NumberFormatException {\n    long val = 0;\n    while (p < str.length()) {\n        int d = Character.digit(str.charAt(p), radix);\n        if (d < 0)\n            throw new NumberFormatException(str, p);\n        val = val * radix + d;\n        p++;\n    }\n    return val;\n}"
            ],
            [
                "getCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Extract the code from the attributes.\n * The code is either stored directly or there is a file given.\n *\n * @param attr the attributes\n * @param root the projects main folder\n * @return the code\n * @throws IOException IOException\n */\nstatic String getCode(ElementAttributes attr, File root) throws IOException {\n    if (attr.contains(Keys.EXTERNAL_CODE))\n        return attr.get(Keys.EXTERNAL_CODE);\n    if (attr.contains(Keys.EXTERNAL_CODE_FILE))\n        return readCode(attr.getFile(Keys.EXTERNAL_CODE_FILE, root));\n    return \"\";\n}"
            ],
            [
                "readCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Reads the code from a file\n *\n * @param file the file\n * @return the code\n * @throws IOException IOException\n */\nstatic String readCode(File file) throws IOException {\n    byte[] data = Files.readAllBytes(file.toPath());\n    return new String(data, StandardCharsets.UTF_8);\n}"
            ],
            [
                "create",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Creates a new application instance\n *\n * @param type the type of the process\n * @param attr the elements attributes\n * @return the created process handler\n */\nstatic Application create(Type type, ElementAttributes attr) {\n    switch(type) {\n        case Generic:\n            return new ApplicationGeneric();\n        case GHDL:\n            return new ApplicationGHDL(attr);\n        case IVERILOG:\n            return new ApplicationIVerilog(attr);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "start",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Helper to start a process.\n * If result value is not null an exception is thrown.\n *\n * @param dir  the folder in which the process is started\n * @param args the argument\n * @return the console output\n * @throws IOException IOException\n */\npublic static String start(File dir, String... args) throws IOException {\n    ProcessBuilder pb = new ProcessBuilder(args).redirectErrorStream(true);\n    if (dir != null)\n        pb.directory(dir);\n    Process p;\n    try {\n        p = pb.start();\n    } catch (IOException e) {\n        throw new CouldNotStartProcessException(Lang.get(\"err_couldNotStartProcess_N\", Arrays.toString(args)), e);\n    }\n    ReaderThread rt = new ReaderThread(p.getInputStream());\n    rt.start();\n    try {\n        int exitValue = p.waitFor();\n        rt.join();\n        String output = rt.toString();\n        if (exitValue != 0)\n            throw new IOException(Lang.get(\"err_exitValueNotNull_N_O\", exitValue, output));\n        return output;\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n}"
            ],
            [
                "joinStrings",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Merges the given string.\n * If all strings are null or empty, null is returned\n *\n * @param strings the strings to join\n * @return the joined string or null\n */\npublic static String joinStrings(String... strings) {\n    StringBuilder sb = new StringBuilder();\n    for (String s : strings) {\n        if (s != null) {\n            String str = s.trim();\n            if (str.length() > 0) {\n                if (sb.length() > 0)\n                    sb.append(\"\\n\");\n                sb.append(str);\n            }\n        }\n    }\n    if (sb.length() > 0)\n        return sb.toString();\n    else\n        return null;\n}"
            ],
            [
                "fromString",
                "de.neemann.digital.cli.cli",
                "Argument",
                "/**\n * Creates a value from a string\n *\n * @param val      the value as a string\n * @param defValue the default value\n * @return the value converted to the type of the default value\n * @throws CLIException CLIException\n */\npublic static Object fromString(String val, Object defValue) throws CLIException {\n    if (defValue instanceof String)\n        return val;\n    else if (defValue instanceof Boolean)\n        switch(val.toLowerCase()) {\n            case \"yes\":\n            case \"1\":\n            case \"true\":\n                return true;\n            case \"no\":\n            case \"0\":\n            case \"false\":\n                return false;\n            default:\n                throw new CLIException(Lang.get(\"cli_notABool_N\", val), 106);\n        }\n    else if (defValue instanceof Integer) {\n        try {\n            return Integer.parseInt(val);\n        } catch (NumberFormatException e) {\n            throw new CLIException(Lang.get(\"cli_notANumber_N\", val), e);\n        }\n    } else\n        throw new CLIException(Lang.get(\"cli_invalidType_N\", defValue.getClass().getSimpleName()), 203);\n}"
            ],
            [
                "fac",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the factorial of a number.\n * If the result is greater as the max long value, the max value is returned.\n *\n * @param n integer\n * @return the factorial of the given number\n */\npublic static long fac(int n) {\n    if (n > 20)\n        return Long.MAX_VALUE;\n    return FAC_TABLE[n];\n}"
            ],
            [
                "getTimeComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the time complexity of optimizing the given fsm\n *\n * @param fsm the fsm\n * @return the time complexity\n */\npublic static long getTimeComplexity(FSM fsm) {\n    List<State> states = fsm.getStates();\n    int size = states.size();\n    int sizeInclDC = 1 << Bits.binLn2(size - 1);\n    if (sizeInclDC > 20)\n        return Long.MAX_VALUE;\n    return fac(sizeInclDC) / fac(sizeInclDC - size);\n}"
            ],
            [
                "calcComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException {\n    TruthTable tt = fsm.createTruthTable(null);\n    MinimizerInterface mi = new MinimizerQuineMcCluskey();\n    ComplexityListener listener = new ComplexityListener(out);\n    for (int i = 0; i < tt.getResultCount(); i++) mi.minimize(tt.getVars(), tt.getResult(i), tt.getResultName(i), listener);\n    return listener.complexity;\n}"
            ],
            [
                "blink",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Blink\n *\n * @return the fsm\n */\npublic static FSM blink() {\n    State off = new State(\"off\");\n    State on = new State(\"on\");\n    return new FSM(off, on).transition(on, off, null).transition(off, on, null);\n}"
            ],
            [
                "rotDecoder",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a debounced rotary switch decoder\n *\n * @return the fsm\n */\npublic static FSM rotDecoder() {\n    State init = new State(\"init\");\n    State top = new State(\"top\");\n    State topSetLeft = new State(\"topSetLeft\").setValues(\"L=1\");\n    State topSetRight = new State(\"topSetRight\").setValues(\"R=1\");\n    State leftTop = new State(\"leftTop\");\n    State leftBottom = new State(\"leftBottom\");\n    State bottom = new State(\"bottom\");\n    State bottomSetLeft = new State(\"bottomSetRight\").setValues(\"R=1\");\n    State bottomSetRight = new State(\"bottomSetLeft\").setValues(\"L=1\");\n    State rightTop = new State(\"rightTop\");\n    State rightBottom = new State(\"rightBottom\");\n    return new FSM(init, top, topSetLeft, leftTop, leftBottom, bottomSetLeft, bottom, bottomSetRight, rightBottom, rightTop, topSetRight).transition(init, top, \"A=0 & B=0\").transition(init, bottom, \"A=1 & B=1\").transition(top, leftTop, \"A=1 & B=0\").transition(top, rightTop, \"A=0 & B=1\").transition(topSetLeft, top, null).transition(topSetRight, top, null).transition(rightTop, top, \"A=0 & B=0\").transition(rightBottom, topSetRight, \"A=0 & B=0\").transition(leftTop, top, \"A=0 & B=0\").transition(leftBottom, topSetLeft, \"A=0 & B=0\").transition(bottom, leftBottom, \"A=1 & B=0\").transition(bottom, rightBottom, \"A=0 & B=1\").transition(bottomSetLeft, bottom, null).transition(bottomSetRight, bottom, null).transition(rightBottom, bottom, \"A=1 & B=1\").transition(rightTop, bottomSetRight, \"A=1 & B=1\").transition(leftBottom, bottom, \"A=1 & B=1\").transition(leftTop, bottomSetLeft, \"A=1 & B=1\");\n}"
            ],
            [
                "counter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a counter\n *\n * @param n the number of states\n * @return the fsm\n */\npublic static FSM counter(int n) {\n    FSM fsm = new FSM();\n    State last = null;\n    for (int i = 0; i < n; i++) {\n        State s = new State(\"\").setNumber(i);\n        fsm.add(s);\n        if (last != null)\n            fsm.transition(last, s, null);\n        last = s;\n    }\n    fsm.transition(last, fsm.getStates().get(0), null);\n    return fsm;\n}"
            ],
            [
                "trafficLight",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLight() {\n    State red = new State(\"red\").setNumber(0).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(1).setValues(\"R=1,Y=1\");\n    State green = new State(\"green\").setNumber(2).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(3).setValues(\"Y=1\");\n    return new FSM(red, redYellow, green, yellow).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "trafficLightMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLightMedwedew() {\n    State init = new State(\"init\").setNumber(0);\n    State red = new State(\"red\").setNumber(1).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(3).setValues(\"R=1, Y=1\");\n    State green = new State(\"green\").setNumber(4).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(2).setValues(\"Y=1\");\n    return new FSM(init, red, redYellow, green, yellow).transition(init, red, null).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "selCounter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM selCounter() {\n    State s0 = new State(\"s0\").setNumber(0);\n    State s1 = new State(\"s1\").setNumber(1);\n    State s2 = new State(\"s2\").setNumber(2);\n    State s3 = new State(\"s3\").setNumber(3);\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, null).transition(s0, s0, \"!T0  !T1\").transition(s1, s2, null).transition(s1, s0, \"T0 !T1\").transition(s2, s3, null).transition(s2, s0, \"!T0 T1\").transition(s3, s0, null);\n}"
            ],
            [
                "stepper",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepper() {\n    State s0 = new State(\"s0\").setNumber(0).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(1).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(2).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(3).setValues(\"P3=1,P0=1\");\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "stepperMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepperMedwedew() {\n    State init = new State(\"init\").setNumber(0).setValues(\"P0=2,P1=2,P2=2,P3=2\");\n    State s0 = new State(\"s0\").setNumber(3).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(6).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(12).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(9).setValues(\"P3=1,P0=1\");\n    return new FSM(init, s0, s1, s2, s3).transition(init, s0, null).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"fsm\", FSM.class);\n    xStream.alias(\"state\", State.class);\n    xStream.alias(\"transition\", Transition.class);\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"vectorf\", VectorFloat.class);\n    xStream.aliasAttribute(VectorFloat.class, \"x\", \"x\");\n    xStream.aliasAttribute(VectorFloat.class, \"y\", \"y\");\n    return xStream;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename filename\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(File filename) throws IOException {\n    final FSM fsm = loadFSM(new FileInputStream(filename));\n    fsm.file = filename;\n    return fsm;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new fsm instance from a stored file\n *\n * @param in the input stream\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        final FSM fsm = (FSM) xStream.fromXML(in);\n        for (Transition t : fsm.transitions) t.setFSM(fsm);\n        for (State s : fsm.states) s.setFSM(fsm);\n        fsm.modified = false;\n        fsm.activeStateTransition = -1;\n        return fsm;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "get",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string of key if no translation present\n */\npublic static String get(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKey(key, params);\n}"
            ],
            [
                "getNull",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string or null if no translation present\n */\npublic static String getNull(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKeyNull(key, params);\n}"
            ],
            [
                "getBundle",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the resource bundle\n */\npublic static Bundle getBundle() {\n    return InstanceHolder.INSTANCE.bundle;\n}"
            ],
            [
                "currentLanguage",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the current language\n */\npublic static Language currentLanguage() {\n    return InstanceHolder.INSTANCE.currentLanguage;\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * Resolves a multilingual user defined string.\n * Allows the user to define multilingual content by using a simple syntax:\n * You can enter strings like \"Word! {{de Welt!}} {{fr Monde!}}\". This method extracts\n * the appropriate string for the current language.\n *\n * @param text the complete text description\n * @return the evaluated text.\n */\npublic static String evalMultilingualContent(String text) {\n    return evalMultilingualContent(text, currentLanguage());\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "static String evalMultilingualContent(String text, Language currentLanguage) {\n    int pos = text.indexOf(\"{{\");\n    if (pos < 0)\n        return text;\n    String def = text.substring(0, pos).trim();\n    do {\n        int p2 = pos + 1;\n        int count = 1;\n        while (count > 0) {\n            char c = text.charAt(p2);\n            if (c == '{')\n                count++;\n            else if (c == '}')\n                count--;\n            p2++;\n            if (p2 == text.length() && count > 0) {\n                p2 = 1;\n                break;\n            }\n        }\n        p2 -= 2;\n        if (p2 > pos + 3) {\n            String l = text.substring(pos + 2, pos + 4);\n            if (l.equalsIgnoreCase(currentLanguage.getName()))\n                return text.substring(pos + 4, p2).trim();\n            if (l.equalsIgnoreCase(\"en\") && def.isEmpty())\n                def = text.substring(pos + 4, p2).trim();\n            pos = text.indexOf(\"{{\", p2);\n        } else\n            return def;\n    } while (pos > 0);\n    return def;\n}"
            ],
            [
                "lowest",
                "de.neemann.digital.testing.parser",
                "OperatorPrecedence",
                "/**\n * @return the lowest operator precedence to start evaluation with\n */\npublic static OperatorPrecedence lowest() {\n    return OR;\n}"
            ],
            [
                "addOne",
                "de.neemann.digital.analyse",
                "ModelAnalyser",
                "/**\n * Adds the \"+1\" to the variables name\n *\n * @param name the vars name\n * @return the modified name\n */\npublic static String addOne(String name) {\n    if (name.endsWith(\"^n\"))\n        return name.substring(0, name.length() - 1) + \"{n+1}\";\n    else\n        return name + \"+1\";\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param file the file\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(File file) throws IOException {\n    return readCSV(new FileReader(file));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the string to read\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(String csv) throws IOException {\n    return readCSV(new StringReader(csv));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the reader\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(Reader csv) throws IOException {\n    BufferedReader r = new BufferedReader(csv);\n    TruthTable tt = readHeader(r);\n    while (true) {\n        String line = r.readLine();\n        if (line == null)\n            return tt;\n        line = line.trim();\n        if (!line.isEmpty())\n            parseLine(tt, line);\n    }\n}"
            ],
            [
                "createDoubledValues",
                "de.neemann.digital.analyse.quinemc",
                "BoolTableByteArray",
                "/**\n * Creates a table where all values added twive\n *\n * @param values the original values\n * @return the new values\n */\npublic static BoolTableByteArray createDoubledValues(BoolTable values) {\n    BoolTableByteArray t = new BoolTableByteArray(values.size() * 2);\n    for (int i = 0; i < values.size(); i++) {\n        int v = values.get(i).asInt();\n        t.set(i * 2, v);\n        t.set(i * 2 + 1, v);\n    }\n    return t;\n}"
            ],
            [
                "simplify",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Simplifies the given expression.\n * If no simplification was found, the original expression is returned unchanged.\n *\n * @param expression the expression to simplify\n * @return the simplified expression\n * @throws ExpressionException ExpressionException\n */\npublic static Expression simplify(Expression expression) throws ExpressionException {\n    int initialCplx = expression.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    Expression newExp = new QuineMcCluskey(expression).simplify().getExpression();\n    int newCplx = newExp.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    if (newCplx < initialCplx)\n        return newExp;\n    else\n        return expression;\n}"
            ],
            [
                "addAnd",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Creates the final expression\n *\n * @param e         the expression to complete\n * @param rows      the rows to add\n * @param variables the variables to use to build the expression\n * @return the expression\n */\npublic static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables) {\n    for (TableRow r : rows) {\n        Expression n = r.getExpression(variables);\n        if (e == null)\n            e = n;\n        else\n            e = or(e, n);\n    }\n    return e;\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from a bool\n *\n * @param bool the bool\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(boolean bool) {\n    if (bool) {\n        return one;\n    } else {\n        return zero;\n    }\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from an int\n * 0 and 1 work as expected, any other value means \"dont care\"\n *\n * @param value the value\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(int value) {\n    switch(value) {\n        case 0:\n            return ThreeStateValue.zero;\n        case 1:\n            return ThreeStateValue.one;\n        default:\n            return ThreeStateValue.dontCare;\n    }\n}"
            ],
            [
                "doImplicitTypeCasts",
                "de.neemann.digital.analyse",
                "SubstituteLibrary",
                "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val) {\n    if (expectedClass == Integer.class && val instanceof Long) {\n        long l = (Long) val;\n        if (l <= Integer.MAX_VALUE && l >= Integer.MIN_VALUE)\n            return (int) l;\n    } else if (expectedClass == Long.class && val instanceof Number) {\n        return ((Number) val).longValue();\n    } else if (expectedClass == Color.class && val instanceof Number) {\n        return new Color(((Number) val).intValue());\n    } else if (expectedClass == Boolean.class && val instanceof Number) {\n        long b = ((Number) val).longValue();\n        return b != 0;\n    } else if (expectedClass == InValue.class) {\n        if (val instanceof Number)\n            return new InValue(((Number) val).longValue());\n        else {\n            try {\n                return new InValue(val.toString());\n            } catch (Bits.NumberFormatException e) {\n                return val;\n            }\n        }\n    } else if (expectedClass == InverterConfig.class && val instanceof java.util.List) {\n        InverterConfig.Builder b = new InverterConfig.Builder();\n        for (Object i : (java.util.List) val) b.add(i.toString());\n        return b.build();\n    } else if (expectedClass == DataField.class && val instanceof java.util.List) {\n        java.util.List list = (java.util.List) val;\n        long[] longs = new long[list.size()];\n        for (int i = 0; i < list.size(); i++) if (list.get(i) instanceof Number)\n            longs[i] = ((Number) list.get(i)).longValue();\n        else\n            return val;\n        return new DataField(longs);\n    } else if (expectedClass == Rotation.class && val instanceof Number) {\n        int r = ((Number) val).intValue();\n        return new Rotation(r % 4);\n    } else if (expectedClass == File.class && val instanceof String) {\n        return new File(val.toString());\n    } else if (expectedClass == TestCaseDescription.class && val instanceof String) {\n        try {\n            return new TestCaseDescription(val.toString());\n        } catch (Exception e) {\n            return val;\n        }\n    } else if (expectedClass.isEnum() && val instanceof Number) {\n        Class<Enum<?>> e = (Class<Enum<?>>) expectedClass;\n        Object[] values = e.getEnumConstants();\n        int index = ((Number) val).intValue();\n        if (index < 0 || index >= values.length)\n            return values[0];\n        else\n            return values[index];\n    }\n    return val;\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Iterable<Expression> exp) {\n    return simplify(new Or(exp, true));\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), true));\n}"
            ],
            [
                "xor",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new XOR expression\n *\n * @param a the expression to XOR\n * @param b the expression to XOR\n * @return the created expression\n */\npublic static Expression xor(Expression a, Expression b) {\n    if (b == Constant.ONE) {\n        return Not.not(a);\n    } else if (b == Constant.ZERO) {\n        return a;\n    } else if (a == Constant.ONE) {\n        return Not.not(b);\n    } else if (a == Constant.ZERO) {\n        return b;\n    } else\n        return simplify(new XOr(a, b));\n}"
            ],
            [
                "orNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression orNoMerge(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), false));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Iterable<Expression> exp) {\n    return simplify(new And(exp, true));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), true));\n}"
            ],
            [
                "andNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression andNoMerge(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), false));\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifier\n *\n * @param expression the expression to modify\n * @param modifier   the modifier to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier modifier) {\n    expression.modify(modifier);\n    return modifier.modify(expression);\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifiers\n *\n * @param expression the expression to modify\n * @param modifiers  the modifiers to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier... modifiers) {\n    for (ExpressionModifier m : modifiers) expression = modifyExpression(expression, m);\n    return expression;\n}"
            ],
            [
                "v",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates a new Variable\n *\n * @param name the variables name\n * @return the new Variable\n */\npublic static Variable v(String name) {\n    return new Variable(name);\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates an array of variables\n *\n * @param n the number of varfiables to create.\n * @return variables named \"A0\", \"A1\", \"A2\" and so on\n */\npublic static ArrayList<Variable> vars(int n) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (int i = 0; i < n; i++) v.add(new Variable(\"\" + (char) ('A' + i)));\n    return v;\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Create a list of variables using the given names\n *\n * @param names the names used to create the variables\n * @return the list of variables\n */\npublic static ArrayList<Variable> vars(String... names) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (String n : names) v.add(new Variable(n));\n    return v;\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable.\n */\npublic static boolean isVar(Expression e) {\n    return e instanceof Variable;\n}"
            ],
            [
                "isVarOrNotVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable or a inverted variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable or a inverted variable.\n */\npublic static boolean isVarOrNotVar(Expression e) {\n    return isVar(e) || (e instanceof Not && isVar(((Not) e).getExpression()));\n}"
            ],
            [
                "getDefaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * @return the default format\n */\npublic static FormatToExpression getDefaultFormat() {\n    return Settings.getInstance().get(Keys.SETTINGS_EXPRESSION_FORMAT);\n}"
            ],
            [
                "defaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * Formats a expression to a string.\n * Uses the default format for presentation on the screen.\n *\n * @param exp the expression to format\n * @return the string representation\n */\npublic static String defaultFormat(Expression exp) {\n    return getDefaultFormat().format(exp);\n}"
            ],
            [
                "not",
                "de.neemann.digital.analyse.expression",
                "Not",
                "/**\n * Creates a not expression.\n * Simplifies the expression if possible.\n *\n * @param a the child expression to invert\n * @return the inverted expression\n */\npublic static Expression not(Expression a) {\n    if (a == Constant.ONE)\n        return Constant.ZERO;\n    if (a == Constant.ZERO)\n        return Constant.ONE;\n    if (a instanceof Not && !((Not) a).protect) {\n        return ((Not) a).expression;\n    } else\n        return new Not(a);\n}"
            ],
            [
                "readFromFile",
                "de.neemann.digital.analyse",
                "TruthTable",
                "/**\n * Load the given file and returns a truth table instance\n *\n * @param filename filename\n * @return the {@link TruthTable}\n * @throws IOException IOException\n */\npublic static TruthTable readFromFile(File filename) throws IOException {\n    if (filename.getName().toLowerCase().endsWith(\".csv\"))\n        return CSVImporter.readCSV(filename);\n    else {\n        XStream xStream = getxStream();\n        try (InputStream in = new FileInputStream(filename)) {\n            return (TruthTable) xStream.fromXML(in);\n        }\n    }\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param s the signal\n * @return the port pins used\n */\npublic static SplitPinString create(Signal s) {\n    if (s.missingPinNumber())\n        return EMPTY;\n    return create(s.getPinNumber());\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param pinStr the pins definition;\n * @return the port pins used\n */\npublic static SplitPinString create(String pinStr) {\n    if (pinStr == null || pinStr.trim().length() == 0)\n        return EMPTY;\n    StringTokenizer st = new StringTokenizer(pinStr, \",;\");\n    ArrayList<String> pins = new ArrayList<>();\n    while (st.hasMoreTokens()) pins.add(st.nextToken().trim());\n    return new PinsArray(pins);\n}"
            ],
            [
                "checkSuffix",
                "de.neemann.digital.gui",
                "SaveAsHelper",
                "/**\n * Adds the given suffix to the file\n *\n * @param filename filename\n * @param suffix   suffix\n * @return the file name with the given suffix\n */\npublic static File checkSuffix(File filename, String suffix) {\n    if (suffix == null || filename == null)\n        return filename;\n    String name = filename.getName();\n    int p = name.lastIndexOf('.');\n    if (p >= 0) {\n        String suf = name.substring(p + 1).toLowerCase();\n        if (KNOWN.contains(suf))\n            name = name.substring(0, p);\n        while (name.length() > 0 && name.charAt(name.length() - 1) == '.') name = name.substring(0, name.length() - 1);\n    }\n    return new File(filename.getParentFile(), name + \".\" + suffix);\n}"
            ],
            [
                "addF1Traversal",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Adds F1 as a focus traversal key to a text components.\n *\n * @param text The text component\n * @param <TC> the concrete type of the text component\n * @return the given text component\n */\npublic static <TC extends JTextComponent> TC addF1Traversal(TC text) {\n    HashSet<AWTKeyStroke> set = new HashSet<>(text.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n    set.add(KeyStroke.getKeyStroke(\"F1\"));\n    text.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, set);\n    return text;\n}"
            ],
            [
                "createUndoManager",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Enables undo in the given text component.\n *\n * @param text the text component\n * @return the undo manager\n */\npublic static UndoManager createUndoManager(JTextComponent text) {\n    final UndoManager undoManager;\n    undoManager = new UndoManager();\n    text.getDocument().addUndoableEditListener(undoManager);\n    text.addKeyListener(new KeyAdapter() {\n\n        @Override\n        public void keyPressed(KeyEvent e) {\n            if (e.getKeyCode() == KeyEvent.VK_Z && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canUndo())\n                    undoManager.undo();\n            } else if (e.getKeyCode() == KeyEvent.VK_Y && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canRedo())\n                    undoManager.redo();\n            }\n        }\n    });\n    return undoManager;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components.modification",
                "ModifyInsertWires",
                "/**\n * Creates a simplified modification.\n *\n * @param newWires the wires to insert\n * @return the modification\n */\npublic static Modification<Circuit> create(List<Wire> newWires) {\n    switch(newWires.size()) {\n        case 0:\n            return null;\n        case 1:\n            return new ModifyInsertWire(newWires.get(0));\n        default:\n            return new ModifyInsertWires(newWires);\n    }\n}"
            ],
            [
                "getToolTipName",
                "de.neemann.digital.gui.components.modification",
                "ModificationOfVisualElement",
                "/**\n * Creates a translated name of the given element\n *\n * @param ve the element\n * @return translated name\n */\npublic static String getToolTipName(VisualElement ve) {\n    String s = Lang.getNull(\"elem_\" + ve.getElementName());\n    if (s == null) {\n        s = ve.getElementName();\n        if (s.endsWith(\".dig\"))\n            s = s.substring(0, s.length() - 4);\n    }\n    String l = ve.getElementAttributes().get(Keys.LABEL);\n    if (l.length() > 0)\n        s += \" (\" + l + \")\";\n    return s;\n}"
            ],
            [
                "getTerminal",
                "de.neemann.digital.gui.components.terminal",
                "TerminalDialog",
                "/**\n * Creates a new GUI terminal\n *\n * @param model the model\n * @param attr  the terminals attributes\n * @return the terminal interface\n */\nstatic TerminalInterface getTerminal(Model model, ElementAttributes attr) {\n    return new MyTerminal(model, attr);\n}"
            ],
            [
                "createList",
                "de.neemann.digital.gui.components",
                "CircuitTransferable",
                "/**\n * Creates a list of objects from inserted data\n * Can also throw a {@link ClassCastException}!\n *\n * @param data         the inserted data\n * @param shapeFactory the shapeFactory to set to the elements\n * @return the elements or null\n * @throws IOException IOException\n */\npublic static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException {\n    if (!(data instanceof String))\n        return null;\n    XStream xStream = Circuit.getxStream();\n    try (Reader in = new StringReader(data.toString())) {\n        ArrayList<Movable> elements = (ArrayList<Movable>) xStream.fromXML(in);\n        if (elements == null)\n            return null;\n        for (Movable m : elements) if (m instanceof VisualElement)\n            ((VisualElement) m).setShapeFactory(shapeFactory);\n        return elements;\n    }\n}"
            ],
            [
                "createURLStreamHandlerFactory",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "/**\n * @return factory which catches 'image' protocol requests to deliver images via an URL.\n */\npublic static URLStreamHandlerFactory createURLStreamHandlerFactory() {\n    return new MyURLStreamHandlerFactory();\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "MyURLStreamHandlerFactory",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "isSequentialVar",
                "de.neemann.digital.gui.components.table",
                "ExpressionListenerJK",
                "/**\n * If the name belongs to a sequential state var, the state vars name is returned.\n * Otherwise a null is returned\n *\n * @param name the name of the variable\n * @return the state variable or null\n */\npublic static String isSequentialVar(String name) {\n    String detName = null;\n    if (name.endsWith(\"n+1\")) {\n        detName = name.substring(0, name.length() - 2);\n    } else if (name.endsWith(\"{n+1}\")) {\n        detName = name.substring(0, name.length() - 5) + \"n\";\n    }\n    return detName;\n}"
            ],
            [
                "getAttrList",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * @return returns the list of circuit attributes\n */\npublic static ArrayList<Key> getAttrList() {\n    return ATTR_LIST;\n}"
            ],
            [
                "raster",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * rounds the given vector to the raster\n *\n * @param pos the vector\n * @return pos round to raster\n */\npublic static Vector raster(Vector pos) {\n    return new Vector((int) Math.round((double) pos.x / SIZE) * SIZE, (int) Math.round((double) pos.y / SIZE) * SIZE);\n}"
            ],
            [
                "createLiveDialog",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "/**\n * Creates a instance prepared for \"live logging\"\n *\n * @param owner      the parent frame\n * @param model      the model\n * @param microStep  stepping mode\n * @param ordering   the ordering to use\n * @param sampleSize the number of samples\n * @return the created instance\n */\npublic static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize) {\n    String title;\n    if (microStep)\n        title = Lang.get(\"win_measures_microstep\");\n    else\n        title = Lang.get(\"win_measures_fullstep\");\n    ArrayList<Signal> signals = model.getSignalsCopy();\n    signals.removeIf(signal -> !signal.isShowInGraph());\n    new OrderMerger<String, Signal>(ordering) {\n\n        @Override\n        public boolean equals(Signal a, String b) {\n            return a.getName().equals(b);\n        }\n    }.order(signals);\n    ValueTableObserver valueTableObserver = new ValueTableObserver(microStep, signals, sampleSize);\n    GraphDialog graphDialog = new GraphDialog(owner, title, valueTableObserver.getLogData(), model, true).setColumnInfo(createColumnsInfo(signals));\n    graphDialog.addWindowListener(new WindowAdapter() {\n\n        @Override\n        public void windowOpened(WindowEvent e) {\n            model.addObserver(valueTableObserver);\n        }\n\n        @Override\n        public void windowClosed(WindowEvent e) {\n            model.removeObserver(valueTableObserver);\n        }\n    });\n    return graphDialog;\n}"
            ],
            [
                "createColumnsInfo",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals) {\n    ValueTable.ColumnInfo[] info = new ValueTable.ColumnInfo[signals.size()];\n    for (int i = 0; i < signals.size(); i++) {\n        Signal s = signals.get(i);\n        info[i] = new ValueTable.ColumnInfo(s.getFormat(), s.getValue().getBits());\n    }\n    return info;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "isExperimentalMode",
                "de.neemann.digital.gui",
                "Main",
                "/**\n * @return true if experimental features are enabled\n */\npublic static boolean isExperimentalMode() {\n    return experimental;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "WindowManager",
                "/**\n * @return the WindowManager\n */\npublic static WindowManager getInstance() {\n    return InstanceHolderClass.INSTANCE;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "Settings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static Settings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "getRange",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog bit range\n *\n * @param bits the number of bits\n * @return the bit range\n */\npublic static String getRange(int bits) {\n    if (bits == 1)\n        return \"\";\n    else\n        return \"[\" + (bits - 1) + \":0]\";\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog type for a signal\n *\n * @param def  the signal type (input or output) used if dir is not \"inout\"\n * @param dir  used to check if direction is \"inout\"\n * @param bits the number of bits\n * @return the verilog signal type\n */\npublic static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits) {\n    String result;\n    if (dir == HDLPort.Direction.INOUT)\n        result = \"inout\";\n    else\n        result = (def == HDLPort.Direction.IN) ? \"input\" : \"output\";\n    if (bits > 1) {\n        result += \" [\" + (bits - 1) + \":0]\";\n    }\n    return result;\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    return (bits + \"'b\" + s);\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.verilog2.lib",
                "VerilogTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given\n * element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(MODULE_PREFIX + elementName);\n}"
            ],
            [
                "createFromJar",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n *\n * @param path the path of the file to load\n * @param cl   the classloader used to load the template. If set to null, the SystemClassLoader is used\n * @return the statement\n * @throws IOException     IOException\n * @throws ParserException ParserException\n */\npublic static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException {\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    InputStream in = cl.getResourceAsStream(path);\n    if (in == null)\n        throw new FileNotFoundException(\"file not found: \" + path);\n    try (Reader r = new InputStreamReader(in, StandardCharsets.UTF_8)) {\n        Parser p = new Parser(r, path);\n        return p.parse();\n    }\n}"
            ],
            [
                "createFromJarStatic",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n * Throws only a RuntimeException so use with care!\n *\n * @param path the path of the file to load\n * @return the statement\n */\npublic static Statement createFromJarStatic(String path) {\n    try {\n        return createFromJar(path, null);\n    } catch (IOException | ParserException e) {\n        throw new RuntimeException(\"could not parse: \" + path, e);\n    }\n}"
            ],
            [
                "isWhiteSpace",
                "de.neemann.digital.hdl.hgs",
                "Tokenizer",
                "/**\n * Returns true if the given character is a white space.\n *\n * @param c the character to test\n * @return true in c is a white space\n */\npublic static boolean isWhiteSpace(int c) {\n    return c == ' ' || c == '\\t' || c == '\\n' || c == '\\r';\n}"
            ],
            [
                "toLong",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a long\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static long toLong(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toDouble",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a double\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static double toDouble(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).doubleValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toInt",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an int\n *\n * @param value the value to convert\n * @return the int value\n * @throws HGSEvalException HGSEvalException\n */\npublic static int toInt(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).intValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toBool",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a bool\n *\n * @param value the value to convert\n * @return the bool value\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean toBool(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue() != 0;\n    if (value instanceof Boolean)\n        return ((Boolean) value);\n    throw new HGSEvalException(\"Must be an integer or a bool, is: \" + value.getClass().getSimpleName() + \"=\" + value);\n}"
            ],
            [
                "toString",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a string\n *\n * @param value the value to convert\n * @return the string\n * @throws HGSEvalException HGSEvalException\n */\npublic static String toString(Object value) throws HGSEvalException {\n    if (value instanceof String)\n        return value.toString();\n    throw new HGSEvalException(\"must be a string, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toArray",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an array\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSArray toArray(Object value) throws HGSEvalException {\n    if (value instanceof HGSArray)\n        return (HGSArray) value;\n    if (value instanceof List)\n        return new HGSArrayList((List) value);\n    throw new HGSEvalException(\"must be an array, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toMap",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a map\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSMap toMap(Object value) throws HGSEvalException {\n    if (value instanceof HGSMap)\n        return (HGSMap) value;\n    if (value instanceof Map)\n        return new HGSMapMap((Map) value);\n    throw new HGSEvalException(\"must be a map, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "equals",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Compares two values\n *\n * @param a a value\n * @param b a value\n * @return true if both values are equal\n */\npublic static boolean equals(Object a, Object b) {\n    if (a instanceof Double || b instanceof Double)\n        return a.equals(b);\n    else if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() == ((Number) b).longValue();\n    else if (a instanceof String || b instanceof String)\n        return a.toString().equals(b.toString());\n    else\n        return a.equals(b);\n}"
            ],
            [
                "add",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Adds two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object add(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) + toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() + ((Number) b).longValue();\n    if (a instanceof String || b instanceof String)\n        return a.toString() + b.toString();\n    throw new HGSEvalException(\"arguments must be int or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "sub",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Subtracts two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object sub(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) - toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() - ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "mul",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Multiplies two values\n *\n * @param a a value\n * @param b a value\n * @return the product\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object mul(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) * toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() * ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "div",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Divides two numbers\n *\n * @param a a value\n * @param b a value\n * @return the quotient\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object div(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) / toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() / ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "or",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an or operation\n *\n * @param a a value\n * @param b a value\n * @return the or'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object or(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() | ((Number) b).longValue();\n    return toBool(a) || toBool(b);\n}"
            ],
            [
                "xor",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an xor operation\n *\n * @param a a value\n * @param b a value\n * @return the xor'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object xor(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() ^ ((Number) b).longValue();\n    return toBool(a) ^ toBool(b);\n}"
            ],
            [
                "and",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an and operation\n *\n * @param a a value\n * @param b a value\n * @return the and'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object and(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() & ((Number) b).longValue();\n    return toBool(a) && toBool(b);\n}"
            ],
            [
                "not",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs a not operation\n *\n * @param value a value\n * @return the inverted value\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object not(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ~((Number) value).longValue();\n    return !toBool(value);\n}"
            ],
            [
                "neg",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Changes the sign of the given value\n *\n * @param value the value\n * @return value with changed sign\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object neg(Object value) throws HGSEvalException {\n    if (value instanceof Double)\n        return -(Double) value;\n    return -toLong(value);\n}"
            ],
            [
                "less",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a&lt;b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean less(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) < toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) < toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) < 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "lessEqual",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a<=b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean lessEqual(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) <= toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) <= toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) <= 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "trimRight",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the right side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimRight(String str) {\n    int initial = str.length() - 1;\n    int pos = initial;\n    while (pos >= 0 && isWhiteSpace(str.charAt(pos))) pos--;\n    if (pos == initial)\n        return str;\n    else\n        return str.substring(0, pos + 1);\n}"
            ],
            [
                "trimLeft",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the left side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimLeft(String str) {\n    int pos = 0;\n    while (pos < str.length() && isWhiteSpace(str.charAt(pos))) pos++;\n    if (pos == 0)\n        return str;\n    else\n        return str.substring(pos);\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Returns the vhdl type name\n *\n * @param bits the number of bits\n * @return the types name\n */\npublic static String getType(int bits) {\n    if (bits == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector(\" + (bits - 1) + \" downto 0)\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    int missing = bits - s.length();\n    if (missing > 0)\n        s = ZEROS.substring(0, missing) + s;\n    if (bits > 1)\n        s = \"\\\"\" + s + \"\\\"\";\n    else\n        s = \"'\" + s + \"'\";\n    return s;\n}"
            ],
            [
                "isTemplate",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Returns true, if a hdl template is available.\n *\n * @param etd the {@link ElementTypeDescription}\n * @return true if VHDL template is available\n */\npublic static boolean isTemplate(ElementTypeDescription etd) {\n    ClassLoader cl = etd.getClassLoader();\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    URL url = cl.getResource(createFileName(ENTITY_PREFIX + etd.getName()));\n    return url != null;\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(ENTITY_PREFIX + elementName);\n}"
            ],
            [
                "zero",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Create a vhdl zero with the given bit number\n *\n * @param bits the bit number\n * @return '0' or (others => '0')\n */\npublic static String zero(long bits) {\n    if (bits == 1)\n        return \"'0'\";\n    else\n        return \"(others => '0')\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, long bits) {\n    return VHDLCreator.value(val, (int) bits);\n}"
            ],
            [
                "genericType",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates the code for a generic type\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String genericType(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector ((Bits-1) downto 0)\";\n}"
            ],
            [
                "type",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a type of given width\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String type(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector (\" + (n - 1) + \" downto 0)\";\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.hdl.model2.expression",
                "Expression",
                "/**\n * Helper to check if an expression is a net reference\n *\n * @param expr the expression to check\n * @param net  the net\n * @return true if the expression is a reference to the given net\n */\nstatic boolean isVar(Expression expr, HDLNet net) {\n    return expr instanceof ExprVar && ((ExprVar) expr).getNet() == net;\n}"
            ],
            [
                "isConstant",
                "de.neemann.digital.hdl.model2.expression",
                "ExprConstant",
                "/**\n * Returns the constant if th given node represents a constant\n *\n * @param node the node\n * @return the constant of null if node is not a constant\n */\npublic static ExprConstant isConstant(HDLNode node) {\n    if (node instanceof HDLNodeAssignment) {\n        HDLNodeAssignment expr = (HDLNodeAssignment) node;\n        if (expr.getExpression() instanceof ExprConstant) {\n            return (ExprConstant) expr.getExpression();\n        }\n    }\n    return null;\n}"
            ],
            [
                "getHighZ",
                "de.neemann.digital.data",
                "Value",
                "/**\n * @return returns a high z value\n */\npublic static Value getHighZ() {\n    return new Value(0, Type.HIGHZ);\n}"
            ],
            [
                "calcBackOffset",
                "de.neemann.digital.builder.circuit",
                "FragmentExpression",
                "static int calcBackOffset(int size, int i) {\n    if ((size & 1) != 0 && i == (size - 1) / 2)\n        return 0;\n    if (i >= size / 2)\n        return size - i;\n    else\n        return i + 1;\n}"
            ],
            [
                "isXNor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXNor(long[] data) {\n    for (int i = 0; i < data.length; i++) if ((Integer.bitCount(i) & 1) == data[i])\n        return false;\n    return true;\n}"
            ],
            [
                "isXor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXor(long[] data) {\n    for (int i = 0; i < data.length; i++) if (!((Integer.bitCount(i) & 1) == data[i]))\n        return false;\n    return true;\n}"
            ],
            [
                "getLibPath",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * @return the additional library path\n */\npublic static File getLibPath() {\n    String path;\n    try {\n        path = ElementLibrary.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath().replace('\\\\', '/');\n    } catch (URISyntaxException e) {\n        return new File(\"noLibFound\");\n    }\n    if (path.endsWith(\"/target/classes/\"))\n        return toCanonical(new File(path.substring(0, path.length() - 16) + \"/src/main/dig/lib\"));\n    if (path.endsWith(\"/target/Digital.jar\"))\n        return new File(path.substring(0, path.length() - 19) + \"/src/main/dig/lib\");\n    if (path.endsWith(\"Digital.jar\"))\n        return new File(path.substring(0, path.length() - 12) + \"/lib\");\n    return new File(\"noLibFound\");\n}"
            ],
            [
                "createCustomDescription",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * Creates a custom element description.\n *\n * @param file    the file\n * @param circuit the circuit\n * @param library the library\n * @return the type description\n * @throws PinException PinException\n */\npublic static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException {\n    ElementTypeDescriptionCustom d = new ElementTypeDescriptionCustom(file, circuit, library);\n    d.setElementFactory(attributes -> new CustomElement(d));\n    return d;\n}"
            ],
            [
                "createDeclarationDefault",
                "de.neemann.digital.draw.library",
                "ElementTypeDescriptionCustom",
                "/**\n * Creates the default for custom element declarations\n *\n * @param circuit the circuit\n * @return the default code template\n * @throws NodeException NodeException\n */\npublic static String createDeclarationDefault(Circuit circuit) throws NodeException {\n    TreeSet<String> nameSet = new TreeSet<>();\n    for (VisualElement ve : circuit.getElements()) {\n        String gen = ve.getElementAttributes().get(Keys.GENERIC).trim();\n        if (!gen.isEmpty()) {\n            try {\n                Parser p = new Parser(gen);\n                p.enableRefReadCollection();\n                p.parse(false);\n                for (Reference r : p.getRefsRead()) {\n                    if (r instanceof ReferenceToStruct) {\n                        ReferenceToStruct st = (ReferenceToStruct) r;\n                        if (st.getParent() instanceof ReferenceToVar) {\n                            ReferenceToVar var = (ReferenceToVar) st.getParent();\n                            if (var.getName().equals(\"args\")) {\n                                nameSet.add(st.getName());\n                            }\n                        }\n                    }\n                }\n            } catch (ParserException | IOException e) {\n                final NodeException ex = new NodeException(Lang.get(\"err_evaluatingGenericsCode_N_N\", ve, gen), e);\n                ex.setOrigin(circuit.getOrigin());\n                throw ex;\n            }\n        }\n    }\n    StringBuilder sb = new StringBuilder();\n    for (String name : nameSet) sb.append(name).append(\" := ;\\n\");\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Returns a comparator instance\n *\n * @return the singleton instance\n */\npublic static NumStringComparator getInstance() {\n    return InstanceHolder.INSTANCE;\n}"
            ],
            [
                "compareStr",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Compare two strings\n *\n * @param a a string\n * @param b a string\n * @return the comparison result\n */\npublic static int compareStr(String a, String b) {\n    int pa = 0;\n    int pb = 0;\n    while (true) {\n        final boolean ae = pa == a.length();\n        final boolean be = pb == b.length();\n        if (ae && be)\n            return 0;\n        else if (ae)\n            return -1;\n        else if (be)\n            return 1;\n        char ca = Character.toLowerCase(a.charAt(pa));\n        char cb = Character.toLowerCase(b.charAt(pb));\n        if (isDigit(ca) && isDigit(cb)) {\n            ParseNumber da = new ParseNumber(a, pa);\n            ParseNumber db = new ParseNumber(b, pb);\n            int c = Integer.compare(da.num, db.num);\n            if (c != 0)\n                return c;\n            else {\n                pa = da.p;\n                pb = db.p;\n            }\n        } else {\n            int c = Character.compare(ca, cb);\n            if (c != 0) {\n                return c;\n            } else {\n                pa++;\n                pb++;\n            }\n        }\n    }\n}"
            ],
            [
                "createPins",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Creates pins\n *\n * @param inputs    the inputs\n * @param outputs   the outputs\n * @param invert    true if invert output\n * @param ic        input inverter configuration\n * @param wideShape true if a wide shape is selected\n * @return the pins\n */\npublic static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape) {\n    return createPins(inputs, outputs, invert, wideShape ? 4 : 3, true, ic);\n}"
            ],
            [
                "readStyle",
                "de.neemann.digital.draw.shapes.custom.svg",
                "Context",
                "static Context readStyle(Context context, String style) throws SvgException {\n    SVGTokenizer t = new SVGTokenizer(style);\n    while (true) {\n        final String command = t.readTo(':');\n        if (command.length() == 0)\n            break;\n        final String value = t.readTo(';');\n        AttrParser p = PARSER.get(command);\n        if (p != null)\n            p.parse(context, value);\n    }\n    return context;\n}"
            ],
            [
                "getOutSize",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static int getOutSize(boolean small) {\n    if (small)\n        return SIZE2;\n    else\n        return OUT_SIZE;\n}"
            ],
            [
                "getOutStyle",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static Style getOutStyle(boolean small) {\n    if (small)\n        return Style.THIN;\n    else\n        return Style.NORMAL;\n}"
            ],
            [
                "getOutRad",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Inner circle size used for inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the output circle radius as a vector\n */\npublic static Vector getOutRad(boolean small) {\n    int s = getOutSize(small);\n    return new Vector(s - 6, s - 6);\n}"
            ],
            [
                "createTransform",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static Transform createTransform(int size) {\n    if (size == 2)\n        return Transform.IDENTITY;\n    else {\n        final TransformTranslate tr1 = new TransformTranslate(-70, -139);\n        final TransformTranslate tr2 = new TransformTranslate(70, 139);\n        float s = (2 + size) / 4f;\n        final TransformMatrix trm = new TransformMatrix(s, 0, 0, s, 0, 0);\n        return Transform.mul(tr1, Transform.mul(trm, tr2));\n    }\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"attributes\", ElementAttributes.class);\n    xStream.alias(\"visualElement\", VisualElement.class);\n    xStream.alias(\"wire\", Wire.class);\n    xStream.alias(\"circuit\", Circuit.class);\n    xStream.alias(\"intFormat\", IntFormat.class);\n    xStream.alias(\"exprFormat\", FormatToExpression.class);\n    xStream.alias(\"barrelShifterMode\", BarrelShifterMode.class);\n    xStream.alias(\"direction\", LeftRightFormat.class);\n    xStream.alias(\"rotation\", Rotation.class);\n    xStream.aliasAttribute(Rotation.class, \"rotation\", \"rotation\");\n    xStream.alias(\"language\", Language.class);\n    xStream.aliasAttribute(Language.class, \"name\", \"name\");\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"value\", InValue.class);\n    xStream.aliasAttribute(InValue.class, \"value\", \"v\");\n    xStream.aliasAttribute(InValue.class, \"highZ\", \"z\");\n    xStream.addImplicitCollection(ElementAttributes.class, \"attributes\");\n    xStream.alias(\"data\", DataField.class);\n    xStream.registerConverter(new DataFieldConverter());\n    xStream.alias(\"testData\", TestCaseDescription.class);\n    xStream.alias(\"inverterConfig\", InverterConfig.class);\n    xStream.addImplicitCollection(InverterConfig.class, \"inputs\");\n    xStream.alias(\"storedRoms\", ROMManager.class);\n    xStream.addImplicitCollection(ROMManager.class, \"roms\");\n    xStream.alias(\"romList\", ROMManagerFile.class);\n    xStream.alias(\"romFile\", ROMManagerFile.RomContainerFile.class);\n    xStream.alias(\"romData\", ROMManagerFile.RomContainerDataField.class);\n    xStream.alias(\"appType\", Application.Type.class);\n    xStream.ignoreUnknownElements();\n    xStream.alias(\"shape\", CustomShapeDescription.class);\n    xStream.alias(\"pin\", CustomShapeDescription.Pin.class);\n    xStream.alias(\"circle\", CustomShapeDescription.CircleHolder.class);\n    xStream.alias(\"line\", CustomShapeDescription.LineHolder.class);\n    xStream.alias(\"poly\", CustomShapeDescription.PolygonHolder.class);\n    xStream.alias(\"text\", CustomShapeDescription.TextHolder.class);\n    xStream.alias(\"polygon\", Polygon.class);\n    xStream.alias(\"shapeType\", CustomCircuitShapeType.class);\n    xStream.alias(\"transform\", TransformHolder.class);\n    xStream.registerConverter(new PolygonConverter());\n    return xStream;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename     filename\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load \" + filename);\n    final Circuit circuit = loadCircuit(new FileInputStream(filename), shapeFactory);\n    circuit.origin = filename;\n    return circuit;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param in           the input stream\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load stream\");\n    try {\n        XStream xStream = getxStream();\n        Circuit circuit = (Circuit) xStream.fromXML(in);\n        for (VisualElement ve : circuit.getElements()) ve.setShapeFactory(shapeFactory);\n        if (circuit.version == 0) {\n            // convert to version 1\n            for (Wire w : circuit.getWires()) {\n                w.p1 = w.p1.mul(2);\n                w.p2 = w.p2.mul(2);\n            }\n            for (VisualElement e : circuit.getElements()) e.setPos(e.getPos().mul(2));\n            circuit.version = 1;\n        }\n        if (circuit.version < 2) {\n            Object rm = circuit.getAttributes().get(Keys.ROMMANAGER);\n            if (rm instanceof ROMManager) {\n                circuit.getAttributes().set(Keys.ROMMANAGER, new ROMManagerFile((ROMManager) rm));\n            }\n            circuit.version = 2;\n        }\n        return circuit;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "fixGenerics",
                "de.neemann.digital.draw.model",
                "ModelCreator",
                "/**\n * Creates a concrete circuit from a generic on.\n * Uses the included generic init code.\n *\n * @param circuit the generic circuit\n * @param library the element library\n * @return the concrete circuit\n * @throws NodeException            NodeException\n * @throws ElementNotFoundException ElementNotFoundException\n */\npublic static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException {\n    if (circuit.getAttributes().get(Keys.IS_GENERIC))\n        return new ResolveGenerics(circuit, library).resolveCircuit(null).getCircuit();\n    else\n        return circuit;\n}"
            ],
            [
                "createFromPath",
                "de.neemann.digital.draw.graphics",
                "Polygon",
                "/**\n * Creates a polygon from a SVG path\n *\n * @param path the svg path\n * @return the polygon or null if there was an error\n */\npublic static Polygon createFromPath(String path) {\n    try {\n        return new PolygonParser(path).create();\n    } catch (PolygonParser.ParserException e) {\n        return null;\n    }\n}"
            ],
            [
                "vec",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Returns a new vector\n * shorthand for new Vector(x,y)\n *\n * @param x x\n * @param y y\n * @return the vector\n */\npublic static Vector vec(int x, int y) {\n    return new Vector(x, y);\n}"
            ],
            [
                "min",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the minimum vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the minimum\n */\npublic static Vector min(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x)\n            x = p[i].getX();\n        if (p[i].getY() < y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "max",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the maximim vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the maximum\n */\npublic static Vector max(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() > x)\n            x = p[i].getX();\n        if (p[i].getY() > y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "width",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the width of the given vectors.\n *\n * @param p the vectors\n * @return max(p)-min(p)\n */\npublic static Vector width(VectorInterface... p) {\n    int x1 = p[0].getX();\n    int y1 = p[0].getY();\n    int x2 = x1;\n    int y2 = y1;\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x1)\n            x1 = p[i].getX();\n        if (p[i].getY() < y1)\n            y1 = p[i].getY();\n        if (p[i].getX() > x2)\n            x2 = p[i].getX();\n        if (p[i].getY() > y2)\n            y2 = p[i].getY();\n    }\n    return new Vector(x2 - x1, y2 - y1);\n}"
            ],
            [
                "add",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Adds an offset to every vector in the given list\n *\n * @param vectors the original vectors\n * @param offs    the offset\n * @return the new list\n */\npublic static List<Vector> add(List<Vector> vectors, Vector offs) {\n    ArrayList<Vector> newVec = new ArrayList<>();\n    for (Vector v : vectors) newVec.add(v.add(offs));\n    return newVec;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static SVGSettings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "createKeyList",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * @return a list of available SVG export keys\n */\npublic static List<Key> createKeyList() {\n    ArrayList<Key> list = new ArrayList<>();\n    list.add(LATEX);\n    list.add(PINS_IN_MATH_MODE);\n    list.add(HIDE_TEST);\n    list.add(NO_SHAPE_FILLING);\n    list.add(SMALL_IO);\n    list.add(NO_PIN_MARKER);\n    list.add(THINNER_LINES);\n    list.add(HIGH_CONTRAST);\n    list.add(MONOCHROME);\n    return list;\n}"
            ],
            [
                "mul",
                "de.neemann.digital.draw.graphics",
                "Transform",
                "/**\n * Combines the two given transformations to a common transformation\n *\n * @param t1 first transformation\n * @param t2 second transformation\n * @return the resulting transformation\n */\nstatic Transform mul(Transform t1, Transform t2) {\n    TransformMatrix m1 = t1.getMatrix();\n    TransformMatrix m2 = t2.getMatrix();\n    return new TransformMatrix(m1.a * m2.a + m1.c * m2.b, m1.b * m2.a + m1.d * m2.b, m1.a * m2.c + m1.c * m2.d, m1.b * m2.c + m1.d * m2.d, m2.a * m1.x + m2.b * m1.y + m2.x, m2.c * m1.x + m2.d * m1.y + m2.y);\n}"
            ],
            [
                "rotate",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a rotation.\n * Rotates in mathematically positive direction. Takes into account that\n * in Digital the y-axis goes downwards.\n *\n * @param w the angle in 360 grad units\n * @return the transformation\n */\npublic static TransformMatrix rotate(double w) {\n    final double phi = w / 180 * Math.PI;\n    float cos = (float) Math.cos(phi);\n    float sin = (float) Math.sin(phi);\n    return new TransformMatrix(cos, -sin, sin, cos, 0, 0);\n}"
            ],
            [
                "scale",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a scaling transformation\n *\n * @param sx scaling in x direction\n * @param sy scaling in y direction\n * @return the transformation\n */\npublic static TransformMatrix scale(float sx, float sy) {\n    return new TransformMatrix(sx, 0, 0, sy, 0, 0);\n}"
            ],
            [
                "getTextWidth",
                "de.neemann.digital.draw.graphics",
                "GraphicMinMax",
                "/**\n * Returns a approximation of the width of the given text in the given style\n *\n * @param text  the text\n * @param style the style\n * @return the approximated text width\n */\npublic static int getTextWidth(String text, Style style) {\n    final FontRenderContext fontRenderContext = new FontRenderContext(null, true, false);\n    GraphicsFormatter.Fragment f = GraphicsFormatter.createFragment((fragment, font, str) -> {\n        Rectangle2D rec = style.getFont().getStringBounds(str, fontRenderContext);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), 0);\n    }, style.getFont(), text);\n    return f.getWidth();\n}"
            ],
            [
                "getSelected",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * @return the selected color map\n */\npublic static ColorScheme getSelected() {\n    if (instance == null) {\n        updateInstance();\n        Settings.getInstance().getAttributes().addListener(ColorScheme::updateInstance);\n    }\n    return instance;\n}"
            ],
            [
                "getWireStyle",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Returns the wire style depending on the given value\n *\n * @param value the value to represent\n * @return the style\n */\npublic static Style getWireStyle(Value value) {\n    if (value == null || value.getBits() > 1)\n        return WIRE;\n    if (value.isHighZ())\n        return WIRE_HIGHZ;\n    if (value.getValue() == 1)\n        return WIRE_HIGH;\n    else\n        return WIRE_LOW;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text the text\n * @return the string representation\n */\npublic static String format(Text text) {\n    return format(text, FormatToExpression.getDefaultFormat());\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text   the text\n * @param format the format to use\n * @return the string representation\n */\npublic static String format(Text text, FormatToExpression format) {\n    if (text instanceof Simple) {\n        return ((Simple) text).getText();\n    } else if (text instanceof Blank) {\n        return \" \";\n    } else if (text instanceof Character) {\n        return \"\" + ((Character) text).getChar();\n    } else if (text instanceof Decorate) {\n        Decorate d = (Decorate) text;\n        if (d.getStyle() == Decorate.Style.OVERLINE) {\n            final Text content = d.getContent();\n            if (content instanceof Simple || content instanceof Index)\n                return format.getNot() + format(content, format);\n            else\n                return format.getNot() + \"(\" + format(content, format) + \")\";\n        } else\n            return format(d.getContent(), format);\n    } else if (text instanceof Index) {\n        Index i = (Index) text;\n        String str = format(i.getVar(), format);\n        if (i.getSubScript() != null)\n            str += format(i.getSubScript(), format);\n        if (i.getSuperScript() != null)\n            str += format(i.getSuperScript(), format);\n        return str;\n    } else if (text instanceof Sentence) {\n        Sentence s = (Sentence) text;\n        StringBuilder sb = new StringBuilder();\n        for (Text t : s) sb.append(format(t, format));\n        return sb.toString();\n    } else\n        return \"\";\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "SVGFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr   the {@link Graphics2D} instance\n * @param text the text\n * @return the text fragment\n */\npublic static Fragment createFragment(Graphics2D gr, String text) {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), text);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr         the {@link Graphics2D} instance\n * @param expression the expression\n * @return the text fragment\n * @throws FormatterException FormatterException\n */\npublic static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), new ExpressionToText().createText(expression));\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param sizer the sizer instance\n * @param font  the font\n * @param text  the text\n * @return the fragment\n */\npublic static Fragment createFragment(FontSizer sizer, Font font, String text) {\n    Fragment fragment;\n    try {\n        Text t = new Parser(text).parse();\n        fragment = createFragment(sizer, font, t);\n    } catch (ParseException | FormatterException e) {\n        // if there was an exception, return the complete raw text as a fragment\n        fragment = new TextFragment(sizer, font, text);\n    }\n    return fragment;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param exp the expression to format\n * @return the formatted string\n */\npublic static String format(Expression exp) {\n    return format(new ExpressionToText().createText(exp, FormatToExpression.LATEX), true);\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "math",
                "de.neemann.digital.draw.graphics.text.text",
                "Decorate",
                "/**\n * Adds a MATH decoration to the given text.\n * If the text is already decorated the text is returned directly.\n *\n * @param t the text to decorate\n * @return the decorated text\n */\npublic static Text math(Text t) {\n    if (t instanceof Decorate) {\n        Decorate d = (Decorate) t;\n        if (d.getStyle() == Style.MATH)\n            return t;\n    }\n    return new Decorate(t, Style.MATH);\n}"
            ],
            [
                "escapeXML",
                "de.neemann.digital.draw.graphics",
                "GraphicSVG",
                "/**\n * Escapes a given string to XML\n *\n * @param text the text to escape\n * @return the escaped text.\n */\npublic static String escapeXML(String text) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        switch(c) {\n            case '&':\n                sb.append(\"&amp;\");\n                break;\n            case '<':\n                sb.append(\"&lt;\");\n                break;\n            case '>':\n                sb.append(\"&gt;\");\n                break;\n            case '\"':\n                sb.append(\"&quot;\");\n                break;\n            default:\n                sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
            ],
            [
                "getMirrorYOrientation",
                "de.neemann.digital.draw.graphics",
                "GraphicSwing",
                "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3) {\n    int oy = orientation.getY();\n    VectorInterface d0 = p2.sub(p1).getOrthogonal();\n    VectorInterface d1 = p3.sub(p1);\n    if (d0.scalar(d1) < 0)\n        oy = 2 - oy;\n    return oy;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param file the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(File file) throws IOException {\n    final Configuration configuration = load(new FileInputStream(file));\n    configuration.origin = file;\n    return configuration;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param in the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        return (Configuration) xStream.fromXML(in);\n    } catch (RuntimeException e) {\n        throw new IOException(\"error reading XML\", e);\n    }\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "UNKNOWN",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * Unknown release\n */\npublic static final String UNKNOWN = \"unknown\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullDown",
                "/**\n * The pull down description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "Diode",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeBackward",
                "/**\n * The description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullUp",
                "/**\n * The pull up description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeForward",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROMDualPort",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualAccess",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "CounterPreset",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Register",
                "/**\n * The registers {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "LookUpTable",
                "/**\n * The LUTs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "BlockRAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Counter",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROM",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMAsync",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROM",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROMDualPort",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePortSel",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RegisterFile",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "MIDI",
                "/**\n * The Speakers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RGBLED",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The Input description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "LEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);"
            ],
            [
                "POLARITYAWARELEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The polarity aware LED description\n */\npublic static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "SEVENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment display description\n */\npublic static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();"
            ],
            [
                "SEVENHEXDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment hex display description\n */\npublic static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "SIXTEENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * Sixteen Segment Display\n */\npublic static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RotEncoder",
                "/**\n * The rotary encoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PinControl",
                "/**\n * The description of the pin control logic\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "DipSwitch",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "LightBulb",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Probe",
                "/**\n * The Probe description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Button",
                "/**\n * The Button description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "ButtonLED",
                "/**\n * The ButtonLED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "In",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "STEPS",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * Steps for a full revolution\n */\npublic static final int STEPS = 72;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * The stepper motors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "NotConnected",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorBipolar",
                "/**\n * The bipolar motor description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Const",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PowerSupply",
                "/**\n * Enforces a power supply\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Ground",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "VDD",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.core.io.telnet",
                "ServerHolder",
                "/**\n * The singleton instance\n */\npublic static final ServerHolder INSTANCE = new ServerHolder();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io.telnet",
                "Telnet",
                "/**\n * The telnet server description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);"
            ],
            [
                "BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of bits in simple gates like And and Or\n */\npublic static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);"
            ],
            [
                "INPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * input bits of sign extender\n */\npublic static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);"
            ],
            [
                "OUTPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output bits of sign extender\n */\npublic static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);"
            ],
            [
                "INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in simple gates like And and Or\n */\npublic static final // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nKey.KeyInteger // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nINPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);"
            ],
            [
                "LUT_INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in the LUT\n */\npublic static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);"
            ],
            [
                "MAX_VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The counter max value\n */\npublic static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);"
            ],
            [
                "DELAY_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the delay time used by the delay component\n */\npublic static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);"
            ],
            [
                "MONOFLOP_DELAY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the timer delay time\n */\npublic static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);"
            ],
            [
                "LABEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The elements label\n */\npublic static final Key<String> LABEL = new Key<>(\"Label\", \"\");"
            ],
            [
                "FONT_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The font size\n */\npublic static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);"
            ],
            [
                "TEXT_ORIENTATION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * text orientation\n */\npublic static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();"
            ],
            [
                "LED_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a LED\n */\npublic static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();"
            ],
            [
                "SEVEN_SEG_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a seven seg display\n */\npublic static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);"
            ],
            [
                "VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The value of constants\n */\npublic static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();"
            ],
            [
                "DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of elements\n */\npublic static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();"
            ],
            [
                "INPUT_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of inputs\n */\npublic static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();"
            ],
            [
                "DIP_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of the dip switch\n */\npublic static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Color of LEDs\n */\npublic static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();"
            ],
            [
                "INPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The input splitting of a splitter\n */\npublic static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");"
            ],
            [
                "OUTPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The output splitting of a splitter\n */\npublic static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");"
            ],
            [
                "SPLITTER_SPREADING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The splitter spreading\n */\npublic static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();"
            ],
            [
                "IN_OUT_SMALL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to select small inputs and outputs\n */\npublic static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "RUN_AT_REAL_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable realtime mode at a clock\n */\npublic static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);"
            ],
            [
                "INVERT_OUTPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * inverts the output of a gate\n */\npublic static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);"
            ],
            [
                "FREQUENCY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The real time frequency of the clock\n */\npublic static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);"
            ],
            [
                "SELECTOR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the bit count of a muxer or decoder\n */\npublic static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);"
            ],
            [
                "ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of address bits of memory\n */\npublic static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);"
            ],
            [
                "BLOWN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a diode as blown fuse or as programmed\n */\npublic static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a switch as closed or not\n */\npublic static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();"
            ],
            [
                "SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * signed flag for comparator element\n */\npublic static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();"
            ],
            [
                "REMAINDER_POSITIVE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects if the reminder of the division is always positive\n */\npublic static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);"
            ],
            [
                "DATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the data key for memory\n */\npublic static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);"
            ],
            [
                "FLIP_SEL_POSITON",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag for flipping selector pos in muxers, decoders and drivers\n */\npublic static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();"
            ],
            [
                "ROTATE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the rotation of the elements\n */\npublic static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();"
            ],
            [
                "WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);"
            ],
            [
                "SHAPE_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * defines the shape type of the custom circuit\n */\npublic static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();"
            ],
            [
                "LAYOUT_SHAPE_DELTA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Defines the distance to the previous pin. Used by the layout shape type\n */\npublic static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));"
            ],
            [
                "TERM_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);"
            ],
            [
                "TERM_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);"
            ],
            [
                "CYCLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break timeout cycles\n */\npublic static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);"
            ],
            [
                "ENABLED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break enabled\n */\npublic static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();"
            ],
            [
                "VALUE_IS_PROBE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to make a value a probe\n */\npublic static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "IS_PROGRAM_MEMORY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();"
            ],
            [
                "IS_PROGRAM_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();"
            ],
            [
                "AUTO_RELOAD_ROM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the ROMs auto load function\n */\npublic static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();"
            ],
            [
                "LAST_DATA_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The last used ROM data file\n */\npublic static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();"
            ],
            [
                "SHOW_DATA_TABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data table window\n */\npublic static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH_MICRO",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window in single gate mode\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();"
            ],
            [
                "ADD_VALUE_TO_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to add the value to the measurement graph\n */\npublic static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();"
            ],
            [
                "MICRO_STEP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the single gate mode in the embedded data view\n */\npublic static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);"
            ],
            [
                "MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the embedded data view\n */\npublic static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);"
            ],
            [
                "SETTINGS_MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the default data view\n */\npublic static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);"
            ],
            [
                "IS_HIGH_Z",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable high z mode at an input\n */\npublic static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "AVOID_ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to avoid active low at an input\n */\npublic static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the description of an element\n */\npublic static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");"
            ],
            [
                "NETNAME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A net name\n */\npublic static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");"
            ],
            [
                "SETTINGS_IEEE_SHAPES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * shape setting\n */\npublic static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();"
            ],
            [
                "SETTINGS_LANGUAGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI Language\n */\npublic static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();"
            ],
            [
                "SETTINGS_DEFAULT_TREESELECT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Default state of the tree view\n */\npublic static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);"
            ],
            [
                "SETTINGS_EXPRESSION_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI expression string representation\n */\npublic static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);"
            ],
            [
                "SETTINGS_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the grid\n */\npublic static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();"
            ],
            [
                "SETTINGS_SHOW_WIRE_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the wire bits view\n */\npublic static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);"
            ],
            [
                "SETTINGS_MAC_MOUSE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the MAC mouse mode\n */\npublic static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables tunnel rename dialog\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);"
            ],
            [
                "SETTINGS_RENAME_LABELS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables renaming of labels ending with numbers while copying\n */\npublic static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);"
            ],
            [
                "SETTINGS_OPEN_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables remote port\n */\npublic static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();"
            ],
            [
                "SETTINGS_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * remote port\n */\npublic static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);"
            ],
            [
                "OSCILLATION_DETECTION_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Counter used to detect oscillations\n */\npublic static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);"
            ],
            [
                "INT_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();"
            ],
            [
                "PROBE_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());"
            ],
            [
                "FIXED_POINT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * fixed point fractional binary digits\n */\npublic static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();"
            ],
            [
                "GRAPHIC_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);"
            ],
            [
                "GRAPHIC_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);"
            ],
            [
                "RELAY_NORMALLY_CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a relay to indicate if it is normally open or normally closed.\n */\npublic static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();"
            ],
            [
                "POLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Number of poles in the double throw relay\n */\npublic static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();"
            ],
            [
                "BARREL_SHIFTER_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to select the shift mode\n */\npublic static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());"
            ],
            [
                "DIRECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate shift direction\n */\npublic static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());"
            ],
            [
                "BARREL_SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate if shift value is signed\n */\npublic static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);"
            ],
            [
                "COMMON_CONNECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to indicate if the 7-seg display has a common cathode output\n */\npublic static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();"
            ],
            [
                "COMMON_CONNECTION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to define the common connection type\n */\npublic static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();"
            ],
            [
                "LED_PERSISTENCE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);"
            ],
            [
                "LED_PERSIST_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();"
            ],
            [
                "SETTINGS_ATF1502_FITTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_ATMISP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Flash software for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();"
            ],
            [
                "ROW_DATA_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * row bits in led matrix\n */\npublic static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);"
            ],
            [
                "COL_ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * column address bits in led matrix\n */\npublic static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);"
            ],
            [
                "LOCKED_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * In locked mode the circuit can not be modified\n */\npublic static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);"
            ],
            [
                "PINNUMBER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin number\n */\npublic static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();"
            ],
            [
                "PINCOUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin count\n */\npublic static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));"
            ],
            [
                "INVERTER_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * contains the input inverter config\n */\npublic static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());"
            ],
            [
                "BACKGROUND_COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Background Color of nested circuits\n */\npublic static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));"
            ],
            [
                "SETTINGS_FONT_SCALING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the screen resolution\n */\npublic static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_USE_EQUALS_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses the equals key instead of the plus key.\n */\npublic static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;"
            ],
            [
                "WITH_ENABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if a enable input is needed\n */\npublic static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);"
            ],
            [
                "FET_UNIDIRECTIONAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true to simulate a unidirectional FET\n */\npublic static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);"
            ],
            [
                "ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if component is active low\n */\npublic static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();"
            ],
            [
                "MAP_TO_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if button is mapped to the keyboard\n */\npublic static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();"
            ],
            [
                "SETTINGS_LIBRARY_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf1502\n */\npublic static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_JAR_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A jar containing custom java components\n */\npublic static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "ROMMANAGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The manager which contains all the roms data\n */\npublic static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();"
            ],
            [
                "APPLICATION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The type of the external process\n */\npublic static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());"
            ],
            [
                "EXTERNAL_INPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The inputs used by the external process\n */\npublic static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");"
            ],
            [
                "EXTERNAL_OUTPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The outputs used by the external process\n */\npublic static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");"
            ],
            [
                "EXTERNAL_CODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);"
            ],
            [
                "EXTERNAL_CODE_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));"
            ],
            [
                "SETTINGS_GHDL_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to ghdl\n */\npublic static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();"
            ],
            [
                "GHDL_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The ghdl options\n */\npublic static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "IVERILOG_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The iverilog options\n */\npublic static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "SETTINGS_IVERILOG_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to iverilog installation directory\n */\npublic static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();"
            ],
            [
                "CUSTOM_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Shape used to represent a visual element\n */\npublic static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));"
            ],
            [
                "PRELOAD_PROGRAM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * True if a program is loaded to the simulator at startup\n */\npublic static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();"
            ],
            [
                "BIG_ENDIAN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);"
            ],
            [
                "PROGRAM_TO_PRELOAD",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The file to preload as a program at startup\n */\npublic static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "BIG_ENDIAN_SETTING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "WIDE_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects a wide shape\n */\npublic static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();"
            ],
            [
                "RECT_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of the rectangle\n */\npublic static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);"
            ],
            [
                "RECT_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the height of the rectangle\n */\npublic static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);"
            ],
            [
                "RECT_INSIDE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();"
            ],
            [
                "RECT_BOTTOM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();"
            ],
            [
                "RECT_RIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();"
            ],
            [
                "MIDI_CHANNEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);"
            ],
            [
                "MIDI_INSTRUMENT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");"
            ],
            [
                "MIDI_PROG_CHANGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables Program change\n */\npublic static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);"
            ],
            [
                "SETTINGS_TOOLCHAIN_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Stores the IDE settings file\n */\npublic static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();"
            ],
            [
                "GENERICLARGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();"
            ],
            [
                "IS_GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Circuit is generic\n */\npublic static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUTORIAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the tutorial\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();"
            ],
            [
                "SETTINGS_WIRETOOLTIP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the wire tool tips\n */\npublic static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);"
            ],
            [
                "SWITCH_ACTS_AS_INPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The switch acts as input\n */\npublic static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();"
            ],
            [
                "SNAP_TO_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Snaps the element to the grid\n */\npublic static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();"
            ],
            [
                "MIRROR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Mirrors the component\n */\npublic static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "TESTDATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The test data\n */\npublic static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);"
            ],
            [
                "TRIGGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The scope trigger mode\n */\npublic static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());"
            ],
            [
                "PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the telnet port\n */\npublic static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);"
            ],
            [
                "TELNET_ESCAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Telnet escape\n */\npublic static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();"
            ],
            [
                "SKIP_HDL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Skips HDL output for this circuit\n */\npublic static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();"
            ],
            [
                "PREFIX",
                "de.neemann.digital.core.basic",
                "FanIn",
                "/**\n * The inputs name prefix\n */\npublic static final String PREFIX = \"In_\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NOr",
                "/**\n * The NOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "And",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XNOr",
                "/**\n * The XNOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XOr",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Not",
                "/**\n * The Not description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NAnd",
                "/**\n * The NAnd description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Or",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "STARTED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STARTED event\n */\npublic static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CLOSED event\n */\npublic static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);"
            ],
            [
                "POSTCLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.POSTCLOSED event\n */\npublic static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);"
            ],
            [
                "STEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STEP event\n */\npublic static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);"
            ],
            [
                "CHECKBURN",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CHECKBURN event\n */\npublic static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);"
            ],
            [
                "MICROSTEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.MICROSTEP event\n */\npublic static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);"
            ],
            [
                "RUN_TO_BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK event\n */\npublic static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);"
            ],
            [
                "RUN_TO_BREAK_TIMEOUT",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK_TIMEOUT event\n */\npublic static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);"
            ],
            [
                "BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.BREAK event\n */\npublic static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGPFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "NFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGNFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "PFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "TransGate",
                "/**\n * The transmission gate description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "SwitchDT",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Relay",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "RelayDT",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Switch",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Fuse",
                "/**\n * The fuse description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Reset",
                "/**\n * The Reset description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Stop",
                "/**\n * The Stop element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Decoder",
                "/**\n * The Decoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Delay",
                "/**\n * The Delay description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Driver",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "DriverInvSel",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "PriorityEncoder",
                "/**\n * The PriorityEncoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BusSplitter",
                "/**\n * The bus splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * The splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Multiplexer",
                "/**\n * The Multiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BitSelector",
                "/**\n * The Bit Selector description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * The Break description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Clock",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "AsyncSeq",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Demultiplexer",
                "/**\n * The Demultiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopDAsync",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopD",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRSAsync",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopT",
                "/**\n * The T-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJKAsync",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJK",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "Monoflop",
                "/**\n * The Monoflop's description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRS",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BarrelShifter",
                "/**\n * The barrel shifter description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Mul",
                "/**\n * The multiplier description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Neg",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitExtender",
                "/**\n * Description of the sign extend component.\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Add",
                "/**\n * The adders description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Div",
                "/**\n * The dividers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "PRNG",
                "/**\n * The element type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Sub",
                "/**\n * The subtractors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Comparator",
                "/**\n * The comparators description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitCount",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "EMPTY_LIST",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * An empty list\n */\npublic static final ObservableValues EMPTY_LIST = new ObservableValues();"
            ],
            [
                "DEFAULT_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The default formatter\n */\npublic static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;"
            ],
            [
                "HEX_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The hexadecimal formatter\n */\npublic static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "External",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "ExternalFile",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DEFAULT_RAD",
                "de.neemann.digital.fsm",
                "State",
                "/**\n * The default state radius\n */\nstatic final int DEFAULT_RAD = 70;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "Lang",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "InstanceHolder",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.testing",
                "TestCaseElement",
                "/**\n * The TestCaseElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();"
            ],
            [
                "STATENAMES",
                "de.neemann.digital.analyse",
                "TruthTableTableModel",
                "/**\n * String representation of the states\n */\npublic static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };"
            ],
            [
                "ONE",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant true or one\n */\npublic static final Constant ONE = new Constant(true);"
            ],
            [
                "ZERO",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant false or zero\n */\npublic static final Constant ZERO = new Constant(false);"
            ],
            [
                "PRIMARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the primary panel\n */\npublic static final String PRIMARY = \"primary\";"
            ],
            [
                "SECONDARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the secondary panel\n */\npublic static final String SECONDARY = \"secondary\";"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * The single EditorFactory instance.\n */\nstatic final EditorFactory INSTANCE = new EditorFactory();"
            ],
            [
                "MAX_TERMINAL_STORED",
                "de.neemann.digital.gui.components.terminal",
                "ConsoleTerminal",
                "/**\n * Max amount of characters stored\n */\npublic static final int MAX_TERMINAL_STORED = 2048;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Terminal",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Keyboard",
                "/**\n * The keyboard description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "FAILED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for failed tests\n */\nstatic final Color FAILED_COLOR = new Color(255, 200, 200);"
            ],
            [
                "PASSED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for passed tests\n */\nstatic final Color PASSED_COLOR = new Color(200, 255, 200);"
            ],
            [
                "ICON_DELETE",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The delete icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");"
            ],
            [
                "ICON_COPY",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The copy icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "VGA",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "GraphicCard",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "LedMatrix",
                "/**\n * the LED-Matrix description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "ScopeTrigger",
                "/**\n * The ScopeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);"
            ],
            [
                "DATADESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The DataElement description\n */\npublic static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "TEXTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The TextElement description\n */\npublic static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "RECTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The shape for the rectangle\n */\npublic static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "LEFT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to left align the digits\n */\npublic final static float LEFT = 0.0f;"
            ],
            [
                "CENTER",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to center the digits\n */\npublic final static float CENTER = 0.5f;"
            ],
            [
                "RIGHT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to right align the digits\n */\npublic final static float RIGHT = 1.0f;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "Settings",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "SettingsHolder",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "BASE_FILE_KEY",
                "de.neemann.digital.hdl.hgs",
                "Context",
                "/**\n * Key used to store the base file name in the context\n */\npublic static final String BASE_FILE_KEY = \"baseFile\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericInitCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();"
            ],
            [
                "GEN_ARGS_KEY",
                "de.neemann.digital.draw.library",
                "ResolveGenerics",
                "/**\n * Key uses to store the args for the generic circuits\n */\npublic static final String GEN_ARGS_KEY = \"genArgs\";"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "ButtonShape",
                "protected static final int HEIGHT = OUT_SIZE / 2;"
            ],
            [
                "SIZE2",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Half the size of the used raster\n */\npublic static final int SIZE2 = 10;"
            ],
            [
                "SIZE",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * The size of the used raster\n */\npublic static final int SIZE = SIZE2 * 2;"
            ],
            [
                "CIRC",
                "de.neemann.digital.draw.shapes",
                "DILShape",
                "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);"
            ],
            [
                "DOWNSHIFT",
                "de.neemann.digital.draw.shapes",
                "VDDShape",
                "static final int DOWNSHIFT = 4;"
            ],
            [
                "CHARGED_GATE",
                "de.neemann.digital.draw.shapes",
                "FGFETShapeN",
                "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);"
            ],
            [
                "OUT_SIZE",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Size of the normal sized inputs and outputs\n */\npublic static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;"
            ],
            [
                "LATEX_RAD",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);"
            ],
            [
                "WIDTH2",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * half the width of the resistor\n */\npublic static final int WIDTH2 = SIZE2 - 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * height of the resistor\n */\npublic static final int HEIGHT = SIZE + SIZE / 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static final int HEIGHT = 7;"
            ],
            [
                "FRAME",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "/**\n * the Frame of the display\n */\npublic static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.elements",
                "Tunnel",
                "/**\n * The TunnelElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();"
            ],
            [
                "HIGH_CONTRAST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);"
            ],
            [
                "MONOCHROME",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);"
            ],
            [
                "SMALL_IO",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);"
            ],
            [
                "NO_PIN_MARKER",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);"
            ],
            [
                "THINNER_LINES",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);"
            ],
            [
                "HIDE_TEST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);"
            ],
            [
                "NO_SHAPE_FILLING",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);"
            ],
            [
                "LATEX",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);"
            ],
            [
                "PINS_IN_MATH_MODE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SettingsHolder",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to select the color map\n */\npublic static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();"
            ],
            [
                "CUSTOM_COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to define the custom color map\n */\npublic static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();"
            ],
            [
                "MAXLINETHICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * maximal line thickness\n */\npublic static final int MAXLINETHICK = 4;"
            ],
            [
                "NORMAL",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all lines to draw the shapes itself\n */\npublic static final Style NORMAL = new Builder().build();"
            ],
            [
                "DISABLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all disabled elements\n */\npublic static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();"
            ],
            [
                "INOUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for input and output labels\n */\npublic static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();"
            ],
            [
                "FAILED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the failed state lines in the measurement graph\n */\npublic static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();"
            ],
            [
                "PASS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the passed state lines in the measurement graph\n */\npublic static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();"
            ],
            [
                "NORMAL_TEXT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for text which is integral part of the shape.\n * Text which uses this style is always included in sizing!\n * Used for text only elements.\n */\npublic static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();"
            ],
            [
                "THIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin line used for the graphic in the clock or delay shape\n */\npublic static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();"
            ],
            [
                "THIN_FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin filled\n */\npublic static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();"
            ],
            [
                "THICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thick line used for the ground line\n */\npublic static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();"
            ],
            [
                "WIRE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in editing mode\n */\npublic static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "WIRE_LOW",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for low wires in running mode\n */\npublic static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();"
            ],
            [
                "WIRE_HIGH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for high wires in running mode\n */\npublic static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();"
            ],
            [
                "WIRE_HIGHZ",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in high Z state\n */\npublic static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();"
            ],
            [
                "WIRE_OUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the output dots\n */\npublic static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();"
            ],
            [
                "FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Filled style used to fill the splitter or the dark LEDs\n */\npublic static final Style FILLED = new Builder().setFilled(true).build();"
            ],
            [
                "DASH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the grid in the graph\n */\npublic static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();"
            ],
            [
                "SHAPE_PIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();"
            ],
            [
                "SHAPE_SPLITTER",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text for splitters\n */\npublic static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();"
            ],
            [
                "WIRE_VALUE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();"
            ],
            [
                "WIRE_BITS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the wire bit number\n */\npublic static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();"
            ],
            [
                "HIGHLIGHT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * highlight color used for the circles to mark an element\n */\npublic static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "ERROR",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * error color used for the circles to mark an element\n */\npublic static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "BLANK",
                "de.neemann.digital.draw.graphics.text.text",
                "Blank",
                "/**\n * the Blank instance\n */\npublic static final Blank BLANK = new Blank();"
            ],
            [
                "LOOK_AT_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String LOOK_AT_ALIAS = \"lookAt\";"
            ],
            [
                "REF_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String REF_ALIAS = \"ref\";"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "inputs",
                "de.neemann.digital.core",
                "ObservableValues"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getBreakInput",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * @return the break value\n */\npublic ObservableValue getBreakInput() {\n    return input;\n}"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getCycles",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * @return the timeout cycles\n */\npublic int getCycles() {\n    return cycles;\n}"
            ],
            [
                "getLabel",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * @return the break label\n */\npublic String getLabel() {\n    return label;\n}"
            ],
            [
                "getOutputs",
                "de.neemann.digital.core.wiring",
                "Break",
                "@Override\npublic ObservableValues getOutputs() {\n    return ObservableValues.EMPTY_LIST;\n}"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "isEnabled",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * @return true if enabled\n */\npublic boolean isEnabled() {\n    return enabled;\n}"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getNames",
                "de.neemann.digital.core",
                "ObservableValues",
                "public ArrayList<String> getNames()"
            ],
            [
                "get",
                "de.neemann.digital.core",
                "ObservableValues",
                "public ObservableValue get(String arg0)"
            ],
            [
                "removeAll",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean removeAll(Collection<?> arg0)"
            ],
            [
                "toArray",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public <T1> T1[] toArray(T1[] arg0)"
            ],
            [
                "remove",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public T remove(int arg0)"
            ],
            [
                "containsAll",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean containsAll(Collection<?> arg0)"
            ],
            [
                "size",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public int size()"
            ],
            [
                "remove",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean remove(Object arg0)"
            ],
            [
                "indexOf",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public int indexOf(Object arg0)"
            ],
            [
                "retainAll",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean retainAll(Collection<?> arg0)"
            ],
            [
                "get",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public T get(int arg0)"
            ],
            [
                "contains",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean contains(Object arg0)"
            ],
            [
                "add",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean add(T arg0)"
            ],
            [
                "addAll",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean addAll(Collection<? extends T> arg0)"
            ],
            [
                "iterator",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public Iterator<T> iterator()"
            ],
            [
                "isEmpty",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean isEmpty()"
            ],
            [
                "set",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public T set(int arg0, T arg1)"
            ],
            [
                "lastIndexOf",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public int lastIndexOf(Object arg0)"
            ],
            [
                "addAll",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean addAll(int arg0, Collection<? extends T> arg1)"
            ],
            [
                "toArray",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public Object[] toArray()"
            ],
            [
                "listIterator",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public ListIterator<T> listIterator()"
            ],
            [
                "listIterator",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public ListIterator<T> listIterator(int arg0)"
            ],
            [
                "subList",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public List<T> subList(int arg0, int arg1)"
            ],
            [
                "removeAll",
                "java.util",
                "List",
                "public abstract boolean removeAll(Collection<? extends Object> arg0)"
            ],
            [
                "containsAll",
                "java.util",
                "List",
                "public abstract boolean containsAll(Collection<? extends Object> arg0)"
            ],
            [
                "add",
                "java.util",
                "List",
                "public abstract boolean add(E arg0)"
            ],
            [
                "hashCode",
                "java.util",
                "List",
                "public abstract int hashCode()"
            ],
            [
                "isEmpty",
                "java.util",
                "List",
                "public abstract boolean isEmpty()"
            ],
            [
                "listIterator",
                "java.util",
                "List",
                "public abstract ListIterator<E> listIterator(int arg0)"
            ],
            [
                "indexOf",
                "java.util",
                "List",
                "public abstract int indexOf(Object arg0)"
            ],
            [
                "lastIndexOf",
                "java.util",
                "List",
                "public abstract int lastIndexOf(Object arg0)"
            ],
            [
                "addAll",
                "java.util",
                "List",
                "public abstract boolean addAll(Collection<? extends E> arg0)"
            ],
            [
                "remove",
                "java.util",
                "List",
                "public abstract boolean remove(Object arg0)"
            ],
            [
                "size",
                "java.util",
                "List",
                "public abstract int size()"
            ],
            [
                "get",
                "java.util",
                "List",
                "public abstract E get(int arg0)"
            ],
            [
                "set",
                "java.util",
                "List",
                "public abstract E set(int arg0, E arg1)"
            ],
            [
                "equals",
                "java.util",
                "List",
                "public abstract boolean equals(Object arg0)"
            ],
            [
                "remove",
                "java.util",
                "List",
                "public abstract E remove(int arg0)"
            ],
            [
                "toArray",
                "java.util",
                "List",
                "public abstract Object[] toArray()"
            ],
            [
                "contains",
                "java.util",
                "List",
                "public abstract boolean contains(Object arg0)"
            ],
            [
                "retainAll",
                "java.util",
                "List",
                "public abstract boolean retainAll(Collection<? extends Object> arg0)"
            ],
            [
                "subList",
                "java.util",
                "List",
                "public abstract List<E> subList(int arg0, int arg1)"
            ],
            [
                "listIterator",
                "java.util",
                "List",
                "public abstract ListIterator<E> listIterator()"
            ],
            [
                "toArray",
                "java.util",
                "List",
                "public abstract <T> T[] toArray(T[] arg0)"
            ],
            [
                "spliterator",
                "java.util",
                "List",
                "public default Spliterator<E> spliterator()"
            ],
            [
                "iterator",
                "java.util",
                "List",
                "public abstract Iterator<E> iterator()"
            ],
            [
                "addAll",
                "java.util",
                "List",
                "public abstract boolean addAll(int arg0, Collection<? extends E> arg1)"
            ],
            [
                "removeAll",
                "java.util",
                "Collection",
                "public abstract boolean removeAll(Collection<? extends Object> arg0)"
            ],
            [
                "toArray",
                "java.util",
                "Collection",
                "public abstract <T> T[] toArray(T[] arg0)"
            ],
            [
                "stream",
                "java.util",
                "Collection",
                "public default Stream<E> stream()"
            ],
            [
                "size",
                "java.util",
                "Collection",
                "public abstract int size()"
            ],
            [
                "removeIf",
                "java.util",
                "Collection",
                "public default boolean removeIf(Predicate<? super E> arg0)"
            ],
            [
                "isEmpty",
                "java.util",
                "Collection",
                "public abstract boolean isEmpty()"
            ],
            [
                "toArray",
                "java.util",
                "Collection",
                "public default <T> T[] toArray(IntFunction<T[]> arg0)"
            ],
            [
                "spliterator",
                "java.util",
                "Collection",
                "public default Spliterator<E> spliterator()"
            ],
            [
                "contains",
                "java.util",
                "Collection",
                "public abstract boolean contains(Object arg0)"
            ],
            [
                "containsAll",
                "java.util",
                "Collection",
                "public abstract boolean containsAll(Collection<? extends Object> arg0)"
            ],
            [
                "equals",
                "java.util",
                "Collection",
                "public abstract boolean equals(Object arg0)"
            ],
            [
                "addAll",
                "java.util",
                "Collection",
                "public abstract boolean addAll(Collection<? extends E> arg0)"
            ],
            [
                "retainAll",
                "java.util",
                "Collection",
                "public abstract boolean retainAll(Collection<? extends Object> arg0)"
            ],
            [
                "remove",
                "java.util",
                "Collection",
                "public abstract boolean remove(Object arg0)"
            ],
            [
                "toArray",
                "java.util",
                "Collection",
                "public abstract Object[] toArray()"
            ],
            [
                "parallelStream",
                "java.util",
                "Collection",
                "public default Stream<E> parallelStream()"
            ],
            [
                "hashCode",
                "java.util",
                "Collection",
                "public abstract int hashCode()"
            ],
            [
                "iterator",
                "java.util",
                "Collection",
                "public abstract Iterator<E> iterator()"
            ],
            [
                "add",
                "java.util",
                "Collection",
                "public abstract boolean add(E arg0)"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 26708,
        "oracle": "inputs != null && inputs.size() > 0;",
        "oracleType": "PRE",
        "projectName": "Digital",
        "packageName": "de.neemann.digital.core.wiring",
        "className": "Break",
        "javadocTag": "",
        "methodJavadoc": "",
        "methodSourceCode": "public void setInputs(ObservableValues inputs) throws NodeException{\n    input = inputs.get(0).checkBits(1, null);\n}",
        "classJavadoc": "/**\n * The Break element\n */",
        "classSourceCode": "/*\n * Copyright (c) 2016 Helmut Neemann\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.core.wiring;\n\nimport de.neemann.digital.core.Model;\nimport de.neemann.digital.core.NodeException;\nimport de.neemann.digital.core.ObservableValue;\nimport de.neemann.digital.core.ObservableValues;\nimport de.neemann.digital.core.element.Element;\nimport de.neemann.digital.core.element.ElementAttributes;\nimport de.neemann.digital.core.element.ElementTypeDescription;\nimport de.neemann.digital.core.element.Keys;\n\nimport static de.neemann.digital.core.element.PinInfo.input;\n\n/**\n * The Break element\n */\npublic class Break implements Element {\n\n    /**\n     * The Break description\n     */\n    public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\"))\n            .addAttribute(Keys.ROTATE)\n            .addAttribute(Keys.LABEL)\n            .addAttribute(Keys.ENABLED)\n            .addAttribute(Keys.CYCLES);\n\n    private final int cycles;\n    private final String label;\n    private final boolean enabled;\n    private ObservableValue input;\n\n    /**\n     * Creates a new instance\n     *\n     * @param attributes the attributes\n     */\n    public Break(ElementAttributes attributes) {\n        cycles = attributes.get(Keys.CYCLES);\n        enabled = attributes.get(Keys.ENABLED);\n        label = attributes.getLabel();\n    }\n\n    @Override\n    public void setInputs(ObservableValues inputs) throws NodeException {\n        input = inputs.get(0).checkBits(1, null);\n    }\n\n    /**\n     * @return the break value\n     */\n    public ObservableValue getBreakInput() {\n        return input;\n    }\n\n    /**\n     * @return the timeout cycles\n     */\n    public int getCycles() {\n        return cycles;\n    }\n\n    @Override\n    public ObservableValues getOutputs() {\n        return ObservableValues.EMPTY_LIST;\n    }\n\n    @Override\n    public void registerNodes(Model model) {\n        model.addBreak(this);\n    }\n\n    /**\n     * @return the break label\n     */\n    public String getLabel() {\n        return label;\n    }\n\n    /**\n     * @return true if enabled\n     */\n    public boolean isEnabled() {\n        return enabled;\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "CLI",
                "de.neemann"
            ],
            [
                "Mouse",
                "de.neemann.gui"
            ],
            [
                "LineBreaker",
                "de.neemann.gui"
            ],
            [
                "IconCreator",
                "de.neemann.gui"
            ],
            [
                "ConfirmDialogBuilder",
                "de.neemann.gui"
            ],
            [
                "Resources",
                "de.neemann.gui.language"
            ],
            [
                "Bundle",
                "de.neemann.gui.language"
            ],
            [
                "Language",
                "de.neemann.gui.language"
            ],
            [
                "ToolTipAction",
                "de.neemann.gui"
            ],
            [
                "MyFileChooser",
                "de.neemann.gui"
            ],
            [
                "ClosingWindowListener",
                "de.neemann.gui"
            ],
            [
                "ErrorMessage",
                "de.neemann.gui"
            ],
            [
                "WindowSizeStorage",
                "de.neemann.gui"
            ],
            [
                "Screen",
                "de.neemann.gui"
            ],
            [
                "ToolTipProvider",
                "de.neemann.gui"
            ],
            [
                "InfoDialog",
                "de.neemann.gui"
            ],
            [
                "ValueFormatter",
                "de.neemann.digital.core"
            ],
            [
                "ModelStateObserver",
                "de.neemann.digital.core"
            ],
            [
                "PullDown",
                "de.neemann.digital.core.pld"
            ],
            [
                "Diode",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeBackward",
                "de.neemann.digital.core.pld"
            ],
            [
                "PullUp",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeForward",
                "de.neemann.digital.core.pld"
            ],
            [
                "Node",
                "de.neemann.digital.core"
            ],
            [
                "RAMSinglePort",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualAccess",
                "de.neemann.digital.core.memory"
            ],
            [
                "ByteArrayFromValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "Importer",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "LogisimReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "DataFieldValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "IntelHexReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "BinReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "MultiValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "CounterPreset",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Register",
                "de.neemann.digital.core.memory"
            ],
            [
                "LookUpTable",
                "de.neemann.digital.core.memory"
            ],
            [
                "BlockRAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Counter",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMMangerBase",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManagerFile",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManager",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMInterface",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "EEPROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramCounter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMAsync",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataField",
                "de.neemann.digital.core.memory"
            ],
            [
                "EEPROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMInterface",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataFieldConverter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMSinglePortSel",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramMemory",
                "de.neemann.digital.core.memory"
            ],
            [
                "RegisterFile",
                "de.neemann.digital.core.memory"
            ],
            [
                "ModelStateObserverTyped",
                "de.neemann.digital.core"
            ],
            [
                "Observable",
                "de.neemann.digital.core"
            ],
            [
                "NodeWithoutDelay",
                "de.neemann.digital.core"
            ],
            [
                "ExceptionWithOrigin",
                "de.neemann.digital.core"
            ],
            [
                "ObservableValue",
                "de.neemann.digital.core"
            ],
            [
                "SpeedTest",
                "de.neemann.digital.core"
            ],
            [
                "BurnException",
                "de.neemann.digital.core"
            ],
            [
                "GlobalValues",
                "de.neemann.digital.core"
            ],
            [
                "MIDI",
                "de.neemann.digital.core.io"
            ],
            [
                "RGBLED",
                "de.neemann.digital.core.io"
            ],
            [
                "Out",
                "de.neemann.digital.core.io"
            ],
            [
                "RotEncoder",
                "de.neemann.digital.core.io"
            ],
            [
                "PinControl",
                "de.neemann.digital.core.io"
            ],
            [
                "DipSwitch",
                "de.neemann.digital.core.io"
            ],
            [
                "CommonConnectionType",
                "de.neemann.digital.core.io"
            ],
            [
                "LightBulb",
                "de.neemann.digital.core.io"
            ],
            [
                "Probe",
                "de.neemann.digital.core.io"
            ],
            [
                "Button",
                "de.neemann.digital.core.io"
            ],
            [
                "ButtonLED",
                "de.neemann.digital.core.io"
            ],
            [
                "In",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorUnipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "ProbeMode",
                "de.neemann.digital.core.io"
            ],
            [
                "NotConnected",
                "de.neemann.digital.core.io"
            ],
            [
                "MIDIHelper",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorBipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "Const",
                "de.neemann.digital.core.io"
            ],
            [
                "PowerSupply",
                "de.neemann.digital.core.io"
            ],
            [
                "Ground",
                "de.neemann.digital.core.io"
            ],
            [
                "InValue",
                "de.neemann.digital.core.io"
            ],
            [
                "VDD",
                "de.neemann.digital.core.io"
            ],
            [
                "ServerHolder",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Telnet",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ByteBuffer",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Server",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ElementAttributes",
                "de.neemann.digital.core.element"
            ],
            [
                "Element",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementFactory",
                "de.neemann.digital.core.element"
            ],
            [
                "PinInfo",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescriptions",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "Keys",
                "de.neemann.digital.core.element"
            ],
            [
                "Rotation",
                "de.neemann.digital.core.element"
            ],
            [
                "AttributeListener",
                "de.neemann.digital.core.element"
            ],
            [
                "Key",
                "de.neemann.digital.core.element"
            ],
            [
                "ImmutableList",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementTypeDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "FanIn",
                "de.neemann.digital.core.basic"
            ],
            [
                "NOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "And",
                "de.neemann.digital.core.basic"
            ],
            [
                "XNOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "XOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "Not",
                "de.neemann.digital.core.basic"
            ],
            [
                "NAnd",
                "de.neemann.digital.core.basic"
            ],
            [
                "Function",
                "de.neemann.digital.core.basic"
            ],
            [
                "Or",
                "de.neemann.digital.core.basic"
            ],
            [
                "ExceptionWithOriginInterface",
                "de.neemann.digital.core"
            ],
            [
                "ModelEvent",
                "de.neemann.digital.core"
            ],
            [
                "BacktrackException",
                "de.neemann.digital.core"
            ],
            [
                "PlainSwitch",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGPFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "NFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGNFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PlainSwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "TransGate",
                "de.neemann.digital.core.switching"
            ],
            [
                "SwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Relay",
                "de.neemann.digital.core.switching"
            ],
            [
                "RelayDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Switch",
                "de.neemann.digital.core.switching"
            ],
            [
                "Fuse",
                "de.neemann.digital.core.switching"
            ],
            [
                "Reset",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Stop",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Decoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Delay",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Driver",
                "de.neemann.digital.core.wiring"
            ],
            [
                "DataBus",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "SingleBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "ConnectedBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "AbstractBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "BusModelStateObserver",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "CommonBusValue",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "DriverInvSel",
                "de.neemann.digital.core.wiring"
            ],
            [
                "PriorityEncoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BusSplitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Splitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Multiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitSelector",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Break",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Clock",
                "de.neemann.digital.core.wiring"
            ],
            [
                "AsyncSeq",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Demultiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitsException",
                "de.neemann.digital.core"
            ],
            [
                "NodeInterface",
                "de.neemann.digital.core"
            ],
            [
                "NodeException",
                "de.neemann.digital.core"
            ],
            [
                "FlipflopDAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopD",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRSAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopT",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJKAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJK",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "Monoflop",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRS",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopBit",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "BarrelShifter",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Mul",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Neg",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitExtender",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Add",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Div",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "LeftRightFormat",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "PRNG",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Sub",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BarrelShifterMode",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Comparator",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitCount",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "ObservableValues",
                "de.neemann.digital.core"
            ],
            [
                "Value",
                "de.neemann.digital.core"
            ],
            [
                "IntFormat",
                "de.neemann.digital.core"
            ],
            [
                "SyncAccess",
                "de.neemann.digital.core"
            ],
            [
                "Bits",
                "de.neemann.digital.core"
            ],
            [
                "ProcessInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "StdIOInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "ApplicationVerilogStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "Application",
                "de.neemann.digital.core.extern"
            ],
            [
                "External",
                "de.neemann.digital.core.extern"
            ],
            [
                "Port",
                "de.neemann.digital.core.extern"
            ],
            [
                "PortDefinition",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGHDL",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationIVerilog",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationVHDLStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "VHDLTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGeneric",
                "de.neemann.digital.core.extern"
            ],
            [
                "Options",
                "de.neemann.digital.core.extern"
            ],
            [
                "VerilogTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ExternalFile",
                "de.neemann.digital.core.extern"
            ],
            [
                "ProcessStarter",
                "de.neemann.digital.core.extern"
            ],
            [
                "ModelEventType",
                "de.neemann.digital.core"
            ],
            [
                "Observer",
                "de.neemann.digital.core"
            ],
            [
                "ErrorDetector",
                "de.neemann.digital.core"
            ],
            [
                "Statistics",
                "de.neemann.digital.core.stats"
            ],
            [
                "Countable",
                "de.neemann.digital.core.stats"
            ],
            [
                "Model",
                "de.neemann.digital.core"
            ],
            [
                "Signal",
                "de.neemann.digital.core"
            ],
            [
                "StringList",
                "de.neemann.digital"
            ],
            [
                "XStreamValid",
                "de.neemann.digital"
            ],
            [
                "StatsExport",
                "de.neemann.digital.cli"
            ],
            [
                "SVGExport",
                "de.neemann.digital.cli"
            ],
            [
                "CommandLineTester",
                "de.neemann.digital.cli"
            ],
            [
                "CSVWriter",
                "de.neemann.digital.cli"
            ],
            [
                "BasicCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Argument",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLIException",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Muxer",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentKey",
                "de.neemann.digital.cli.cli"
            ],
            [
                "NamedCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLICommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentBase",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CircuitLoader",
                "de.neemann.digital.cli"
            ],
            [
                "Main",
                "de.neemann.digital.cli"
            ],
            [
                "Modification",
                "de.neemann.digital.undo"
            ],
            [
                "Modifications",
                "de.neemann.digital.undo"
            ],
            [
                "ModifyException",
                "de.neemann.digital.undo"
            ],
            [
                "Copyable",
                "de.neemann.digital.undo"
            ],
            [
                "UndoManager",
                "de.neemann.digital.undo"
            ],
            [
                "ChangedListener",
                "de.neemann.digital.undo"
            ],
            [
                "CircuitRepresentation",
                "de.neemann.digital.fsm"
            ],
            [
                "Transition",
                "de.neemann.digital.fsm"
            ],
            [
                "Movable",
                "de.neemann.digital.fsm"
            ],
            [
                "MouseMovable",
                "de.neemann.digital.fsm"
            ],
            [
                "Optimizer",
                "de.neemann.digital.fsm"
            ],
            [
                "Permute",
                "de.neemann.digital.fsm"
            ],
            [
                "FiniteStateMachineException",
                "de.neemann.digital.fsm"
            ],
            [
                "TransitionTableCreator",
                "de.neemann.digital.fsm"
            ],
            [
                "ValueParser",
                "de.neemann.digital.fsm"
            ],
            [
                "WaitGroup",
                "de.neemann.digital.fsm"
            ],
            [
                "FSMComponent",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMFrame",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "OptimizerDialog",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMDemos",
                "de.neemann.digital.fsm"
            ],
            [
                "FSM",
                "de.neemann.digital.fsm"
            ],
            [
                "State",
                "de.neemann.digital.fsm"
            ],
            [
                "Lang",
                "de.neemann.digital.lang"
            ],
            [
                "LineListenerResolveDontCare",
                "de.neemann.digital.testing"
            ],
            [
                "TestingDataException",
                "de.neemann.digital.testing"
            ],
            [
                "UnitTester",
                "de.neemann.digital.testing"
            ],
            [
                "FolderTestRunner",
                "de.neemann.digital.testing"
            ],
            [
                "TestExecutor",
                "de.neemann.digital.testing"
            ],
            [
                "Transitions",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseDescription",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseElement",
                "de.neemann.digital.testing"
            ],
            [
                "LineEmitterRepeat",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Parser",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppenderBits",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ParserException",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Context",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ModelInitializer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Expression",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterList",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestRow",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitter",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterWhile",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterSimple",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Random",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "SignExtend",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "IfThenElse",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "Function",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "LineListener",
                "de.neemann.digital.testing.parser"
            ],
            [
                "VirtualSignal",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppender",
                "de.neemann.digital.testing.parser"
            ],
            [
                "OperatorPrecedence",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestResultListener",
                "de.neemann.digital.testing"
            ],
            [
                "MatchedValue",
                "de.neemann.digital.testing"
            ],
            [
                "TestResult",
                "de.neemann.digital.testing"
            ],
            [
                "MinimizerInterface",
                "de.neemann.digital.analyse"
            ],
            [
                "LabelNumbering",
                "de.neemann.digital.analyse"
            ],
            [
                "ModelAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "CSVImporter",
                "de.neemann.digital.analyse"
            ],
            [
                "BoolTableExpanded",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableTableModel",
                "de.neemann.digital.analyse"
            ],
            [
                "TableReducer",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "PrimeSelector",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForce",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "LargestFirst",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForceGetAll",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "PrimeSelectorDefault",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BoolTableByteArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "IndependentChecker",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskey",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableExpression",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableBoolArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTable",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRows",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "ThreeStateValue",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskeyExam",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRow",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TruthTableConverter",
                "de.neemann.digital.analyse"
            ],
            [
                "DetermineJKStateMachine",
                "de.neemann.digital.analyse"
            ],
            [
                "Parser",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ParseException",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ModelAnalyserInfo",
                "de.neemann.digital.analyse"
            ],
            [
                "AnalyseException",
                "de.neemann.digital.analyse"
            ],
            [
                "DependencyAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "SubstituteLibrary",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableFormatterHex",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatter",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterTestCase",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterCSV",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterLaTeX",
                "de.neemann.digital.analyse.format"
            ],
            [
                "MinimizerQuineMcCluskey",
                "de.neemann.digital.analyse"
            ],
            [
                "ContextFiller",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "BitSetter",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ContextMap",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Operation",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Context",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NInputs",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NOr",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "ExpressionModifier",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NAnd",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "Constant",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Variable",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionException",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityInclNotVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Equals",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "FormatToExpression",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTable",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Formatter",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatterException",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTableLatex",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Not",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "VariableVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NamedExpression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "MinimizerQuineMcCluskeyExam",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTable",
                "de.neemann.digital.analyse"
            ],
            [
                "SplitPinString",
                "de.neemann.digital.analyse"
            ],
            [
                "CycleDetector",
                "de.neemann.digital.analyse"
            ],
            [
                "DigitalRemoteInterface",
                "de.neemann.digital.gui"
            ],
            [
                "TextSearchFilter",
                "de.neemann.digital.gui"
            ],
            [
                "ExportZipAction",
                "de.neemann.digital.gui"
            ],
            [
                "SettingsBase",
                "de.neemann.digital.gui"
            ],
            [
                "DocumentationLocator",
                "de.neemann.digital.gui"
            ],
            [
                "InitialTutorial",
                "de.neemann.digital.gui.tutorial"
            ],
            [
                "InsertAction",
                "de.neemann.digital.gui"
            ],
            [
                "StatusInterface",
                "de.neemann.digital.gui"
            ],
            [
                "SearchTextField",
                "de.neemann.digital.gui"
            ],
            [
                "SaveAsHelper",
                "de.neemann.digital.gui"
            ],
            [
                "FileHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ReleaseInfo",
                "de.neemann.digital.gui.release"
            ],
            [
                "CheckForNewRelease",
                "de.neemann.digital.gui.release"
            ],
            [
                "StateInterface",
                "de.neemann.digital.gui.state"
            ],
            [
                "StateManager",
                "de.neemann.digital.gui.state"
            ],
            [
                "State",
                "de.neemann.digital.gui.state"
            ],
            [
                "CircuitScrollPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "ItemPicker",
                "de.neemann.digital.gui.components"
            ],
            [
                "LibraryTreeModel",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "SelectTree",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "WindowPosManager",
                "de.neemann.digital.gui.components"
            ],
            [
                "CustomShapeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "TransformHolder",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "BehavioralFixtureCreator",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorFactory",
                "de.neemann.digital.gui.components"
            ],
            [
                "OrderMerger",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementOrderer",
                "de.neemann.digital.gui.components"
            ],
            [
                "ModifyMoveSelected",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteRect",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWires",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfVisualElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyCircuitAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveAndRotElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMeasurementOrdering",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttribute",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "DataEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "CircuitModifierPostClosed",
                "de.neemann.digital.gui.components"
            ],
            [
                "CharDeleter",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "ConsoleTerminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Terminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalInterface",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Keyboard",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "KeyboardDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Editor",
                "de.neemann.digital.gui.components"
            ],
            [
                "VarRectList",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMap",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapComponent",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapDialog",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "MapLayout",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughException",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "CircuitTransferable",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementHelpDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "TestCaseDescriptionDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ValueTableDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestCaseDescriptionEditor",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestAllDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ExpressionListenerOptimizeJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "LaTeXExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "HardwareDescriptionGenerator",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateFile",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateCUPL",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "ExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderOutputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AllSolutionsDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerCSVCondensed",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "BuilderExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionComponent",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "PlainTextExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableReorderManager",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ShowStringDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderInputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ProgressDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "CheckResultListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerStore",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AttributeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ProbeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ColorSchemeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "ROMEditorDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "LabelGenerator",
                "de.neemann.digital.gui.components"
            ],
            [
                "SingleValueDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ExpressionDialog",
                "de.neemann.digital.gui.components.expression"
            ],
            [
                "CircuitComponent",
                "de.neemann.digital.gui.components"
            ],
            [
                "VGA",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicCard",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrix",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "VGADialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "MoveFocusTo",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "ConstraintsBuilder",
                "de.neemann.digital.gui.components"
            ],
            [
                "ScopeTrigger",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphDialog",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphComponent",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "DummyElement",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "ValueTableObserver",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "CircuitModifier",
                "de.neemann.digital.gui.components"
            ],
            [
                "CopiedElementLabelRenamer",
                "de.neemann.digital.gui.components"
            ],
            [
                "TextLineNumber",
                "de.neemann.digital.gui.components"
            ],
            [
                "InsertHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ProgramMemoryLoader",
                "de.neemann.digital.gui"
            ],
            [
                "Main",
                "de.neemann.digital.gui"
            ],
            [
                "StatsDialog",
                "de.neemann.digital.gui"
            ],
            [
                "WindowManager",
                "de.neemann.digital.gui"
            ],
            [
                "Settings",
                "de.neemann.digital.gui"
            ],
            [
                "LibrarySelector",
                "de.neemann.digital.gui"
            ],
            [
                "DigitalUncaughtExceptionHandler",
                "de.neemann.digital.gui"
            ],
            [
                "NumberingWizard",
                "de.neemann.digital.gui"
            ],
            [
                "HandlerInterface",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteSever",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteException",
                "de.neemann.digital.gui.remote"
            ],
            [
                "DigitalHandler",
                "de.neemann.digital.gui.remote"
            ],
            [
                "ModelModifier",
                "de.neemann.digital.gui"
            ],
            [
                "VerilogCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogRenaming",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogGenerator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogTestBenchCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogElement",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogTemplate",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogLibrary",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "CodePrinter",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "CodePrinterStr",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "Statements",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Parser",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ParserException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Statement",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Context",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "FirstClassFunctionCall",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "InnerFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "JavaClass",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "FirstClassFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Func",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Function",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSEvalException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ReferenceToFunc",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToStruct",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToArray",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Reference",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToVar",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Value",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSMap",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSArray",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Separator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLLibrary",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLRenaming",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLGenerator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLEntity",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplate",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplateFunctions",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTestBenchCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "HDLModel",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNode",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNet",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "Printable",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLException",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLPort",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HasName",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "InlineManyToOne",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeAssignments",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "Optimization",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeConstants",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "ReplaceOneToMany",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NameConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "OptimizeExpressions",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "RemoveConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NodeSorterExpressionBased",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "HDLNodeSplitterManyToOne",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeCustom",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeAssignment",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLCircuit",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "ExprVar",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Visitor",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprVarRange",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExpressionOptimizer",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprNot",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprConstant",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprOperate",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprUsingNet",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "HDLNodeBuildIn",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLClockIntegrator",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockIntegratorGeneric",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockInfo",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "HDLNodeSplitterOneToMany",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "FileLocator",
                "de.neemann.digital"
            ],
            [
                "ValueTable",
                "de.neemann.digital.data"
            ],
            [
                "ValueTableModel",
                "de.neemann.digital.data"
            ],
            [
                "DataPlotter",
                "de.neemann.digital.data"
            ],
            [
                "Value",
                "de.neemann.digital.data"
            ],
            [
                "ExpressionExporter",
                "de.neemann.digital.builder"
            ],
            [
                "ExpressionToFileExporter",
                "de.neemann.digital.builder"
            ],
            [
                "RotationByteArrayOutputStream",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "TT2Exporter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "StartATF150xFitter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "OSExecute",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "CreateCHN",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDevice",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDialog",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PL",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATF150xCuplExporter",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PinMap",
                "de.neemann.digital.builder"
            ],
            [
                "PinMapException",
                "de.neemann.digital.builder"
            ],
            [
                "FragmentExpression",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisualElement",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentSameInValue",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "CircuitBuilder",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisitor",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVariable",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Fragment",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Box",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Gal16v8JEDECExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CuplExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "BuilderCollectorGAL",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CleanNameBuilder",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderCollector",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderInterface",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderException",
                "de.neemann.digital.builder"
            ],
            [
                "Gal22v10JEDECExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "Gal22v10CuplExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "FuseMap",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFillerException",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFiller",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "JedecWriter",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "GenericCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibrary",
                "de.neemann.digital.draw.library"
            ],
            [
                "GenericInitCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "Visitor",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryListener",
                "de.neemann.digital.draw.library"
            ],
            [
                "JarComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibraryFolder",
                "de.neemann.digital.draw.library"
            ],
            [
                "CustomElement",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundNotification",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundException",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentSource",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryInterface",
                "de.neemann.digital.draw.library"
            ],
            [
                "ResolveGenerics",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryNode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementTypeDescriptionCustom",
                "de.neemann.digital.draw.library"
            ],
            [
                "InvalidNodeException",
                "de.neemann.digital.draw.library"
            ],
            [
                "NumStringComparator",
                "de.neemann.digital.draw.library"
            ],
            [
                "InputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Interactor",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Drawable",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeBackwardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FuseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DILShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DipSwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LightBulbShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LayoutShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PolarityAwareLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ConstShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BreakShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TextShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegHexShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ProbeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "NotConnectedShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "StepperMotorShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BitSelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericInitCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RectShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "VDDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RAMShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ScopeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DemuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BusSplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullUpShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TestCaseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TunnelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PinControlShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FGFETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TransGateShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ResetShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeForewardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SixteenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "CustomCircuitShapeType",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "InteractorInterface",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeSpecificMatch",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RGBLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RotEncoderShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "IEEEGenericShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEENotShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEAndShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEXOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "ObservableValueReader",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SvgTemplate",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "TransformParser",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "Context",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgException",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgImporter",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "CustomShapeDescription",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "CustomShape",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "FGFETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "OutputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GroundShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "AsyncClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Shape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MissingShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeFactory",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullDownShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DriverShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DataShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DotCreator",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Wire",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Movable",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pins",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Circuit",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Tunnel",
                "de.neemann.digital.draw.elements"
            ],
            [
                "PinException",
                "de.neemann.digital.draw.elements"
            ],
            [
                "ElementOrder",
                "de.neemann.digital.draw.elements"
            ],
            [
                "VisualElement",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pin",
                "de.neemann.digital.draw.elements"
            ],
            [
                "IOState",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireMerger",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireConsistencyChecker",
                "de.neemann.digital.draw.elements"
            ],
            [
                "AsyncSequentialClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelEntry",
                "de.neemann.digital.draw.model"
            ],
            [
                "Net",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelCreator",
                "de.neemann.digital.draw.model"
            ],
            [
                "InverterConfig",
                "de.neemann.digital.draw.model"
            ],
            [
                "NetList",
                "de.neemann.digital.draw.model"
            ],
            [
                "RealTimeClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "Polygon",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Orientation",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Vector",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGSettings",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Transform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorKey",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ExportFactory",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicsImage",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorInterface",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformMatrix",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatLaTeX",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicMinMax",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicTransform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorScheme",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Style",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSkipLines",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "GraphicLineCollector",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "PolygonConverter",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorFloat",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformRotate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Graphic",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleHighContrast",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Parser",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "ParseException",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "PlainTextFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "SVGFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "GraphicsFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "LaTeXFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "Decorate",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Text",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Index",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Sentence",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Blank",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Character",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "ExpressionToText",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Simple",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Export",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleMonochrome",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformTranslate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSwing",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "PolygonParser",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGTokenizer",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GifSequenceWriter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "GifExporter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "ConfigCache",
                "de.neemann.digital.toolchain"
            ],
            [
                "Configuration",
                "de.neemann.digital.toolchain"
            ],
            [
                "Command",
                "de.neemann.digital.toolchain"
            ],
            [
                "FileToCreate",
                "de.neemann.digital.toolchain"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "getMouse",
                "de.neemann.gui",
                "Mouse",
                "/**\n * Returns a mouse event interpreter\n *\n * @return a Mouse interface implementation\n */\nstatic Mouse getMouse() {\n    if (Settings.getInstance().get(Keys.SETTINGS_MAC_MOUSE))\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && !e.isControlDown();\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && e.isControlDown();\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isShiftDown();\n            }\n        };\n    else\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1;\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON3;\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isControlDown();\n            }\n        };\n}"
            ],
            [
                "create",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an icon from a resource\n *\n * @param name name of the resource\n * @return the icon\n */\npublic static Icon create(String name) {\n    return new ImageIcon(createImage(name));\n}"
            ],
            [
                "createImage",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image from a resource\n *\n * @param name name of the resource\n * @return the image\n */\npublic static Image createImage(String name) {\n    try {\n        final float scaling = Screen.getInstance().getScaling();\n        if (scaling == 1) {\n            return getImage(name);\n        } else {\n            BufferedImage image = getImageOrNull(name.substring(0, name.length() - 4) + \"_hi.png\");\n            if (image != null) {\n                int w = (int) (image.getWidth() * scaling / 2);\n                int h = (int) (image.getHeight() * scaling / 2);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            } else {\n                LOGGER.info(\"upscaling of \" + name);\n                image = getImage(name);\n                int w = (int) (image.getWidth() * scaling);\n                int h = (int) (image.getHeight() * scaling);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            }\n        }\n    } catch (IOException e) {\n        throw new RuntimeException(\"Image \" + name + \" not found\", e);\n    }\n}"
            ],
            [
                "createImages",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image list from a resource\n *\n * @param names names of the resource\n * @return the image\n */\npublic static ArrayList<Image> createImages(String... names) {\n    try {\n        ArrayList<Image> list = new ArrayList<Image>(names.length);\n        for (String name : names) {\n            list.add(getImage(name));\n        }\n        return list;\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}"
            ],
            [
                "getCTRLMask",
                "de.neemann.gui",
                "ToolTipAction",
                "/**\n * @return the system specific CTRL mask.\n */\npublic static int getCTRLMask() {\n    int mask = InputEvent.CTRL_DOWN_MASK;\n    if (Screen.isMac())\n        mask = InputEvent.META_DOWN_MASK;\n    return mask;\n}"
            ],
            [
                "checkForSave",
                "de.neemann.gui",
                "ClosingWindowListener",
                "/**\n * Used to check for save! No Window closing is performed!\n *\n * @param parent      the Parent frame\n * @param confirmSave the confirmSafe interface\n * @return true if to proceed\n */\npublic static boolean checkForSave(JFrame parent, ConfirmSave confirmSave) {\n    if (confirmSave.isStateChanged()) {\n        int r = new ConfirmDialogBuilder(SAVE_CHANGES_MESSAGE).setTitle(STATE_CHANGED_MESSAGE).setNoOption(NO_MESSAGE).setYesOption(YES_MESSAGE).setCancleOption(CANCEL_MESSAGE).show(parent);\n        if (r == JOptionPane.YES_OPTION || r == JOptionPane.NO_OPTION) {\n            if (r == JOptionPane.YES_OPTION) {\n                confirmSave.saveChanges();\n                return !confirmSave.isStateChanged();\n            } else\n                return true;\n        } else\n            return false;\n    }\n    return true;\n}"
            ],
            [
                "getParentWindow",
                "de.neemann.gui",
                "ErrorMessage",
                "/**\n * Get the parent window of the given component.\n * If the component is a window this window is returned\n *\n * @param parent the parent component\n * @return the window instance\n */\npublic static Window getParentWindow(Component parent) {\n    if (parent == null)\n        return null;\n    else if (parent instanceof Window)\n        return (Window) parent;\n    else\n        return SwingUtilities.getWindowAncestor(parent);\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the Screen instance\n */\npublic static Screen getInstance() {\n    return InstanceHolder.instance;\n}"
            ],
            [
                "getDefaultFontScaling",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the default font scaling in percent\n */\npublic static int getDefaultFontScaling() {\n    if (// macOS has its own retina handling\n    IS_MAC)\n        return 100;\n    int dpi = getDefaultScreenResolution();\n    int s = (dpi * 100) / 96;\n    if (s > 95 && s < 105)\n        s = 100;\n    return s;\n}"
            ],
            [
                "isLinux",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a windows system\n */\npublic static boolean isLinux() {\n    return IS_LINUX;\n}"
            ],
            [
                "isMac",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a mac\n */\npublic static boolean isMac() {\n    return IS_MAC;\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * @return the singleton instance\n */\npublic static InfoDialog getInstance() {\n    if (instance == null)\n        try {\n            instance = new InfoDialog();\n        } catch (IOException e) {\n            System.out.println(\"error reading InfoDialog \" + e.getMessage());\n        }\n    return instance;\n}"
            ],
            [
                "read",
                "de.neemann.digital.core.memory.importer",
                "Importer",
                "/**\n * Reads the given file to a single data field.\n *\n * @param hexFile   the file to read\n * @param dataBits  the bits used in the data field\n * @param bigEndian uses big endian at import\n * @return the data field\n * @throws IOException IOException\n */\npublic static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException {\n    DataField df = new DataField(1024);\n    read(hexFile, new DataFieldValueArray(df, dataBits), bigEndian);\n    return df;\n}"
            ],
            [
                "getOriginOf",
                "de.neemann.digital.core",
                "ExceptionWithOrigin",
                "/**\n * Returns the file or the files that caused the given exception.\n * If no origin is found null is returned.\n *\n * @param e the exception\n * @return the origin or null;\n */\npublic static String getOriginOf(Throwable e) {\n    while (e != null) {\n        if (e instanceof ExceptionWithOriginInterface) {\n            Set<File> origins = ((ExceptionWithOriginInterface) e).getOrigin();\n            if (origins != null && origins.size() > 0) {\n                StringBuilder sb = new StringBuilder();\n                for (File o : origins) {\n                    if (o != null) {\n                        if (sb.length() > 0)\n                            sb.append(\", \");\n                        sb.append(o.getName());\n                    }\n                }\n                if (sb.length() > 0)\n                    return sb.toString();\n                else\n                    return null;\n            }\n        }\n        e = e.getCause();\n    }\n    return null;\n}"
            ],
            [
                "zMaskString",
                "de.neemann.digital.core",
                "ObservableValue",
                "static String zMaskString(long value, long highZ, int bits) {\n    StringBuilder sb = new StringBuilder();\n    long m = Bits.up(1, bits - 1);\n    for (int i = 0; i < bits; i++) {\n        if ((highZ & m) != 0) {\n            sb.append(\"z\");\n        } else {\n            if ((value & m) != 0) {\n                sb.append(\"1\");\n            } else {\n                sb.append(\"0\");\n            }\n        }\n        m >>>= 1;\n    }\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core",
                "GlobalValues",
                "/**\n * @return returns the global instance\n */\npublic static GlobalValues getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core.io",
                "MIDIHelper",
                "/**\n * @return the MIDIHelper\n */\npublic static MIDIHelper getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new input\n */\npublic static PinInfo input(String name) {\n    return new PinInfo(name, null, Direction.input);\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name        the pins name\n * @param description the pins description\n * @return the new input\n */\npublic static PinInfo input(String name, String description) {\n    return new PinInfo(name, description, Direction.input);\n}"
            ],
            [
                "output",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new output\n */\npublic static PinInfo output(String name) {\n    return new PinInfo(name, null, Direction.output);\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "PinDescription",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "Direction",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "getKeyByName",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Returns the key of the given name.\n * If key does not exist, null is returned.\n *\n * @param name the name of the key\n * @return the key or null\n */\npublic static Key getKeyByName(String name) {\n    return InstanceHolder.INSTANCE.get(name);\n}"
            ],
            [
                "getKeys",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * @return all available keys\n */\npublic static Iterable<Key> getKeys() {\n    return InstanceHolder.INSTANCE.values();\n}"
            ],
            [
                "combine",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "/**\n * Combines two lists\n *\n * @param a   first list\n * @param b   second list\n * @param <T> the Type of the elements\n * @return the new combined list\n */\npublic static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b) {\n    T[] com = Arrays.copyOf(a.items, a.size() + b.size());\n    System.arraycopy(b.items, 0, com, a.size(), b.size());\n    return new ImmutableList<>(com);\n}"
            ],
            [
                "createSwitchModel",
                "de.neemann.digital.core.switching",
                "PlainSwitch",
                "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException {\n    if (input1 instanceof CommonBusValue) {\n        if (input2 instanceof CommonBusValue) {\n            final CommonBusValue in1 = (CommonBusValue) input1;\n            final CommonBusValue in2 = (CommonBusValue) input2;\n            ObservableValue constant = in1.searchConstant();\n            if (constant != null)\n                return new UniDirectionalSwitch(constant, output2);\n            else {\n                constant = in2.searchConstant();\n                if (constant != null)\n                    return new UniDirectionalSwitch(constant, output1);\n                else\n                    return new RealSwitch(in1, output1, in2, output2);\n            }\n        } else\n            return new UniDirectionalSwitch(input1, output2);\n    } else {\n        if (input2 instanceof CommonBusValue) {\n            return new UniDirectionalSwitch(input2, output1);\n        } else {\n            throw new NodeException(Lang.get(\"err_switchHasNoNet\"), output1, output2);\n        }\n    }\n}"
            ],
            [
                "createOneToN",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a one to N splitter\n *\n * @param bits number of outputs\n * @return the splitter\n */\npublic static Splitter createOneToN(int bits) {\n    Ports in = new Ports();\n    in.add(new Port(0, bits));\n    Ports out = new Ports();\n    for (int i = 0; i < bits; i++) out.add(new Port(i, 1));\n    return new Splitter(in, out);\n}"
            ],
            [
                "createNToOne",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a N to one splitter\n *\n * @param bits number of inputs\n * @return the splitter\n */\npublic static Splitter createNToOne(int bits) {\n    Ports in = new Ports();\n    for (int i = 0; i < bits; i++) in.add(new Port(i, 1));\n    Ports out = new Ports();\n    out.add(new Port(0, bits));\n    return new Splitter(in, out);\n}"
            ],
            [
                "ovs",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * Helper to create a {@link ObservableValues} instance\n *\n * @param items the items\n * @return the created instance\n */\npublic static ObservableValues ovs(ObservableValue... items) {\n    return new ObservableValues(items);\n}"
            ],
            [
                "toShortHex",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * Creates a short hex representation of the given value.\n * Use only to represent a value.\n * If confusion is excluded, the prefix '0x' is omitted.\n * Thus 0x1A3 is converted to \"1A3\" which can not be parsed back to a long because \"0x\" is missing.\n *\n * @param value the value\n * @return the hex string\n */\npublic static String toShortHex(long value) {\n    return toShortHex(value, false);\n}"
            ],
            [
                "up",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value up\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long up(long val, int bits) {\n    if (bits < 64)\n        return val << bits;\n    else\n        return 0;\n}"
            ],
            [
                "down",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value down\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long down(long val, int bits) {\n    if (bits < 64)\n        return val >>> bits;\n    else\n        return 0;\n}"
            ],
            [
                "mask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Creates a bit mask with the lowest [bits] bits set.\n *\n * @param bits the number of 1 bits\n * @return a value with the lowest [bits] bits set.\n */\npublic static long mask(int bits) {\n    if (bits < 64)\n        return (1L << bits) - 1;\n    else\n        return -1;\n}"
            ],
            [
                "signedFlagMask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * calculates the signed flag.\n *\n * @param bits the bit count\n * @return the last used bit ( 1<<(bits-1) )\n */\npublic static long signedFlagMask(int bits) {\n    return up(1, bits - 1);\n}"
            ],
            [
                "isNegative",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Returns true if value is negative\n *\n * @param value the value\n * @param bits  the bit count\n * @return true if the last relevant bit is set\n */\npublic static boolean isNegative(long value, int bits) {\n    return (value & signedFlagMask(bits)) != 0;\n}"
            ],
            [
                "signExtend",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Sign extension of the value.\n * signExtend(3,2) returns -1.\n *\n * @param value the value\n * @param bits  number of bits\n * @return the sign extended value\n */\npublic static long signExtend(long value, int bits) {\n    if (bits >= 64)\n        return value;\n    else {\n        if ((value & signedFlagMask(bits)) == 0)\n            return value;\n        else\n            return value | ~mask(bits);\n    }\n}"
            ],
            [
                "binLn2",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Calculates the number of bits needed to store the given value b.\n *\n * @param b number\n * @return number of bits needed to store b\n */\npublic static int binLn2(long b) {\n    int outBits = 1;\n    while ((1L << outBits) <= b) outBits++;\n    return outBits;\n}"
            ],
            [
                "removeBitFromValue",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Removes a bit from a value.\n * This means it shifts the higher bits down. Behaves like removing an item from a list.\n *\n * @param value the value\n * @param bit   the bit to remove\n * @return the new value\n */\npublic static int removeBitFromValue(int value, int bit) {\n    if (bit > 0) {\n        return ((value & (~((1 << (bit + 1)) - 1))) >>> 1) | (value & ((1 << bit) - 1));\n    } else {\n        return value >>> 1;\n    }\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str the string\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str) throws NumberFormatException {\n    return decode(str, false);\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str         the string\n * @param parseFloats if true also floats are parsed\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str, boolean parseFloats) throws NumberFormatException {\n    if (str == null)\n        return 0;\n    str = str.trim();\n    if (str.length() == 0)\n        return 0;\n    if (str.indexOf(':') >= 0)\n        return decodeFixed(str);\n    if (parseFloats && str.indexOf('.') > -1) {\n        try {\n            if (str.endsWith(\"d\") || str.endsWith(\"D\"))\n                return Double.doubleToLongBits(Double.parseDouble(str.substring(0, str.length() - 1)));\n            else\n                return Float.floatToIntBits(Float.parseFloat(str));\n        } catch (java.lang.NumberFormatException e) {\n            throw new NumberFormatException(str, 0);\n        }\n    }\n    int p = 0;\n    boolean neg = false;\n    if (str.charAt(p) == '-') {\n        neg = true;\n        p++;\n    }\n    if (p >= str.length())\n        throw new NumberFormatException(str, p);\n    boolean wasZero = false;\n    while (str.length() > p && str.charAt(p) == '0') {\n        wasZero = true;\n        p++;\n    }\n    if (p >= str.length())\n        return 0;\n    int radix;\n    if (wasZero) {\n        if (neg)\n            throw new NumberFormatException(str, p);\n        switch(str.charAt(p)) {\n            case 'x':\n            case 'X':\n                radix = 16;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            case 'b':\n            case 'B':\n                radix = 2;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            default:\n                radix = 8;\n        }\n    } else {\n        if (str.charAt(p) == '\\'') {\n            if (neg)\n                throw new NumberFormatException(str, p);\n            p++;\n            if (p == str.length())\n                throw new NumberFormatException(str, p);\n            return str.charAt(p);\n        } else\n            radix = 10;\n    }\n    long val = decode(str, p, radix);\n    if (neg)\n        val = -val;\n    return val;\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes the given string starting at position p\n *\n * @param str   the string to decode\n * @param p     the starting position\n * @param radix the radix\n * @return the value\n * @throws NumberFormatException NumberFormatException\n */\npublic static long decode(String str, int p, int radix) throws NumberFormatException {\n    long val = 0;\n    while (p < str.length()) {\n        int d = Character.digit(str.charAt(p), radix);\n        if (d < 0)\n            throw new NumberFormatException(str, p);\n        val = val * radix + d;\n        p++;\n    }\n    return val;\n}"
            ],
            [
                "getCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Extract the code from the attributes.\n * The code is either stored directly or there is a file given.\n *\n * @param attr the attributes\n * @param root the projects main folder\n * @return the code\n * @throws IOException IOException\n */\nstatic String getCode(ElementAttributes attr, File root) throws IOException {\n    if (attr.contains(Keys.EXTERNAL_CODE))\n        return attr.get(Keys.EXTERNAL_CODE);\n    if (attr.contains(Keys.EXTERNAL_CODE_FILE))\n        return readCode(attr.getFile(Keys.EXTERNAL_CODE_FILE, root));\n    return \"\";\n}"
            ],
            [
                "readCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Reads the code from a file\n *\n * @param file the file\n * @return the code\n * @throws IOException IOException\n */\nstatic String readCode(File file) throws IOException {\n    byte[] data = Files.readAllBytes(file.toPath());\n    return new String(data, StandardCharsets.UTF_8);\n}"
            ],
            [
                "create",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Creates a new application instance\n *\n * @param type the type of the process\n * @param attr the elements attributes\n * @return the created process handler\n */\nstatic Application create(Type type, ElementAttributes attr) {\n    switch(type) {\n        case Generic:\n            return new ApplicationGeneric();\n        case GHDL:\n            return new ApplicationGHDL(attr);\n        case IVERILOG:\n            return new ApplicationIVerilog(attr);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "start",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Helper to start a process.\n * If result value is not null an exception is thrown.\n *\n * @param dir  the folder in which the process is started\n * @param args the argument\n * @return the console output\n * @throws IOException IOException\n */\npublic static String start(File dir, String... args) throws IOException {\n    ProcessBuilder pb = new ProcessBuilder(args).redirectErrorStream(true);\n    if (dir != null)\n        pb.directory(dir);\n    Process p;\n    try {\n        p = pb.start();\n    } catch (IOException e) {\n        throw new CouldNotStartProcessException(Lang.get(\"err_couldNotStartProcess_N\", Arrays.toString(args)), e);\n    }\n    ReaderThread rt = new ReaderThread(p.getInputStream());\n    rt.start();\n    try {\n        int exitValue = p.waitFor();\n        rt.join();\n        String output = rt.toString();\n        if (exitValue != 0)\n            throw new IOException(Lang.get(\"err_exitValueNotNull_N_O\", exitValue, output));\n        return output;\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n}"
            ],
            [
                "joinStrings",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Merges the given string.\n * If all strings are null or empty, null is returned\n *\n * @param strings the strings to join\n * @return the joined string or null\n */\npublic static String joinStrings(String... strings) {\n    StringBuilder sb = new StringBuilder();\n    for (String s : strings) {\n        if (s != null) {\n            String str = s.trim();\n            if (str.length() > 0) {\n                if (sb.length() > 0)\n                    sb.append(\"\\n\");\n                sb.append(str);\n            }\n        }\n    }\n    if (sb.length() > 0)\n        return sb.toString();\n    else\n        return null;\n}"
            ],
            [
                "fromString",
                "de.neemann.digital.cli.cli",
                "Argument",
                "/**\n * Creates a value from a string\n *\n * @param val      the value as a string\n * @param defValue the default value\n * @return the value converted to the type of the default value\n * @throws CLIException CLIException\n */\npublic static Object fromString(String val, Object defValue) throws CLIException {\n    if (defValue instanceof String)\n        return val;\n    else if (defValue instanceof Boolean)\n        switch(val.toLowerCase()) {\n            case \"yes\":\n            case \"1\":\n            case \"true\":\n                return true;\n            case \"no\":\n            case \"0\":\n            case \"false\":\n                return false;\n            default:\n                throw new CLIException(Lang.get(\"cli_notABool_N\", val), 106);\n        }\n    else if (defValue instanceof Integer) {\n        try {\n            return Integer.parseInt(val);\n        } catch (NumberFormatException e) {\n            throw new CLIException(Lang.get(\"cli_notANumber_N\", val), e);\n        }\n    } else\n        throw new CLIException(Lang.get(\"cli_invalidType_N\", defValue.getClass().getSimpleName()), 203);\n}"
            ],
            [
                "fac",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the factorial of a number.\n * If the result is greater as the max long value, the max value is returned.\n *\n * @param n integer\n * @return the factorial of the given number\n */\npublic static long fac(int n) {\n    if (n > 20)\n        return Long.MAX_VALUE;\n    return FAC_TABLE[n];\n}"
            ],
            [
                "getTimeComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the time complexity of optimizing the given fsm\n *\n * @param fsm the fsm\n * @return the time complexity\n */\npublic static long getTimeComplexity(FSM fsm) {\n    List<State> states = fsm.getStates();\n    int size = states.size();\n    int sizeInclDC = 1 << Bits.binLn2(size - 1);\n    if (sizeInclDC > 20)\n        return Long.MAX_VALUE;\n    return fac(sizeInclDC) / fac(sizeInclDC - size);\n}"
            ],
            [
                "calcComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException {\n    TruthTable tt = fsm.createTruthTable(null);\n    MinimizerInterface mi = new MinimizerQuineMcCluskey();\n    ComplexityListener listener = new ComplexityListener(out);\n    for (int i = 0; i < tt.getResultCount(); i++) mi.minimize(tt.getVars(), tt.getResult(i), tt.getResultName(i), listener);\n    return listener.complexity;\n}"
            ],
            [
                "blink",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Blink\n *\n * @return the fsm\n */\npublic static FSM blink() {\n    State off = new State(\"off\");\n    State on = new State(\"on\");\n    return new FSM(off, on).transition(on, off, null).transition(off, on, null);\n}"
            ],
            [
                "rotDecoder",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a debounced rotary switch decoder\n *\n * @return the fsm\n */\npublic static FSM rotDecoder() {\n    State init = new State(\"init\");\n    State top = new State(\"top\");\n    State topSetLeft = new State(\"topSetLeft\").setValues(\"L=1\");\n    State topSetRight = new State(\"topSetRight\").setValues(\"R=1\");\n    State leftTop = new State(\"leftTop\");\n    State leftBottom = new State(\"leftBottom\");\n    State bottom = new State(\"bottom\");\n    State bottomSetLeft = new State(\"bottomSetRight\").setValues(\"R=1\");\n    State bottomSetRight = new State(\"bottomSetLeft\").setValues(\"L=1\");\n    State rightTop = new State(\"rightTop\");\n    State rightBottom = new State(\"rightBottom\");\n    return new FSM(init, top, topSetLeft, leftTop, leftBottom, bottomSetLeft, bottom, bottomSetRight, rightBottom, rightTop, topSetRight).transition(init, top, \"A=0 & B=0\").transition(init, bottom, \"A=1 & B=1\").transition(top, leftTop, \"A=1 & B=0\").transition(top, rightTop, \"A=0 & B=1\").transition(topSetLeft, top, null).transition(topSetRight, top, null).transition(rightTop, top, \"A=0 & B=0\").transition(rightBottom, topSetRight, \"A=0 & B=0\").transition(leftTop, top, \"A=0 & B=0\").transition(leftBottom, topSetLeft, \"A=0 & B=0\").transition(bottom, leftBottom, \"A=1 & B=0\").transition(bottom, rightBottom, \"A=0 & B=1\").transition(bottomSetLeft, bottom, null).transition(bottomSetRight, bottom, null).transition(rightBottom, bottom, \"A=1 & B=1\").transition(rightTop, bottomSetRight, \"A=1 & B=1\").transition(leftBottom, bottom, \"A=1 & B=1\").transition(leftTop, bottomSetLeft, \"A=1 & B=1\");\n}"
            ],
            [
                "counter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a counter\n *\n * @param n the number of states\n * @return the fsm\n */\npublic static FSM counter(int n) {\n    FSM fsm = new FSM();\n    State last = null;\n    for (int i = 0; i < n; i++) {\n        State s = new State(\"\").setNumber(i);\n        fsm.add(s);\n        if (last != null)\n            fsm.transition(last, s, null);\n        last = s;\n    }\n    fsm.transition(last, fsm.getStates().get(0), null);\n    return fsm;\n}"
            ],
            [
                "trafficLight",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLight() {\n    State red = new State(\"red\").setNumber(0).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(1).setValues(\"R=1,Y=1\");\n    State green = new State(\"green\").setNumber(2).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(3).setValues(\"Y=1\");\n    return new FSM(red, redYellow, green, yellow).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "trafficLightMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLightMedwedew() {\n    State init = new State(\"init\").setNumber(0);\n    State red = new State(\"red\").setNumber(1).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(3).setValues(\"R=1, Y=1\");\n    State green = new State(\"green\").setNumber(4).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(2).setValues(\"Y=1\");\n    return new FSM(init, red, redYellow, green, yellow).transition(init, red, null).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "selCounter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM selCounter() {\n    State s0 = new State(\"s0\").setNumber(0);\n    State s1 = new State(\"s1\").setNumber(1);\n    State s2 = new State(\"s2\").setNumber(2);\n    State s3 = new State(\"s3\").setNumber(3);\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, null).transition(s0, s0, \"!T0  !T1\").transition(s1, s2, null).transition(s1, s0, \"T0 !T1\").transition(s2, s3, null).transition(s2, s0, \"!T0 T1\").transition(s3, s0, null);\n}"
            ],
            [
                "stepper",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepper() {\n    State s0 = new State(\"s0\").setNumber(0).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(1).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(2).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(3).setValues(\"P3=1,P0=1\");\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "stepperMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepperMedwedew() {\n    State init = new State(\"init\").setNumber(0).setValues(\"P0=2,P1=2,P2=2,P3=2\");\n    State s0 = new State(\"s0\").setNumber(3).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(6).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(12).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(9).setValues(\"P3=1,P0=1\");\n    return new FSM(init, s0, s1, s2, s3).transition(init, s0, null).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"fsm\", FSM.class);\n    xStream.alias(\"state\", State.class);\n    xStream.alias(\"transition\", Transition.class);\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"vectorf\", VectorFloat.class);\n    xStream.aliasAttribute(VectorFloat.class, \"x\", \"x\");\n    xStream.aliasAttribute(VectorFloat.class, \"y\", \"y\");\n    return xStream;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename filename\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(File filename) throws IOException {\n    final FSM fsm = loadFSM(new FileInputStream(filename));\n    fsm.file = filename;\n    return fsm;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new fsm instance from a stored file\n *\n * @param in the input stream\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        final FSM fsm = (FSM) xStream.fromXML(in);\n        for (Transition t : fsm.transitions) t.setFSM(fsm);\n        for (State s : fsm.states) s.setFSM(fsm);\n        fsm.modified = false;\n        fsm.activeStateTransition = -1;\n        return fsm;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "get",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string of key if no translation present\n */\npublic static String get(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKey(key, params);\n}"
            ],
            [
                "getNull",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string or null if no translation present\n */\npublic static String getNull(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKeyNull(key, params);\n}"
            ],
            [
                "getBundle",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the resource bundle\n */\npublic static Bundle getBundle() {\n    return InstanceHolder.INSTANCE.bundle;\n}"
            ],
            [
                "currentLanguage",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the current language\n */\npublic static Language currentLanguage() {\n    return InstanceHolder.INSTANCE.currentLanguage;\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * Resolves a multilingual user defined string.\n * Allows the user to define multilingual content by using a simple syntax:\n * You can enter strings like \"Word! {{de Welt!}} {{fr Monde!}}\". This method extracts\n * the appropriate string for the current language.\n *\n * @param text the complete text description\n * @return the evaluated text.\n */\npublic static String evalMultilingualContent(String text) {\n    return evalMultilingualContent(text, currentLanguage());\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "static String evalMultilingualContent(String text, Language currentLanguage) {\n    int pos = text.indexOf(\"{{\");\n    if (pos < 0)\n        return text;\n    String def = text.substring(0, pos).trim();\n    do {\n        int p2 = pos + 1;\n        int count = 1;\n        while (count > 0) {\n            char c = text.charAt(p2);\n            if (c == '{')\n                count++;\n            else if (c == '}')\n                count--;\n            p2++;\n            if (p2 == text.length() && count > 0) {\n                p2 = 1;\n                break;\n            }\n        }\n        p2 -= 2;\n        if (p2 > pos + 3) {\n            String l = text.substring(pos + 2, pos + 4);\n            if (l.equalsIgnoreCase(currentLanguage.getName()))\n                return text.substring(pos + 4, p2).trim();\n            if (l.equalsIgnoreCase(\"en\") && def.isEmpty())\n                def = text.substring(pos + 4, p2).trim();\n            pos = text.indexOf(\"{{\", p2);\n        } else\n            return def;\n    } while (pos > 0);\n    return def;\n}"
            ],
            [
                "lowest",
                "de.neemann.digital.testing.parser",
                "OperatorPrecedence",
                "/**\n * @return the lowest operator precedence to start evaluation with\n */\npublic static OperatorPrecedence lowest() {\n    return OR;\n}"
            ],
            [
                "addOne",
                "de.neemann.digital.analyse",
                "ModelAnalyser",
                "/**\n * Adds the \"+1\" to the variables name\n *\n * @param name the vars name\n * @return the modified name\n */\npublic static String addOne(String name) {\n    if (name.endsWith(\"^n\"))\n        return name.substring(0, name.length() - 1) + \"{n+1}\";\n    else\n        return name + \"+1\";\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param file the file\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(File file) throws IOException {\n    return readCSV(new FileReader(file));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the string to read\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(String csv) throws IOException {\n    return readCSV(new StringReader(csv));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the reader\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(Reader csv) throws IOException {\n    BufferedReader r = new BufferedReader(csv);\n    TruthTable tt = readHeader(r);\n    while (true) {\n        String line = r.readLine();\n        if (line == null)\n            return tt;\n        line = line.trim();\n        if (!line.isEmpty())\n            parseLine(tt, line);\n    }\n}"
            ],
            [
                "createDoubledValues",
                "de.neemann.digital.analyse.quinemc",
                "BoolTableByteArray",
                "/**\n * Creates a table where all values added twive\n *\n * @param values the original values\n * @return the new values\n */\npublic static BoolTableByteArray createDoubledValues(BoolTable values) {\n    BoolTableByteArray t = new BoolTableByteArray(values.size() * 2);\n    for (int i = 0; i < values.size(); i++) {\n        int v = values.get(i).asInt();\n        t.set(i * 2, v);\n        t.set(i * 2 + 1, v);\n    }\n    return t;\n}"
            ],
            [
                "simplify",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Simplifies the given expression.\n * If no simplification was found, the original expression is returned unchanged.\n *\n * @param expression the expression to simplify\n * @return the simplified expression\n * @throws ExpressionException ExpressionException\n */\npublic static Expression simplify(Expression expression) throws ExpressionException {\n    int initialCplx = expression.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    Expression newExp = new QuineMcCluskey(expression).simplify().getExpression();\n    int newCplx = newExp.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    if (newCplx < initialCplx)\n        return newExp;\n    else\n        return expression;\n}"
            ],
            [
                "addAnd",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Creates the final expression\n *\n * @param e         the expression to complete\n * @param rows      the rows to add\n * @param variables the variables to use to build the expression\n * @return the expression\n */\npublic static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables) {\n    for (TableRow r : rows) {\n        Expression n = r.getExpression(variables);\n        if (e == null)\n            e = n;\n        else\n            e = or(e, n);\n    }\n    return e;\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from a bool\n *\n * @param bool the bool\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(boolean bool) {\n    if (bool) {\n        return one;\n    } else {\n        return zero;\n    }\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from an int\n * 0 and 1 work as expected, any other value means \"dont care\"\n *\n * @param value the value\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(int value) {\n    switch(value) {\n        case 0:\n            return ThreeStateValue.zero;\n        case 1:\n            return ThreeStateValue.one;\n        default:\n            return ThreeStateValue.dontCare;\n    }\n}"
            ],
            [
                "doImplicitTypeCasts",
                "de.neemann.digital.analyse",
                "SubstituteLibrary",
                "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val) {\n    if (expectedClass == Integer.class && val instanceof Long) {\n        long l = (Long) val;\n        if (l <= Integer.MAX_VALUE && l >= Integer.MIN_VALUE)\n            return (int) l;\n    } else if (expectedClass == Long.class && val instanceof Number) {\n        return ((Number) val).longValue();\n    } else if (expectedClass == Color.class && val instanceof Number) {\n        return new Color(((Number) val).intValue());\n    } else if (expectedClass == Boolean.class && val instanceof Number) {\n        long b = ((Number) val).longValue();\n        return b != 0;\n    } else if (expectedClass == InValue.class) {\n        if (val instanceof Number)\n            return new InValue(((Number) val).longValue());\n        else {\n            try {\n                return new InValue(val.toString());\n            } catch (Bits.NumberFormatException e) {\n                return val;\n            }\n        }\n    } else if (expectedClass == InverterConfig.class && val instanceof java.util.List) {\n        InverterConfig.Builder b = new InverterConfig.Builder();\n        for (Object i : (java.util.List) val) b.add(i.toString());\n        return b.build();\n    } else if (expectedClass == DataField.class && val instanceof java.util.List) {\n        java.util.List list = (java.util.List) val;\n        long[] longs = new long[list.size()];\n        for (int i = 0; i < list.size(); i++) if (list.get(i) instanceof Number)\n            longs[i] = ((Number) list.get(i)).longValue();\n        else\n            return val;\n        return new DataField(longs);\n    } else if (expectedClass == Rotation.class && val instanceof Number) {\n        int r = ((Number) val).intValue();\n        return new Rotation(r % 4);\n    } else if (expectedClass == File.class && val instanceof String) {\n        return new File(val.toString());\n    } else if (expectedClass == TestCaseDescription.class && val instanceof String) {\n        try {\n            return new TestCaseDescription(val.toString());\n        } catch (Exception e) {\n            return val;\n        }\n    } else if (expectedClass.isEnum() && val instanceof Number) {\n        Class<Enum<?>> e = (Class<Enum<?>>) expectedClass;\n        Object[] values = e.getEnumConstants();\n        int index = ((Number) val).intValue();\n        if (index < 0 || index >= values.length)\n            return values[0];\n        else\n            return values[index];\n    }\n    return val;\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Iterable<Expression> exp) {\n    return simplify(new Or(exp, true));\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), true));\n}"
            ],
            [
                "xor",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new XOR expression\n *\n * @param a the expression to XOR\n * @param b the expression to XOR\n * @return the created expression\n */\npublic static Expression xor(Expression a, Expression b) {\n    if (b == Constant.ONE) {\n        return Not.not(a);\n    } else if (b == Constant.ZERO) {\n        return a;\n    } else if (a == Constant.ONE) {\n        return Not.not(b);\n    } else if (a == Constant.ZERO) {\n        return b;\n    } else\n        return simplify(new XOr(a, b));\n}"
            ],
            [
                "orNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression orNoMerge(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), false));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Iterable<Expression> exp) {\n    return simplify(new And(exp, true));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), true));\n}"
            ],
            [
                "andNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression andNoMerge(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), false));\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifier\n *\n * @param expression the expression to modify\n * @param modifier   the modifier to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier modifier) {\n    expression.modify(modifier);\n    return modifier.modify(expression);\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifiers\n *\n * @param expression the expression to modify\n * @param modifiers  the modifiers to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier... modifiers) {\n    for (ExpressionModifier m : modifiers) expression = modifyExpression(expression, m);\n    return expression;\n}"
            ],
            [
                "v",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates a new Variable\n *\n * @param name the variables name\n * @return the new Variable\n */\npublic static Variable v(String name) {\n    return new Variable(name);\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates an array of variables\n *\n * @param n the number of varfiables to create.\n * @return variables named \"A0\", \"A1\", \"A2\" and so on\n */\npublic static ArrayList<Variable> vars(int n) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (int i = 0; i < n; i++) v.add(new Variable(\"\" + (char) ('A' + i)));\n    return v;\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Create a list of variables using the given names\n *\n * @param names the names used to create the variables\n * @return the list of variables\n */\npublic static ArrayList<Variable> vars(String... names) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (String n : names) v.add(new Variable(n));\n    return v;\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable.\n */\npublic static boolean isVar(Expression e) {\n    return e instanceof Variable;\n}"
            ],
            [
                "isVarOrNotVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable or a inverted variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable or a inverted variable.\n */\npublic static boolean isVarOrNotVar(Expression e) {\n    return isVar(e) || (e instanceof Not && isVar(((Not) e).getExpression()));\n}"
            ],
            [
                "getDefaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * @return the default format\n */\npublic static FormatToExpression getDefaultFormat() {\n    return Settings.getInstance().get(Keys.SETTINGS_EXPRESSION_FORMAT);\n}"
            ],
            [
                "defaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * Formats a expression to a string.\n * Uses the default format for presentation on the screen.\n *\n * @param exp the expression to format\n * @return the string representation\n */\npublic static String defaultFormat(Expression exp) {\n    return getDefaultFormat().format(exp);\n}"
            ],
            [
                "not",
                "de.neemann.digital.analyse.expression",
                "Not",
                "/**\n * Creates a not expression.\n * Simplifies the expression if possible.\n *\n * @param a the child expression to invert\n * @return the inverted expression\n */\npublic static Expression not(Expression a) {\n    if (a == Constant.ONE)\n        return Constant.ZERO;\n    if (a == Constant.ZERO)\n        return Constant.ONE;\n    if (a instanceof Not && !((Not) a).protect) {\n        return ((Not) a).expression;\n    } else\n        return new Not(a);\n}"
            ],
            [
                "readFromFile",
                "de.neemann.digital.analyse",
                "TruthTable",
                "/**\n * Load the given file and returns a truth table instance\n *\n * @param filename filename\n * @return the {@link TruthTable}\n * @throws IOException IOException\n */\npublic static TruthTable readFromFile(File filename) throws IOException {\n    if (filename.getName().toLowerCase().endsWith(\".csv\"))\n        return CSVImporter.readCSV(filename);\n    else {\n        XStream xStream = getxStream();\n        try (InputStream in = new FileInputStream(filename)) {\n            return (TruthTable) xStream.fromXML(in);\n        }\n    }\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param s the signal\n * @return the port pins used\n */\npublic static SplitPinString create(Signal s) {\n    if (s.missingPinNumber())\n        return EMPTY;\n    return create(s.getPinNumber());\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param pinStr the pins definition;\n * @return the port pins used\n */\npublic static SplitPinString create(String pinStr) {\n    if (pinStr == null || pinStr.trim().length() == 0)\n        return EMPTY;\n    StringTokenizer st = new StringTokenizer(pinStr, \",;\");\n    ArrayList<String> pins = new ArrayList<>();\n    while (st.hasMoreTokens()) pins.add(st.nextToken().trim());\n    return new PinsArray(pins);\n}"
            ],
            [
                "checkSuffix",
                "de.neemann.digital.gui",
                "SaveAsHelper",
                "/**\n * Adds the given suffix to the file\n *\n * @param filename filename\n * @param suffix   suffix\n * @return the file name with the given suffix\n */\npublic static File checkSuffix(File filename, String suffix) {\n    if (suffix == null || filename == null)\n        return filename;\n    String name = filename.getName();\n    int p = name.lastIndexOf('.');\n    if (p >= 0) {\n        String suf = name.substring(p + 1).toLowerCase();\n        if (KNOWN.contains(suf))\n            name = name.substring(0, p);\n        while (name.length() > 0 && name.charAt(name.length() - 1) == '.') name = name.substring(0, name.length() - 1);\n    }\n    return new File(filename.getParentFile(), name + \".\" + suffix);\n}"
            ],
            [
                "addF1Traversal",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Adds F1 as a focus traversal key to a text components.\n *\n * @param text The text component\n * @param <TC> the concrete type of the text component\n * @return the given text component\n */\npublic static <TC extends JTextComponent> TC addF1Traversal(TC text) {\n    HashSet<AWTKeyStroke> set = new HashSet<>(text.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n    set.add(KeyStroke.getKeyStroke(\"F1\"));\n    text.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, set);\n    return text;\n}"
            ],
            [
                "createUndoManager",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Enables undo in the given text component.\n *\n * @param text the text component\n * @return the undo manager\n */\npublic static UndoManager createUndoManager(JTextComponent text) {\n    final UndoManager undoManager;\n    undoManager = new UndoManager();\n    text.getDocument().addUndoableEditListener(undoManager);\n    text.addKeyListener(new KeyAdapter() {\n\n        @Override\n        public void keyPressed(KeyEvent e) {\n            if (e.getKeyCode() == KeyEvent.VK_Z && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canUndo())\n                    undoManager.undo();\n            } else if (e.getKeyCode() == KeyEvent.VK_Y && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canRedo())\n                    undoManager.redo();\n            }\n        }\n    });\n    return undoManager;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components.modification",
                "ModifyInsertWires",
                "/**\n * Creates a simplified modification.\n *\n * @param newWires the wires to insert\n * @return the modification\n */\npublic static Modification<Circuit> create(List<Wire> newWires) {\n    switch(newWires.size()) {\n        case 0:\n            return null;\n        case 1:\n            return new ModifyInsertWire(newWires.get(0));\n        default:\n            return new ModifyInsertWires(newWires);\n    }\n}"
            ],
            [
                "getToolTipName",
                "de.neemann.digital.gui.components.modification",
                "ModificationOfVisualElement",
                "/**\n * Creates a translated name of the given element\n *\n * @param ve the element\n * @return translated name\n */\npublic static String getToolTipName(VisualElement ve) {\n    String s = Lang.getNull(\"elem_\" + ve.getElementName());\n    if (s == null) {\n        s = ve.getElementName();\n        if (s.endsWith(\".dig\"))\n            s = s.substring(0, s.length() - 4);\n    }\n    String l = ve.getElementAttributes().get(Keys.LABEL);\n    if (l.length() > 0)\n        s += \" (\" + l + \")\";\n    return s;\n}"
            ],
            [
                "getTerminal",
                "de.neemann.digital.gui.components.terminal",
                "TerminalDialog",
                "/**\n * Creates a new GUI terminal\n *\n * @param model the model\n * @param attr  the terminals attributes\n * @return the terminal interface\n */\nstatic TerminalInterface getTerminal(Model model, ElementAttributes attr) {\n    return new MyTerminal(model, attr);\n}"
            ],
            [
                "createList",
                "de.neemann.digital.gui.components",
                "CircuitTransferable",
                "/**\n * Creates a list of objects from inserted data\n * Can also throw a {@link ClassCastException}!\n *\n * @param data         the inserted data\n * @param shapeFactory the shapeFactory to set to the elements\n * @return the elements or null\n * @throws IOException IOException\n */\npublic static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException {\n    if (!(data instanceof String))\n        return null;\n    XStream xStream = Circuit.getxStream();\n    try (Reader in = new StringReader(data.toString())) {\n        ArrayList<Movable> elements = (ArrayList<Movable>) xStream.fromXML(in);\n        if (elements == null)\n            return null;\n        for (Movable m : elements) if (m instanceof VisualElement)\n            ((VisualElement) m).setShapeFactory(shapeFactory);\n        return elements;\n    }\n}"
            ],
            [
                "createURLStreamHandlerFactory",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "/**\n * @return factory which catches 'image' protocol requests to deliver images via an URL.\n */\npublic static URLStreamHandlerFactory createURLStreamHandlerFactory() {\n    return new MyURLStreamHandlerFactory();\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "MyURLStreamHandlerFactory",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "isSequentialVar",
                "de.neemann.digital.gui.components.table",
                "ExpressionListenerJK",
                "/**\n * If the name belongs to a sequential state var, the state vars name is returned.\n * Otherwise a null is returned\n *\n * @param name the name of the variable\n * @return the state variable or null\n */\npublic static String isSequentialVar(String name) {\n    String detName = null;\n    if (name.endsWith(\"n+1\")) {\n        detName = name.substring(0, name.length() - 2);\n    } else if (name.endsWith(\"{n+1}\")) {\n        detName = name.substring(0, name.length() - 5) + \"n\";\n    }\n    return detName;\n}"
            ],
            [
                "getAttrList",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * @return returns the list of circuit attributes\n */\npublic static ArrayList<Key> getAttrList() {\n    return ATTR_LIST;\n}"
            ],
            [
                "raster",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * rounds the given vector to the raster\n *\n * @param pos the vector\n * @return pos round to raster\n */\npublic static Vector raster(Vector pos) {\n    return new Vector((int) Math.round((double) pos.x / SIZE) * SIZE, (int) Math.round((double) pos.y / SIZE) * SIZE);\n}"
            ],
            [
                "createLiveDialog",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "/**\n * Creates a instance prepared for \"live logging\"\n *\n * @param owner      the parent frame\n * @param model      the model\n * @param microStep  stepping mode\n * @param ordering   the ordering to use\n * @param sampleSize the number of samples\n * @return the created instance\n */\npublic static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize) {\n    String title;\n    if (microStep)\n        title = Lang.get(\"win_measures_microstep\");\n    else\n        title = Lang.get(\"win_measures_fullstep\");\n    ArrayList<Signal> signals = model.getSignalsCopy();\n    signals.removeIf(signal -> !signal.isShowInGraph());\n    new OrderMerger<String, Signal>(ordering) {\n\n        @Override\n        public boolean equals(Signal a, String b) {\n            return a.getName().equals(b);\n        }\n    }.order(signals);\n    ValueTableObserver valueTableObserver = new ValueTableObserver(microStep, signals, sampleSize);\n    GraphDialog graphDialog = new GraphDialog(owner, title, valueTableObserver.getLogData(), model, true).setColumnInfo(createColumnsInfo(signals));\n    graphDialog.addWindowListener(new WindowAdapter() {\n\n        @Override\n        public void windowOpened(WindowEvent e) {\n            model.addObserver(valueTableObserver);\n        }\n\n        @Override\n        public void windowClosed(WindowEvent e) {\n            model.removeObserver(valueTableObserver);\n        }\n    });\n    return graphDialog;\n}"
            ],
            [
                "createColumnsInfo",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals) {\n    ValueTable.ColumnInfo[] info = new ValueTable.ColumnInfo[signals.size()];\n    for (int i = 0; i < signals.size(); i++) {\n        Signal s = signals.get(i);\n        info[i] = new ValueTable.ColumnInfo(s.getFormat(), s.getValue().getBits());\n    }\n    return info;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "isExperimentalMode",
                "de.neemann.digital.gui",
                "Main",
                "/**\n * @return true if experimental features are enabled\n */\npublic static boolean isExperimentalMode() {\n    return experimental;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "WindowManager",
                "/**\n * @return the WindowManager\n */\npublic static WindowManager getInstance() {\n    return InstanceHolderClass.INSTANCE;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "Settings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static Settings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "getRange",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog bit range\n *\n * @param bits the number of bits\n * @return the bit range\n */\npublic static String getRange(int bits) {\n    if (bits == 1)\n        return \"\";\n    else\n        return \"[\" + (bits - 1) + \":0]\";\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog type for a signal\n *\n * @param def  the signal type (input or output) used if dir is not \"inout\"\n * @param dir  used to check if direction is \"inout\"\n * @param bits the number of bits\n * @return the verilog signal type\n */\npublic static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits) {\n    String result;\n    if (dir == HDLPort.Direction.INOUT)\n        result = \"inout\";\n    else\n        result = (def == HDLPort.Direction.IN) ? \"input\" : \"output\";\n    if (bits > 1) {\n        result += \" [\" + (bits - 1) + \":0]\";\n    }\n    return result;\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    return (bits + \"'b\" + s);\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.verilog2.lib",
                "VerilogTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given\n * element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(MODULE_PREFIX + elementName);\n}"
            ],
            [
                "createFromJar",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n *\n * @param path the path of the file to load\n * @param cl   the classloader used to load the template. If set to null, the SystemClassLoader is used\n * @return the statement\n * @throws IOException     IOException\n * @throws ParserException ParserException\n */\npublic static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException {\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    InputStream in = cl.getResourceAsStream(path);\n    if (in == null)\n        throw new FileNotFoundException(\"file not found: \" + path);\n    try (Reader r = new InputStreamReader(in, StandardCharsets.UTF_8)) {\n        Parser p = new Parser(r, path);\n        return p.parse();\n    }\n}"
            ],
            [
                "createFromJarStatic",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n * Throws only a RuntimeException so use with care!\n *\n * @param path the path of the file to load\n * @return the statement\n */\npublic static Statement createFromJarStatic(String path) {\n    try {\n        return createFromJar(path, null);\n    } catch (IOException | ParserException e) {\n        throw new RuntimeException(\"could not parse: \" + path, e);\n    }\n}"
            ],
            [
                "isWhiteSpace",
                "de.neemann.digital.hdl.hgs",
                "Tokenizer",
                "/**\n * Returns true if the given character is a white space.\n *\n * @param c the character to test\n * @return true in c is a white space\n */\npublic static boolean isWhiteSpace(int c) {\n    return c == ' ' || c == '\\t' || c == '\\n' || c == '\\r';\n}"
            ],
            [
                "toLong",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a long\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static long toLong(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toDouble",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a double\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static double toDouble(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).doubleValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toInt",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an int\n *\n * @param value the value to convert\n * @return the int value\n * @throws HGSEvalException HGSEvalException\n */\npublic static int toInt(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).intValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toBool",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a bool\n *\n * @param value the value to convert\n * @return the bool value\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean toBool(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue() != 0;\n    if (value instanceof Boolean)\n        return ((Boolean) value);\n    throw new HGSEvalException(\"Must be an integer or a bool, is: \" + value.getClass().getSimpleName() + \"=\" + value);\n}"
            ],
            [
                "toString",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a string\n *\n * @param value the value to convert\n * @return the string\n * @throws HGSEvalException HGSEvalException\n */\npublic static String toString(Object value) throws HGSEvalException {\n    if (value instanceof String)\n        return value.toString();\n    throw new HGSEvalException(\"must be a string, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toArray",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an array\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSArray toArray(Object value) throws HGSEvalException {\n    if (value instanceof HGSArray)\n        return (HGSArray) value;\n    if (value instanceof List)\n        return new HGSArrayList((List) value);\n    throw new HGSEvalException(\"must be an array, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toMap",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a map\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSMap toMap(Object value) throws HGSEvalException {\n    if (value instanceof HGSMap)\n        return (HGSMap) value;\n    if (value instanceof Map)\n        return new HGSMapMap((Map) value);\n    throw new HGSEvalException(\"must be a map, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "equals",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Compares two values\n *\n * @param a a value\n * @param b a value\n * @return true if both values are equal\n */\npublic static boolean equals(Object a, Object b) {\n    if (a instanceof Double || b instanceof Double)\n        return a.equals(b);\n    else if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() == ((Number) b).longValue();\n    else if (a instanceof String || b instanceof String)\n        return a.toString().equals(b.toString());\n    else\n        return a.equals(b);\n}"
            ],
            [
                "add",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Adds two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object add(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) + toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() + ((Number) b).longValue();\n    if (a instanceof String || b instanceof String)\n        return a.toString() + b.toString();\n    throw new HGSEvalException(\"arguments must be int or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "sub",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Subtracts two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object sub(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) - toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() - ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "mul",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Multiplies two values\n *\n * @param a a value\n * @param b a value\n * @return the product\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object mul(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) * toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() * ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "div",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Divides two numbers\n *\n * @param a a value\n * @param b a value\n * @return the quotient\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object div(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) / toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() / ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "or",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an or operation\n *\n * @param a a value\n * @param b a value\n * @return the or'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object or(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() | ((Number) b).longValue();\n    return toBool(a) || toBool(b);\n}"
            ],
            [
                "xor",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an xor operation\n *\n * @param a a value\n * @param b a value\n * @return the xor'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object xor(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() ^ ((Number) b).longValue();\n    return toBool(a) ^ toBool(b);\n}"
            ],
            [
                "and",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an and operation\n *\n * @param a a value\n * @param b a value\n * @return the and'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object and(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() & ((Number) b).longValue();\n    return toBool(a) && toBool(b);\n}"
            ],
            [
                "not",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs a not operation\n *\n * @param value a value\n * @return the inverted value\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object not(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ~((Number) value).longValue();\n    return !toBool(value);\n}"
            ],
            [
                "neg",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Changes the sign of the given value\n *\n * @param value the value\n * @return value with changed sign\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object neg(Object value) throws HGSEvalException {\n    if (value instanceof Double)\n        return -(Double) value;\n    return -toLong(value);\n}"
            ],
            [
                "less",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a&lt;b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean less(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) < toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) < toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) < 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "lessEqual",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a<=b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean lessEqual(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) <= toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) <= toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) <= 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "trimRight",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the right side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimRight(String str) {\n    int initial = str.length() - 1;\n    int pos = initial;\n    while (pos >= 0 && isWhiteSpace(str.charAt(pos))) pos--;\n    if (pos == initial)\n        return str;\n    else\n        return str.substring(0, pos + 1);\n}"
            ],
            [
                "trimLeft",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the left side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimLeft(String str) {\n    int pos = 0;\n    while (pos < str.length() && isWhiteSpace(str.charAt(pos))) pos++;\n    if (pos == 0)\n        return str;\n    else\n        return str.substring(pos);\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Returns the vhdl type name\n *\n * @param bits the number of bits\n * @return the types name\n */\npublic static String getType(int bits) {\n    if (bits == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector(\" + (bits - 1) + \" downto 0)\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    int missing = bits - s.length();\n    if (missing > 0)\n        s = ZEROS.substring(0, missing) + s;\n    if (bits > 1)\n        s = \"\\\"\" + s + \"\\\"\";\n    else\n        s = \"'\" + s + \"'\";\n    return s;\n}"
            ],
            [
                "isTemplate",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Returns true, if a hdl template is available.\n *\n * @param etd the {@link ElementTypeDescription}\n * @return true if VHDL template is available\n */\npublic static boolean isTemplate(ElementTypeDescription etd) {\n    ClassLoader cl = etd.getClassLoader();\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    URL url = cl.getResource(createFileName(ENTITY_PREFIX + etd.getName()));\n    return url != null;\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(ENTITY_PREFIX + elementName);\n}"
            ],
            [
                "zero",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Create a vhdl zero with the given bit number\n *\n * @param bits the bit number\n * @return '0' or (others => '0')\n */\npublic static String zero(long bits) {\n    if (bits == 1)\n        return \"'0'\";\n    else\n        return \"(others => '0')\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, long bits) {\n    return VHDLCreator.value(val, (int) bits);\n}"
            ],
            [
                "genericType",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates the code for a generic type\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String genericType(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector ((Bits-1) downto 0)\";\n}"
            ],
            [
                "type",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a type of given width\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String type(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector (\" + (n - 1) + \" downto 0)\";\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.hdl.model2.expression",
                "Expression",
                "/**\n * Helper to check if an expression is a net reference\n *\n * @param expr the expression to check\n * @param net  the net\n * @return true if the expression is a reference to the given net\n */\nstatic boolean isVar(Expression expr, HDLNet net) {\n    return expr instanceof ExprVar && ((ExprVar) expr).getNet() == net;\n}"
            ],
            [
                "isConstant",
                "de.neemann.digital.hdl.model2.expression",
                "ExprConstant",
                "/**\n * Returns the constant if th given node represents a constant\n *\n * @param node the node\n * @return the constant of null if node is not a constant\n */\npublic static ExprConstant isConstant(HDLNode node) {\n    if (node instanceof HDLNodeAssignment) {\n        HDLNodeAssignment expr = (HDLNodeAssignment) node;\n        if (expr.getExpression() instanceof ExprConstant) {\n            return (ExprConstant) expr.getExpression();\n        }\n    }\n    return null;\n}"
            ],
            [
                "getHighZ",
                "de.neemann.digital.data",
                "Value",
                "/**\n * @return returns a high z value\n */\npublic static Value getHighZ() {\n    return new Value(0, Type.HIGHZ);\n}"
            ],
            [
                "calcBackOffset",
                "de.neemann.digital.builder.circuit",
                "FragmentExpression",
                "static int calcBackOffset(int size, int i) {\n    if ((size & 1) != 0 && i == (size - 1) / 2)\n        return 0;\n    if (i >= size / 2)\n        return size - i;\n    else\n        return i + 1;\n}"
            ],
            [
                "isXNor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXNor(long[] data) {\n    for (int i = 0; i < data.length; i++) if ((Integer.bitCount(i) & 1) == data[i])\n        return false;\n    return true;\n}"
            ],
            [
                "isXor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXor(long[] data) {\n    for (int i = 0; i < data.length; i++) if (!((Integer.bitCount(i) & 1) == data[i]))\n        return false;\n    return true;\n}"
            ],
            [
                "getLibPath",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * @return the additional library path\n */\npublic static File getLibPath() {\n    String path;\n    try {\n        path = ElementLibrary.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath().replace('\\\\', '/');\n    } catch (URISyntaxException e) {\n        return new File(\"noLibFound\");\n    }\n    if (path.endsWith(\"/target/classes/\"))\n        return toCanonical(new File(path.substring(0, path.length() - 16) + \"/src/main/dig/lib\"));\n    if (path.endsWith(\"/target/Digital.jar\"))\n        return new File(path.substring(0, path.length() - 19) + \"/src/main/dig/lib\");\n    if (path.endsWith(\"Digital.jar\"))\n        return new File(path.substring(0, path.length() - 12) + \"/lib\");\n    return new File(\"noLibFound\");\n}"
            ],
            [
                "createCustomDescription",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * Creates a custom element description.\n *\n * @param file    the file\n * @param circuit the circuit\n * @param library the library\n * @return the type description\n * @throws PinException PinException\n */\npublic static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException {\n    ElementTypeDescriptionCustom d = new ElementTypeDescriptionCustom(file, circuit, library);\n    d.setElementFactory(attributes -> new CustomElement(d));\n    return d;\n}"
            ],
            [
                "createDeclarationDefault",
                "de.neemann.digital.draw.library",
                "ElementTypeDescriptionCustom",
                "/**\n * Creates the default for custom element declarations\n *\n * @param circuit the circuit\n * @return the default code template\n * @throws NodeException NodeException\n */\npublic static String createDeclarationDefault(Circuit circuit) throws NodeException {\n    TreeSet<String> nameSet = new TreeSet<>();\n    for (VisualElement ve : circuit.getElements()) {\n        String gen = ve.getElementAttributes().get(Keys.GENERIC).trim();\n        if (!gen.isEmpty()) {\n            try {\n                Parser p = new Parser(gen);\n                p.enableRefReadCollection();\n                p.parse(false);\n                for (Reference r : p.getRefsRead()) {\n                    if (r instanceof ReferenceToStruct) {\n                        ReferenceToStruct st = (ReferenceToStruct) r;\n                        if (st.getParent() instanceof ReferenceToVar) {\n                            ReferenceToVar var = (ReferenceToVar) st.getParent();\n                            if (var.getName().equals(\"args\")) {\n                                nameSet.add(st.getName());\n                            }\n                        }\n                    }\n                }\n            } catch (ParserException | IOException e) {\n                final NodeException ex = new NodeException(Lang.get(\"err_evaluatingGenericsCode_N_N\", ve, gen), e);\n                ex.setOrigin(circuit.getOrigin());\n                throw ex;\n            }\n        }\n    }\n    StringBuilder sb = new StringBuilder();\n    for (String name : nameSet) sb.append(name).append(\" := ;\\n\");\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Returns a comparator instance\n *\n * @return the singleton instance\n */\npublic static NumStringComparator getInstance() {\n    return InstanceHolder.INSTANCE;\n}"
            ],
            [
                "compareStr",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Compare two strings\n *\n * @param a a string\n * @param b a string\n * @return the comparison result\n */\npublic static int compareStr(String a, String b) {\n    int pa = 0;\n    int pb = 0;\n    while (true) {\n        final boolean ae = pa == a.length();\n        final boolean be = pb == b.length();\n        if (ae && be)\n            return 0;\n        else if (ae)\n            return -1;\n        else if (be)\n            return 1;\n        char ca = Character.toLowerCase(a.charAt(pa));\n        char cb = Character.toLowerCase(b.charAt(pb));\n        if (isDigit(ca) && isDigit(cb)) {\n            ParseNumber da = new ParseNumber(a, pa);\n            ParseNumber db = new ParseNumber(b, pb);\n            int c = Integer.compare(da.num, db.num);\n            if (c != 0)\n                return c;\n            else {\n                pa = da.p;\n                pb = db.p;\n            }\n        } else {\n            int c = Character.compare(ca, cb);\n            if (c != 0) {\n                return c;\n            } else {\n                pa++;\n                pb++;\n            }\n        }\n    }\n}"
            ],
            [
                "createPins",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Creates pins\n *\n * @param inputs    the inputs\n * @param outputs   the outputs\n * @param invert    true if invert output\n * @param ic        input inverter configuration\n * @param wideShape true if a wide shape is selected\n * @return the pins\n */\npublic static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape) {\n    return createPins(inputs, outputs, invert, wideShape ? 4 : 3, true, ic);\n}"
            ],
            [
                "readStyle",
                "de.neemann.digital.draw.shapes.custom.svg",
                "Context",
                "static Context readStyle(Context context, String style) throws SvgException {\n    SVGTokenizer t = new SVGTokenizer(style);\n    while (true) {\n        final String command = t.readTo(':');\n        if (command.length() == 0)\n            break;\n        final String value = t.readTo(';');\n        AttrParser p = PARSER.get(command);\n        if (p != null)\n            p.parse(context, value);\n    }\n    return context;\n}"
            ],
            [
                "getOutSize",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static int getOutSize(boolean small) {\n    if (small)\n        return SIZE2;\n    else\n        return OUT_SIZE;\n}"
            ],
            [
                "getOutStyle",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static Style getOutStyle(boolean small) {\n    if (small)\n        return Style.THIN;\n    else\n        return Style.NORMAL;\n}"
            ],
            [
                "getOutRad",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Inner circle size used for inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the output circle radius as a vector\n */\npublic static Vector getOutRad(boolean small) {\n    int s = getOutSize(small);\n    return new Vector(s - 6, s - 6);\n}"
            ],
            [
                "createTransform",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static Transform createTransform(int size) {\n    if (size == 2)\n        return Transform.IDENTITY;\n    else {\n        final TransformTranslate tr1 = new TransformTranslate(-70, -139);\n        final TransformTranslate tr2 = new TransformTranslate(70, 139);\n        float s = (2 + size) / 4f;\n        final TransformMatrix trm = new TransformMatrix(s, 0, 0, s, 0, 0);\n        return Transform.mul(tr1, Transform.mul(trm, tr2));\n    }\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"attributes\", ElementAttributes.class);\n    xStream.alias(\"visualElement\", VisualElement.class);\n    xStream.alias(\"wire\", Wire.class);\n    xStream.alias(\"circuit\", Circuit.class);\n    xStream.alias(\"intFormat\", IntFormat.class);\n    xStream.alias(\"exprFormat\", FormatToExpression.class);\n    xStream.alias(\"barrelShifterMode\", BarrelShifterMode.class);\n    xStream.alias(\"direction\", LeftRightFormat.class);\n    xStream.alias(\"rotation\", Rotation.class);\n    xStream.aliasAttribute(Rotation.class, \"rotation\", \"rotation\");\n    xStream.alias(\"language\", Language.class);\n    xStream.aliasAttribute(Language.class, \"name\", \"name\");\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"value\", InValue.class);\n    xStream.aliasAttribute(InValue.class, \"value\", \"v\");\n    xStream.aliasAttribute(InValue.class, \"highZ\", \"z\");\n    xStream.addImplicitCollection(ElementAttributes.class, \"attributes\");\n    xStream.alias(\"data\", DataField.class);\n    xStream.registerConverter(new DataFieldConverter());\n    xStream.alias(\"testData\", TestCaseDescription.class);\n    xStream.alias(\"inverterConfig\", InverterConfig.class);\n    xStream.addImplicitCollection(InverterConfig.class, \"inputs\");\n    xStream.alias(\"storedRoms\", ROMManager.class);\n    xStream.addImplicitCollection(ROMManager.class, \"roms\");\n    xStream.alias(\"romList\", ROMManagerFile.class);\n    xStream.alias(\"romFile\", ROMManagerFile.RomContainerFile.class);\n    xStream.alias(\"romData\", ROMManagerFile.RomContainerDataField.class);\n    xStream.alias(\"appType\", Application.Type.class);\n    xStream.ignoreUnknownElements();\n    xStream.alias(\"shape\", CustomShapeDescription.class);\n    xStream.alias(\"pin\", CustomShapeDescription.Pin.class);\n    xStream.alias(\"circle\", CustomShapeDescription.CircleHolder.class);\n    xStream.alias(\"line\", CustomShapeDescription.LineHolder.class);\n    xStream.alias(\"poly\", CustomShapeDescription.PolygonHolder.class);\n    xStream.alias(\"text\", CustomShapeDescription.TextHolder.class);\n    xStream.alias(\"polygon\", Polygon.class);\n    xStream.alias(\"shapeType\", CustomCircuitShapeType.class);\n    xStream.alias(\"transform\", TransformHolder.class);\n    xStream.registerConverter(new PolygonConverter());\n    return xStream;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename     filename\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load \" + filename);\n    final Circuit circuit = loadCircuit(new FileInputStream(filename), shapeFactory);\n    circuit.origin = filename;\n    return circuit;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param in           the input stream\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load stream\");\n    try {\n        XStream xStream = getxStream();\n        Circuit circuit = (Circuit) xStream.fromXML(in);\n        for (VisualElement ve : circuit.getElements()) ve.setShapeFactory(shapeFactory);\n        if (circuit.version == 0) {\n            // convert to version 1\n            for (Wire w : circuit.getWires()) {\n                w.p1 = w.p1.mul(2);\n                w.p2 = w.p2.mul(2);\n            }\n            for (VisualElement e : circuit.getElements()) e.setPos(e.getPos().mul(2));\n            circuit.version = 1;\n        }\n        if (circuit.version < 2) {\n            Object rm = circuit.getAttributes().get(Keys.ROMMANAGER);\n            if (rm instanceof ROMManager) {\n                circuit.getAttributes().set(Keys.ROMMANAGER, new ROMManagerFile((ROMManager) rm));\n            }\n            circuit.version = 2;\n        }\n        return circuit;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "fixGenerics",
                "de.neemann.digital.draw.model",
                "ModelCreator",
                "/**\n * Creates a concrete circuit from a generic on.\n * Uses the included generic init code.\n *\n * @param circuit the generic circuit\n * @param library the element library\n * @return the concrete circuit\n * @throws NodeException            NodeException\n * @throws ElementNotFoundException ElementNotFoundException\n */\npublic static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException {\n    if (circuit.getAttributes().get(Keys.IS_GENERIC))\n        return new ResolveGenerics(circuit, library).resolveCircuit(null).getCircuit();\n    else\n        return circuit;\n}"
            ],
            [
                "createFromPath",
                "de.neemann.digital.draw.graphics",
                "Polygon",
                "/**\n * Creates a polygon from a SVG path\n *\n * @param path the svg path\n * @return the polygon or null if there was an error\n */\npublic static Polygon createFromPath(String path) {\n    try {\n        return new PolygonParser(path).create();\n    } catch (PolygonParser.ParserException e) {\n        return null;\n    }\n}"
            ],
            [
                "vec",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Returns a new vector\n * shorthand for new Vector(x,y)\n *\n * @param x x\n * @param y y\n * @return the vector\n */\npublic static Vector vec(int x, int y) {\n    return new Vector(x, y);\n}"
            ],
            [
                "min",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the minimum vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the minimum\n */\npublic static Vector min(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x)\n            x = p[i].getX();\n        if (p[i].getY() < y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "max",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the maximim vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the maximum\n */\npublic static Vector max(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() > x)\n            x = p[i].getX();\n        if (p[i].getY() > y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "width",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the width of the given vectors.\n *\n * @param p the vectors\n * @return max(p)-min(p)\n */\npublic static Vector width(VectorInterface... p) {\n    int x1 = p[0].getX();\n    int y1 = p[0].getY();\n    int x2 = x1;\n    int y2 = y1;\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x1)\n            x1 = p[i].getX();\n        if (p[i].getY() < y1)\n            y1 = p[i].getY();\n        if (p[i].getX() > x2)\n            x2 = p[i].getX();\n        if (p[i].getY() > y2)\n            y2 = p[i].getY();\n    }\n    return new Vector(x2 - x1, y2 - y1);\n}"
            ],
            [
                "add",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Adds an offset to every vector in the given list\n *\n * @param vectors the original vectors\n * @param offs    the offset\n * @return the new list\n */\npublic static List<Vector> add(List<Vector> vectors, Vector offs) {\n    ArrayList<Vector> newVec = new ArrayList<>();\n    for (Vector v : vectors) newVec.add(v.add(offs));\n    return newVec;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static SVGSettings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "createKeyList",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * @return a list of available SVG export keys\n */\npublic static List<Key> createKeyList() {\n    ArrayList<Key> list = new ArrayList<>();\n    list.add(LATEX);\n    list.add(PINS_IN_MATH_MODE);\n    list.add(HIDE_TEST);\n    list.add(NO_SHAPE_FILLING);\n    list.add(SMALL_IO);\n    list.add(NO_PIN_MARKER);\n    list.add(THINNER_LINES);\n    list.add(HIGH_CONTRAST);\n    list.add(MONOCHROME);\n    return list;\n}"
            ],
            [
                "mul",
                "de.neemann.digital.draw.graphics",
                "Transform",
                "/**\n * Combines the two given transformations to a common transformation\n *\n * @param t1 first transformation\n * @param t2 second transformation\n * @return the resulting transformation\n */\nstatic Transform mul(Transform t1, Transform t2) {\n    TransformMatrix m1 = t1.getMatrix();\n    TransformMatrix m2 = t2.getMatrix();\n    return new TransformMatrix(m1.a * m2.a + m1.c * m2.b, m1.b * m2.a + m1.d * m2.b, m1.a * m2.c + m1.c * m2.d, m1.b * m2.c + m1.d * m2.d, m2.a * m1.x + m2.b * m1.y + m2.x, m2.c * m1.x + m2.d * m1.y + m2.y);\n}"
            ],
            [
                "rotate",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a rotation.\n * Rotates in mathematically positive direction. Takes into account that\n * in Digital the y-axis goes downwards.\n *\n * @param w the angle in 360 grad units\n * @return the transformation\n */\npublic static TransformMatrix rotate(double w) {\n    final double phi = w / 180 * Math.PI;\n    float cos = (float) Math.cos(phi);\n    float sin = (float) Math.sin(phi);\n    return new TransformMatrix(cos, -sin, sin, cos, 0, 0);\n}"
            ],
            [
                "scale",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a scaling transformation\n *\n * @param sx scaling in x direction\n * @param sy scaling in y direction\n * @return the transformation\n */\npublic static TransformMatrix scale(float sx, float sy) {\n    return new TransformMatrix(sx, 0, 0, sy, 0, 0);\n}"
            ],
            [
                "getTextWidth",
                "de.neemann.digital.draw.graphics",
                "GraphicMinMax",
                "/**\n * Returns a approximation of the width of the given text in the given style\n *\n * @param text  the text\n * @param style the style\n * @return the approximated text width\n */\npublic static int getTextWidth(String text, Style style) {\n    final FontRenderContext fontRenderContext = new FontRenderContext(null, true, false);\n    GraphicsFormatter.Fragment f = GraphicsFormatter.createFragment((fragment, font, str) -> {\n        Rectangle2D rec = style.getFont().getStringBounds(str, fontRenderContext);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), 0);\n    }, style.getFont(), text);\n    return f.getWidth();\n}"
            ],
            [
                "getSelected",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * @return the selected color map\n */\npublic static ColorScheme getSelected() {\n    if (instance == null) {\n        updateInstance();\n        Settings.getInstance().getAttributes().addListener(ColorScheme::updateInstance);\n    }\n    return instance;\n}"
            ],
            [
                "getWireStyle",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Returns the wire style depending on the given value\n *\n * @param value the value to represent\n * @return the style\n */\npublic static Style getWireStyle(Value value) {\n    if (value == null || value.getBits() > 1)\n        return WIRE;\n    if (value.isHighZ())\n        return WIRE_HIGHZ;\n    if (value.getValue() == 1)\n        return WIRE_HIGH;\n    else\n        return WIRE_LOW;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text the text\n * @return the string representation\n */\npublic static String format(Text text) {\n    return format(text, FormatToExpression.getDefaultFormat());\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text   the text\n * @param format the format to use\n * @return the string representation\n */\npublic static String format(Text text, FormatToExpression format) {\n    if (text instanceof Simple) {\n        return ((Simple) text).getText();\n    } else if (text instanceof Blank) {\n        return \" \";\n    } else if (text instanceof Character) {\n        return \"\" + ((Character) text).getChar();\n    } else if (text instanceof Decorate) {\n        Decorate d = (Decorate) text;\n        if (d.getStyle() == Decorate.Style.OVERLINE) {\n            final Text content = d.getContent();\n            if (content instanceof Simple || content instanceof Index)\n                return format.getNot() + format(content, format);\n            else\n                return format.getNot() + \"(\" + format(content, format) + \")\";\n        } else\n            return format(d.getContent(), format);\n    } else if (text instanceof Index) {\n        Index i = (Index) text;\n        String str = format(i.getVar(), format);\n        if (i.getSubScript() != null)\n            str += format(i.getSubScript(), format);\n        if (i.getSuperScript() != null)\n            str += format(i.getSuperScript(), format);\n        return str;\n    } else if (text instanceof Sentence) {\n        Sentence s = (Sentence) text;\n        StringBuilder sb = new StringBuilder();\n        for (Text t : s) sb.append(format(t, format));\n        return sb.toString();\n    } else\n        return \"\";\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "SVGFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr   the {@link Graphics2D} instance\n * @param text the text\n * @return the text fragment\n */\npublic static Fragment createFragment(Graphics2D gr, String text) {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), text);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr         the {@link Graphics2D} instance\n * @param expression the expression\n * @return the text fragment\n * @throws FormatterException FormatterException\n */\npublic static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), new ExpressionToText().createText(expression));\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param sizer the sizer instance\n * @param font  the font\n * @param text  the text\n * @return the fragment\n */\npublic static Fragment createFragment(FontSizer sizer, Font font, String text) {\n    Fragment fragment;\n    try {\n        Text t = new Parser(text).parse();\n        fragment = createFragment(sizer, font, t);\n    } catch (ParseException | FormatterException e) {\n        // if there was an exception, return the complete raw text as a fragment\n        fragment = new TextFragment(sizer, font, text);\n    }\n    return fragment;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param exp the expression to format\n * @return the formatted string\n */\npublic static String format(Expression exp) {\n    return format(new ExpressionToText().createText(exp, FormatToExpression.LATEX), true);\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "math",
                "de.neemann.digital.draw.graphics.text.text",
                "Decorate",
                "/**\n * Adds a MATH decoration to the given text.\n * If the text is already decorated the text is returned directly.\n *\n * @param t the text to decorate\n * @return the decorated text\n */\npublic static Text math(Text t) {\n    if (t instanceof Decorate) {\n        Decorate d = (Decorate) t;\n        if (d.getStyle() == Style.MATH)\n            return t;\n    }\n    return new Decorate(t, Style.MATH);\n}"
            ],
            [
                "escapeXML",
                "de.neemann.digital.draw.graphics",
                "GraphicSVG",
                "/**\n * Escapes a given string to XML\n *\n * @param text the text to escape\n * @return the escaped text.\n */\npublic static String escapeXML(String text) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        switch(c) {\n            case '&':\n                sb.append(\"&amp;\");\n                break;\n            case '<':\n                sb.append(\"&lt;\");\n                break;\n            case '>':\n                sb.append(\"&gt;\");\n                break;\n            case '\"':\n                sb.append(\"&quot;\");\n                break;\n            default:\n                sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
            ],
            [
                "getMirrorYOrientation",
                "de.neemann.digital.draw.graphics",
                "GraphicSwing",
                "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3) {\n    int oy = orientation.getY();\n    VectorInterface d0 = p2.sub(p1).getOrthogonal();\n    VectorInterface d1 = p3.sub(p1);\n    if (d0.scalar(d1) < 0)\n        oy = 2 - oy;\n    return oy;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param file the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(File file) throws IOException {\n    final Configuration configuration = load(new FileInputStream(file));\n    configuration.origin = file;\n    return configuration;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param in the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        return (Configuration) xStream.fromXML(in);\n    } catch (RuntimeException e) {\n        throw new IOException(\"error reading XML\", e);\n    }\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "UNKNOWN",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * Unknown release\n */\npublic static final String UNKNOWN = \"unknown\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullDown",
                "/**\n * The pull down description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "Diode",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeBackward",
                "/**\n * The description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullUp",
                "/**\n * The pull up description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeForward",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROMDualPort",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualAccess",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "CounterPreset",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Register",
                "/**\n * The registers {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "LookUpTable",
                "/**\n * The LUTs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "BlockRAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Counter",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROM",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMAsync",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROM",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROMDualPort",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePortSel",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RegisterFile",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "MIDI",
                "/**\n * The Speakers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RGBLED",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The Input description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "LEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);"
            ],
            [
                "POLARITYAWARELEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The polarity aware LED description\n */\npublic static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "SEVENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment display description\n */\npublic static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();"
            ],
            [
                "SEVENHEXDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment hex display description\n */\npublic static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "SIXTEENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * Sixteen Segment Display\n */\npublic static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RotEncoder",
                "/**\n * The rotary encoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PinControl",
                "/**\n * The description of the pin control logic\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "DipSwitch",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "LightBulb",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Probe",
                "/**\n * The Probe description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Button",
                "/**\n * The Button description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "ButtonLED",
                "/**\n * The ButtonLED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "In",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "STEPS",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * Steps for a full revolution\n */\npublic static final int STEPS = 72;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * The stepper motors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "NotConnected",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorBipolar",
                "/**\n * The bipolar motor description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Const",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PowerSupply",
                "/**\n * Enforces a power supply\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Ground",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "VDD",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.core.io.telnet",
                "ServerHolder",
                "/**\n * The singleton instance\n */\npublic static final ServerHolder INSTANCE = new ServerHolder();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io.telnet",
                "Telnet",
                "/**\n * The telnet server description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);"
            ],
            [
                "BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of bits in simple gates like And and Or\n */\npublic static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);"
            ],
            [
                "INPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * input bits of sign extender\n */\npublic static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);"
            ],
            [
                "OUTPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output bits of sign extender\n */\npublic static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);"
            ],
            [
                "INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in simple gates like And and Or\n */\npublic static final // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nKey.KeyInteger // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nINPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);"
            ],
            [
                "LUT_INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in the LUT\n */\npublic static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);"
            ],
            [
                "MAX_VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The counter max value\n */\npublic static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);"
            ],
            [
                "DELAY_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the delay time used by the delay component\n */\npublic static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);"
            ],
            [
                "MONOFLOP_DELAY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the timer delay time\n */\npublic static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);"
            ],
            [
                "LABEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The elements label\n */\npublic static final Key<String> LABEL = new Key<>(\"Label\", \"\");"
            ],
            [
                "FONT_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The font size\n */\npublic static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);"
            ],
            [
                "TEXT_ORIENTATION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * text orientation\n */\npublic static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();"
            ],
            [
                "LED_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a LED\n */\npublic static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();"
            ],
            [
                "SEVEN_SEG_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a seven seg display\n */\npublic static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);"
            ],
            [
                "VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The value of constants\n */\npublic static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();"
            ],
            [
                "DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of elements\n */\npublic static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();"
            ],
            [
                "INPUT_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of inputs\n */\npublic static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();"
            ],
            [
                "DIP_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of the dip switch\n */\npublic static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Color of LEDs\n */\npublic static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();"
            ],
            [
                "INPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The input splitting of a splitter\n */\npublic static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");"
            ],
            [
                "OUTPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The output splitting of a splitter\n */\npublic static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");"
            ],
            [
                "SPLITTER_SPREADING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The splitter spreading\n */\npublic static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();"
            ],
            [
                "IN_OUT_SMALL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to select small inputs and outputs\n */\npublic static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "RUN_AT_REAL_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable realtime mode at a clock\n */\npublic static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);"
            ],
            [
                "INVERT_OUTPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * inverts the output of a gate\n */\npublic static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);"
            ],
            [
                "FREQUENCY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The real time frequency of the clock\n */\npublic static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);"
            ],
            [
                "SELECTOR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the bit count of a muxer or decoder\n */\npublic static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);"
            ],
            [
                "ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of address bits of memory\n */\npublic static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);"
            ],
            [
                "BLOWN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a diode as blown fuse or as programmed\n */\npublic static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a switch as closed or not\n */\npublic static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();"
            ],
            [
                "SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * signed flag for comparator element\n */\npublic static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();"
            ],
            [
                "REMAINDER_POSITIVE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects if the reminder of the division is always positive\n */\npublic static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);"
            ],
            [
                "DATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the data key for memory\n */\npublic static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);"
            ],
            [
                "FLIP_SEL_POSITON",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag for flipping selector pos in muxers, decoders and drivers\n */\npublic static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();"
            ],
            [
                "ROTATE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the rotation of the elements\n */\npublic static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();"
            ],
            [
                "WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);"
            ],
            [
                "SHAPE_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * defines the shape type of the custom circuit\n */\npublic static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();"
            ],
            [
                "LAYOUT_SHAPE_DELTA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Defines the distance to the previous pin. Used by the layout shape type\n */\npublic static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));"
            ],
            [
                "TERM_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);"
            ],
            [
                "TERM_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);"
            ],
            [
                "CYCLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break timeout cycles\n */\npublic static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);"
            ],
            [
                "ENABLED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break enabled\n */\npublic static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();"
            ],
            [
                "VALUE_IS_PROBE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to make a value a probe\n */\npublic static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "IS_PROGRAM_MEMORY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();"
            ],
            [
                "IS_PROGRAM_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();"
            ],
            [
                "AUTO_RELOAD_ROM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the ROMs auto load function\n */\npublic static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();"
            ],
            [
                "LAST_DATA_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The last used ROM data file\n */\npublic static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();"
            ],
            [
                "SHOW_DATA_TABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data table window\n */\npublic static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH_MICRO",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window in single gate mode\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();"
            ],
            [
                "ADD_VALUE_TO_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to add the value to the measurement graph\n */\npublic static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();"
            ],
            [
                "MICRO_STEP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the single gate mode in the embedded data view\n */\npublic static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);"
            ],
            [
                "MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the embedded data view\n */\npublic static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);"
            ],
            [
                "SETTINGS_MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the default data view\n */\npublic static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);"
            ],
            [
                "IS_HIGH_Z",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable high z mode at an input\n */\npublic static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "AVOID_ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to avoid active low at an input\n */\npublic static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the description of an element\n */\npublic static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");"
            ],
            [
                "NETNAME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A net name\n */\npublic static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");"
            ],
            [
                "SETTINGS_IEEE_SHAPES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * shape setting\n */\npublic static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();"
            ],
            [
                "SETTINGS_LANGUAGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI Language\n */\npublic static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();"
            ],
            [
                "SETTINGS_DEFAULT_TREESELECT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Default state of the tree view\n */\npublic static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);"
            ],
            [
                "SETTINGS_EXPRESSION_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI expression string representation\n */\npublic static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);"
            ],
            [
                "SETTINGS_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the grid\n */\npublic static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();"
            ],
            [
                "SETTINGS_SHOW_WIRE_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the wire bits view\n */\npublic static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);"
            ],
            [
                "SETTINGS_MAC_MOUSE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the MAC mouse mode\n */\npublic static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables tunnel rename dialog\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);"
            ],
            [
                "SETTINGS_RENAME_LABELS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables renaming of labels ending with numbers while copying\n */\npublic static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);"
            ],
            [
                "SETTINGS_OPEN_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables remote port\n */\npublic static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();"
            ],
            [
                "SETTINGS_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * remote port\n */\npublic static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);"
            ],
            [
                "OSCILLATION_DETECTION_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Counter used to detect oscillations\n */\npublic static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);"
            ],
            [
                "INT_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();"
            ],
            [
                "PROBE_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());"
            ],
            [
                "FIXED_POINT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * fixed point fractional binary digits\n */\npublic static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();"
            ],
            [
                "GRAPHIC_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);"
            ],
            [
                "GRAPHIC_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);"
            ],
            [
                "RELAY_NORMALLY_CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a relay to indicate if it is normally open or normally closed.\n */\npublic static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();"
            ],
            [
                "POLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Number of poles in the double throw relay\n */\npublic static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();"
            ],
            [
                "BARREL_SHIFTER_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to select the shift mode\n */\npublic static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());"
            ],
            [
                "DIRECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate shift direction\n */\npublic static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());"
            ],
            [
                "BARREL_SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate if shift value is signed\n */\npublic static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);"
            ],
            [
                "COMMON_CONNECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to indicate if the 7-seg display has a common cathode output\n */\npublic static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();"
            ],
            [
                "COMMON_CONNECTION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to define the common connection type\n */\npublic static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();"
            ],
            [
                "LED_PERSISTENCE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);"
            ],
            [
                "LED_PERSIST_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();"
            ],
            [
                "SETTINGS_ATF1502_FITTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_ATMISP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Flash software for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();"
            ],
            [
                "ROW_DATA_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * row bits in led matrix\n */\npublic static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);"
            ],
            [
                "COL_ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * column address bits in led matrix\n */\npublic static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);"
            ],
            [
                "LOCKED_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * In locked mode the circuit can not be modified\n */\npublic static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);"
            ],
            [
                "PINNUMBER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin number\n */\npublic static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();"
            ],
            [
                "PINCOUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin count\n */\npublic static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));"
            ],
            [
                "INVERTER_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * contains the input inverter config\n */\npublic static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());"
            ],
            [
                "BACKGROUND_COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Background Color of nested circuits\n */\npublic static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));"
            ],
            [
                "SETTINGS_FONT_SCALING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the screen resolution\n */\npublic static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_USE_EQUALS_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses the equals key instead of the plus key.\n */\npublic static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;"
            ],
            [
                "WITH_ENABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if a enable input is needed\n */\npublic static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);"
            ],
            [
                "FET_UNIDIRECTIONAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true to simulate a unidirectional FET\n */\npublic static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);"
            ],
            [
                "ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if component is active low\n */\npublic static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();"
            ],
            [
                "MAP_TO_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if button is mapped to the keyboard\n */\npublic static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();"
            ],
            [
                "SETTINGS_LIBRARY_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf1502\n */\npublic static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_JAR_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A jar containing custom java components\n */\npublic static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "ROMMANAGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The manager which contains all the roms data\n */\npublic static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();"
            ],
            [
                "APPLICATION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The type of the external process\n */\npublic static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());"
            ],
            [
                "EXTERNAL_INPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The inputs used by the external process\n */\npublic static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");"
            ],
            [
                "EXTERNAL_OUTPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The outputs used by the external process\n */\npublic static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");"
            ],
            [
                "EXTERNAL_CODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);"
            ],
            [
                "EXTERNAL_CODE_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));"
            ],
            [
                "SETTINGS_GHDL_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to ghdl\n */\npublic static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();"
            ],
            [
                "GHDL_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The ghdl options\n */\npublic static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "IVERILOG_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The iverilog options\n */\npublic static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "SETTINGS_IVERILOG_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to iverilog installation directory\n */\npublic static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();"
            ],
            [
                "CUSTOM_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Shape used to represent a visual element\n */\npublic static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));"
            ],
            [
                "PRELOAD_PROGRAM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * True if a program is loaded to the simulator at startup\n */\npublic static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();"
            ],
            [
                "BIG_ENDIAN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);"
            ],
            [
                "PROGRAM_TO_PRELOAD",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The file to preload as a program at startup\n */\npublic static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "BIG_ENDIAN_SETTING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "WIDE_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects a wide shape\n */\npublic static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();"
            ],
            [
                "RECT_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of the rectangle\n */\npublic static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);"
            ],
            [
                "RECT_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the height of the rectangle\n */\npublic static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);"
            ],
            [
                "RECT_INSIDE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();"
            ],
            [
                "RECT_BOTTOM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();"
            ],
            [
                "RECT_RIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();"
            ],
            [
                "MIDI_CHANNEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);"
            ],
            [
                "MIDI_INSTRUMENT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");"
            ],
            [
                "MIDI_PROG_CHANGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables Program change\n */\npublic static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);"
            ],
            [
                "SETTINGS_TOOLCHAIN_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Stores the IDE settings file\n */\npublic static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();"
            ],
            [
                "GENERICLARGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();"
            ],
            [
                "IS_GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Circuit is generic\n */\npublic static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUTORIAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the tutorial\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();"
            ],
            [
                "SETTINGS_WIRETOOLTIP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the wire tool tips\n */\npublic static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);"
            ],
            [
                "SWITCH_ACTS_AS_INPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The switch acts as input\n */\npublic static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();"
            ],
            [
                "SNAP_TO_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Snaps the element to the grid\n */\npublic static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();"
            ],
            [
                "MIRROR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Mirrors the component\n */\npublic static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "TESTDATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The test data\n */\npublic static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);"
            ],
            [
                "TRIGGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The scope trigger mode\n */\npublic static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());"
            ],
            [
                "PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the telnet port\n */\npublic static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);"
            ],
            [
                "TELNET_ESCAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Telnet escape\n */\npublic static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();"
            ],
            [
                "SKIP_HDL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Skips HDL output for this circuit\n */\npublic static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();"
            ],
            [
                "PREFIX",
                "de.neemann.digital.core.basic",
                "FanIn",
                "/**\n * The inputs name prefix\n */\npublic static final String PREFIX = \"In_\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NOr",
                "/**\n * The NOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "And",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XNOr",
                "/**\n * The XNOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XOr",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Not",
                "/**\n * The Not description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NAnd",
                "/**\n * The NAnd description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Or",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "STARTED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STARTED event\n */\npublic static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CLOSED event\n */\npublic static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);"
            ],
            [
                "POSTCLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.POSTCLOSED event\n */\npublic static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);"
            ],
            [
                "STEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STEP event\n */\npublic static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);"
            ],
            [
                "CHECKBURN",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CHECKBURN event\n */\npublic static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);"
            ],
            [
                "MICROSTEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.MICROSTEP event\n */\npublic static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);"
            ],
            [
                "RUN_TO_BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK event\n */\npublic static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);"
            ],
            [
                "RUN_TO_BREAK_TIMEOUT",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK_TIMEOUT event\n */\npublic static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);"
            ],
            [
                "BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.BREAK event\n */\npublic static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGPFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "NFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGNFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "PFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "TransGate",
                "/**\n * The transmission gate description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "SwitchDT",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Relay",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "RelayDT",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Switch",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Fuse",
                "/**\n * The fuse description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Reset",
                "/**\n * The Reset description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Stop",
                "/**\n * The Stop element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Decoder",
                "/**\n * The Decoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Delay",
                "/**\n * The Delay description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Driver",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "DriverInvSel",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "PriorityEncoder",
                "/**\n * The PriorityEncoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BusSplitter",
                "/**\n * The bus splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * The splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Multiplexer",
                "/**\n * The Multiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BitSelector",
                "/**\n * The Bit Selector description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * The Break description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Clock",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "AsyncSeq",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Demultiplexer",
                "/**\n * The Demultiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopDAsync",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopD",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRSAsync",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopT",
                "/**\n * The T-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJKAsync",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJK",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "Monoflop",
                "/**\n * The Monoflop's description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRS",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BarrelShifter",
                "/**\n * The barrel shifter description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Mul",
                "/**\n * The multiplier description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Neg",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitExtender",
                "/**\n * Description of the sign extend component.\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Add",
                "/**\n * The adders description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Div",
                "/**\n * The dividers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "PRNG",
                "/**\n * The element type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Sub",
                "/**\n * The subtractors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Comparator",
                "/**\n * The comparators description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitCount",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "EMPTY_LIST",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * An empty list\n */\npublic static final ObservableValues EMPTY_LIST = new ObservableValues();"
            ],
            [
                "DEFAULT_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The default formatter\n */\npublic static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;"
            ],
            [
                "HEX_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The hexadecimal formatter\n */\npublic static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "External",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "ExternalFile",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DEFAULT_RAD",
                "de.neemann.digital.fsm",
                "State",
                "/**\n * The default state radius\n */\nstatic final int DEFAULT_RAD = 70;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "Lang",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "InstanceHolder",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.testing",
                "TestCaseElement",
                "/**\n * The TestCaseElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();"
            ],
            [
                "STATENAMES",
                "de.neemann.digital.analyse",
                "TruthTableTableModel",
                "/**\n * String representation of the states\n */\npublic static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };"
            ],
            [
                "ONE",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant true or one\n */\npublic static final Constant ONE = new Constant(true);"
            ],
            [
                "ZERO",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant false or zero\n */\npublic static final Constant ZERO = new Constant(false);"
            ],
            [
                "PRIMARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the primary panel\n */\npublic static final String PRIMARY = \"primary\";"
            ],
            [
                "SECONDARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the secondary panel\n */\npublic static final String SECONDARY = \"secondary\";"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * The single EditorFactory instance.\n */\nstatic final EditorFactory INSTANCE = new EditorFactory();"
            ],
            [
                "MAX_TERMINAL_STORED",
                "de.neemann.digital.gui.components.terminal",
                "ConsoleTerminal",
                "/**\n * Max amount of characters stored\n */\npublic static final int MAX_TERMINAL_STORED = 2048;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Terminal",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Keyboard",
                "/**\n * The keyboard description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "FAILED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for failed tests\n */\nstatic final Color FAILED_COLOR = new Color(255, 200, 200);"
            ],
            [
                "PASSED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for passed tests\n */\nstatic final Color PASSED_COLOR = new Color(200, 255, 200);"
            ],
            [
                "ICON_DELETE",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The delete icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");"
            ],
            [
                "ICON_COPY",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The copy icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "VGA",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "GraphicCard",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "LedMatrix",
                "/**\n * the LED-Matrix description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "ScopeTrigger",
                "/**\n * The ScopeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);"
            ],
            [
                "DATADESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The DataElement description\n */\npublic static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "TEXTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The TextElement description\n */\npublic static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "RECTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The shape for the rectangle\n */\npublic static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "LEFT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to left align the digits\n */\npublic final static float LEFT = 0.0f;"
            ],
            [
                "CENTER",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to center the digits\n */\npublic final static float CENTER = 0.5f;"
            ],
            [
                "RIGHT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to right align the digits\n */\npublic final static float RIGHT = 1.0f;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "Settings",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "SettingsHolder",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "BASE_FILE_KEY",
                "de.neemann.digital.hdl.hgs",
                "Context",
                "/**\n * Key used to store the base file name in the context\n */\npublic static final String BASE_FILE_KEY = \"baseFile\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericInitCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();"
            ],
            [
                "GEN_ARGS_KEY",
                "de.neemann.digital.draw.library",
                "ResolveGenerics",
                "/**\n * Key uses to store the args for the generic circuits\n */\npublic static final String GEN_ARGS_KEY = \"genArgs\";"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "ButtonShape",
                "protected static final int HEIGHT = OUT_SIZE / 2;"
            ],
            [
                "SIZE2",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Half the size of the used raster\n */\npublic static final int SIZE2 = 10;"
            ],
            [
                "SIZE",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * The size of the used raster\n */\npublic static final int SIZE = SIZE2 * 2;"
            ],
            [
                "CIRC",
                "de.neemann.digital.draw.shapes",
                "DILShape",
                "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);"
            ],
            [
                "DOWNSHIFT",
                "de.neemann.digital.draw.shapes",
                "VDDShape",
                "static final int DOWNSHIFT = 4;"
            ],
            [
                "CHARGED_GATE",
                "de.neemann.digital.draw.shapes",
                "FGFETShapeN",
                "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);"
            ],
            [
                "OUT_SIZE",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Size of the normal sized inputs and outputs\n */\npublic static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;"
            ],
            [
                "LATEX_RAD",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);"
            ],
            [
                "WIDTH2",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * half the width of the resistor\n */\npublic static final int WIDTH2 = SIZE2 - 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * height of the resistor\n */\npublic static final int HEIGHT = SIZE + SIZE / 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static final int HEIGHT = 7;"
            ],
            [
                "FRAME",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "/**\n * the Frame of the display\n */\npublic static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.elements",
                "Tunnel",
                "/**\n * The TunnelElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();"
            ],
            [
                "HIGH_CONTRAST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);"
            ],
            [
                "MONOCHROME",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);"
            ],
            [
                "SMALL_IO",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);"
            ],
            [
                "NO_PIN_MARKER",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);"
            ],
            [
                "THINNER_LINES",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);"
            ],
            [
                "HIDE_TEST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);"
            ],
            [
                "NO_SHAPE_FILLING",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);"
            ],
            [
                "LATEX",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);"
            ],
            [
                "PINS_IN_MATH_MODE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SettingsHolder",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to select the color map\n */\npublic static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();"
            ],
            [
                "CUSTOM_COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to define the custom color map\n */\npublic static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();"
            ],
            [
                "MAXLINETHICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * maximal line thickness\n */\npublic static final int MAXLINETHICK = 4;"
            ],
            [
                "NORMAL",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all lines to draw the shapes itself\n */\npublic static final Style NORMAL = new Builder().build();"
            ],
            [
                "DISABLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all disabled elements\n */\npublic static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();"
            ],
            [
                "INOUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for input and output labels\n */\npublic static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();"
            ],
            [
                "FAILED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the failed state lines in the measurement graph\n */\npublic static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();"
            ],
            [
                "PASS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the passed state lines in the measurement graph\n */\npublic static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();"
            ],
            [
                "NORMAL_TEXT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for text which is integral part of the shape.\n * Text which uses this style is always included in sizing!\n * Used for text only elements.\n */\npublic static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();"
            ],
            [
                "THIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin line used for the graphic in the clock or delay shape\n */\npublic static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();"
            ],
            [
                "THIN_FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin filled\n */\npublic static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();"
            ],
            [
                "THICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thick line used for the ground line\n */\npublic static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();"
            ],
            [
                "WIRE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in editing mode\n */\npublic static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "WIRE_LOW",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for low wires in running mode\n */\npublic static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();"
            ],
            [
                "WIRE_HIGH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for high wires in running mode\n */\npublic static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();"
            ],
            [
                "WIRE_HIGHZ",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in high Z state\n */\npublic static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();"
            ],
            [
                "WIRE_OUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the output dots\n */\npublic static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();"
            ],
            [
                "FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Filled style used to fill the splitter or the dark LEDs\n */\npublic static final Style FILLED = new Builder().setFilled(true).build();"
            ],
            [
                "DASH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the grid in the graph\n */\npublic static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();"
            ],
            [
                "SHAPE_PIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();"
            ],
            [
                "SHAPE_SPLITTER",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text for splitters\n */\npublic static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();"
            ],
            [
                "WIRE_VALUE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();"
            ],
            [
                "WIRE_BITS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the wire bit number\n */\npublic static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();"
            ],
            [
                "HIGHLIGHT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * highlight color used for the circles to mark an element\n */\npublic static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "ERROR",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * error color used for the circles to mark an element\n */\npublic static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "BLANK",
                "de.neemann.digital.draw.graphics.text.text",
                "Blank",
                "/**\n * the Blank instance\n */\npublic static final Blank BLANK = new Blank();"
            ],
            [
                "LOOK_AT_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String LOOK_AT_ALIAS = \"lookAt\";"
            ],
            [
                "REF_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String REF_ALIAS = \"ref\";"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "inputs",
                "de.neemann.digital.core",
                "ObservableValues"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "isEnabled",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * @return true if enabled\n */\npublic boolean isEnabled() {\n    return enabled;\n}"
            ],
            [
                "getLabel",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * @return the break label\n */\npublic String getLabel() {\n    return label;\n}"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getBreakInput",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * @return the break value\n */\npublic ObservableValue getBreakInput() {\n    return input;\n}"
            ],
            [
                "getOutputs",
                "de.neemann.digital.core.wiring",
                "Break",
                "@Override\npublic ObservableValues getOutputs() {\n    return ObservableValues.EMPTY_LIST;\n}"
            ],
            [
                "getCycles",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * @return the timeout cycles\n */\npublic int getCycles() {\n    return cycles;\n}"
            ],
            [
                "get",
                "de.neemann.digital.core",
                "ObservableValues",
                "public ObservableValue get(String arg0)"
            ],
            [
                "getNames",
                "de.neemann.digital.core",
                "ObservableValues",
                "public ArrayList<String> getNames()"
            ],
            [
                "contains",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean contains(Object arg0)"
            ],
            [
                "addAll",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean addAll(Collection<? extends T> arg0)"
            ],
            [
                "indexOf",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public int indexOf(Object arg0)"
            ],
            [
                "toArray",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public <T1> T1[] toArray(T1[] arg0)"
            ],
            [
                "listIterator",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public ListIterator<T> listIterator()"
            ],
            [
                "containsAll",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean containsAll(Collection<?> arg0)"
            ],
            [
                "retainAll",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean retainAll(Collection<?> arg0)"
            ],
            [
                "set",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public T set(int arg0, T arg1)"
            ],
            [
                "remove",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public T remove(int arg0)"
            ],
            [
                "subList",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public List<T> subList(int arg0, int arg1)"
            ],
            [
                "isEmpty",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean isEmpty()"
            ],
            [
                "lastIndexOf",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public int lastIndexOf(Object arg0)"
            ],
            [
                "get",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public T get(int arg0)"
            ],
            [
                "add",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean add(T arg0)"
            ],
            [
                "iterator",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public Iterator<T> iterator()"
            ],
            [
                "size",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public int size()"
            ],
            [
                "removeAll",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean removeAll(Collection<?> arg0)"
            ],
            [
                "listIterator",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public ListIterator<T> listIterator(int arg0)"
            ],
            [
                "toArray",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public Object[] toArray()"
            ],
            [
                "remove",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean remove(Object arg0)"
            ],
            [
                "addAll",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "public boolean addAll(int arg0, Collection<? extends T> arg1)"
            ],
            [
                "retainAll",
                "java.util",
                "List",
                "public abstract boolean retainAll(Collection<? extends Object> arg0)"
            ],
            [
                "toArray",
                "java.util",
                "List",
                "public abstract Object[] toArray()"
            ],
            [
                "equals",
                "java.util",
                "List",
                "public abstract boolean equals(Object arg0)"
            ],
            [
                "contains",
                "java.util",
                "List",
                "public abstract boolean contains(Object arg0)"
            ],
            [
                "toArray",
                "java.util",
                "List",
                "public abstract <T> T[] toArray(T[] arg0)"
            ],
            [
                "iterator",
                "java.util",
                "List",
                "public abstract Iterator<E> iterator()"
            ],
            [
                "subList",
                "java.util",
                "List",
                "public abstract List<E> subList(int arg0, int arg1)"
            ],
            [
                "containsAll",
                "java.util",
                "List",
                "public abstract boolean containsAll(Collection<? extends Object> arg0)"
            ],
            [
                "addAll",
                "java.util",
                "List",
                "public abstract boolean addAll(Collection<? extends E> arg0)"
            ],
            [
                "listIterator",
                "java.util",
                "List",
                "public abstract ListIterator<E> listIterator(int arg0)"
            ],
            [
                "add",
                "java.util",
                "List",
                "public abstract boolean add(E arg0)"
            ],
            [
                "remove",
                "java.util",
                "List",
                "public abstract E remove(int arg0)"
            ],
            [
                "size",
                "java.util",
                "List",
                "public abstract int size()"
            ],
            [
                "set",
                "java.util",
                "List",
                "public abstract E set(int arg0, E arg1)"
            ],
            [
                "get",
                "java.util",
                "List",
                "public abstract E get(int arg0)"
            ],
            [
                "isEmpty",
                "java.util",
                "List",
                "public abstract boolean isEmpty()"
            ],
            [
                "listIterator",
                "java.util",
                "List",
                "public abstract ListIterator<E> listIterator()"
            ],
            [
                "addAll",
                "java.util",
                "List",
                "public abstract boolean addAll(int arg0, Collection<? extends E> arg1)"
            ],
            [
                "spliterator",
                "java.util",
                "List",
                "public default Spliterator<E> spliterator()"
            ],
            [
                "hashCode",
                "java.util",
                "List",
                "public abstract int hashCode()"
            ],
            [
                "indexOf",
                "java.util",
                "List",
                "public abstract int indexOf(Object arg0)"
            ],
            [
                "lastIndexOf",
                "java.util",
                "List",
                "public abstract int lastIndexOf(Object arg0)"
            ],
            [
                "remove",
                "java.util",
                "List",
                "public abstract boolean remove(Object arg0)"
            ],
            [
                "removeAll",
                "java.util",
                "List",
                "public abstract boolean removeAll(Collection<? extends Object> arg0)"
            ],
            [
                "toArray",
                "java.util",
                "Collection",
                "public abstract <T> T[] toArray(T[] arg0)"
            ],
            [
                "toArray",
                "java.util",
                "Collection",
                "public default <T> T[] toArray(IntFunction<T[]> arg0)"
            ],
            [
                "add",
                "java.util",
                "Collection",
                "public abstract boolean add(E arg0)"
            ],
            [
                "contains",
                "java.util",
                "Collection",
                "public abstract boolean contains(Object arg0)"
            ],
            [
                "toArray",
                "java.util",
                "Collection",
                "public abstract Object[] toArray()"
            ],
            [
                "addAll",
                "java.util",
                "Collection",
                "public abstract boolean addAll(Collection<? extends E> arg0)"
            ],
            [
                "containsAll",
                "java.util",
                "Collection",
                "public abstract boolean containsAll(Collection<? extends Object> arg0)"
            ],
            [
                "removeAll",
                "java.util",
                "Collection",
                "public abstract boolean removeAll(Collection<? extends Object> arg0)"
            ],
            [
                "removeIf",
                "java.util",
                "Collection",
                "public default boolean removeIf(Predicate<? super E> arg0)"
            ],
            [
                "hashCode",
                "java.util",
                "Collection",
                "public abstract int hashCode()"
            ],
            [
                "retainAll",
                "java.util",
                "Collection",
                "public abstract boolean retainAll(Collection<? extends Object> arg0)"
            ],
            [
                "isEmpty",
                "java.util",
                "Collection",
                "public abstract boolean isEmpty()"
            ],
            [
                "remove",
                "java.util",
                "Collection",
                "public abstract boolean remove(Object arg0)"
            ],
            [
                "spliterator",
                "java.util",
                "Collection",
                "public default Spliterator<E> spliterator()"
            ],
            [
                "iterator",
                "java.util",
                "Collection",
                "public abstract Iterator<E> iterator()"
            ],
            [
                "size",
                "java.util",
                "Collection",
                "public abstract int size()"
            ],
            [
                "equals",
                "java.util",
                "Collection",
                "public abstract boolean equals(Object arg0)"
            ],
            [
                "stream",
                "java.util",
                "Collection",
                "public default Stream<E> stream()"
            ],
            [
                "parallelStream",
                "java.util",
                "Collection",
                "public default Stream<E> parallelStream()"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 26709,
        "oracle": "pinMap != null;",
        "oracleType": "PRE",
        "projectName": "Digital",
        "packageName": "de.neemann.digital.builder.Gal16v8",
        "className": "BuilderCollectorGAL",
        "javadocTag": "@param pinMap the used pinMap. Is required to handle aliases correctly",
        "methodJavadoc": "    /**\n     * Creates a new instance\n     *\n     * @param pinMap the used pinMap. Is required to handle aliases correctly\n     */",
        "methodSourceCode": "public BuilderCollectorGAL(PinMap pinMap){\n    this.pinMap = pinMap;\n    sequentialVars = new HashSet<>();\n}",
        "classJavadoc": "/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */",
        "classSourceCode": "/*\n * Copyright (c) 2019 Helmut Neemann.\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.builder.Gal16v8;\n\nimport de.neemann.digital.analyse.expression.Expression;\nimport de.neemann.digital.builder.BuilderCollector;\nimport de.neemann.digital.builder.BuilderException;\nimport de.neemann.digital.builder.PinMap;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Map;\n\n/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */\npublic class BuilderCollectorGAL extends BuilderCollector {\n    private final PinMap pinMap;\n    private HashSet<String> sequentialVars;\n    private boolean doubleCellUsageFixed = false;\n\n    /**\n     * Creates a new instance\n     *\n     * @param pinMap the used pinMap. Is required to handle aliases correctly\n     */\n    public BuilderCollectorGAL(PinMap pinMap) {\n        this.pinMap = pinMap;\n        sequentialVars = new HashSet<>();\n    }\n\n    @Override\n    public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        return super.addCombinatorial(name, expression);\n    }\n\n    @Override\n    public BuilderCollector addSequential(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        sequentialVars.add(name);\n        return super.addSequential(name, expression);\n    }\n\n    private void checkOpen() {\n        if (doubleCellUsageFixed)\n            throw new RuntimeException(\"wrong BuilderCollectorGAL usage!\");\n    }\n\n    private void fixDoubleCellUsage() {\n        if (!doubleCellUsageFixed) {\n\n            super.getCombinatorial().entrySet().removeIf(c -> {\n                if (pinMap.isSimpleAlias(c.getKey(), c.getValue(), sequentialVars)) {\n                    removeOutput(c.getKey());\n                    return true;\n                }\n                return false;\n            });\n\n            doubleCellUsageFixed = true;\n        }\n    }\n\n    @Override\n    public ArrayList<String> getOutputs() {\n        fixDoubleCellUsage();\n        return super.getOutputs();\n    }\n\n    @Override\n    public ArrayList<String> getInputs() {\n        fixDoubleCellUsage();\n        return super.getInputs();\n    }\n\n    @Override\n    public Map<String, Expression> getCombinatorial() {\n        fixDoubleCellUsage();\n        return super.getCombinatorial();\n    }\n\n    @Override\n    public Map<String, Expression> getRegistered() {\n        fixDoubleCellUsage();\n        return super.getRegistered();\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "CLI",
                "de.neemann"
            ],
            [
                "Mouse",
                "de.neemann.gui"
            ],
            [
                "LineBreaker",
                "de.neemann.gui"
            ],
            [
                "IconCreator",
                "de.neemann.gui"
            ],
            [
                "ConfirmDialogBuilder",
                "de.neemann.gui"
            ],
            [
                "Resources",
                "de.neemann.gui.language"
            ],
            [
                "Bundle",
                "de.neemann.gui.language"
            ],
            [
                "Language",
                "de.neemann.gui.language"
            ],
            [
                "ToolTipAction",
                "de.neemann.gui"
            ],
            [
                "MyFileChooser",
                "de.neemann.gui"
            ],
            [
                "ClosingWindowListener",
                "de.neemann.gui"
            ],
            [
                "ErrorMessage",
                "de.neemann.gui"
            ],
            [
                "WindowSizeStorage",
                "de.neemann.gui"
            ],
            [
                "Screen",
                "de.neemann.gui"
            ],
            [
                "ToolTipProvider",
                "de.neemann.gui"
            ],
            [
                "InfoDialog",
                "de.neemann.gui"
            ],
            [
                "ValueFormatter",
                "de.neemann.digital.core"
            ],
            [
                "ModelStateObserver",
                "de.neemann.digital.core"
            ],
            [
                "PullDown",
                "de.neemann.digital.core.pld"
            ],
            [
                "Diode",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeBackward",
                "de.neemann.digital.core.pld"
            ],
            [
                "PullUp",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeForward",
                "de.neemann.digital.core.pld"
            ],
            [
                "Node",
                "de.neemann.digital.core"
            ],
            [
                "RAMSinglePort",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualAccess",
                "de.neemann.digital.core.memory"
            ],
            [
                "ByteArrayFromValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "Importer",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "LogisimReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "DataFieldValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "IntelHexReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "BinReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "MultiValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "CounterPreset",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Register",
                "de.neemann.digital.core.memory"
            ],
            [
                "LookUpTable",
                "de.neemann.digital.core.memory"
            ],
            [
                "BlockRAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Counter",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMMangerBase",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManagerFile",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManager",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMInterface",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "EEPROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramCounter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMAsync",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataField",
                "de.neemann.digital.core.memory"
            ],
            [
                "EEPROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMInterface",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataFieldConverter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMSinglePortSel",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramMemory",
                "de.neemann.digital.core.memory"
            ],
            [
                "RegisterFile",
                "de.neemann.digital.core.memory"
            ],
            [
                "ModelStateObserverTyped",
                "de.neemann.digital.core"
            ],
            [
                "Observable",
                "de.neemann.digital.core"
            ],
            [
                "NodeWithoutDelay",
                "de.neemann.digital.core"
            ],
            [
                "ExceptionWithOrigin",
                "de.neemann.digital.core"
            ],
            [
                "ObservableValue",
                "de.neemann.digital.core"
            ],
            [
                "SpeedTest",
                "de.neemann.digital.core"
            ],
            [
                "BurnException",
                "de.neemann.digital.core"
            ],
            [
                "GlobalValues",
                "de.neemann.digital.core"
            ],
            [
                "MIDI",
                "de.neemann.digital.core.io"
            ],
            [
                "RGBLED",
                "de.neemann.digital.core.io"
            ],
            [
                "Out",
                "de.neemann.digital.core.io"
            ],
            [
                "RotEncoder",
                "de.neemann.digital.core.io"
            ],
            [
                "PinControl",
                "de.neemann.digital.core.io"
            ],
            [
                "DipSwitch",
                "de.neemann.digital.core.io"
            ],
            [
                "CommonConnectionType",
                "de.neemann.digital.core.io"
            ],
            [
                "LightBulb",
                "de.neemann.digital.core.io"
            ],
            [
                "Probe",
                "de.neemann.digital.core.io"
            ],
            [
                "Button",
                "de.neemann.digital.core.io"
            ],
            [
                "ButtonLED",
                "de.neemann.digital.core.io"
            ],
            [
                "In",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorUnipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "ProbeMode",
                "de.neemann.digital.core.io"
            ],
            [
                "NotConnected",
                "de.neemann.digital.core.io"
            ],
            [
                "MIDIHelper",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorBipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "Const",
                "de.neemann.digital.core.io"
            ],
            [
                "PowerSupply",
                "de.neemann.digital.core.io"
            ],
            [
                "Ground",
                "de.neemann.digital.core.io"
            ],
            [
                "InValue",
                "de.neemann.digital.core.io"
            ],
            [
                "VDD",
                "de.neemann.digital.core.io"
            ],
            [
                "ServerHolder",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Telnet",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ByteBuffer",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Server",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ElementAttributes",
                "de.neemann.digital.core.element"
            ],
            [
                "Element",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementFactory",
                "de.neemann.digital.core.element"
            ],
            [
                "PinInfo",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescriptions",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "Keys",
                "de.neemann.digital.core.element"
            ],
            [
                "Rotation",
                "de.neemann.digital.core.element"
            ],
            [
                "AttributeListener",
                "de.neemann.digital.core.element"
            ],
            [
                "Key",
                "de.neemann.digital.core.element"
            ],
            [
                "ImmutableList",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementTypeDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "FanIn",
                "de.neemann.digital.core.basic"
            ],
            [
                "NOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "And",
                "de.neemann.digital.core.basic"
            ],
            [
                "XNOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "XOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "Not",
                "de.neemann.digital.core.basic"
            ],
            [
                "NAnd",
                "de.neemann.digital.core.basic"
            ],
            [
                "Function",
                "de.neemann.digital.core.basic"
            ],
            [
                "Or",
                "de.neemann.digital.core.basic"
            ],
            [
                "ExceptionWithOriginInterface",
                "de.neemann.digital.core"
            ],
            [
                "ModelEvent",
                "de.neemann.digital.core"
            ],
            [
                "BacktrackException",
                "de.neemann.digital.core"
            ],
            [
                "PlainSwitch",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGPFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "NFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGNFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PlainSwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "TransGate",
                "de.neemann.digital.core.switching"
            ],
            [
                "SwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Relay",
                "de.neemann.digital.core.switching"
            ],
            [
                "RelayDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Switch",
                "de.neemann.digital.core.switching"
            ],
            [
                "Fuse",
                "de.neemann.digital.core.switching"
            ],
            [
                "Reset",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Stop",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Decoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Delay",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Driver",
                "de.neemann.digital.core.wiring"
            ],
            [
                "DataBus",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "SingleBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "ConnectedBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "AbstractBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "BusModelStateObserver",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "CommonBusValue",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "DriverInvSel",
                "de.neemann.digital.core.wiring"
            ],
            [
                "PriorityEncoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BusSplitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Splitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Multiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitSelector",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Break",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Clock",
                "de.neemann.digital.core.wiring"
            ],
            [
                "AsyncSeq",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Demultiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitsException",
                "de.neemann.digital.core"
            ],
            [
                "NodeInterface",
                "de.neemann.digital.core"
            ],
            [
                "NodeException",
                "de.neemann.digital.core"
            ],
            [
                "FlipflopDAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopD",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRSAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopT",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJKAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJK",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "Monoflop",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRS",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopBit",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "BarrelShifter",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Mul",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Neg",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitExtender",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Add",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Div",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "LeftRightFormat",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "PRNG",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Sub",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BarrelShifterMode",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Comparator",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitCount",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "ObservableValues",
                "de.neemann.digital.core"
            ],
            [
                "Value",
                "de.neemann.digital.core"
            ],
            [
                "IntFormat",
                "de.neemann.digital.core"
            ],
            [
                "SyncAccess",
                "de.neemann.digital.core"
            ],
            [
                "Bits",
                "de.neemann.digital.core"
            ],
            [
                "ProcessInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "StdIOInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "ApplicationVerilogStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "Application",
                "de.neemann.digital.core.extern"
            ],
            [
                "External",
                "de.neemann.digital.core.extern"
            ],
            [
                "Port",
                "de.neemann.digital.core.extern"
            ],
            [
                "PortDefinition",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGHDL",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationIVerilog",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationVHDLStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "VHDLTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGeneric",
                "de.neemann.digital.core.extern"
            ],
            [
                "Options",
                "de.neemann.digital.core.extern"
            ],
            [
                "VerilogTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ExternalFile",
                "de.neemann.digital.core.extern"
            ],
            [
                "ProcessStarter",
                "de.neemann.digital.core.extern"
            ],
            [
                "ModelEventType",
                "de.neemann.digital.core"
            ],
            [
                "Observer",
                "de.neemann.digital.core"
            ],
            [
                "ErrorDetector",
                "de.neemann.digital.core"
            ],
            [
                "Statistics",
                "de.neemann.digital.core.stats"
            ],
            [
                "Countable",
                "de.neemann.digital.core.stats"
            ],
            [
                "Model",
                "de.neemann.digital.core"
            ],
            [
                "Signal",
                "de.neemann.digital.core"
            ],
            [
                "StringList",
                "de.neemann.digital"
            ],
            [
                "XStreamValid",
                "de.neemann.digital"
            ],
            [
                "StatsExport",
                "de.neemann.digital.cli"
            ],
            [
                "SVGExport",
                "de.neemann.digital.cli"
            ],
            [
                "CommandLineTester",
                "de.neemann.digital.cli"
            ],
            [
                "CSVWriter",
                "de.neemann.digital.cli"
            ],
            [
                "BasicCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Argument",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLIException",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Muxer",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentKey",
                "de.neemann.digital.cli.cli"
            ],
            [
                "NamedCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLICommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentBase",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CircuitLoader",
                "de.neemann.digital.cli"
            ],
            [
                "Main",
                "de.neemann.digital.cli"
            ],
            [
                "Modification",
                "de.neemann.digital.undo"
            ],
            [
                "Modifications",
                "de.neemann.digital.undo"
            ],
            [
                "ModifyException",
                "de.neemann.digital.undo"
            ],
            [
                "Copyable",
                "de.neemann.digital.undo"
            ],
            [
                "UndoManager",
                "de.neemann.digital.undo"
            ],
            [
                "ChangedListener",
                "de.neemann.digital.undo"
            ],
            [
                "CircuitRepresentation",
                "de.neemann.digital.fsm"
            ],
            [
                "Transition",
                "de.neemann.digital.fsm"
            ],
            [
                "Movable",
                "de.neemann.digital.fsm"
            ],
            [
                "MouseMovable",
                "de.neemann.digital.fsm"
            ],
            [
                "Optimizer",
                "de.neemann.digital.fsm"
            ],
            [
                "Permute",
                "de.neemann.digital.fsm"
            ],
            [
                "FiniteStateMachineException",
                "de.neemann.digital.fsm"
            ],
            [
                "TransitionTableCreator",
                "de.neemann.digital.fsm"
            ],
            [
                "ValueParser",
                "de.neemann.digital.fsm"
            ],
            [
                "WaitGroup",
                "de.neemann.digital.fsm"
            ],
            [
                "FSMComponent",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMFrame",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "OptimizerDialog",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMDemos",
                "de.neemann.digital.fsm"
            ],
            [
                "FSM",
                "de.neemann.digital.fsm"
            ],
            [
                "State",
                "de.neemann.digital.fsm"
            ],
            [
                "Lang",
                "de.neemann.digital.lang"
            ],
            [
                "LineListenerResolveDontCare",
                "de.neemann.digital.testing"
            ],
            [
                "TestingDataException",
                "de.neemann.digital.testing"
            ],
            [
                "UnitTester",
                "de.neemann.digital.testing"
            ],
            [
                "FolderTestRunner",
                "de.neemann.digital.testing"
            ],
            [
                "TestExecutor",
                "de.neemann.digital.testing"
            ],
            [
                "Transitions",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseDescription",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseElement",
                "de.neemann.digital.testing"
            ],
            [
                "LineEmitterRepeat",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Parser",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppenderBits",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ParserException",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Context",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ModelInitializer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Expression",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterList",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestRow",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitter",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterWhile",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterSimple",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Random",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "SignExtend",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "IfThenElse",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "Function",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "LineListener",
                "de.neemann.digital.testing.parser"
            ],
            [
                "VirtualSignal",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppender",
                "de.neemann.digital.testing.parser"
            ],
            [
                "OperatorPrecedence",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestResultListener",
                "de.neemann.digital.testing"
            ],
            [
                "MatchedValue",
                "de.neemann.digital.testing"
            ],
            [
                "TestResult",
                "de.neemann.digital.testing"
            ],
            [
                "MinimizerInterface",
                "de.neemann.digital.analyse"
            ],
            [
                "LabelNumbering",
                "de.neemann.digital.analyse"
            ],
            [
                "ModelAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "CSVImporter",
                "de.neemann.digital.analyse"
            ],
            [
                "BoolTableExpanded",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableTableModel",
                "de.neemann.digital.analyse"
            ],
            [
                "TableReducer",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "PrimeSelector",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForce",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "LargestFirst",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForceGetAll",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "PrimeSelectorDefault",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BoolTableByteArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "IndependentChecker",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskey",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableExpression",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableBoolArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTable",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRows",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "ThreeStateValue",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskeyExam",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRow",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TruthTableConverter",
                "de.neemann.digital.analyse"
            ],
            [
                "DetermineJKStateMachine",
                "de.neemann.digital.analyse"
            ],
            [
                "Parser",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ParseException",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ModelAnalyserInfo",
                "de.neemann.digital.analyse"
            ],
            [
                "AnalyseException",
                "de.neemann.digital.analyse"
            ],
            [
                "DependencyAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "SubstituteLibrary",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableFormatterHex",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatter",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterTestCase",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterCSV",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterLaTeX",
                "de.neemann.digital.analyse.format"
            ],
            [
                "MinimizerQuineMcCluskey",
                "de.neemann.digital.analyse"
            ],
            [
                "ContextFiller",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "BitSetter",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ContextMap",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Operation",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Context",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NInputs",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NOr",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "ExpressionModifier",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NAnd",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "Constant",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Variable",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionException",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityInclNotVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Equals",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "FormatToExpression",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTable",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Formatter",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatterException",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTableLatex",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Not",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "VariableVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NamedExpression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "MinimizerQuineMcCluskeyExam",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTable",
                "de.neemann.digital.analyse"
            ],
            [
                "SplitPinString",
                "de.neemann.digital.analyse"
            ],
            [
                "CycleDetector",
                "de.neemann.digital.analyse"
            ],
            [
                "DigitalRemoteInterface",
                "de.neemann.digital.gui"
            ],
            [
                "TextSearchFilter",
                "de.neemann.digital.gui"
            ],
            [
                "ExportZipAction",
                "de.neemann.digital.gui"
            ],
            [
                "SettingsBase",
                "de.neemann.digital.gui"
            ],
            [
                "DocumentationLocator",
                "de.neemann.digital.gui"
            ],
            [
                "InitialTutorial",
                "de.neemann.digital.gui.tutorial"
            ],
            [
                "InsertAction",
                "de.neemann.digital.gui"
            ],
            [
                "StatusInterface",
                "de.neemann.digital.gui"
            ],
            [
                "SearchTextField",
                "de.neemann.digital.gui"
            ],
            [
                "SaveAsHelper",
                "de.neemann.digital.gui"
            ],
            [
                "FileHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ReleaseInfo",
                "de.neemann.digital.gui.release"
            ],
            [
                "CheckForNewRelease",
                "de.neemann.digital.gui.release"
            ],
            [
                "StateInterface",
                "de.neemann.digital.gui.state"
            ],
            [
                "StateManager",
                "de.neemann.digital.gui.state"
            ],
            [
                "State",
                "de.neemann.digital.gui.state"
            ],
            [
                "CircuitScrollPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "ItemPicker",
                "de.neemann.digital.gui.components"
            ],
            [
                "LibraryTreeModel",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "SelectTree",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "WindowPosManager",
                "de.neemann.digital.gui.components"
            ],
            [
                "CustomShapeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "TransformHolder",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "BehavioralFixtureCreator",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorFactory",
                "de.neemann.digital.gui.components"
            ],
            [
                "OrderMerger",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementOrderer",
                "de.neemann.digital.gui.components"
            ],
            [
                "ModifyMoveSelected",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteRect",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWires",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfVisualElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyCircuitAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveAndRotElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMeasurementOrdering",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttribute",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "DataEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "CircuitModifierPostClosed",
                "de.neemann.digital.gui.components"
            ],
            [
                "CharDeleter",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "ConsoleTerminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Terminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalInterface",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Keyboard",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "KeyboardDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Editor",
                "de.neemann.digital.gui.components"
            ],
            [
                "VarRectList",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMap",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapComponent",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapDialog",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "MapLayout",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughException",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "CircuitTransferable",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementHelpDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "TestCaseDescriptionDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ValueTableDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestCaseDescriptionEditor",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestAllDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ExpressionListenerOptimizeJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "LaTeXExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "HardwareDescriptionGenerator",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateFile",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateCUPL",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "ExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderOutputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AllSolutionsDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerCSVCondensed",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "BuilderExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionComponent",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "PlainTextExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableReorderManager",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ShowStringDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderInputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ProgressDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "CheckResultListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerStore",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AttributeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ProbeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ColorSchemeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "ROMEditorDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "LabelGenerator",
                "de.neemann.digital.gui.components"
            ],
            [
                "SingleValueDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ExpressionDialog",
                "de.neemann.digital.gui.components.expression"
            ],
            [
                "CircuitComponent",
                "de.neemann.digital.gui.components"
            ],
            [
                "VGA",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicCard",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrix",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "VGADialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "MoveFocusTo",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "ConstraintsBuilder",
                "de.neemann.digital.gui.components"
            ],
            [
                "ScopeTrigger",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphDialog",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphComponent",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "DummyElement",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "ValueTableObserver",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "CircuitModifier",
                "de.neemann.digital.gui.components"
            ],
            [
                "CopiedElementLabelRenamer",
                "de.neemann.digital.gui.components"
            ],
            [
                "TextLineNumber",
                "de.neemann.digital.gui.components"
            ],
            [
                "InsertHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ProgramMemoryLoader",
                "de.neemann.digital.gui"
            ],
            [
                "Main",
                "de.neemann.digital.gui"
            ],
            [
                "StatsDialog",
                "de.neemann.digital.gui"
            ],
            [
                "WindowManager",
                "de.neemann.digital.gui"
            ],
            [
                "Settings",
                "de.neemann.digital.gui"
            ],
            [
                "LibrarySelector",
                "de.neemann.digital.gui"
            ],
            [
                "DigitalUncaughtExceptionHandler",
                "de.neemann.digital.gui"
            ],
            [
                "NumberingWizard",
                "de.neemann.digital.gui"
            ],
            [
                "HandlerInterface",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteSever",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteException",
                "de.neemann.digital.gui.remote"
            ],
            [
                "DigitalHandler",
                "de.neemann.digital.gui.remote"
            ],
            [
                "ModelModifier",
                "de.neemann.digital.gui"
            ],
            [
                "VerilogCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogRenaming",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogGenerator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogTestBenchCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogElement",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogTemplate",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogLibrary",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "CodePrinter",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "CodePrinterStr",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "Statements",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Parser",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ParserException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Statement",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Context",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "FirstClassFunctionCall",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "InnerFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "JavaClass",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "FirstClassFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Func",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Function",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSEvalException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ReferenceToFunc",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToStruct",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToArray",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Reference",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToVar",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Value",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSMap",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSArray",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Separator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLLibrary",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLRenaming",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLGenerator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLEntity",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplate",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplateFunctions",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTestBenchCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "HDLModel",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNode",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNet",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "Printable",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLException",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLPort",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HasName",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "InlineManyToOne",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeAssignments",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "Optimization",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeConstants",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "ReplaceOneToMany",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NameConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "OptimizeExpressions",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "RemoveConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NodeSorterExpressionBased",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "HDLNodeSplitterManyToOne",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeCustom",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeAssignment",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLCircuit",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "ExprVar",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Visitor",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprVarRange",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExpressionOptimizer",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprNot",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprConstant",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprOperate",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprUsingNet",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "HDLNodeBuildIn",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLClockIntegrator",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockIntegratorGeneric",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockInfo",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "HDLNodeSplitterOneToMany",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "FileLocator",
                "de.neemann.digital"
            ],
            [
                "ValueTable",
                "de.neemann.digital.data"
            ],
            [
                "ValueTableModel",
                "de.neemann.digital.data"
            ],
            [
                "DataPlotter",
                "de.neemann.digital.data"
            ],
            [
                "Value",
                "de.neemann.digital.data"
            ],
            [
                "ExpressionExporter",
                "de.neemann.digital.builder"
            ],
            [
                "ExpressionToFileExporter",
                "de.neemann.digital.builder"
            ],
            [
                "RotationByteArrayOutputStream",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "TT2Exporter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "StartATF150xFitter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "OSExecute",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "CreateCHN",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDevice",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDialog",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PL",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATF150xCuplExporter",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PinMap",
                "de.neemann.digital.builder"
            ],
            [
                "PinMapException",
                "de.neemann.digital.builder"
            ],
            [
                "FragmentExpression",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisualElement",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentSameInValue",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "CircuitBuilder",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisitor",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVariable",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Fragment",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Box",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Gal16v8JEDECExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CuplExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "BuilderCollectorGAL",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CleanNameBuilder",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderCollector",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderInterface",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderException",
                "de.neemann.digital.builder"
            ],
            [
                "Gal22v10JEDECExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "Gal22v10CuplExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "FuseMap",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFillerException",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFiller",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "JedecWriter",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "GenericCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibrary",
                "de.neemann.digital.draw.library"
            ],
            [
                "GenericInitCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "Visitor",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryListener",
                "de.neemann.digital.draw.library"
            ],
            [
                "JarComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibraryFolder",
                "de.neemann.digital.draw.library"
            ],
            [
                "CustomElement",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundNotification",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundException",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentSource",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryInterface",
                "de.neemann.digital.draw.library"
            ],
            [
                "ResolveGenerics",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryNode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementTypeDescriptionCustom",
                "de.neemann.digital.draw.library"
            ],
            [
                "InvalidNodeException",
                "de.neemann.digital.draw.library"
            ],
            [
                "NumStringComparator",
                "de.neemann.digital.draw.library"
            ],
            [
                "InputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Interactor",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Drawable",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeBackwardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FuseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DILShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DipSwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LightBulbShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LayoutShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PolarityAwareLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ConstShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BreakShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TextShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegHexShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ProbeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "NotConnectedShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "StepperMotorShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BitSelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericInitCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RectShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "VDDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RAMShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ScopeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DemuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BusSplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullUpShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TestCaseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TunnelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PinControlShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FGFETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TransGateShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ResetShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeForewardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SixteenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "CustomCircuitShapeType",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "InteractorInterface",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeSpecificMatch",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RGBLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RotEncoderShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "IEEEGenericShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEENotShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEAndShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEXOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "ObservableValueReader",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SvgTemplate",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "TransformParser",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "Context",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgException",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgImporter",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "CustomShapeDescription",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "CustomShape",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "FGFETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "OutputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GroundShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "AsyncClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Shape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MissingShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeFactory",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullDownShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DriverShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DataShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DotCreator",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Wire",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Movable",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pins",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Circuit",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Tunnel",
                "de.neemann.digital.draw.elements"
            ],
            [
                "PinException",
                "de.neemann.digital.draw.elements"
            ],
            [
                "ElementOrder",
                "de.neemann.digital.draw.elements"
            ],
            [
                "VisualElement",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pin",
                "de.neemann.digital.draw.elements"
            ],
            [
                "IOState",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireMerger",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireConsistencyChecker",
                "de.neemann.digital.draw.elements"
            ],
            [
                "AsyncSequentialClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelEntry",
                "de.neemann.digital.draw.model"
            ],
            [
                "Net",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelCreator",
                "de.neemann.digital.draw.model"
            ],
            [
                "InverterConfig",
                "de.neemann.digital.draw.model"
            ],
            [
                "NetList",
                "de.neemann.digital.draw.model"
            ],
            [
                "RealTimeClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "Polygon",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Orientation",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Vector",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGSettings",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Transform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorKey",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ExportFactory",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicsImage",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorInterface",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformMatrix",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatLaTeX",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicMinMax",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicTransform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorScheme",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Style",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSkipLines",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "GraphicLineCollector",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "PolygonConverter",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorFloat",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformRotate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Graphic",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleHighContrast",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Parser",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "ParseException",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "PlainTextFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "SVGFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "GraphicsFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "LaTeXFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "Decorate",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Text",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Index",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Sentence",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Blank",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Character",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "ExpressionToText",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Simple",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Export",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleMonochrome",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformTranslate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSwing",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "PolygonParser",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGTokenizer",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GifSequenceWriter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "GifExporter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "ConfigCache",
                "de.neemann.digital.toolchain"
            ],
            [
                "Configuration",
                "de.neemann.digital.toolchain"
            ],
            [
                "Command",
                "de.neemann.digital.toolchain"
            ],
            [
                "FileToCreate",
                "de.neemann.digital.toolchain"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "getMouse",
                "de.neemann.gui",
                "Mouse",
                "/**\n * Returns a mouse event interpreter\n *\n * @return a Mouse interface implementation\n */\nstatic Mouse getMouse() {\n    if (Settings.getInstance().get(Keys.SETTINGS_MAC_MOUSE))\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && !e.isControlDown();\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && e.isControlDown();\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isShiftDown();\n            }\n        };\n    else\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1;\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON3;\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isControlDown();\n            }\n        };\n}"
            ],
            [
                "create",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an icon from a resource\n *\n * @param name name of the resource\n * @return the icon\n */\npublic static Icon create(String name) {\n    return new ImageIcon(createImage(name));\n}"
            ],
            [
                "createImage",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image from a resource\n *\n * @param name name of the resource\n * @return the image\n */\npublic static Image createImage(String name) {\n    try {\n        final float scaling = Screen.getInstance().getScaling();\n        if (scaling == 1) {\n            return getImage(name);\n        } else {\n            BufferedImage image = getImageOrNull(name.substring(0, name.length() - 4) + \"_hi.png\");\n            if (image != null) {\n                int w = (int) (image.getWidth() * scaling / 2);\n                int h = (int) (image.getHeight() * scaling / 2);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            } else {\n                LOGGER.info(\"upscaling of \" + name);\n                image = getImage(name);\n                int w = (int) (image.getWidth() * scaling);\n                int h = (int) (image.getHeight() * scaling);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            }\n        }\n    } catch (IOException e) {\n        throw new RuntimeException(\"Image \" + name + \" not found\", e);\n    }\n}"
            ],
            [
                "createImages",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image list from a resource\n *\n * @param names names of the resource\n * @return the image\n */\npublic static ArrayList<Image> createImages(String... names) {\n    try {\n        ArrayList<Image> list = new ArrayList<Image>(names.length);\n        for (String name : names) {\n            list.add(getImage(name));\n        }\n        return list;\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}"
            ],
            [
                "getCTRLMask",
                "de.neemann.gui",
                "ToolTipAction",
                "/**\n * @return the system specific CTRL mask.\n */\npublic static int getCTRLMask() {\n    int mask = InputEvent.CTRL_DOWN_MASK;\n    if (Screen.isMac())\n        mask = InputEvent.META_DOWN_MASK;\n    return mask;\n}"
            ],
            [
                "checkForSave",
                "de.neemann.gui",
                "ClosingWindowListener",
                "/**\n * Used to check for save! No Window closing is performed!\n *\n * @param parent      the Parent frame\n * @param confirmSave the confirmSafe interface\n * @return true if to proceed\n */\npublic static boolean checkForSave(JFrame parent, ConfirmSave confirmSave) {\n    if (confirmSave.isStateChanged()) {\n        int r = new ConfirmDialogBuilder(SAVE_CHANGES_MESSAGE).setTitle(STATE_CHANGED_MESSAGE).setNoOption(NO_MESSAGE).setYesOption(YES_MESSAGE).setCancleOption(CANCEL_MESSAGE).show(parent);\n        if (r == JOptionPane.YES_OPTION || r == JOptionPane.NO_OPTION) {\n            if (r == JOptionPane.YES_OPTION) {\n                confirmSave.saveChanges();\n                return !confirmSave.isStateChanged();\n            } else\n                return true;\n        } else\n            return false;\n    }\n    return true;\n}"
            ],
            [
                "getParentWindow",
                "de.neemann.gui",
                "ErrorMessage",
                "/**\n * Get the parent window of the given component.\n * If the component is a window this window is returned\n *\n * @param parent the parent component\n * @return the window instance\n */\npublic static Window getParentWindow(Component parent) {\n    if (parent == null)\n        return null;\n    else if (parent instanceof Window)\n        return (Window) parent;\n    else\n        return SwingUtilities.getWindowAncestor(parent);\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the Screen instance\n */\npublic static Screen getInstance() {\n    return InstanceHolder.instance;\n}"
            ],
            [
                "getDefaultFontScaling",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the default font scaling in percent\n */\npublic static int getDefaultFontScaling() {\n    if (// macOS has its own retina handling\n    IS_MAC)\n        return 100;\n    int dpi = getDefaultScreenResolution();\n    int s = (dpi * 100) / 96;\n    if (s > 95 && s < 105)\n        s = 100;\n    return s;\n}"
            ],
            [
                "isLinux",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a windows system\n */\npublic static boolean isLinux() {\n    return IS_LINUX;\n}"
            ],
            [
                "isMac",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a mac\n */\npublic static boolean isMac() {\n    return IS_MAC;\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * @return the singleton instance\n */\npublic static InfoDialog getInstance() {\n    if (instance == null)\n        try {\n            instance = new InfoDialog();\n        } catch (IOException e) {\n            System.out.println(\"error reading InfoDialog \" + e.getMessage());\n        }\n    return instance;\n}"
            ],
            [
                "read",
                "de.neemann.digital.core.memory.importer",
                "Importer",
                "/**\n * Reads the given file to a single data field.\n *\n * @param hexFile   the file to read\n * @param dataBits  the bits used in the data field\n * @param bigEndian uses big endian at import\n * @return the data field\n * @throws IOException IOException\n */\npublic static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException {\n    DataField df = new DataField(1024);\n    read(hexFile, new DataFieldValueArray(df, dataBits), bigEndian);\n    return df;\n}"
            ],
            [
                "getOriginOf",
                "de.neemann.digital.core",
                "ExceptionWithOrigin",
                "/**\n * Returns the file or the files that caused the given exception.\n * If no origin is found null is returned.\n *\n * @param e the exception\n * @return the origin or null;\n */\npublic static String getOriginOf(Throwable e) {\n    while (e != null) {\n        if (e instanceof ExceptionWithOriginInterface) {\n            Set<File> origins = ((ExceptionWithOriginInterface) e).getOrigin();\n            if (origins != null && origins.size() > 0) {\n                StringBuilder sb = new StringBuilder();\n                for (File o : origins) {\n                    if (o != null) {\n                        if (sb.length() > 0)\n                            sb.append(\", \");\n                        sb.append(o.getName());\n                    }\n                }\n                if (sb.length() > 0)\n                    return sb.toString();\n                else\n                    return null;\n            }\n        }\n        e = e.getCause();\n    }\n    return null;\n}"
            ],
            [
                "zMaskString",
                "de.neemann.digital.core",
                "ObservableValue",
                "static String zMaskString(long value, long highZ, int bits) {\n    StringBuilder sb = new StringBuilder();\n    long m = Bits.up(1, bits - 1);\n    for (int i = 0; i < bits; i++) {\n        if ((highZ & m) != 0) {\n            sb.append(\"z\");\n        } else {\n            if ((value & m) != 0) {\n                sb.append(\"1\");\n            } else {\n                sb.append(\"0\");\n            }\n        }\n        m >>>= 1;\n    }\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core",
                "GlobalValues",
                "/**\n * @return returns the global instance\n */\npublic static GlobalValues getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core.io",
                "MIDIHelper",
                "/**\n * @return the MIDIHelper\n */\npublic static MIDIHelper getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new input\n */\npublic static PinInfo input(String name) {\n    return new PinInfo(name, null, Direction.input);\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name        the pins name\n * @param description the pins description\n * @return the new input\n */\npublic static PinInfo input(String name, String description) {\n    return new PinInfo(name, description, Direction.input);\n}"
            ],
            [
                "output",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new output\n */\npublic static PinInfo output(String name) {\n    return new PinInfo(name, null, Direction.output);\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "PinDescription",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "Direction",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "getKeyByName",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Returns the key of the given name.\n * If key does not exist, null is returned.\n *\n * @param name the name of the key\n * @return the key or null\n */\npublic static Key getKeyByName(String name) {\n    return InstanceHolder.INSTANCE.get(name);\n}"
            ],
            [
                "getKeys",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * @return all available keys\n */\npublic static Iterable<Key> getKeys() {\n    return InstanceHolder.INSTANCE.values();\n}"
            ],
            [
                "combine",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "/**\n * Combines two lists\n *\n * @param a   first list\n * @param b   second list\n * @param <T> the Type of the elements\n * @return the new combined list\n */\npublic static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b) {\n    T[] com = Arrays.copyOf(a.items, a.size() + b.size());\n    System.arraycopy(b.items, 0, com, a.size(), b.size());\n    return new ImmutableList<>(com);\n}"
            ],
            [
                "createSwitchModel",
                "de.neemann.digital.core.switching",
                "PlainSwitch",
                "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException {\n    if (input1 instanceof CommonBusValue) {\n        if (input2 instanceof CommonBusValue) {\n            final CommonBusValue in1 = (CommonBusValue) input1;\n            final CommonBusValue in2 = (CommonBusValue) input2;\n            ObservableValue constant = in1.searchConstant();\n            if (constant != null)\n                return new UniDirectionalSwitch(constant, output2);\n            else {\n                constant = in2.searchConstant();\n                if (constant != null)\n                    return new UniDirectionalSwitch(constant, output1);\n                else\n                    return new RealSwitch(in1, output1, in2, output2);\n            }\n        } else\n            return new UniDirectionalSwitch(input1, output2);\n    } else {\n        if (input2 instanceof CommonBusValue) {\n            return new UniDirectionalSwitch(input2, output1);\n        } else {\n            throw new NodeException(Lang.get(\"err_switchHasNoNet\"), output1, output2);\n        }\n    }\n}"
            ],
            [
                "createOneToN",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a one to N splitter\n *\n * @param bits number of outputs\n * @return the splitter\n */\npublic static Splitter createOneToN(int bits) {\n    Ports in = new Ports();\n    in.add(new Port(0, bits));\n    Ports out = new Ports();\n    for (int i = 0; i < bits; i++) out.add(new Port(i, 1));\n    return new Splitter(in, out);\n}"
            ],
            [
                "createNToOne",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a N to one splitter\n *\n * @param bits number of inputs\n * @return the splitter\n */\npublic static Splitter createNToOne(int bits) {\n    Ports in = new Ports();\n    for (int i = 0; i < bits; i++) in.add(new Port(i, 1));\n    Ports out = new Ports();\n    out.add(new Port(0, bits));\n    return new Splitter(in, out);\n}"
            ],
            [
                "ovs",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * Helper to create a {@link ObservableValues} instance\n *\n * @param items the items\n * @return the created instance\n */\npublic static ObservableValues ovs(ObservableValue... items) {\n    return new ObservableValues(items);\n}"
            ],
            [
                "toShortHex",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * Creates a short hex representation of the given value.\n * Use only to represent a value.\n * If confusion is excluded, the prefix '0x' is omitted.\n * Thus 0x1A3 is converted to \"1A3\" which can not be parsed back to a long because \"0x\" is missing.\n *\n * @param value the value\n * @return the hex string\n */\npublic static String toShortHex(long value) {\n    return toShortHex(value, false);\n}"
            ],
            [
                "up",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value up\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long up(long val, int bits) {\n    if (bits < 64)\n        return val << bits;\n    else\n        return 0;\n}"
            ],
            [
                "down",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value down\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long down(long val, int bits) {\n    if (bits < 64)\n        return val >>> bits;\n    else\n        return 0;\n}"
            ],
            [
                "mask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Creates a bit mask with the lowest [bits] bits set.\n *\n * @param bits the number of 1 bits\n * @return a value with the lowest [bits] bits set.\n */\npublic static long mask(int bits) {\n    if (bits < 64)\n        return (1L << bits) - 1;\n    else\n        return -1;\n}"
            ],
            [
                "signedFlagMask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * calculates the signed flag.\n *\n * @param bits the bit count\n * @return the last used bit ( 1<<(bits-1) )\n */\npublic static long signedFlagMask(int bits) {\n    return up(1, bits - 1);\n}"
            ],
            [
                "isNegative",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Returns true if value is negative\n *\n * @param value the value\n * @param bits  the bit count\n * @return true if the last relevant bit is set\n */\npublic static boolean isNegative(long value, int bits) {\n    return (value & signedFlagMask(bits)) != 0;\n}"
            ],
            [
                "signExtend",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Sign extension of the value.\n * signExtend(3,2) returns -1.\n *\n * @param value the value\n * @param bits  number of bits\n * @return the sign extended value\n */\npublic static long signExtend(long value, int bits) {\n    if (bits >= 64)\n        return value;\n    else {\n        if ((value & signedFlagMask(bits)) == 0)\n            return value;\n        else\n            return value | ~mask(bits);\n    }\n}"
            ],
            [
                "binLn2",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Calculates the number of bits needed to store the given value b.\n *\n * @param b number\n * @return number of bits needed to store b\n */\npublic static int binLn2(long b) {\n    int outBits = 1;\n    while ((1L << outBits) <= b) outBits++;\n    return outBits;\n}"
            ],
            [
                "removeBitFromValue",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Removes a bit from a value.\n * This means it shifts the higher bits down. Behaves like removing an item from a list.\n *\n * @param value the value\n * @param bit   the bit to remove\n * @return the new value\n */\npublic static int removeBitFromValue(int value, int bit) {\n    if (bit > 0) {\n        return ((value & (~((1 << (bit + 1)) - 1))) >>> 1) | (value & ((1 << bit) - 1));\n    } else {\n        return value >>> 1;\n    }\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str the string\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str) throws NumberFormatException {\n    return decode(str, false);\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str         the string\n * @param parseFloats if true also floats are parsed\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str, boolean parseFloats) throws NumberFormatException {\n    if (str == null)\n        return 0;\n    str = str.trim();\n    if (str.length() == 0)\n        return 0;\n    if (str.indexOf(':') >= 0)\n        return decodeFixed(str);\n    if (parseFloats && str.indexOf('.') > -1) {\n        try {\n            if (str.endsWith(\"d\") || str.endsWith(\"D\"))\n                return Double.doubleToLongBits(Double.parseDouble(str.substring(0, str.length() - 1)));\n            else\n                return Float.floatToIntBits(Float.parseFloat(str));\n        } catch (java.lang.NumberFormatException e) {\n            throw new NumberFormatException(str, 0);\n        }\n    }\n    int p = 0;\n    boolean neg = false;\n    if (str.charAt(p) == '-') {\n        neg = true;\n        p++;\n    }\n    if (p >= str.length())\n        throw new NumberFormatException(str, p);\n    boolean wasZero = false;\n    while (str.length() > p && str.charAt(p) == '0') {\n        wasZero = true;\n        p++;\n    }\n    if (p >= str.length())\n        return 0;\n    int radix;\n    if (wasZero) {\n        if (neg)\n            throw new NumberFormatException(str, p);\n        switch(str.charAt(p)) {\n            case 'x':\n            case 'X':\n                radix = 16;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            case 'b':\n            case 'B':\n                radix = 2;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            default:\n                radix = 8;\n        }\n    } else {\n        if (str.charAt(p) == '\\'') {\n            if (neg)\n                throw new NumberFormatException(str, p);\n            p++;\n            if (p == str.length())\n                throw new NumberFormatException(str, p);\n            return str.charAt(p);\n        } else\n            radix = 10;\n    }\n    long val = decode(str, p, radix);\n    if (neg)\n        val = -val;\n    return val;\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes the given string starting at position p\n *\n * @param str   the string to decode\n * @param p     the starting position\n * @param radix the radix\n * @return the value\n * @throws NumberFormatException NumberFormatException\n */\npublic static long decode(String str, int p, int radix) throws NumberFormatException {\n    long val = 0;\n    while (p < str.length()) {\n        int d = Character.digit(str.charAt(p), radix);\n        if (d < 0)\n            throw new NumberFormatException(str, p);\n        val = val * radix + d;\n        p++;\n    }\n    return val;\n}"
            ],
            [
                "getCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Extract the code from the attributes.\n * The code is either stored directly or there is a file given.\n *\n * @param attr the attributes\n * @param root the projects main folder\n * @return the code\n * @throws IOException IOException\n */\nstatic String getCode(ElementAttributes attr, File root) throws IOException {\n    if (attr.contains(Keys.EXTERNAL_CODE))\n        return attr.get(Keys.EXTERNAL_CODE);\n    if (attr.contains(Keys.EXTERNAL_CODE_FILE))\n        return readCode(attr.getFile(Keys.EXTERNAL_CODE_FILE, root));\n    return \"\";\n}"
            ],
            [
                "readCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Reads the code from a file\n *\n * @param file the file\n * @return the code\n * @throws IOException IOException\n */\nstatic String readCode(File file) throws IOException {\n    byte[] data = Files.readAllBytes(file.toPath());\n    return new String(data, StandardCharsets.UTF_8);\n}"
            ],
            [
                "create",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Creates a new application instance\n *\n * @param type the type of the process\n * @param attr the elements attributes\n * @return the created process handler\n */\nstatic Application create(Type type, ElementAttributes attr) {\n    switch(type) {\n        case Generic:\n            return new ApplicationGeneric();\n        case GHDL:\n            return new ApplicationGHDL(attr);\n        case IVERILOG:\n            return new ApplicationIVerilog(attr);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "start",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Helper to start a process.\n * If result value is not null an exception is thrown.\n *\n * @param dir  the folder in which the process is started\n * @param args the argument\n * @return the console output\n * @throws IOException IOException\n */\npublic static String start(File dir, String... args) throws IOException {\n    ProcessBuilder pb = new ProcessBuilder(args).redirectErrorStream(true);\n    if (dir != null)\n        pb.directory(dir);\n    Process p;\n    try {\n        p = pb.start();\n    } catch (IOException e) {\n        throw new CouldNotStartProcessException(Lang.get(\"err_couldNotStartProcess_N\", Arrays.toString(args)), e);\n    }\n    ReaderThread rt = new ReaderThread(p.getInputStream());\n    rt.start();\n    try {\n        int exitValue = p.waitFor();\n        rt.join();\n        String output = rt.toString();\n        if (exitValue != 0)\n            throw new IOException(Lang.get(\"err_exitValueNotNull_N_O\", exitValue, output));\n        return output;\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n}"
            ],
            [
                "joinStrings",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Merges the given string.\n * If all strings are null or empty, null is returned\n *\n * @param strings the strings to join\n * @return the joined string or null\n */\npublic static String joinStrings(String... strings) {\n    StringBuilder sb = new StringBuilder();\n    for (String s : strings) {\n        if (s != null) {\n            String str = s.trim();\n            if (str.length() > 0) {\n                if (sb.length() > 0)\n                    sb.append(\"\\n\");\n                sb.append(str);\n            }\n        }\n    }\n    if (sb.length() > 0)\n        return sb.toString();\n    else\n        return null;\n}"
            ],
            [
                "fromString",
                "de.neemann.digital.cli.cli",
                "Argument",
                "/**\n * Creates a value from a string\n *\n * @param val      the value as a string\n * @param defValue the default value\n * @return the value converted to the type of the default value\n * @throws CLIException CLIException\n */\npublic static Object fromString(String val, Object defValue) throws CLIException {\n    if (defValue instanceof String)\n        return val;\n    else if (defValue instanceof Boolean)\n        switch(val.toLowerCase()) {\n            case \"yes\":\n            case \"1\":\n            case \"true\":\n                return true;\n            case \"no\":\n            case \"0\":\n            case \"false\":\n                return false;\n            default:\n                throw new CLIException(Lang.get(\"cli_notABool_N\", val), 106);\n        }\n    else if (defValue instanceof Integer) {\n        try {\n            return Integer.parseInt(val);\n        } catch (NumberFormatException e) {\n            throw new CLIException(Lang.get(\"cli_notANumber_N\", val), e);\n        }\n    } else\n        throw new CLIException(Lang.get(\"cli_invalidType_N\", defValue.getClass().getSimpleName()), 203);\n}"
            ],
            [
                "fac",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the factorial of a number.\n * If the result is greater as the max long value, the max value is returned.\n *\n * @param n integer\n * @return the factorial of the given number\n */\npublic static long fac(int n) {\n    if (n > 20)\n        return Long.MAX_VALUE;\n    return FAC_TABLE[n];\n}"
            ],
            [
                "getTimeComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the time complexity of optimizing the given fsm\n *\n * @param fsm the fsm\n * @return the time complexity\n */\npublic static long getTimeComplexity(FSM fsm) {\n    List<State> states = fsm.getStates();\n    int size = states.size();\n    int sizeInclDC = 1 << Bits.binLn2(size - 1);\n    if (sizeInclDC > 20)\n        return Long.MAX_VALUE;\n    return fac(sizeInclDC) / fac(sizeInclDC - size);\n}"
            ],
            [
                "calcComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException {\n    TruthTable tt = fsm.createTruthTable(null);\n    MinimizerInterface mi = new MinimizerQuineMcCluskey();\n    ComplexityListener listener = new ComplexityListener(out);\n    for (int i = 0; i < tt.getResultCount(); i++) mi.minimize(tt.getVars(), tt.getResult(i), tt.getResultName(i), listener);\n    return listener.complexity;\n}"
            ],
            [
                "blink",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Blink\n *\n * @return the fsm\n */\npublic static FSM blink() {\n    State off = new State(\"off\");\n    State on = new State(\"on\");\n    return new FSM(off, on).transition(on, off, null).transition(off, on, null);\n}"
            ],
            [
                "rotDecoder",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a debounced rotary switch decoder\n *\n * @return the fsm\n */\npublic static FSM rotDecoder() {\n    State init = new State(\"init\");\n    State top = new State(\"top\");\n    State topSetLeft = new State(\"topSetLeft\").setValues(\"L=1\");\n    State topSetRight = new State(\"topSetRight\").setValues(\"R=1\");\n    State leftTop = new State(\"leftTop\");\n    State leftBottom = new State(\"leftBottom\");\n    State bottom = new State(\"bottom\");\n    State bottomSetLeft = new State(\"bottomSetRight\").setValues(\"R=1\");\n    State bottomSetRight = new State(\"bottomSetLeft\").setValues(\"L=1\");\n    State rightTop = new State(\"rightTop\");\n    State rightBottom = new State(\"rightBottom\");\n    return new FSM(init, top, topSetLeft, leftTop, leftBottom, bottomSetLeft, bottom, bottomSetRight, rightBottom, rightTop, topSetRight).transition(init, top, \"A=0 & B=0\").transition(init, bottom, \"A=1 & B=1\").transition(top, leftTop, \"A=1 & B=0\").transition(top, rightTop, \"A=0 & B=1\").transition(topSetLeft, top, null).transition(topSetRight, top, null).transition(rightTop, top, \"A=0 & B=0\").transition(rightBottom, topSetRight, \"A=0 & B=0\").transition(leftTop, top, \"A=0 & B=0\").transition(leftBottom, topSetLeft, \"A=0 & B=0\").transition(bottom, leftBottom, \"A=1 & B=0\").transition(bottom, rightBottom, \"A=0 & B=1\").transition(bottomSetLeft, bottom, null).transition(bottomSetRight, bottom, null).transition(rightBottom, bottom, \"A=1 & B=1\").transition(rightTop, bottomSetRight, \"A=1 & B=1\").transition(leftBottom, bottom, \"A=1 & B=1\").transition(leftTop, bottomSetLeft, \"A=1 & B=1\");\n}"
            ],
            [
                "counter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a counter\n *\n * @param n the number of states\n * @return the fsm\n */\npublic static FSM counter(int n) {\n    FSM fsm = new FSM();\n    State last = null;\n    for (int i = 0; i < n; i++) {\n        State s = new State(\"\").setNumber(i);\n        fsm.add(s);\n        if (last != null)\n            fsm.transition(last, s, null);\n        last = s;\n    }\n    fsm.transition(last, fsm.getStates().get(0), null);\n    return fsm;\n}"
            ],
            [
                "trafficLight",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLight() {\n    State red = new State(\"red\").setNumber(0).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(1).setValues(\"R=1,Y=1\");\n    State green = new State(\"green\").setNumber(2).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(3).setValues(\"Y=1\");\n    return new FSM(red, redYellow, green, yellow).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "trafficLightMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLightMedwedew() {\n    State init = new State(\"init\").setNumber(0);\n    State red = new State(\"red\").setNumber(1).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(3).setValues(\"R=1, Y=1\");\n    State green = new State(\"green\").setNumber(4).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(2).setValues(\"Y=1\");\n    return new FSM(init, red, redYellow, green, yellow).transition(init, red, null).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "selCounter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM selCounter() {\n    State s0 = new State(\"s0\").setNumber(0);\n    State s1 = new State(\"s1\").setNumber(1);\n    State s2 = new State(\"s2\").setNumber(2);\n    State s3 = new State(\"s3\").setNumber(3);\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, null).transition(s0, s0, \"!T0  !T1\").transition(s1, s2, null).transition(s1, s0, \"T0 !T1\").transition(s2, s3, null).transition(s2, s0, \"!T0 T1\").transition(s3, s0, null);\n}"
            ],
            [
                "stepper",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepper() {\n    State s0 = new State(\"s0\").setNumber(0).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(1).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(2).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(3).setValues(\"P3=1,P0=1\");\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "stepperMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepperMedwedew() {\n    State init = new State(\"init\").setNumber(0).setValues(\"P0=2,P1=2,P2=2,P3=2\");\n    State s0 = new State(\"s0\").setNumber(3).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(6).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(12).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(9).setValues(\"P3=1,P0=1\");\n    return new FSM(init, s0, s1, s2, s3).transition(init, s0, null).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"fsm\", FSM.class);\n    xStream.alias(\"state\", State.class);\n    xStream.alias(\"transition\", Transition.class);\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"vectorf\", VectorFloat.class);\n    xStream.aliasAttribute(VectorFloat.class, \"x\", \"x\");\n    xStream.aliasAttribute(VectorFloat.class, \"y\", \"y\");\n    return xStream;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename filename\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(File filename) throws IOException {\n    final FSM fsm = loadFSM(new FileInputStream(filename));\n    fsm.file = filename;\n    return fsm;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new fsm instance from a stored file\n *\n * @param in the input stream\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        final FSM fsm = (FSM) xStream.fromXML(in);\n        for (Transition t : fsm.transitions) t.setFSM(fsm);\n        for (State s : fsm.states) s.setFSM(fsm);\n        fsm.modified = false;\n        fsm.activeStateTransition = -1;\n        return fsm;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "get",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string of key if no translation present\n */\npublic static String get(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKey(key, params);\n}"
            ],
            [
                "getNull",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string or null if no translation present\n */\npublic static String getNull(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKeyNull(key, params);\n}"
            ],
            [
                "getBundle",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the resource bundle\n */\npublic static Bundle getBundle() {\n    return InstanceHolder.INSTANCE.bundle;\n}"
            ],
            [
                "currentLanguage",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the current language\n */\npublic static Language currentLanguage() {\n    return InstanceHolder.INSTANCE.currentLanguage;\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * Resolves a multilingual user defined string.\n * Allows the user to define multilingual content by using a simple syntax:\n * You can enter strings like \"Word! {{de Welt!}} {{fr Monde!}}\". This method extracts\n * the appropriate string for the current language.\n *\n * @param text the complete text description\n * @return the evaluated text.\n */\npublic static String evalMultilingualContent(String text) {\n    return evalMultilingualContent(text, currentLanguage());\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "static String evalMultilingualContent(String text, Language currentLanguage) {\n    int pos = text.indexOf(\"{{\");\n    if (pos < 0)\n        return text;\n    String def = text.substring(0, pos).trim();\n    do {\n        int p2 = pos + 1;\n        int count = 1;\n        while (count > 0) {\n            char c = text.charAt(p2);\n            if (c == '{')\n                count++;\n            else if (c == '}')\n                count--;\n            p2++;\n            if (p2 == text.length() && count > 0) {\n                p2 = 1;\n                break;\n            }\n        }\n        p2 -= 2;\n        if (p2 > pos + 3) {\n            String l = text.substring(pos + 2, pos + 4);\n            if (l.equalsIgnoreCase(currentLanguage.getName()))\n                return text.substring(pos + 4, p2).trim();\n            if (l.equalsIgnoreCase(\"en\") && def.isEmpty())\n                def = text.substring(pos + 4, p2).trim();\n            pos = text.indexOf(\"{{\", p2);\n        } else\n            return def;\n    } while (pos > 0);\n    return def;\n}"
            ],
            [
                "lowest",
                "de.neemann.digital.testing.parser",
                "OperatorPrecedence",
                "/**\n * @return the lowest operator precedence to start evaluation with\n */\npublic static OperatorPrecedence lowest() {\n    return OR;\n}"
            ],
            [
                "addOne",
                "de.neemann.digital.analyse",
                "ModelAnalyser",
                "/**\n * Adds the \"+1\" to the variables name\n *\n * @param name the vars name\n * @return the modified name\n */\npublic static String addOne(String name) {\n    if (name.endsWith(\"^n\"))\n        return name.substring(0, name.length() - 1) + \"{n+1}\";\n    else\n        return name + \"+1\";\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param file the file\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(File file) throws IOException {\n    return readCSV(new FileReader(file));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the string to read\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(String csv) throws IOException {\n    return readCSV(new StringReader(csv));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the reader\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(Reader csv) throws IOException {\n    BufferedReader r = new BufferedReader(csv);\n    TruthTable tt = readHeader(r);\n    while (true) {\n        String line = r.readLine();\n        if (line == null)\n            return tt;\n        line = line.trim();\n        if (!line.isEmpty())\n            parseLine(tt, line);\n    }\n}"
            ],
            [
                "createDoubledValues",
                "de.neemann.digital.analyse.quinemc",
                "BoolTableByteArray",
                "/**\n * Creates a table where all values added twive\n *\n * @param values the original values\n * @return the new values\n */\npublic static BoolTableByteArray createDoubledValues(BoolTable values) {\n    BoolTableByteArray t = new BoolTableByteArray(values.size() * 2);\n    for (int i = 0; i < values.size(); i++) {\n        int v = values.get(i).asInt();\n        t.set(i * 2, v);\n        t.set(i * 2 + 1, v);\n    }\n    return t;\n}"
            ],
            [
                "simplify",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Simplifies the given expression.\n * If no simplification was found, the original expression is returned unchanged.\n *\n * @param expression the expression to simplify\n * @return the simplified expression\n * @throws ExpressionException ExpressionException\n */\npublic static Expression simplify(Expression expression) throws ExpressionException {\n    int initialCplx = expression.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    Expression newExp = new QuineMcCluskey(expression).simplify().getExpression();\n    int newCplx = newExp.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    if (newCplx < initialCplx)\n        return newExp;\n    else\n        return expression;\n}"
            ],
            [
                "addAnd",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Creates the final expression\n *\n * @param e         the expression to complete\n * @param rows      the rows to add\n * @param variables the variables to use to build the expression\n * @return the expression\n */\npublic static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables) {\n    for (TableRow r : rows) {\n        Expression n = r.getExpression(variables);\n        if (e == null)\n            e = n;\n        else\n            e = or(e, n);\n    }\n    return e;\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from a bool\n *\n * @param bool the bool\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(boolean bool) {\n    if (bool) {\n        return one;\n    } else {\n        return zero;\n    }\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from an int\n * 0 and 1 work as expected, any other value means \"dont care\"\n *\n * @param value the value\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(int value) {\n    switch(value) {\n        case 0:\n            return ThreeStateValue.zero;\n        case 1:\n            return ThreeStateValue.one;\n        default:\n            return ThreeStateValue.dontCare;\n    }\n}"
            ],
            [
                "doImplicitTypeCasts",
                "de.neemann.digital.analyse",
                "SubstituteLibrary",
                "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val) {\n    if (expectedClass == Integer.class && val instanceof Long) {\n        long l = (Long) val;\n        if (l <= Integer.MAX_VALUE && l >= Integer.MIN_VALUE)\n            return (int) l;\n    } else if (expectedClass == Long.class && val instanceof Number) {\n        return ((Number) val).longValue();\n    } else if (expectedClass == Color.class && val instanceof Number) {\n        return new Color(((Number) val).intValue());\n    } else if (expectedClass == Boolean.class && val instanceof Number) {\n        long b = ((Number) val).longValue();\n        return b != 0;\n    } else if (expectedClass == InValue.class) {\n        if (val instanceof Number)\n            return new InValue(((Number) val).longValue());\n        else {\n            try {\n                return new InValue(val.toString());\n            } catch (Bits.NumberFormatException e) {\n                return val;\n            }\n        }\n    } else if (expectedClass == InverterConfig.class && val instanceof java.util.List) {\n        InverterConfig.Builder b = new InverterConfig.Builder();\n        for (Object i : (java.util.List) val) b.add(i.toString());\n        return b.build();\n    } else if (expectedClass == DataField.class && val instanceof java.util.List) {\n        java.util.List list = (java.util.List) val;\n        long[] longs = new long[list.size()];\n        for (int i = 0; i < list.size(); i++) if (list.get(i) instanceof Number)\n            longs[i] = ((Number) list.get(i)).longValue();\n        else\n            return val;\n        return new DataField(longs);\n    } else if (expectedClass == Rotation.class && val instanceof Number) {\n        int r = ((Number) val).intValue();\n        return new Rotation(r % 4);\n    } else if (expectedClass == File.class && val instanceof String) {\n        return new File(val.toString());\n    } else if (expectedClass == TestCaseDescription.class && val instanceof String) {\n        try {\n            return new TestCaseDescription(val.toString());\n        } catch (Exception e) {\n            return val;\n        }\n    } else if (expectedClass.isEnum() && val instanceof Number) {\n        Class<Enum<?>> e = (Class<Enum<?>>) expectedClass;\n        Object[] values = e.getEnumConstants();\n        int index = ((Number) val).intValue();\n        if (index < 0 || index >= values.length)\n            return values[0];\n        else\n            return values[index];\n    }\n    return val;\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Iterable<Expression> exp) {\n    return simplify(new Or(exp, true));\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), true));\n}"
            ],
            [
                "xor",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new XOR expression\n *\n * @param a the expression to XOR\n * @param b the expression to XOR\n * @return the created expression\n */\npublic static Expression xor(Expression a, Expression b) {\n    if (b == Constant.ONE) {\n        return Not.not(a);\n    } else if (b == Constant.ZERO) {\n        return a;\n    } else if (a == Constant.ONE) {\n        return Not.not(b);\n    } else if (a == Constant.ZERO) {\n        return b;\n    } else\n        return simplify(new XOr(a, b));\n}"
            ],
            [
                "orNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression orNoMerge(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), false));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Iterable<Expression> exp) {\n    return simplify(new And(exp, true));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), true));\n}"
            ],
            [
                "andNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression andNoMerge(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), false));\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifier\n *\n * @param expression the expression to modify\n * @param modifier   the modifier to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier modifier) {\n    expression.modify(modifier);\n    return modifier.modify(expression);\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifiers\n *\n * @param expression the expression to modify\n * @param modifiers  the modifiers to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier... modifiers) {\n    for (ExpressionModifier m : modifiers) expression = modifyExpression(expression, m);\n    return expression;\n}"
            ],
            [
                "v",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates a new Variable\n *\n * @param name the variables name\n * @return the new Variable\n */\npublic static Variable v(String name) {\n    return new Variable(name);\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates an array of variables\n *\n * @param n the number of varfiables to create.\n * @return variables named \"A0\", \"A1\", \"A2\" and so on\n */\npublic static ArrayList<Variable> vars(int n) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (int i = 0; i < n; i++) v.add(new Variable(\"\" + (char) ('A' + i)));\n    return v;\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Create a list of variables using the given names\n *\n * @param names the names used to create the variables\n * @return the list of variables\n */\npublic static ArrayList<Variable> vars(String... names) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (String n : names) v.add(new Variable(n));\n    return v;\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable.\n */\npublic static boolean isVar(Expression e) {\n    return e instanceof Variable;\n}"
            ],
            [
                "isVarOrNotVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable or a inverted variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable or a inverted variable.\n */\npublic static boolean isVarOrNotVar(Expression e) {\n    return isVar(e) || (e instanceof Not && isVar(((Not) e).getExpression()));\n}"
            ],
            [
                "getDefaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * @return the default format\n */\npublic static FormatToExpression getDefaultFormat() {\n    return Settings.getInstance().get(Keys.SETTINGS_EXPRESSION_FORMAT);\n}"
            ],
            [
                "defaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * Formats a expression to a string.\n * Uses the default format for presentation on the screen.\n *\n * @param exp the expression to format\n * @return the string representation\n */\npublic static String defaultFormat(Expression exp) {\n    return getDefaultFormat().format(exp);\n}"
            ],
            [
                "not",
                "de.neemann.digital.analyse.expression",
                "Not",
                "/**\n * Creates a not expression.\n * Simplifies the expression if possible.\n *\n * @param a the child expression to invert\n * @return the inverted expression\n */\npublic static Expression not(Expression a) {\n    if (a == Constant.ONE)\n        return Constant.ZERO;\n    if (a == Constant.ZERO)\n        return Constant.ONE;\n    if (a instanceof Not && !((Not) a).protect) {\n        return ((Not) a).expression;\n    } else\n        return new Not(a);\n}"
            ],
            [
                "readFromFile",
                "de.neemann.digital.analyse",
                "TruthTable",
                "/**\n * Load the given file and returns a truth table instance\n *\n * @param filename filename\n * @return the {@link TruthTable}\n * @throws IOException IOException\n */\npublic static TruthTable readFromFile(File filename) throws IOException {\n    if (filename.getName().toLowerCase().endsWith(\".csv\"))\n        return CSVImporter.readCSV(filename);\n    else {\n        XStream xStream = getxStream();\n        try (InputStream in = new FileInputStream(filename)) {\n            return (TruthTable) xStream.fromXML(in);\n        }\n    }\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param s the signal\n * @return the port pins used\n */\npublic static SplitPinString create(Signal s) {\n    if (s.missingPinNumber())\n        return EMPTY;\n    return create(s.getPinNumber());\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param pinStr the pins definition;\n * @return the port pins used\n */\npublic static SplitPinString create(String pinStr) {\n    if (pinStr == null || pinStr.trim().length() == 0)\n        return EMPTY;\n    StringTokenizer st = new StringTokenizer(pinStr, \",;\");\n    ArrayList<String> pins = new ArrayList<>();\n    while (st.hasMoreTokens()) pins.add(st.nextToken().trim());\n    return new PinsArray(pins);\n}"
            ],
            [
                "checkSuffix",
                "de.neemann.digital.gui",
                "SaveAsHelper",
                "/**\n * Adds the given suffix to the file\n *\n * @param filename filename\n * @param suffix   suffix\n * @return the file name with the given suffix\n */\npublic static File checkSuffix(File filename, String suffix) {\n    if (suffix == null || filename == null)\n        return filename;\n    String name = filename.getName();\n    int p = name.lastIndexOf('.');\n    if (p >= 0) {\n        String suf = name.substring(p + 1).toLowerCase();\n        if (KNOWN.contains(suf))\n            name = name.substring(0, p);\n        while (name.length() > 0 && name.charAt(name.length() - 1) == '.') name = name.substring(0, name.length() - 1);\n    }\n    return new File(filename.getParentFile(), name + \".\" + suffix);\n}"
            ],
            [
                "addF1Traversal",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Adds F1 as a focus traversal key to a text components.\n *\n * @param text The text component\n * @param <TC> the concrete type of the text component\n * @return the given text component\n */\npublic static <TC extends JTextComponent> TC addF1Traversal(TC text) {\n    HashSet<AWTKeyStroke> set = new HashSet<>(text.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n    set.add(KeyStroke.getKeyStroke(\"F1\"));\n    text.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, set);\n    return text;\n}"
            ],
            [
                "createUndoManager",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Enables undo in the given text component.\n *\n * @param text the text component\n * @return the undo manager\n */\npublic static UndoManager createUndoManager(JTextComponent text) {\n    final UndoManager undoManager;\n    undoManager = new UndoManager();\n    text.getDocument().addUndoableEditListener(undoManager);\n    text.addKeyListener(new KeyAdapter() {\n\n        @Override\n        public void keyPressed(KeyEvent e) {\n            if (e.getKeyCode() == KeyEvent.VK_Z && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canUndo())\n                    undoManager.undo();\n            } else if (e.getKeyCode() == KeyEvent.VK_Y && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canRedo())\n                    undoManager.redo();\n            }\n        }\n    });\n    return undoManager;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components.modification",
                "ModifyInsertWires",
                "/**\n * Creates a simplified modification.\n *\n * @param newWires the wires to insert\n * @return the modification\n */\npublic static Modification<Circuit> create(List<Wire> newWires) {\n    switch(newWires.size()) {\n        case 0:\n            return null;\n        case 1:\n            return new ModifyInsertWire(newWires.get(0));\n        default:\n            return new ModifyInsertWires(newWires);\n    }\n}"
            ],
            [
                "getToolTipName",
                "de.neemann.digital.gui.components.modification",
                "ModificationOfVisualElement",
                "/**\n * Creates a translated name of the given element\n *\n * @param ve the element\n * @return translated name\n */\npublic static String getToolTipName(VisualElement ve) {\n    String s = Lang.getNull(\"elem_\" + ve.getElementName());\n    if (s == null) {\n        s = ve.getElementName();\n        if (s.endsWith(\".dig\"))\n            s = s.substring(0, s.length() - 4);\n    }\n    String l = ve.getElementAttributes().get(Keys.LABEL);\n    if (l.length() > 0)\n        s += \" (\" + l + \")\";\n    return s;\n}"
            ],
            [
                "getTerminal",
                "de.neemann.digital.gui.components.terminal",
                "TerminalDialog",
                "/**\n * Creates a new GUI terminal\n *\n * @param model the model\n * @param attr  the terminals attributes\n * @return the terminal interface\n */\nstatic TerminalInterface getTerminal(Model model, ElementAttributes attr) {\n    return new MyTerminal(model, attr);\n}"
            ],
            [
                "createList",
                "de.neemann.digital.gui.components",
                "CircuitTransferable",
                "/**\n * Creates a list of objects from inserted data\n * Can also throw a {@link ClassCastException}!\n *\n * @param data         the inserted data\n * @param shapeFactory the shapeFactory to set to the elements\n * @return the elements or null\n * @throws IOException IOException\n */\npublic static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException {\n    if (!(data instanceof String))\n        return null;\n    XStream xStream = Circuit.getxStream();\n    try (Reader in = new StringReader(data.toString())) {\n        ArrayList<Movable> elements = (ArrayList<Movable>) xStream.fromXML(in);\n        if (elements == null)\n            return null;\n        for (Movable m : elements) if (m instanceof VisualElement)\n            ((VisualElement) m).setShapeFactory(shapeFactory);\n        return elements;\n    }\n}"
            ],
            [
                "createURLStreamHandlerFactory",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "/**\n * @return factory which catches 'image' protocol requests to deliver images via an URL.\n */\npublic static URLStreamHandlerFactory createURLStreamHandlerFactory() {\n    return new MyURLStreamHandlerFactory();\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "MyURLStreamHandlerFactory",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "isSequentialVar",
                "de.neemann.digital.gui.components.table",
                "ExpressionListenerJK",
                "/**\n * If the name belongs to a sequential state var, the state vars name is returned.\n * Otherwise a null is returned\n *\n * @param name the name of the variable\n * @return the state variable or null\n */\npublic static String isSequentialVar(String name) {\n    String detName = null;\n    if (name.endsWith(\"n+1\")) {\n        detName = name.substring(0, name.length() - 2);\n    } else if (name.endsWith(\"{n+1}\")) {\n        detName = name.substring(0, name.length() - 5) + \"n\";\n    }\n    return detName;\n}"
            ],
            [
                "getAttrList",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * @return returns the list of circuit attributes\n */\npublic static ArrayList<Key> getAttrList() {\n    return ATTR_LIST;\n}"
            ],
            [
                "raster",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * rounds the given vector to the raster\n *\n * @param pos the vector\n * @return pos round to raster\n */\npublic static Vector raster(Vector pos) {\n    return new Vector((int) Math.round((double) pos.x / SIZE) * SIZE, (int) Math.round((double) pos.y / SIZE) * SIZE);\n}"
            ],
            [
                "createLiveDialog",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "/**\n * Creates a instance prepared for \"live logging\"\n *\n * @param owner      the parent frame\n * @param model      the model\n * @param microStep  stepping mode\n * @param ordering   the ordering to use\n * @param sampleSize the number of samples\n * @return the created instance\n */\npublic static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize) {\n    String title;\n    if (microStep)\n        title = Lang.get(\"win_measures_microstep\");\n    else\n        title = Lang.get(\"win_measures_fullstep\");\n    ArrayList<Signal> signals = model.getSignalsCopy();\n    signals.removeIf(signal -> !signal.isShowInGraph());\n    new OrderMerger<String, Signal>(ordering) {\n\n        @Override\n        public boolean equals(Signal a, String b) {\n            return a.getName().equals(b);\n        }\n    }.order(signals);\n    ValueTableObserver valueTableObserver = new ValueTableObserver(microStep, signals, sampleSize);\n    GraphDialog graphDialog = new GraphDialog(owner, title, valueTableObserver.getLogData(), model, true).setColumnInfo(createColumnsInfo(signals));\n    graphDialog.addWindowListener(new WindowAdapter() {\n\n        @Override\n        public void windowOpened(WindowEvent e) {\n            model.addObserver(valueTableObserver);\n        }\n\n        @Override\n        public void windowClosed(WindowEvent e) {\n            model.removeObserver(valueTableObserver);\n        }\n    });\n    return graphDialog;\n}"
            ],
            [
                "createColumnsInfo",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals) {\n    ValueTable.ColumnInfo[] info = new ValueTable.ColumnInfo[signals.size()];\n    for (int i = 0; i < signals.size(); i++) {\n        Signal s = signals.get(i);\n        info[i] = new ValueTable.ColumnInfo(s.getFormat(), s.getValue().getBits());\n    }\n    return info;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "isExperimentalMode",
                "de.neemann.digital.gui",
                "Main",
                "/**\n * @return true if experimental features are enabled\n */\npublic static boolean isExperimentalMode() {\n    return experimental;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "WindowManager",
                "/**\n * @return the WindowManager\n */\npublic static WindowManager getInstance() {\n    return InstanceHolderClass.INSTANCE;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "Settings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static Settings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "getRange",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog bit range\n *\n * @param bits the number of bits\n * @return the bit range\n */\npublic static String getRange(int bits) {\n    if (bits == 1)\n        return \"\";\n    else\n        return \"[\" + (bits - 1) + \":0]\";\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog type for a signal\n *\n * @param def  the signal type (input or output) used if dir is not \"inout\"\n * @param dir  used to check if direction is \"inout\"\n * @param bits the number of bits\n * @return the verilog signal type\n */\npublic static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits) {\n    String result;\n    if (dir == HDLPort.Direction.INOUT)\n        result = \"inout\";\n    else\n        result = (def == HDLPort.Direction.IN) ? \"input\" : \"output\";\n    if (bits > 1) {\n        result += \" [\" + (bits - 1) + \":0]\";\n    }\n    return result;\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    return (bits + \"'b\" + s);\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.verilog2.lib",
                "VerilogTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given\n * element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(MODULE_PREFIX + elementName);\n}"
            ],
            [
                "createFromJar",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n *\n * @param path the path of the file to load\n * @param cl   the classloader used to load the template. If set to null, the SystemClassLoader is used\n * @return the statement\n * @throws IOException     IOException\n * @throws ParserException ParserException\n */\npublic static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException {\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    InputStream in = cl.getResourceAsStream(path);\n    if (in == null)\n        throw new FileNotFoundException(\"file not found: \" + path);\n    try (Reader r = new InputStreamReader(in, StandardCharsets.UTF_8)) {\n        Parser p = new Parser(r, path);\n        return p.parse();\n    }\n}"
            ],
            [
                "createFromJarStatic",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n * Throws only a RuntimeException so use with care!\n *\n * @param path the path of the file to load\n * @return the statement\n */\npublic static Statement createFromJarStatic(String path) {\n    try {\n        return createFromJar(path, null);\n    } catch (IOException | ParserException e) {\n        throw new RuntimeException(\"could not parse: \" + path, e);\n    }\n}"
            ],
            [
                "isWhiteSpace",
                "de.neemann.digital.hdl.hgs",
                "Tokenizer",
                "/**\n * Returns true if the given character is a white space.\n *\n * @param c the character to test\n * @return true in c is a white space\n */\npublic static boolean isWhiteSpace(int c) {\n    return c == ' ' || c == '\\t' || c == '\\n' || c == '\\r';\n}"
            ],
            [
                "toLong",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a long\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static long toLong(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toDouble",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a double\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static double toDouble(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).doubleValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toInt",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an int\n *\n * @param value the value to convert\n * @return the int value\n * @throws HGSEvalException HGSEvalException\n */\npublic static int toInt(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).intValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toBool",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a bool\n *\n * @param value the value to convert\n * @return the bool value\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean toBool(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue() != 0;\n    if (value instanceof Boolean)\n        return ((Boolean) value);\n    throw new HGSEvalException(\"Must be an integer or a bool, is: \" + value.getClass().getSimpleName() + \"=\" + value);\n}"
            ],
            [
                "toString",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a string\n *\n * @param value the value to convert\n * @return the string\n * @throws HGSEvalException HGSEvalException\n */\npublic static String toString(Object value) throws HGSEvalException {\n    if (value instanceof String)\n        return value.toString();\n    throw new HGSEvalException(\"must be a string, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toArray",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an array\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSArray toArray(Object value) throws HGSEvalException {\n    if (value instanceof HGSArray)\n        return (HGSArray) value;\n    if (value instanceof List)\n        return new HGSArrayList((List) value);\n    throw new HGSEvalException(\"must be an array, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toMap",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a map\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSMap toMap(Object value) throws HGSEvalException {\n    if (value instanceof HGSMap)\n        return (HGSMap) value;\n    if (value instanceof Map)\n        return new HGSMapMap((Map) value);\n    throw new HGSEvalException(\"must be a map, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "equals",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Compares two values\n *\n * @param a a value\n * @param b a value\n * @return true if both values are equal\n */\npublic static boolean equals(Object a, Object b) {\n    if (a instanceof Double || b instanceof Double)\n        return a.equals(b);\n    else if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() == ((Number) b).longValue();\n    else if (a instanceof String || b instanceof String)\n        return a.toString().equals(b.toString());\n    else\n        return a.equals(b);\n}"
            ],
            [
                "add",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Adds two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object add(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) + toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() + ((Number) b).longValue();\n    if (a instanceof String || b instanceof String)\n        return a.toString() + b.toString();\n    throw new HGSEvalException(\"arguments must be int or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "sub",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Subtracts two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object sub(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) - toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() - ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "mul",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Multiplies two values\n *\n * @param a a value\n * @param b a value\n * @return the product\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object mul(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) * toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() * ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "div",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Divides two numbers\n *\n * @param a a value\n * @param b a value\n * @return the quotient\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object div(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) / toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() / ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "or",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an or operation\n *\n * @param a a value\n * @param b a value\n * @return the or'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object or(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() | ((Number) b).longValue();\n    return toBool(a) || toBool(b);\n}"
            ],
            [
                "xor",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an xor operation\n *\n * @param a a value\n * @param b a value\n * @return the xor'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object xor(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() ^ ((Number) b).longValue();\n    return toBool(a) ^ toBool(b);\n}"
            ],
            [
                "and",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an and operation\n *\n * @param a a value\n * @param b a value\n * @return the and'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object and(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() & ((Number) b).longValue();\n    return toBool(a) && toBool(b);\n}"
            ],
            [
                "not",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs a not operation\n *\n * @param value a value\n * @return the inverted value\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object not(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ~((Number) value).longValue();\n    return !toBool(value);\n}"
            ],
            [
                "neg",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Changes the sign of the given value\n *\n * @param value the value\n * @return value with changed sign\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object neg(Object value) throws HGSEvalException {\n    if (value instanceof Double)\n        return -(Double) value;\n    return -toLong(value);\n}"
            ],
            [
                "less",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a&lt;b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean less(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) < toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) < toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) < 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "lessEqual",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a<=b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean lessEqual(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) <= toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) <= toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) <= 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "trimRight",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the right side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimRight(String str) {\n    int initial = str.length() - 1;\n    int pos = initial;\n    while (pos >= 0 && isWhiteSpace(str.charAt(pos))) pos--;\n    if (pos == initial)\n        return str;\n    else\n        return str.substring(0, pos + 1);\n}"
            ],
            [
                "trimLeft",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the left side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimLeft(String str) {\n    int pos = 0;\n    while (pos < str.length() && isWhiteSpace(str.charAt(pos))) pos++;\n    if (pos == 0)\n        return str;\n    else\n        return str.substring(pos);\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Returns the vhdl type name\n *\n * @param bits the number of bits\n * @return the types name\n */\npublic static String getType(int bits) {\n    if (bits == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector(\" + (bits - 1) + \" downto 0)\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    int missing = bits - s.length();\n    if (missing > 0)\n        s = ZEROS.substring(0, missing) + s;\n    if (bits > 1)\n        s = \"\\\"\" + s + \"\\\"\";\n    else\n        s = \"'\" + s + \"'\";\n    return s;\n}"
            ],
            [
                "isTemplate",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Returns true, if a hdl template is available.\n *\n * @param etd the {@link ElementTypeDescription}\n * @return true if VHDL template is available\n */\npublic static boolean isTemplate(ElementTypeDescription etd) {\n    ClassLoader cl = etd.getClassLoader();\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    URL url = cl.getResource(createFileName(ENTITY_PREFIX + etd.getName()));\n    return url != null;\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(ENTITY_PREFIX + elementName);\n}"
            ],
            [
                "zero",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Create a vhdl zero with the given bit number\n *\n * @param bits the bit number\n * @return '0' or (others => '0')\n */\npublic static String zero(long bits) {\n    if (bits == 1)\n        return \"'0'\";\n    else\n        return \"(others => '0')\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, long bits) {\n    return VHDLCreator.value(val, (int) bits);\n}"
            ],
            [
                "genericType",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates the code for a generic type\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String genericType(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector ((Bits-1) downto 0)\";\n}"
            ],
            [
                "type",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a type of given width\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String type(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector (\" + (n - 1) + \" downto 0)\";\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.hdl.model2.expression",
                "Expression",
                "/**\n * Helper to check if an expression is a net reference\n *\n * @param expr the expression to check\n * @param net  the net\n * @return true if the expression is a reference to the given net\n */\nstatic boolean isVar(Expression expr, HDLNet net) {\n    return expr instanceof ExprVar && ((ExprVar) expr).getNet() == net;\n}"
            ],
            [
                "isConstant",
                "de.neemann.digital.hdl.model2.expression",
                "ExprConstant",
                "/**\n * Returns the constant if th given node represents a constant\n *\n * @param node the node\n * @return the constant of null if node is not a constant\n */\npublic static ExprConstant isConstant(HDLNode node) {\n    if (node instanceof HDLNodeAssignment) {\n        HDLNodeAssignment expr = (HDLNodeAssignment) node;\n        if (expr.getExpression() instanceof ExprConstant) {\n            return (ExprConstant) expr.getExpression();\n        }\n    }\n    return null;\n}"
            ],
            [
                "getHighZ",
                "de.neemann.digital.data",
                "Value",
                "/**\n * @return returns a high z value\n */\npublic static Value getHighZ() {\n    return new Value(0, Type.HIGHZ);\n}"
            ],
            [
                "calcBackOffset",
                "de.neemann.digital.builder.circuit",
                "FragmentExpression",
                "static int calcBackOffset(int size, int i) {\n    if ((size & 1) != 0 && i == (size - 1) / 2)\n        return 0;\n    if (i >= size / 2)\n        return size - i;\n    else\n        return i + 1;\n}"
            ],
            [
                "isXNor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXNor(long[] data) {\n    for (int i = 0; i < data.length; i++) if ((Integer.bitCount(i) & 1) == data[i])\n        return false;\n    return true;\n}"
            ],
            [
                "isXor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXor(long[] data) {\n    for (int i = 0; i < data.length; i++) if (!((Integer.bitCount(i) & 1) == data[i]))\n        return false;\n    return true;\n}"
            ],
            [
                "getLibPath",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * @return the additional library path\n */\npublic static File getLibPath() {\n    String path;\n    try {\n        path = ElementLibrary.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath().replace('\\\\', '/');\n    } catch (URISyntaxException e) {\n        return new File(\"noLibFound\");\n    }\n    if (path.endsWith(\"/target/classes/\"))\n        return toCanonical(new File(path.substring(0, path.length() - 16) + \"/src/main/dig/lib\"));\n    if (path.endsWith(\"/target/Digital.jar\"))\n        return new File(path.substring(0, path.length() - 19) + \"/src/main/dig/lib\");\n    if (path.endsWith(\"Digital.jar\"))\n        return new File(path.substring(0, path.length() - 12) + \"/lib\");\n    return new File(\"noLibFound\");\n}"
            ],
            [
                "createCustomDescription",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * Creates a custom element description.\n *\n * @param file    the file\n * @param circuit the circuit\n * @param library the library\n * @return the type description\n * @throws PinException PinException\n */\npublic static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException {\n    ElementTypeDescriptionCustom d = new ElementTypeDescriptionCustom(file, circuit, library);\n    d.setElementFactory(attributes -> new CustomElement(d));\n    return d;\n}"
            ],
            [
                "createDeclarationDefault",
                "de.neemann.digital.draw.library",
                "ElementTypeDescriptionCustom",
                "/**\n * Creates the default for custom element declarations\n *\n * @param circuit the circuit\n * @return the default code template\n * @throws NodeException NodeException\n */\npublic static String createDeclarationDefault(Circuit circuit) throws NodeException {\n    TreeSet<String> nameSet = new TreeSet<>();\n    for (VisualElement ve : circuit.getElements()) {\n        String gen = ve.getElementAttributes().get(Keys.GENERIC).trim();\n        if (!gen.isEmpty()) {\n            try {\n                Parser p = new Parser(gen);\n                p.enableRefReadCollection();\n                p.parse(false);\n                for (Reference r : p.getRefsRead()) {\n                    if (r instanceof ReferenceToStruct) {\n                        ReferenceToStruct st = (ReferenceToStruct) r;\n                        if (st.getParent() instanceof ReferenceToVar) {\n                            ReferenceToVar var = (ReferenceToVar) st.getParent();\n                            if (var.getName().equals(\"args\")) {\n                                nameSet.add(st.getName());\n                            }\n                        }\n                    }\n                }\n            } catch (ParserException | IOException e) {\n                final NodeException ex = new NodeException(Lang.get(\"err_evaluatingGenericsCode_N_N\", ve, gen), e);\n                ex.setOrigin(circuit.getOrigin());\n                throw ex;\n            }\n        }\n    }\n    StringBuilder sb = new StringBuilder();\n    for (String name : nameSet) sb.append(name).append(\" := ;\\n\");\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Returns a comparator instance\n *\n * @return the singleton instance\n */\npublic static NumStringComparator getInstance() {\n    return InstanceHolder.INSTANCE;\n}"
            ],
            [
                "compareStr",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Compare two strings\n *\n * @param a a string\n * @param b a string\n * @return the comparison result\n */\npublic static int compareStr(String a, String b) {\n    int pa = 0;\n    int pb = 0;\n    while (true) {\n        final boolean ae = pa == a.length();\n        final boolean be = pb == b.length();\n        if (ae && be)\n            return 0;\n        else if (ae)\n            return -1;\n        else if (be)\n            return 1;\n        char ca = Character.toLowerCase(a.charAt(pa));\n        char cb = Character.toLowerCase(b.charAt(pb));\n        if (isDigit(ca) && isDigit(cb)) {\n            ParseNumber da = new ParseNumber(a, pa);\n            ParseNumber db = new ParseNumber(b, pb);\n            int c = Integer.compare(da.num, db.num);\n            if (c != 0)\n                return c;\n            else {\n                pa = da.p;\n                pb = db.p;\n            }\n        } else {\n            int c = Character.compare(ca, cb);\n            if (c != 0) {\n                return c;\n            } else {\n                pa++;\n                pb++;\n            }\n        }\n    }\n}"
            ],
            [
                "createPins",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Creates pins\n *\n * @param inputs    the inputs\n * @param outputs   the outputs\n * @param invert    true if invert output\n * @param ic        input inverter configuration\n * @param wideShape true if a wide shape is selected\n * @return the pins\n */\npublic static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape) {\n    return createPins(inputs, outputs, invert, wideShape ? 4 : 3, true, ic);\n}"
            ],
            [
                "readStyle",
                "de.neemann.digital.draw.shapes.custom.svg",
                "Context",
                "static Context readStyle(Context context, String style) throws SvgException {\n    SVGTokenizer t = new SVGTokenizer(style);\n    while (true) {\n        final String command = t.readTo(':');\n        if (command.length() == 0)\n            break;\n        final String value = t.readTo(';');\n        AttrParser p = PARSER.get(command);\n        if (p != null)\n            p.parse(context, value);\n    }\n    return context;\n}"
            ],
            [
                "getOutSize",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static int getOutSize(boolean small) {\n    if (small)\n        return SIZE2;\n    else\n        return OUT_SIZE;\n}"
            ],
            [
                "getOutStyle",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static Style getOutStyle(boolean small) {\n    if (small)\n        return Style.THIN;\n    else\n        return Style.NORMAL;\n}"
            ],
            [
                "getOutRad",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Inner circle size used for inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the output circle radius as a vector\n */\npublic static Vector getOutRad(boolean small) {\n    int s = getOutSize(small);\n    return new Vector(s - 6, s - 6);\n}"
            ],
            [
                "createTransform",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static Transform createTransform(int size) {\n    if (size == 2)\n        return Transform.IDENTITY;\n    else {\n        final TransformTranslate tr1 = new TransformTranslate(-70, -139);\n        final TransformTranslate tr2 = new TransformTranslate(70, 139);\n        float s = (2 + size) / 4f;\n        final TransformMatrix trm = new TransformMatrix(s, 0, 0, s, 0, 0);\n        return Transform.mul(tr1, Transform.mul(trm, tr2));\n    }\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"attributes\", ElementAttributes.class);\n    xStream.alias(\"visualElement\", VisualElement.class);\n    xStream.alias(\"wire\", Wire.class);\n    xStream.alias(\"circuit\", Circuit.class);\n    xStream.alias(\"intFormat\", IntFormat.class);\n    xStream.alias(\"exprFormat\", FormatToExpression.class);\n    xStream.alias(\"barrelShifterMode\", BarrelShifterMode.class);\n    xStream.alias(\"direction\", LeftRightFormat.class);\n    xStream.alias(\"rotation\", Rotation.class);\n    xStream.aliasAttribute(Rotation.class, \"rotation\", \"rotation\");\n    xStream.alias(\"language\", Language.class);\n    xStream.aliasAttribute(Language.class, \"name\", \"name\");\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"value\", InValue.class);\n    xStream.aliasAttribute(InValue.class, \"value\", \"v\");\n    xStream.aliasAttribute(InValue.class, \"highZ\", \"z\");\n    xStream.addImplicitCollection(ElementAttributes.class, \"attributes\");\n    xStream.alias(\"data\", DataField.class);\n    xStream.registerConverter(new DataFieldConverter());\n    xStream.alias(\"testData\", TestCaseDescription.class);\n    xStream.alias(\"inverterConfig\", InverterConfig.class);\n    xStream.addImplicitCollection(InverterConfig.class, \"inputs\");\n    xStream.alias(\"storedRoms\", ROMManager.class);\n    xStream.addImplicitCollection(ROMManager.class, \"roms\");\n    xStream.alias(\"romList\", ROMManagerFile.class);\n    xStream.alias(\"romFile\", ROMManagerFile.RomContainerFile.class);\n    xStream.alias(\"romData\", ROMManagerFile.RomContainerDataField.class);\n    xStream.alias(\"appType\", Application.Type.class);\n    xStream.ignoreUnknownElements();\n    xStream.alias(\"shape\", CustomShapeDescription.class);\n    xStream.alias(\"pin\", CustomShapeDescription.Pin.class);\n    xStream.alias(\"circle\", CustomShapeDescription.CircleHolder.class);\n    xStream.alias(\"line\", CustomShapeDescription.LineHolder.class);\n    xStream.alias(\"poly\", CustomShapeDescription.PolygonHolder.class);\n    xStream.alias(\"text\", CustomShapeDescription.TextHolder.class);\n    xStream.alias(\"polygon\", Polygon.class);\n    xStream.alias(\"shapeType\", CustomCircuitShapeType.class);\n    xStream.alias(\"transform\", TransformHolder.class);\n    xStream.registerConverter(new PolygonConverter());\n    return xStream;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename     filename\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load \" + filename);\n    final Circuit circuit = loadCircuit(new FileInputStream(filename), shapeFactory);\n    circuit.origin = filename;\n    return circuit;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param in           the input stream\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load stream\");\n    try {\n        XStream xStream = getxStream();\n        Circuit circuit = (Circuit) xStream.fromXML(in);\n        for (VisualElement ve : circuit.getElements()) ve.setShapeFactory(shapeFactory);\n        if (circuit.version == 0) {\n            // convert to version 1\n            for (Wire w : circuit.getWires()) {\n                w.p1 = w.p1.mul(2);\n                w.p2 = w.p2.mul(2);\n            }\n            for (VisualElement e : circuit.getElements()) e.setPos(e.getPos().mul(2));\n            circuit.version = 1;\n        }\n        if (circuit.version < 2) {\n            Object rm = circuit.getAttributes().get(Keys.ROMMANAGER);\n            if (rm instanceof ROMManager) {\n                circuit.getAttributes().set(Keys.ROMMANAGER, new ROMManagerFile((ROMManager) rm));\n            }\n            circuit.version = 2;\n        }\n        return circuit;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "fixGenerics",
                "de.neemann.digital.draw.model",
                "ModelCreator",
                "/**\n * Creates a concrete circuit from a generic on.\n * Uses the included generic init code.\n *\n * @param circuit the generic circuit\n * @param library the element library\n * @return the concrete circuit\n * @throws NodeException            NodeException\n * @throws ElementNotFoundException ElementNotFoundException\n */\npublic static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException {\n    if (circuit.getAttributes().get(Keys.IS_GENERIC))\n        return new ResolveGenerics(circuit, library).resolveCircuit(null).getCircuit();\n    else\n        return circuit;\n}"
            ],
            [
                "createFromPath",
                "de.neemann.digital.draw.graphics",
                "Polygon",
                "/**\n * Creates a polygon from a SVG path\n *\n * @param path the svg path\n * @return the polygon or null if there was an error\n */\npublic static Polygon createFromPath(String path) {\n    try {\n        return new PolygonParser(path).create();\n    } catch (PolygonParser.ParserException e) {\n        return null;\n    }\n}"
            ],
            [
                "vec",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Returns a new vector\n * shorthand for new Vector(x,y)\n *\n * @param x x\n * @param y y\n * @return the vector\n */\npublic static Vector vec(int x, int y) {\n    return new Vector(x, y);\n}"
            ],
            [
                "min",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the minimum vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the minimum\n */\npublic static Vector min(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x)\n            x = p[i].getX();\n        if (p[i].getY() < y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "max",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the maximim vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the maximum\n */\npublic static Vector max(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() > x)\n            x = p[i].getX();\n        if (p[i].getY() > y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "width",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the width of the given vectors.\n *\n * @param p the vectors\n * @return max(p)-min(p)\n */\npublic static Vector width(VectorInterface... p) {\n    int x1 = p[0].getX();\n    int y1 = p[0].getY();\n    int x2 = x1;\n    int y2 = y1;\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x1)\n            x1 = p[i].getX();\n        if (p[i].getY() < y1)\n            y1 = p[i].getY();\n        if (p[i].getX() > x2)\n            x2 = p[i].getX();\n        if (p[i].getY() > y2)\n            y2 = p[i].getY();\n    }\n    return new Vector(x2 - x1, y2 - y1);\n}"
            ],
            [
                "add",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Adds an offset to every vector in the given list\n *\n * @param vectors the original vectors\n * @param offs    the offset\n * @return the new list\n */\npublic static List<Vector> add(List<Vector> vectors, Vector offs) {\n    ArrayList<Vector> newVec = new ArrayList<>();\n    for (Vector v : vectors) newVec.add(v.add(offs));\n    return newVec;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static SVGSettings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "createKeyList",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * @return a list of available SVG export keys\n */\npublic static List<Key> createKeyList() {\n    ArrayList<Key> list = new ArrayList<>();\n    list.add(LATEX);\n    list.add(PINS_IN_MATH_MODE);\n    list.add(HIDE_TEST);\n    list.add(NO_SHAPE_FILLING);\n    list.add(SMALL_IO);\n    list.add(NO_PIN_MARKER);\n    list.add(THINNER_LINES);\n    list.add(HIGH_CONTRAST);\n    list.add(MONOCHROME);\n    return list;\n}"
            ],
            [
                "mul",
                "de.neemann.digital.draw.graphics",
                "Transform",
                "/**\n * Combines the two given transformations to a common transformation\n *\n * @param t1 first transformation\n * @param t2 second transformation\n * @return the resulting transformation\n */\nstatic Transform mul(Transform t1, Transform t2) {\n    TransformMatrix m1 = t1.getMatrix();\n    TransformMatrix m2 = t2.getMatrix();\n    return new TransformMatrix(m1.a * m2.a + m1.c * m2.b, m1.b * m2.a + m1.d * m2.b, m1.a * m2.c + m1.c * m2.d, m1.b * m2.c + m1.d * m2.d, m2.a * m1.x + m2.b * m1.y + m2.x, m2.c * m1.x + m2.d * m1.y + m2.y);\n}"
            ],
            [
                "rotate",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a rotation.\n * Rotates in mathematically positive direction. Takes into account that\n * in Digital the y-axis goes downwards.\n *\n * @param w the angle in 360 grad units\n * @return the transformation\n */\npublic static TransformMatrix rotate(double w) {\n    final double phi = w / 180 * Math.PI;\n    float cos = (float) Math.cos(phi);\n    float sin = (float) Math.sin(phi);\n    return new TransformMatrix(cos, -sin, sin, cos, 0, 0);\n}"
            ],
            [
                "scale",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a scaling transformation\n *\n * @param sx scaling in x direction\n * @param sy scaling in y direction\n * @return the transformation\n */\npublic static TransformMatrix scale(float sx, float sy) {\n    return new TransformMatrix(sx, 0, 0, sy, 0, 0);\n}"
            ],
            [
                "getTextWidth",
                "de.neemann.digital.draw.graphics",
                "GraphicMinMax",
                "/**\n * Returns a approximation of the width of the given text in the given style\n *\n * @param text  the text\n * @param style the style\n * @return the approximated text width\n */\npublic static int getTextWidth(String text, Style style) {\n    final FontRenderContext fontRenderContext = new FontRenderContext(null, true, false);\n    GraphicsFormatter.Fragment f = GraphicsFormatter.createFragment((fragment, font, str) -> {\n        Rectangle2D rec = style.getFont().getStringBounds(str, fontRenderContext);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), 0);\n    }, style.getFont(), text);\n    return f.getWidth();\n}"
            ],
            [
                "getSelected",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * @return the selected color map\n */\npublic static ColorScheme getSelected() {\n    if (instance == null) {\n        updateInstance();\n        Settings.getInstance().getAttributes().addListener(ColorScheme::updateInstance);\n    }\n    return instance;\n}"
            ],
            [
                "getWireStyle",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Returns the wire style depending on the given value\n *\n * @param value the value to represent\n * @return the style\n */\npublic static Style getWireStyle(Value value) {\n    if (value == null || value.getBits() > 1)\n        return WIRE;\n    if (value.isHighZ())\n        return WIRE_HIGHZ;\n    if (value.getValue() == 1)\n        return WIRE_HIGH;\n    else\n        return WIRE_LOW;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text the text\n * @return the string representation\n */\npublic static String format(Text text) {\n    return format(text, FormatToExpression.getDefaultFormat());\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text   the text\n * @param format the format to use\n * @return the string representation\n */\npublic static String format(Text text, FormatToExpression format) {\n    if (text instanceof Simple) {\n        return ((Simple) text).getText();\n    } else if (text instanceof Blank) {\n        return \" \";\n    } else if (text instanceof Character) {\n        return \"\" + ((Character) text).getChar();\n    } else if (text instanceof Decorate) {\n        Decorate d = (Decorate) text;\n        if (d.getStyle() == Decorate.Style.OVERLINE) {\n            final Text content = d.getContent();\n            if (content instanceof Simple || content instanceof Index)\n                return format.getNot() + format(content, format);\n            else\n                return format.getNot() + \"(\" + format(content, format) + \")\";\n        } else\n            return format(d.getContent(), format);\n    } else if (text instanceof Index) {\n        Index i = (Index) text;\n        String str = format(i.getVar(), format);\n        if (i.getSubScript() != null)\n            str += format(i.getSubScript(), format);\n        if (i.getSuperScript() != null)\n            str += format(i.getSuperScript(), format);\n        return str;\n    } else if (text instanceof Sentence) {\n        Sentence s = (Sentence) text;\n        StringBuilder sb = new StringBuilder();\n        for (Text t : s) sb.append(format(t, format));\n        return sb.toString();\n    } else\n        return \"\";\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "SVGFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr   the {@link Graphics2D} instance\n * @param text the text\n * @return the text fragment\n */\npublic static Fragment createFragment(Graphics2D gr, String text) {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), text);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr         the {@link Graphics2D} instance\n * @param expression the expression\n * @return the text fragment\n * @throws FormatterException FormatterException\n */\npublic static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), new ExpressionToText().createText(expression));\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param sizer the sizer instance\n * @param font  the font\n * @param text  the text\n * @return the fragment\n */\npublic static Fragment createFragment(FontSizer sizer, Font font, String text) {\n    Fragment fragment;\n    try {\n        Text t = new Parser(text).parse();\n        fragment = createFragment(sizer, font, t);\n    } catch (ParseException | FormatterException e) {\n        // if there was an exception, return the complete raw text as a fragment\n        fragment = new TextFragment(sizer, font, text);\n    }\n    return fragment;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param exp the expression to format\n * @return the formatted string\n */\npublic static String format(Expression exp) {\n    return format(new ExpressionToText().createText(exp, FormatToExpression.LATEX), true);\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "math",
                "de.neemann.digital.draw.graphics.text.text",
                "Decorate",
                "/**\n * Adds a MATH decoration to the given text.\n * If the text is already decorated the text is returned directly.\n *\n * @param t the text to decorate\n * @return the decorated text\n */\npublic static Text math(Text t) {\n    if (t instanceof Decorate) {\n        Decorate d = (Decorate) t;\n        if (d.getStyle() == Style.MATH)\n            return t;\n    }\n    return new Decorate(t, Style.MATH);\n}"
            ],
            [
                "escapeXML",
                "de.neemann.digital.draw.graphics",
                "GraphicSVG",
                "/**\n * Escapes a given string to XML\n *\n * @param text the text to escape\n * @return the escaped text.\n */\npublic static String escapeXML(String text) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        switch(c) {\n            case '&':\n                sb.append(\"&amp;\");\n                break;\n            case '<':\n                sb.append(\"&lt;\");\n                break;\n            case '>':\n                sb.append(\"&gt;\");\n                break;\n            case '\"':\n                sb.append(\"&quot;\");\n                break;\n            default:\n                sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
            ],
            [
                "getMirrorYOrientation",
                "de.neemann.digital.draw.graphics",
                "GraphicSwing",
                "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3) {\n    int oy = orientation.getY();\n    VectorInterface d0 = p2.sub(p1).getOrthogonal();\n    VectorInterface d1 = p3.sub(p1);\n    if (d0.scalar(d1) < 0)\n        oy = 2 - oy;\n    return oy;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param file the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(File file) throws IOException {\n    final Configuration configuration = load(new FileInputStream(file));\n    configuration.origin = file;\n    return configuration;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param in the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        return (Configuration) xStream.fromXML(in);\n    } catch (RuntimeException e) {\n        throw new IOException(\"error reading XML\", e);\n    }\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "UNKNOWN",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * Unknown release\n */\npublic static final String UNKNOWN = \"unknown\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullDown",
                "/**\n * The pull down description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "Diode",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeBackward",
                "/**\n * The description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullUp",
                "/**\n * The pull up description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeForward",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROMDualPort",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualAccess",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "CounterPreset",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Register",
                "/**\n * The registers {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "LookUpTable",
                "/**\n * The LUTs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "BlockRAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Counter",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROM",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMAsync",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROM",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROMDualPort",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePortSel",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RegisterFile",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "MIDI",
                "/**\n * The Speakers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RGBLED",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The Input description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "LEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);"
            ],
            [
                "POLARITYAWARELEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The polarity aware LED description\n */\npublic static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "SEVENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment display description\n */\npublic static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();"
            ],
            [
                "SEVENHEXDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment hex display description\n */\npublic static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "SIXTEENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * Sixteen Segment Display\n */\npublic static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RotEncoder",
                "/**\n * The rotary encoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PinControl",
                "/**\n * The description of the pin control logic\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "DipSwitch",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "LightBulb",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Probe",
                "/**\n * The Probe description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Button",
                "/**\n * The Button description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "ButtonLED",
                "/**\n * The ButtonLED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "In",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "STEPS",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * Steps for a full revolution\n */\npublic static final int STEPS = 72;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * The stepper motors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "NotConnected",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorBipolar",
                "/**\n * The bipolar motor description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Const",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PowerSupply",
                "/**\n * Enforces a power supply\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Ground",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "VDD",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.core.io.telnet",
                "ServerHolder",
                "/**\n * The singleton instance\n */\npublic static final ServerHolder INSTANCE = new ServerHolder();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io.telnet",
                "Telnet",
                "/**\n * The telnet server description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);"
            ],
            [
                "BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of bits in simple gates like And and Or\n */\npublic static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);"
            ],
            [
                "INPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * input bits of sign extender\n */\npublic static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);"
            ],
            [
                "OUTPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output bits of sign extender\n */\npublic static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);"
            ],
            [
                "INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in simple gates like And and Or\n */\npublic static final // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nKey.KeyInteger // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nINPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);"
            ],
            [
                "LUT_INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in the LUT\n */\npublic static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);"
            ],
            [
                "MAX_VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The counter max value\n */\npublic static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);"
            ],
            [
                "DELAY_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the delay time used by the delay component\n */\npublic static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);"
            ],
            [
                "MONOFLOP_DELAY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the timer delay time\n */\npublic static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);"
            ],
            [
                "LABEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The elements label\n */\npublic static final Key<String> LABEL = new Key<>(\"Label\", \"\");"
            ],
            [
                "FONT_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The font size\n */\npublic static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);"
            ],
            [
                "TEXT_ORIENTATION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * text orientation\n */\npublic static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();"
            ],
            [
                "LED_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a LED\n */\npublic static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();"
            ],
            [
                "SEVEN_SEG_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a seven seg display\n */\npublic static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);"
            ],
            [
                "VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The value of constants\n */\npublic static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();"
            ],
            [
                "DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of elements\n */\npublic static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();"
            ],
            [
                "INPUT_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of inputs\n */\npublic static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();"
            ],
            [
                "DIP_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of the dip switch\n */\npublic static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Color of LEDs\n */\npublic static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();"
            ],
            [
                "INPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The input splitting of a splitter\n */\npublic static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");"
            ],
            [
                "OUTPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The output splitting of a splitter\n */\npublic static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");"
            ],
            [
                "SPLITTER_SPREADING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The splitter spreading\n */\npublic static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();"
            ],
            [
                "IN_OUT_SMALL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to select small inputs and outputs\n */\npublic static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "RUN_AT_REAL_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable realtime mode at a clock\n */\npublic static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);"
            ],
            [
                "INVERT_OUTPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * inverts the output of a gate\n */\npublic static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);"
            ],
            [
                "FREQUENCY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The real time frequency of the clock\n */\npublic static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);"
            ],
            [
                "SELECTOR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the bit count of a muxer or decoder\n */\npublic static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);"
            ],
            [
                "ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of address bits of memory\n */\npublic static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);"
            ],
            [
                "BLOWN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a diode as blown fuse or as programmed\n */\npublic static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a switch as closed or not\n */\npublic static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();"
            ],
            [
                "SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * signed flag for comparator element\n */\npublic static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();"
            ],
            [
                "REMAINDER_POSITIVE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects if the reminder of the division is always positive\n */\npublic static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);"
            ],
            [
                "DATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the data key for memory\n */\npublic static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);"
            ],
            [
                "FLIP_SEL_POSITON",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag for flipping selector pos in muxers, decoders and drivers\n */\npublic static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();"
            ],
            [
                "ROTATE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the rotation of the elements\n */\npublic static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();"
            ],
            [
                "WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);"
            ],
            [
                "SHAPE_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * defines the shape type of the custom circuit\n */\npublic static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();"
            ],
            [
                "LAYOUT_SHAPE_DELTA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Defines the distance to the previous pin. Used by the layout shape type\n */\npublic static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));"
            ],
            [
                "TERM_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);"
            ],
            [
                "TERM_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);"
            ],
            [
                "CYCLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break timeout cycles\n */\npublic static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);"
            ],
            [
                "ENABLED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break enabled\n */\npublic static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();"
            ],
            [
                "VALUE_IS_PROBE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to make a value a probe\n */\npublic static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "IS_PROGRAM_MEMORY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();"
            ],
            [
                "IS_PROGRAM_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();"
            ],
            [
                "AUTO_RELOAD_ROM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the ROMs auto load function\n */\npublic static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();"
            ],
            [
                "LAST_DATA_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The last used ROM data file\n */\npublic static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();"
            ],
            [
                "SHOW_DATA_TABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data table window\n */\npublic static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH_MICRO",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window in single gate mode\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();"
            ],
            [
                "ADD_VALUE_TO_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to add the value to the measurement graph\n */\npublic static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();"
            ],
            [
                "MICRO_STEP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the single gate mode in the embedded data view\n */\npublic static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);"
            ],
            [
                "MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the embedded data view\n */\npublic static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);"
            ],
            [
                "SETTINGS_MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the default data view\n */\npublic static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);"
            ],
            [
                "IS_HIGH_Z",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable high z mode at an input\n */\npublic static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "AVOID_ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to avoid active low at an input\n */\npublic static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the description of an element\n */\npublic static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");"
            ],
            [
                "NETNAME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A net name\n */\npublic static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");"
            ],
            [
                "SETTINGS_IEEE_SHAPES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * shape setting\n */\npublic static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();"
            ],
            [
                "SETTINGS_LANGUAGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI Language\n */\npublic static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();"
            ],
            [
                "SETTINGS_DEFAULT_TREESELECT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Default state of the tree view\n */\npublic static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);"
            ],
            [
                "SETTINGS_EXPRESSION_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI expression string representation\n */\npublic static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);"
            ],
            [
                "SETTINGS_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the grid\n */\npublic static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();"
            ],
            [
                "SETTINGS_SHOW_WIRE_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the wire bits view\n */\npublic static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);"
            ],
            [
                "SETTINGS_MAC_MOUSE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the MAC mouse mode\n */\npublic static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables tunnel rename dialog\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);"
            ],
            [
                "SETTINGS_RENAME_LABELS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables renaming of labels ending with numbers while copying\n */\npublic static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);"
            ],
            [
                "SETTINGS_OPEN_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables remote port\n */\npublic static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();"
            ],
            [
                "SETTINGS_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * remote port\n */\npublic static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);"
            ],
            [
                "OSCILLATION_DETECTION_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Counter used to detect oscillations\n */\npublic static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);"
            ],
            [
                "INT_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();"
            ],
            [
                "PROBE_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());"
            ],
            [
                "FIXED_POINT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * fixed point fractional binary digits\n */\npublic static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();"
            ],
            [
                "GRAPHIC_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);"
            ],
            [
                "GRAPHIC_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);"
            ],
            [
                "RELAY_NORMALLY_CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a relay to indicate if it is normally open or normally closed.\n */\npublic static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();"
            ],
            [
                "POLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Number of poles in the double throw relay\n */\npublic static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();"
            ],
            [
                "BARREL_SHIFTER_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to select the shift mode\n */\npublic static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());"
            ],
            [
                "DIRECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate shift direction\n */\npublic static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());"
            ],
            [
                "BARREL_SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate if shift value is signed\n */\npublic static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);"
            ],
            [
                "COMMON_CONNECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to indicate if the 7-seg display has a common cathode output\n */\npublic static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();"
            ],
            [
                "COMMON_CONNECTION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to define the common connection type\n */\npublic static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();"
            ],
            [
                "LED_PERSISTENCE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);"
            ],
            [
                "LED_PERSIST_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();"
            ],
            [
                "SETTINGS_ATF1502_FITTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_ATMISP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Flash software for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();"
            ],
            [
                "ROW_DATA_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * row bits in led matrix\n */\npublic static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);"
            ],
            [
                "COL_ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * column address bits in led matrix\n */\npublic static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);"
            ],
            [
                "LOCKED_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * In locked mode the circuit can not be modified\n */\npublic static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);"
            ],
            [
                "PINNUMBER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin number\n */\npublic static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();"
            ],
            [
                "PINCOUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin count\n */\npublic static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));"
            ],
            [
                "INVERTER_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * contains the input inverter config\n */\npublic static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());"
            ],
            [
                "BACKGROUND_COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Background Color of nested circuits\n */\npublic static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));"
            ],
            [
                "SETTINGS_FONT_SCALING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the screen resolution\n */\npublic static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_USE_EQUALS_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses the equals key instead of the plus key.\n */\npublic static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;"
            ],
            [
                "WITH_ENABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if a enable input is needed\n */\npublic static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);"
            ],
            [
                "FET_UNIDIRECTIONAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true to simulate a unidirectional FET\n */\npublic static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);"
            ],
            [
                "ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if component is active low\n */\npublic static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();"
            ],
            [
                "MAP_TO_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if button is mapped to the keyboard\n */\npublic static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();"
            ],
            [
                "SETTINGS_LIBRARY_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf1502\n */\npublic static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_JAR_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A jar containing custom java components\n */\npublic static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "ROMMANAGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The manager which contains all the roms data\n */\npublic static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();"
            ],
            [
                "APPLICATION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The type of the external process\n */\npublic static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());"
            ],
            [
                "EXTERNAL_INPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The inputs used by the external process\n */\npublic static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");"
            ],
            [
                "EXTERNAL_OUTPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The outputs used by the external process\n */\npublic static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");"
            ],
            [
                "EXTERNAL_CODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);"
            ],
            [
                "EXTERNAL_CODE_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));"
            ],
            [
                "SETTINGS_GHDL_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to ghdl\n */\npublic static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();"
            ],
            [
                "GHDL_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The ghdl options\n */\npublic static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "IVERILOG_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The iverilog options\n */\npublic static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "SETTINGS_IVERILOG_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to iverilog installation directory\n */\npublic static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();"
            ],
            [
                "CUSTOM_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Shape used to represent a visual element\n */\npublic static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));"
            ],
            [
                "PRELOAD_PROGRAM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * True if a program is loaded to the simulator at startup\n */\npublic static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();"
            ],
            [
                "BIG_ENDIAN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);"
            ],
            [
                "PROGRAM_TO_PRELOAD",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The file to preload as a program at startup\n */\npublic static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "BIG_ENDIAN_SETTING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "WIDE_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects a wide shape\n */\npublic static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();"
            ],
            [
                "RECT_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of the rectangle\n */\npublic static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);"
            ],
            [
                "RECT_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the height of the rectangle\n */\npublic static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);"
            ],
            [
                "RECT_INSIDE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();"
            ],
            [
                "RECT_BOTTOM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();"
            ],
            [
                "RECT_RIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();"
            ],
            [
                "MIDI_CHANNEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);"
            ],
            [
                "MIDI_INSTRUMENT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");"
            ],
            [
                "MIDI_PROG_CHANGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables Program change\n */\npublic static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);"
            ],
            [
                "SETTINGS_TOOLCHAIN_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Stores the IDE settings file\n */\npublic static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();"
            ],
            [
                "GENERICLARGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();"
            ],
            [
                "IS_GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Circuit is generic\n */\npublic static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUTORIAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the tutorial\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();"
            ],
            [
                "SETTINGS_WIRETOOLTIP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the wire tool tips\n */\npublic static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);"
            ],
            [
                "SWITCH_ACTS_AS_INPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The switch acts as input\n */\npublic static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();"
            ],
            [
                "SNAP_TO_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Snaps the element to the grid\n */\npublic static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();"
            ],
            [
                "MIRROR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Mirrors the component\n */\npublic static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "TESTDATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The test data\n */\npublic static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);"
            ],
            [
                "TRIGGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The scope trigger mode\n */\npublic static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());"
            ],
            [
                "PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the telnet port\n */\npublic static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);"
            ],
            [
                "TELNET_ESCAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Telnet escape\n */\npublic static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();"
            ],
            [
                "SKIP_HDL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Skips HDL output for this circuit\n */\npublic static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();"
            ],
            [
                "PREFIX",
                "de.neemann.digital.core.basic",
                "FanIn",
                "/**\n * The inputs name prefix\n */\npublic static final String PREFIX = \"In_\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NOr",
                "/**\n * The NOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "And",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XNOr",
                "/**\n * The XNOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XOr",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Not",
                "/**\n * The Not description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NAnd",
                "/**\n * The NAnd description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Or",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "STARTED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STARTED event\n */\npublic static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CLOSED event\n */\npublic static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);"
            ],
            [
                "POSTCLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.POSTCLOSED event\n */\npublic static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);"
            ],
            [
                "STEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STEP event\n */\npublic static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);"
            ],
            [
                "CHECKBURN",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CHECKBURN event\n */\npublic static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);"
            ],
            [
                "MICROSTEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.MICROSTEP event\n */\npublic static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);"
            ],
            [
                "RUN_TO_BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK event\n */\npublic static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);"
            ],
            [
                "RUN_TO_BREAK_TIMEOUT",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK_TIMEOUT event\n */\npublic static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);"
            ],
            [
                "BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.BREAK event\n */\npublic static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGPFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "NFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGNFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "PFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "TransGate",
                "/**\n * The transmission gate description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "SwitchDT",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Relay",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "RelayDT",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Switch",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Fuse",
                "/**\n * The fuse description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Reset",
                "/**\n * The Reset description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Stop",
                "/**\n * The Stop element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Decoder",
                "/**\n * The Decoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Delay",
                "/**\n * The Delay description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Driver",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "DriverInvSel",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "PriorityEncoder",
                "/**\n * The PriorityEncoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BusSplitter",
                "/**\n * The bus splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * The splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Multiplexer",
                "/**\n * The Multiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BitSelector",
                "/**\n * The Bit Selector description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * The Break description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Clock",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "AsyncSeq",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Demultiplexer",
                "/**\n * The Demultiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopDAsync",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopD",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRSAsync",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopT",
                "/**\n * The T-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJKAsync",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJK",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "Monoflop",
                "/**\n * The Monoflop's description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRS",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BarrelShifter",
                "/**\n * The barrel shifter description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Mul",
                "/**\n * The multiplier description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Neg",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitExtender",
                "/**\n * Description of the sign extend component.\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Add",
                "/**\n * The adders description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Div",
                "/**\n * The dividers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "PRNG",
                "/**\n * The element type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Sub",
                "/**\n * The subtractors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Comparator",
                "/**\n * The comparators description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitCount",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "EMPTY_LIST",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * An empty list\n */\npublic static final ObservableValues EMPTY_LIST = new ObservableValues();"
            ],
            [
                "DEFAULT_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The default formatter\n */\npublic static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;"
            ],
            [
                "HEX_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The hexadecimal formatter\n */\npublic static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "External",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "ExternalFile",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DEFAULT_RAD",
                "de.neemann.digital.fsm",
                "State",
                "/**\n * The default state radius\n */\nstatic final int DEFAULT_RAD = 70;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "Lang",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "InstanceHolder",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.testing",
                "TestCaseElement",
                "/**\n * The TestCaseElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();"
            ],
            [
                "STATENAMES",
                "de.neemann.digital.analyse",
                "TruthTableTableModel",
                "/**\n * String representation of the states\n */\npublic static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };"
            ],
            [
                "ONE",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant true or one\n */\npublic static final Constant ONE = new Constant(true);"
            ],
            [
                "ZERO",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant false or zero\n */\npublic static final Constant ZERO = new Constant(false);"
            ],
            [
                "PRIMARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the primary panel\n */\npublic static final String PRIMARY = \"primary\";"
            ],
            [
                "SECONDARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the secondary panel\n */\npublic static final String SECONDARY = \"secondary\";"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * The single EditorFactory instance.\n */\nstatic final EditorFactory INSTANCE = new EditorFactory();"
            ],
            [
                "MAX_TERMINAL_STORED",
                "de.neemann.digital.gui.components.terminal",
                "ConsoleTerminal",
                "/**\n * Max amount of characters stored\n */\npublic static final int MAX_TERMINAL_STORED = 2048;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Terminal",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Keyboard",
                "/**\n * The keyboard description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "FAILED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for failed tests\n */\nstatic final Color FAILED_COLOR = new Color(255, 200, 200);"
            ],
            [
                "PASSED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for passed tests\n */\nstatic final Color PASSED_COLOR = new Color(200, 255, 200);"
            ],
            [
                "ICON_DELETE",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The delete icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");"
            ],
            [
                "ICON_COPY",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The copy icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "VGA",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "GraphicCard",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "LedMatrix",
                "/**\n * the LED-Matrix description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "ScopeTrigger",
                "/**\n * The ScopeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);"
            ],
            [
                "DATADESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The DataElement description\n */\npublic static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "TEXTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The TextElement description\n */\npublic static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "RECTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The shape for the rectangle\n */\npublic static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "LEFT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to left align the digits\n */\npublic final static float LEFT = 0.0f;"
            ],
            [
                "CENTER",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to center the digits\n */\npublic final static float CENTER = 0.5f;"
            ],
            [
                "RIGHT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to right align the digits\n */\npublic final static float RIGHT = 1.0f;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "Settings",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "SettingsHolder",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "BASE_FILE_KEY",
                "de.neemann.digital.hdl.hgs",
                "Context",
                "/**\n * Key used to store the base file name in the context\n */\npublic static final String BASE_FILE_KEY = \"baseFile\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericInitCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();"
            ],
            [
                "GEN_ARGS_KEY",
                "de.neemann.digital.draw.library",
                "ResolveGenerics",
                "/**\n * Key uses to store the args for the generic circuits\n */\npublic static final String GEN_ARGS_KEY = \"genArgs\";"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "ButtonShape",
                "protected static final int HEIGHT = OUT_SIZE / 2;"
            ],
            [
                "SIZE2",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Half the size of the used raster\n */\npublic static final int SIZE2 = 10;"
            ],
            [
                "SIZE",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * The size of the used raster\n */\npublic static final int SIZE = SIZE2 * 2;"
            ],
            [
                "CIRC",
                "de.neemann.digital.draw.shapes",
                "DILShape",
                "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);"
            ],
            [
                "DOWNSHIFT",
                "de.neemann.digital.draw.shapes",
                "VDDShape",
                "static final int DOWNSHIFT = 4;"
            ],
            [
                "CHARGED_GATE",
                "de.neemann.digital.draw.shapes",
                "FGFETShapeN",
                "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);"
            ],
            [
                "OUT_SIZE",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Size of the normal sized inputs and outputs\n */\npublic static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;"
            ],
            [
                "LATEX_RAD",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);"
            ],
            [
                "WIDTH2",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * half the width of the resistor\n */\npublic static final int WIDTH2 = SIZE2 - 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * height of the resistor\n */\npublic static final int HEIGHT = SIZE + SIZE / 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static final int HEIGHT = 7;"
            ],
            [
                "FRAME",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "/**\n * the Frame of the display\n */\npublic static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.elements",
                "Tunnel",
                "/**\n * The TunnelElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();"
            ],
            [
                "HIGH_CONTRAST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);"
            ],
            [
                "MONOCHROME",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);"
            ],
            [
                "SMALL_IO",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);"
            ],
            [
                "NO_PIN_MARKER",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);"
            ],
            [
                "THINNER_LINES",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);"
            ],
            [
                "HIDE_TEST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);"
            ],
            [
                "NO_SHAPE_FILLING",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);"
            ],
            [
                "LATEX",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);"
            ],
            [
                "PINS_IN_MATH_MODE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SettingsHolder",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to select the color map\n */\npublic static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();"
            ],
            [
                "CUSTOM_COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to define the custom color map\n */\npublic static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();"
            ],
            [
                "MAXLINETHICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * maximal line thickness\n */\npublic static final int MAXLINETHICK = 4;"
            ],
            [
                "NORMAL",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all lines to draw the shapes itself\n */\npublic static final Style NORMAL = new Builder().build();"
            ],
            [
                "DISABLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all disabled elements\n */\npublic static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();"
            ],
            [
                "INOUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for input and output labels\n */\npublic static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();"
            ],
            [
                "FAILED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the failed state lines in the measurement graph\n */\npublic static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();"
            ],
            [
                "PASS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the passed state lines in the measurement graph\n */\npublic static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();"
            ],
            [
                "NORMAL_TEXT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for text which is integral part of the shape.\n * Text which uses this style is always included in sizing!\n * Used for text only elements.\n */\npublic static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();"
            ],
            [
                "THIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin line used for the graphic in the clock or delay shape\n */\npublic static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();"
            ],
            [
                "THIN_FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin filled\n */\npublic static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();"
            ],
            [
                "THICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thick line used for the ground line\n */\npublic static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();"
            ],
            [
                "WIRE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in editing mode\n */\npublic static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "WIRE_LOW",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for low wires in running mode\n */\npublic static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();"
            ],
            [
                "WIRE_HIGH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for high wires in running mode\n */\npublic static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();"
            ],
            [
                "WIRE_HIGHZ",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in high Z state\n */\npublic static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();"
            ],
            [
                "WIRE_OUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the output dots\n */\npublic static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();"
            ],
            [
                "FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Filled style used to fill the splitter or the dark LEDs\n */\npublic static final Style FILLED = new Builder().setFilled(true).build();"
            ],
            [
                "DASH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the grid in the graph\n */\npublic static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();"
            ],
            [
                "SHAPE_PIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();"
            ],
            [
                "SHAPE_SPLITTER",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text for splitters\n */\npublic static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();"
            ],
            [
                "WIRE_VALUE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();"
            ],
            [
                "WIRE_BITS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the wire bit number\n */\npublic static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();"
            ],
            [
                "HIGHLIGHT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * highlight color used for the circles to mark an element\n */\npublic static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "ERROR",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * error color used for the circles to mark an element\n */\npublic static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "BLANK",
                "de.neemann.digital.draw.graphics.text.text",
                "Blank",
                "/**\n * the Blank instance\n */\npublic static final Blank BLANK = new Blank();"
            ],
            [
                "LOOK_AT_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String LOOK_AT_ALIAS = \"lookAt\";"
            ],
            [
                "REF_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String REF_ALIAS = \"ref\";"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "pinMap",
                "de.neemann.digital.builder",
                "PinMap"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getInputs",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic ArrayList<String> getInputs() {\n    fixDoubleCellUsage();\n    return super.getInputs();\n}"
            ],
            [
                "getCombinatorial",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic Map<String, Expression> getCombinatorial() {\n    fixDoubleCellUsage();\n    return super.getCombinatorial();\n}"
            ],
            [
                "getRegistered",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic Map<String, Expression> getRegistered() {\n    fixDoubleCellUsage();\n    return super.getRegistered();\n}"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "addCombinatorial",
                "de.neemann.digital.builder",
                "BuilderInterface",
                "public abstract T addCombinatorial(String arg0, Expression arg1) throws BuilderException"
            ],
            [
                "addSequential",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic BuilderCollector addSequential(String name, Expression expression) throws BuilderException {\n    checkOpen();\n    sequentialVars.add(name);\n    return super.addSequential(name, expression);\n}"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "addSequential",
                "de.neemann.digital.builder",
                "BuilderInterface",
                "public abstract T addSequential(String arg0, Expression arg1) throws BuilderException"
            ],
            [
                "addCombinatorial",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException {\n    checkOpen();\n    return super.addCombinatorial(name, expression);\n}"
            ],
            [
                "getOutputs",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic ArrayList<String> getOutputs() {\n    fixDoubleCellUsage();\n    return super.getOutputs();\n}"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "assignPin",
                "de.neemann.digital.builder",
                "PinMap",
                "public PinMap assignPin(String arg0, int arg1) throws PinMapException"
            ],
            [
                "toString",
                "de.neemann.digital.builder",
                "PinMap",
                "public String toString()"
            ],
            [
                "isSimpleAlias",
                "de.neemann.digital.builder",
                "PinMap",
                "public boolean isSimpleAlias(String arg0, Expression arg1, HashSet<String> arg2)"
            ],
            [
                "setAvailOutputs",
                "de.neemann.digital.builder",
                "PinMap",
                "public transient PinMap setAvailOutputs(int[] arg0)"
            ],
            [
                "isOutputAssigned",
                "de.neemann.digital.builder",
                "PinMap",
                "public int isOutputAssigned(String arg0) throws PinMapException"
            ],
            [
                "parseString",
                "de.neemann.digital.builder",
                "PinMap",
                "public PinMap parseString(String arg0) throws PinMapException"
            ],
            [
                "setAvailInputs",
                "de.neemann.digital.builder",
                "PinMap",
                "public transient PinMap setAvailInputs(int[] arg0)"
            ],
            [
                "addAll",
                "de.neemann.digital.builder",
                "PinMap",
                "public PinMap addAll(Map<String, String> arg0) throws PinMapException"
            ],
            [
                "setAvailBidirectional",
                "de.neemann.digital.builder",
                "PinMap",
                "public transient PinMap setAvailBidirectional(int[] arg0)"
            ],
            [
                "getClockPin",
                "de.neemann.digital.builder",
                "PinMap",
                "public int getClockPin()"
            ],
            [
                "getOutputFor",
                "de.neemann.digital.builder",
                "PinMap",
                "public int getOutputFor(String arg0) throws PinMapException"
            ],
            [
                "getInputFor",
                "de.neemann.digital.builder",
                "PinMap",
                "public int getInputFor(String arg0) throws PinMapException"
            ],
            [
                "setClockPin",
                "de.neemann.digital.builder",
                "PinMap",
                "public PinMap setClockPin(int arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 26710,
        "oracle": "name == null;",
        "oracleType": "EXCEPT_POST",
        "projectName": "Digital",
        "packageName": "de.neemann.digital.builder.Gal16v8",
        "className": "BuilderCollectorGAL",
        "javadocTag": "",
        "methodJavadoc": "",
        "methodSourceCode": "public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException{\n    checkOpen();\n    return super.addCombinatorial(name, expression);\n}",
        "classJavadoc": "/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */",
        "classSourceCode": "/*\n * Copyright (c) 2019 Helmut Neemann.\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.builder.Gal16v8;\n\nimport de.neemann.digital.analyse.expression.Expression;\nimport de.neemann.digital.builder.BuilderCollector;\nimport de.neemann.digital.builder.BuilderException;\nimport de.neemann.digital.builder.PinMap;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Map;\n\n/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */\npublic class BuilderCollectorGAL extends BuilderCollector {\n    private final PinMap pinMap;\n    private HashSet<String> sequentialVars;\n    private boolean doubleCellUsageFixed = false;\n\n    /**\n     * Creates a new instance\n     *\n     * @param pinMap the used pinMap. Is required to handle aliases correctly\n     */\n    public BuilderCollectorGAL(PinMap pinMap) {\n        this.pinMap = pinMap;\n        sequentialVars = new HashSet<>();\n    }\n\n    @Override\n    public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        return super.addCombinatorial(name, expression);\n    }\n\n    @Override\n    public BuilderCollector addSequential(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        sequentialVars.add(name);\n        return super.addSequential(name, expression);\n    }\n\n    private void checkOpen() {\n        if (doubleCellUsageFixed)\n            throw new RuntimeException(\"wrong BuilderCollectorGAL usage!\");\n    }\n\n    private void fixDoubleCellUsage() {\n        if (!doubleCellUsageFixed) {\n\n            super.getCombinatorial().entrySet().removeIf(c -> {\n                if (pinMap.isSimpleAlias(c.getKey(), c.getValue(), sequentialVars)) {\n                    removeOutput(c.getKey());\n                    return true;\n                }\n                return false;\n            });\n\n            doubleCellUsageFixed = true;\n        }\n    }\n\n    @Override\n    public ArrayList<String> getOutputs() {\n        fixDoubleCellUsage();\n        return super.getOutputs();\n    }\n\n    @Override\n    public ArrayList<String> getInputs() {\n        fixDoubleCellUsage();\n        return super.getInputs();\n    }\n\n    @Override\n    public Map<String, Expression> getCombinatorial() {\n        fixDoubleCellUsage();\n        return super.getCombinatorial();\n    }\n\n    @Override\n    public Map<String, Expression> getRegistered() {\n        fixDoubleCellUsage();\n        return super.getRegistered();\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "CLI",
                "de.neemann"
            ],
            [
                "Mouse",
                "de.neemann.gui"
            ],
            [
                "LineBreaker",
                "de.neemann.gui"
            ],
            [
                "IconCreator",
                "de.neemann.gui"
            ],
            [
                "ConfirmDialogBuilder",
                "de.neemann.gui"
            ],
            [
                "Resources",
                "de.neemann.gui.language"
            ],
            [
                "Bundle",
                "de.neemann.gui.language"
            ],
            [
                "Language",
                "de.neemann.gui.language"
            ],
            [
                "ToolTipAction",
                "de.neemann.gui"
            ],
            [
                "MyFileChooser",
                "de.neemann.gui"
            ],
            [
                "ClosingWindowListener",
                "de.neemann.gui"
            ],
            [
                "ErrorMessage",
                "de.neemann.gui"
            ],
            [
                "WindowSizeStorage",
                "de.neemann.gui"
            ],
            [
                "Screen",
                "de.neemann.gui"
            ],
            [
                "ToolTipProvider",
                "de.neemann.gui"
            ],
            [
                "InfoDialog",
                "de.neemann.gui"
            ],
            [
                "ValueFormatter",
                "de.neemann.digital.core"
            ],
            [
                "ModelStateObserver",
                "de.neemann.digital.core"
            ],
            [
                "PullDown",
                "de.neemann.digital.core.pld"
            ],
            [
                "Diode",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeBackward",
                "de.neemann.digital.core.pld"
            ],
            [
                "PullUp",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeForward",
                "de.neemann.digital.core.pld"
            ],
            [
                "Node",
                "de.neemann.digital.core"
            ],
            [
                "RAMSinglePort",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualAccess",
                "de.neemann.digital.core.memory"
            ],
            [
                "ByteArrayFromValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "Importer",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "LogisimReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "DataFieldValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "IntelHexReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "BinReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "MultiValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "CounterPreset",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Register",
                "de.neemann.digital.core.memory"
            ],
            [
                "LookUpTable",
                "de.neemann.digital.core.memory"
            ],
            [
                "BlockRAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Counter",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMMangerBase",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManagerFile",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManager",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMInterface",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "EEPROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramCounter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMAsync",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataField",
                "de.neemann.digital.core.memory"
            ],
            [
                "EEPROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMInterface",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataFieldConverter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMSinglePortSel",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramMemory",
                "de.neemann.digital.core.memory"
            ],
            [
                "RegisterFile",
                "de.neemann.digital.core.memory"
            ],
            [
                "ModelStateObserverTyped",
                "de.neemann.digital.core"
            ],
            [
                "Observable",
                "de.neemann.digital.core"
            ],
            [
                "NodeWithoutDelay",
                "de.neemann.digital.core"
            ],
            [
                "ExceptionWithOrigin",
                "de.neemann.digital.core"
            ],
            [
                "ObservableValue",
                "de.neemann.digital.core"
            ],
            [
                "SpeedTest",
                "de.neemann.digital.core"
            ],
            [
                "BurnException",
                "de.neemann.digital.core"
            ],
            [
                "GlobalValues",
                "de.neemann.digital.core"
            ],
            [
                "MIDI",
                "de.neemann.digital.core.io"
            ],
            [
                "RGBLED",
                "de.neemann.digital.core.io"
            ],
            [
                "Out",
                "de.neemann.digital.core.io"
            ],
            [
                "RotEncoder",
                "de.neemann.digital.core.io"
            ],
            [
                "PinControl",
                "de.neemann.digital.core.io"
            ],
            [
                "DipSwitch",
                "de.neemann.digital.core.io"
            ],
            [
                "CommonConnectionType",
                "de.neemann.digital.core.io"
            ],
            [
                "LightBulb",
                "de.neemann.digital.core.io"
            ],
            [
                "Probe",
                "de.neemann.digital.core.io"
            ],
            [
                "Button",
                "de.neemann.digital.core.io"
            ],
            [
                "ButtonLED",
                "de.neemann.digital.core.io"
            ],
            [
                "In",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorUnipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "ProbeMode",
                "de.neemann.digital.core.io"
            ],
            [
                "NotConnected",
                "de.neemann.digital.core.io"
            ],
            [
                "MIDIHelper",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorBipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "Const",
                "de.neemann.digital.core.io"
            ],
            [
                "PowerSupply",
                "de.neemann.digital.core.io"
            ],
            [
                "Ground",
                "de.neemann.digital.core.io"
            ],
            [
                "InValue",
                "de.neemann.digital.core.io"
            ],
            [
                "VDD",
                "de.neemann.digital.core.io"
            ],
            [
                "ServerHolder",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Telnet",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ByteBuffer",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Server",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ElementAttributes",
                "de.neemann.digital.core.element"
            ],
            [
                "Element",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementFactory",
                "de.neemann.digital.core.element"
            ],
            [
                "PinInfo",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescriptions",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "Keys",
                "de.neemann.digital.core.element"
            ],
            [
                "Rotation",
                "de.neemann.digital.core.element"
            ],
            [
                "AttributeListener",
                "de.neemann.digital.core.element"
            ],
            [
                "Key",
                "de.neemann.digital.core.element"
            ],
            [
                "ImmutableList",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementTypeDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "FanIn",
                "de.neemann.digital.core.basic"
            ],
            [
                "NOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "And",
                "de.neemann.digital.core.basic"
            ],
            [
                "XNOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "XOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "Not",
                "de.neemann.digital.core.basic"
            ],
            [
                "NAnd",
                "de.neemann.digital.core.basic"
            ],
            [
                "Function",
                "de.neemann.digital.core.basic"
            ],
            [
                "Or",
                "de.neemann.digital.core.basic"
            ],
            [
                "ExceptionWithOriginInterface",
                "de.neemann.digital.core"
            ],
            [
                "ModelEvent",
                "de.neemann.digital.core"
            ],
            [
                "BacktrackException",
                "de.neemann.digital.core"
            ],
            [
                "PlainSwitch",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGPFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "NFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGNFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PlainSwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "TransGate",
                "de.neemann.digital.core.switching"
            ],
            [
                "SwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Relay",
                "de.neemann.digital.core.switching"
            ],
            [
                "RelayDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Switch",
                "de.neemann.digital.core.switching"
            ],
            [
                "Fuse",
                "de.neemann.digital.core.switching"
            ],
            [
                "Reset",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Stop",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Decoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Delay",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Driver",
                "de.neemann.digital.core.wiring"
            ],
            [
                "DataBus",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "SingleBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "ConnectedBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "AbstractBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "BusModelStateObserver",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "CommonBusValue",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "DriverInvSel",
                "de.neemann.digital.core.wiring"
            ],
            [
                "PriorityEncoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BusSplitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Splitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Multiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitSelector",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Break",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Clock",
                "de.neemann.digital.core.wiring"
            ],
            [
                "AsyncSeq",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Demultiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitsException",
                "de.neemann.digital.core"
            ],
            [
                "NodeInterface",
                "de.neemann.digital.core"
            ],
            [
                "NodeException",
                "de.neemann.digital.core"
            ],
            [
                "FlipflopDAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopD",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRSAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopT",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJKAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJK",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "Monoflop",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRS",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopBit",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "BarrelShifter",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Mul",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Neg",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitExtender",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Add",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Div",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "LeftRightFormat",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "PRNG",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Sub",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BarrelShifterMode",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Comparator",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitCount",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "ObservableValues",
                "de.neemann.digital.core"
            ],
            [
                "Value",
                "de.neemann.digital.core"
            ],
            [
                "IntFormat",
                "de.neemann.digital.core"
            ],
            [
                "SyncAccess",
                "de.neemann.digital.core"
            ],
            [
                "Bits",
                "de.neemann.digital.core"
            ],
            [
                "ProcessInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "StdIOInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "ApplicationVerilogStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "Application",
                "de.neemann.digital.core.extern"
            ],
            [
                "External",
                "de.neemann.digital.core.extern"
            ],
            [
                "Port",
                "de.neemann.digital.core.extern"
            ],
            [
                "PortDefinition",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGHDL",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationIVerilog",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationVHDLStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "VHDLTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGeneric",
                "de.neemann.digital.core.extern"
            ],
            [
                "Options",
                "de.neemann.digital.core.extern"
            ],
            [
                "VerilogTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ExternalFile",
                "de.neemann.digital.core.extern"
            ],
            [
                "ProcessStarter",
                "de.neemann.digital.core.extern"
            ],
            [
                "ModelEventType",
                "de.neemann.digital.core"
            ],
            [
                "Observer",
                "de.neemann.digital.core"
            ],
            [
                "ErrorDetector",
                "de.neemann.digital.core"
            ],
            [
                "Statistics",
                "de.neemann.digital.core.stats"
            ],
            [
                "Countable",
                "de.neemann.digital.core.stats"
            ],
            [
                "Model",
                "de.neemann.digital.core"
            ],
            [
                "Signal",
                "de.neemann.digital.core"
            ],
            [
                "StringList",
                "de.neemann.digital"
            ],
            [
                "XStreamValid",
                "de.neemann.digital"
            ],
            [
                "StatsExport",
                "de.neemann.digital.cli"
            ],
            [
                "SVGExport",
                "de.neemann.digital.cli"
            ],
            [
                "CommandLineTester",
                "de.neemann.digital.cli"
            ],
            [
                "CSVWriter",
                "de.neemann.digital.cli"
            ],
            [
                "BasicCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Argument",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLIException",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Muxer",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentKey",
                "de.neemann.digital.cli.cli"
            ],
            [
                "NamedCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLICommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentBase",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CircuitLoader",
                "de.neemann.digital.cli"
            ],
            [
                "Main",
                "de.neemann.digital.cli"
            ],
            [
                "Modification",
                "de.neemann.digital.undo"
            ],
            [
                "Modifications",
                "de.neemann.digital.undo"
            ],
            [
                "ModifyException",
                "de.neemann.digital.undo"
            ],
            [
                "Copyable",
                "de.neemann.digital.undo"
            ],
            [
                "UndoManager",
                "de.neemann.digital.undo"
            ],
            [
                "ChangedListener",
                "de.neemann.digital.undo"
            ],
            [
                "CircuitRepresentation",
                "de.neemann.digital.fsm"
            ],
            [
                "Transition",
                "de.neemann.digital.fsm"
            ],
            [
                "Movable",
                "de.neemann.digital.fsm"
            ],
            [
                "MouseMovable",
                "de.neemann.digital.fsm"
            ],
            [
                "Optimizer",
                "de.neemann.digital.fsm"
            ],
            [
                "Permute",
                "de.neemann.digital.fsm"
            ],
            [
                "FiniteStateMachineException",
                "de.neemann.digital.fsm"
            ],
            [
                "TransitionTableCreator",
                "de.neemann.digital.fsm"
            ],
            [
                "ValueParser",
                "de.neemann.digital.fsm"
            ],
            [
                "WaitGroup",
                "de.neemann.digital.fsm"
            ],
            [
                "FSMComponent",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMFrame",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "OptimizerDialog",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMDemos",
                "de.neemann.digital.fsm"
            ],
            [
                "FSM",
                "de.neemann.digital.fsm"
            ],
            [
                "State",
                "de.neemann.digital.fsm"
            ],
            [
                "Lang",
                "de.neemann.digital.lang"
            ],
            [
                "LineListenerResolveDontCare",
                "de.neemann.digital.testing"
            ],
            [
                "TestingDataException",
                "de.neemann.digital.testing"
            ],
            [
                "UnitTester",
                "de.neemann.digital.testing"
            ],
            [
                "FolderTestRunner",
                "de.neemann.digital.testing"
            ],
            [
                "TestExecutor",
                "de.neemann.digital.testing"
            ],
            [
                "Transitions",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseDescription",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseElement",
                "de.neemann.digital.testing"
            ],
            [
                "LineEmitterRepeat",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Parser",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppenderBits",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ParserException",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Context",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ModelInitializer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Expression",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterList",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestRow",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitter",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterWhile",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterSimple",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Random",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "SignExtend",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "IfThenElse",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "Function",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "LineListener",
                "de.neemann.digital.testing.parser"
            ],
            [
                "VirtualSignal",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppender",
                "de.neemann.digital.testing.parser"
            ],
            [
                "OperatorPrecedence",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestResultListener",
                "de.neemann.digital.testing"
            ],
            [
                "MatchedValue",
                "de.neemann.digital.testing"
            ],
            [
                "TestResult",
                "de.neemann.digital.testing"
            ],
            [
                "MinimizerInterface",
                "de.neemann.digital.analyse"
            ],
            [
                "LabelNumbering",
                "de.neemann.digital.analyse"
            ],
            [
                "ModelAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "CSVImporter",
                "de.neemann.digital.analyse"
            ],
            [
                "BoolTableExpanded",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableTableModel",
                "de.neemann.digital.analyse"
            ],
            [
                "TableReducer",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "PrimeSelector",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForce",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "LargestFirst",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForceGetAll",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "PrimeSelectorDefault",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BoolTableByteArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "IndependentChecker",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskey",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableExpression",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableBoolArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTable",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRows",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "ThreeStateValue",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskeyExam",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRow",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TruthTableConverter",
                "de.neemann.digital.analyse"
            ],
            [
                "DetermineJKStateMachine",
                "de.neemann.digital.analyse"
            ],
            [
                "Parser",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ParseException",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ModelAnalyserInfo",
                "de.neemann.digital.analyse"
            ],
            [
                "AnalyseException",
                "de.neemann.digital.analyse"
            ],
            [
                "DependencyAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "SubstituteLibrary",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableFormatterHex",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatter",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterTestCase",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterCSV",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterLaTeX",
                "de.neemann.digital.analyse.format"
            ],
            [
                "MinimizerQuineMcCluskey",
                "de.neemann.digital.analyse"
            ],
            [
                "ContextFiller",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "BitSetter",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ContextMap",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Operation",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Context",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NInputs",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NOr",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "ExpressionModifier",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NAnd",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "Constant",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Variable",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionException",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityInclNotVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Equals",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "FormatToExpression",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTable",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Formatter",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatterException",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTableLatex",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Not",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "VariableVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NamedExpression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "MinimizerQuineMcCluskeyExam",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTable",
                "de.neemann.digital.analyse"
            ],
            [
                "SplitPinString",
                "de.neemann.digital.analyse"
            ],
            [
                "CycleDetector",
                "de.neemann.digital.analyse"
            ],
            [
                "DigitalRemoteInterface",
                "de.neemann.digital.gui"
            ],
            [
                "TextSearchFilter",
                "de.neemann.digital.gui"
            ],
            [
                "ExportZipAction",
                "de.neemann.digital.gui"
            ],
            [
                "SettingsBase",
                "de.neemann.digital.gui"
            ],
            [
                "DocumentationLocator",
                "de.neemann.digital.gui"
            ],
            [
                "InitialTutorial",
                "de.neemann.digital.gui.tutorial"
            ],
            [
                "InsertAction",
                "de.neemann.digital.gui"
            ],
            [
                "StatusInterface",
                "de.neemann.digital.gui"
            ],
            [
                "SearchTextField",
                "de.neemann.digital.gui"
            ],
            [
                "SaveAsHelper",
                "de.neemann.digital.gui"
            ],
            [
                "FileHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ReleaseInfo",
                "de.neemann.digital.gui.release"
            ],
            [
                "CheckForNewRelease",
                "de.neemann.digital.gui.release"
            ],
            [
                "StateInterface",
                "de.neemann.digital.gui.state"
            ],
            [
                "StateManager",
                "de.neemann.digital.gui.state"
            ],
            [
                "State",
                "de.neemann.digital.gui.state"
            ],
            [
                "CircuitScrollPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "ItemPicker",
                "de.neemann.digital.gui.components"
            ],
            [
                "LibraryTreeModel",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "SelectTree",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "WindowPosManager",
                "de.neemann.digital.gui.components"
            ],
            [
                "CustomShapeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "TransformHolder",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "BehavioralFixtureCreator",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorFactory",
                "de.neemann.digital.gui.components"
            ],
            [
                "OrderMerger",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementOrderer",
                "de.neemann.digital.gui.components"
            ],
            [
                "ModifyMoveSelected",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteRect",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWires",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfVisualElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyCircuitAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveAndRotElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMeasurementOrdering",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttribute",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "DataEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "CircuitModifierPostClosed",
                "de.neemann.digital.gui.components"
            ],
            [
                "CharDeleter",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "ConsoleTerminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Terminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalInterface",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Keyboard",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "KeyboardDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Editor",
                "de.neemann.digital.gui.components"
            ],
            [
                "VarRectList",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMap",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapComponent",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapDialog",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "MapLayout",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughException",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "CircuitTransferable",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementHelpDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "TestCaseDescriptionDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ValueTableDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestCaseDescriptionEditor",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestAllDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ExpressionListenerOptimizeJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "LaTeXExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "HardwareDescriptionGenerator",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateFile",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateCUPL",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "ExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderOutputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AllSolutionsDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerCSVCondensed",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "BuilderExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionComponent",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "PlainTextExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableReorderManager",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ShowStringDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderInputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ProgressDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "CheckResultListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerStore",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AttributeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ProbeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ColorSchemeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "ROMEditorDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "LabelGenerator",
                "de.neemann.digital.gui.components"
            ],
            [
                "SingleValueDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ExpressionDialog",
                "de.neemann.digital.gui.components.expression"
            ],
            [
                "CircuitComponent",
                "de.neemann.digital.gui.components"
            ],
            [
                "VGA",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicCard",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrix",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "VGADialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "MoveFocusTo",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "ConstraintsBuilder",
                "de.neemann.digital.gui.components"
            ],
            [
                "ScopeTrigger",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphDialog",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphComponent",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "DummyElement",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "ValueTableObserver",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "CircuitModifier",
                "de.neemann.digital.gui.components"
            ],
            [
                "CopiedElementLabelRenamer",
                "de.neemann.digital.gui.components"
            ],
            [
                "TextLineNumber",
                "de.neemann.digital.gui.components"
            ],
            [
                "InsertHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ProgramMemoryLoader",
                "de.neemann.digital.gui"
            ],
            [
                "Main",
                "de.neemann.digital.gui"
            ],
            [
                "StatsDialog",
                "de.neemann.digital.gui"
            ],
            [
                "WindowManager",
                "de.neemann.digital.gui"
            ],
            [
                "Settings",
                "de.neemann.digital.gui"
            ],
            [
                "LibrarySelector",
                "de.neemann.digital.gui"
            ],
            [
                "DigitalUncaughtExceptionHandler",
                "de.neemann.digital.gui"
            ],
            [
                "NumberingWizard",
                "de.neemann.digital.gui"
            ],
            [
                "HandlerInterface",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteSever",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteException",
                "de.neemann.digital.gui.remote"
            ],
            [
                "DigitalHandler",
                "de.neemann.digital.gui.remote"
            ],
            [
                "ModelModifier",
                "de.neemann.digital.gui"
            ],
            [
                "VerilogCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogRenaming",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogGenerator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogTestBenchCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogElement",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogTemplate",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogLibrary",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "CodePrinter",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "CodePrinterStr",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "Statements",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Parser",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ParserException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Statement",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Context",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "FirstClassFunctionCall",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "InnerFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "JavaClass",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "FirstClassFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Func",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Function",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSEvalException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ReferenceToFunc",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToStruct",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToArray",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Reference",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToVar",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Value",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSMap",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSArray",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Separator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLLibrary",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLRenaming",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLGenerator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLEntity",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplate",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplateFunctions",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTestBenchCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "HDLModel",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNode",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNet",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "Printable",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLException",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLPort",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HasName",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "InlineManyToOne",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeAssignments",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "Optimization",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeConstants",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "ReplaceOneToMany",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NameConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "OptimizeExpressions",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "RemoveConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NodeSorterExpressionBased",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "HDLNodeSplitterManyToOne",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeCustom",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeAssignment",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLCircuit",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "ExprVar",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Visitor",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprVarRange",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExpressionOptimizer",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprNot",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprConstant",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprOperate",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprUsingNet",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "HDLNodeBuildIn",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLClockIntegrator",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockIntegratorGeneric",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockInfo",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "HDLNodeSplitterOneToMany",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "FileLocator",
                "de.neemann.digital"
            ],
            [
                "ValueTable",
                "de.neemann.digital.data"
            ],
            [
                "ValueTableModel",
                "de.neemann.digital.data"
            ],
            [
                "DataPlotter",
                "de.neemann.digital.data"
            ],
            [
                "Value",
                "de.neemann.digital.data"
            ],
            [
                "ExpressionExporter",
                "de.neemann.digital.builder"
            ],
            [
                "ExpressionToFileExporter",
                "de.neemann.digital.builder"
            ],
            [
                "RotationByteArrayOutputStream",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "TT2Exporter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "StartATF150xFitter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "OSExecute",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "CreateCHN",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDevice",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDialog",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PL",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATF150xCuplExporter",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PinMap",
                "de.neemann.digital.builder"
            ],
            [
                "PinMapException",
                "de.neemann.digital.builder"
            ],
            [
                "FragmentExpression",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisualElement",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentSameInValue",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "CircuitBuilder",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisitor",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVariable",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Fragment",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Box",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Gal16v8JEDECExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CuplExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "BuilderCollectorGAL",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CleanNameBuilder",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderCollector",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderInterface",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderException",
                "de.neemann.digital.builder"
            ],
            [
                "Gal22v10JEDECExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "Gal22v10CuplExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "FuseMap",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFillerException",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFiller",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "JedecWriter",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "GenericCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibrary",
                "de.neemann.digital.draw.library"
            ],
            [
                "GenericInitCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "Visitor",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryListener",
                "de.neemann.digital.draw.library"
            ],
            [
                "JarComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibraryFolder",
                "de.neemann.digital.draw.library"
            ],
            [
                "CustomElement",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundNotification",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundException",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentSource",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryInterface",
                "de.neemann.digital.draw.library"
            ],
            [
                "ResolveGenerics",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryNode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementTypeDescriptionCustom",
                "de.neemann.digital.draw.library"
            ],
            [
                "InvalidNodeException",
                "de.neemann.digital.draw.library"
            ],
            [
                "NumStringComparator",
                "de.neemann.digital.draw.library"
            ],
            [
                "InputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Interactor",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Drawable",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeBackwardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FuseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DILShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DipSwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LightBulbShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LayoutShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PolarityAwareLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ConstShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BreakShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TextShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegHexShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ProbeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "NotConnectedShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "StepperMotorShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BitSelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericInitCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RectShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "VDDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RAMShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ScopeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DemuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BusSplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullUpShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TestCaseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TunnelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PinControlShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FGFETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TransGateShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ResetShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeForewardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SixteenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "CustomCircuitShapeType",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "InteractorInterface",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeSpecificMatch",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RGBLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RotEncoderShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "IEEEGenericShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEENotShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEAndShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEXOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "ObservableValueReader",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SvgTemplate",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "TransformParser",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "Context",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgException",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgImporter",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "CustomShapeDescription",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "CustomShape",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "FGFETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "OutputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GroundShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "AsyncClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Shape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MissingShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeFactory",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullDownShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DriverShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DataShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DotCreator",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Wire",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Movable",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pins",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Circuit",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Tunnel",
                "de.neemann.digital.draw.elements"
            ],
            [
                "PinException",
                "de.neemann.digital.draw.elements"
            ],
            [
                "ElementOrder",
                "de.neemann.digital.draw.elements"
            ],
            [
                "VisualElement",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pin",
                "de.neemann.digital.draw.elements"
            ],
            [
                "IOState",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireMerger",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireConsistencyChecker",
                "de.neemann.digital.draw.elements"
            ],
            [
                "AsyncSequentialClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelEntry",
                "de.neemann.digital.draw.model"
            ],
            [
                "Net",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelCreator",
                "de.neemann.digital.draw.model"
            ],
            [
                "InverterConfig",
                "de.neemann.digital.draw.model"
            ],
            [
                "NetList",
                "de.neemann.digital.draw.model"
            ],
            [
                "RealTimeClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "Polygon",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Orientation",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Vector",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGSettings",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Transform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorKey",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ExportFactory",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicsImage",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorInterface",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformMatrix",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatLaTeX",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicMinMax",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicTransform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorScheme",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Style",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSkipLines",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "GraphicLineCollector",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "PolygonConverter",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorFloat",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformRotate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Graphic",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleHighContrast",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Parser",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "ParseException",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "PlainTextFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "SVGFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "GraphicsFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "LaTeXFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "Decorate",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Text",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Index",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Sentence",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Blank",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Character",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "ExpressionToText",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Simple",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Export",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleMonochrome",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformTranslate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSwing",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "PolygonParser",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGTokenizer",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GifSequenceWriter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "GifExporter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "ConfigCache",
                "de.neemann.digital.toolchain"
            ],
            [
                "Configuration",
                "de.neemann.digital.toolchain"
            ],
            [
                "Command",
                "de.neemann.digital.toolchain"
            ],
            [
                "FileToCreate",
                "de.neemann.digital.toolchain"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "getMouse",
                "de.neemann.gui",
                "Mouse",
                "/**\n * Returns a mouse event interpreter\n *\n * @return a Mouse interface implementation\n */\nstatic Mouse getMouse() {\n    if (Settings.getInstance().get(Keys.SETTINGS_MAC_MOUSE))\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && !e.isControlDown();\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && e.isControlDown();\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isShiftDown();\n            }\n        };\n    else\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1;\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON3;\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isControlDown();\n            }\n        };\n}"
            ],
            [
                "create",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an icon from a resource\n *\n * @param name name of the resource\n * @return the icon\n */\npublic static Icon create(String name) {\n    return new ImageIcon(createImage(name));\n}"
            ],
            [
                "createImage",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image from a resource\n *\n * @param name name of the resource\n * @return the image\n */\npublic static Image createImage(String name) {\n    try {\n        final float scaling = Screen.getInstance().getScaling();\n        if (scaling == 1) {\n            return getImage(name);\n        } else {\n            BufferedImage image = getImageOrNull(name.substring(0, name.length() - 4) + \"_hi.png\");\n            if (image != null) {\n                int w = (int) (image.getWidth() * scaling / 2);\n                int h = (int) (image.getHeight() * scaling / 2);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            } else {\n                LOGGER.info(\"upscaling of \" + name);\n                image = getImage(name);\n                int w = (int) (image.getWidth() * scaling);\n                int h = (int) (image.getHeight() * scaling);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            }\n        }\n    } catch (IOException e) {\n        throw new RuntimeException(\"Image \" + name + \" not found\", e);\n    }\n}"
            ],
            [
                "createImages",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image list from a resource\n *\n * @param names names of the resource\n * @return the image\n */\npublic static ArrayList<Image> createImages(String... names) {\n    try {\n        ArrayList<Image> list = new ArrayList<Image>(names.length);\n        for (String name : names) {\n            list.add(getImage(name));\n        }\n        return list;\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}"
            ],
            [
                "getCTRLMask",
                "de.neemann.gui",
                "ToolTipAction",
                "/**\n * @return the system specific CTRL mask.\n */\npublic static int getCTRLMask() {\n    int mask = InputEvent.CTRL_DOWN_MASK;\n    if (Screen.isMac())\n        mask = InputEvent.META_DOWN_MASK;\n    return mask;\n}"
            ],
            [
                "checkForSave",
                "de.neemann.gui",
                "ClosingWindowListener",
                "/**\n * Used to check for save! No Window closing is performed!\n *\n * @param parent      the Parent frame\n * @param confirmSave the confirmSafe interface\n * @return true if to proceed\n */\npublic static boolean checkForSave(JFrame parent, ConfirmSave confirmSave) {\n    if (confirmSave.isStateChanged()) {\n        int r = new ConfirmDialogBuilder(SAVE_CHANGES_MESSAGE).setTitle(STATE_CHANGED_MESSAGE).setNoOption(NO_MESSAGE).setYesOption(YES_MESSAGE).setCancleOption(CANCEL_MESSAGE).show(parent);\n        if (r == JOptionPane.YES_OPTION || r == JOptionPane.NO_OPTION) {\n            if (r == JOptionPane.YES_OPTION) {\n                confirmSave.saveChanges();\n                return !confirmSave.isStateChanged();\n            } else\n                return true;\n        } else\n            return false;\n    }\n    return true;\n}"
            ],
            [
                "getParentWindow",
                "de.neemann.gui",
                "ErrorMessage",
                "/**\n * Get the parent window of the given component.\n * If the component is a window this window is returned\n *\n * @param parent the parent component\n * @return the window instance\n */\npublic static Window getParentWindow(Component parent) {\n    if (parent == null)\n        return null;\n    else if (parent instanceof Window)\n        return (Window) parent;\n    else\n        return SwingUtilities.getWindowAncestor(parent);\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the Screen instance\n */\npublic static Screen getInstance() {\n    return InstanceHolder.instance;\n}"
            ],
            [
                "getDefaultFontScaling",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the default font scaling in percent\n */\npublic static int getDefaultFontScaling() {\n    if (// macOS has its own retina handling\n    IS_MAC)\n        return 100;\n    int dpi = getDefaultScreenResolution();\n    int s = (dpi * 100) / 96;\n    if (s > 95 && s < 105)\n        s = 100;\n    return s;\n}"
            ],
            [
                "isLinux",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a windows system\n */\npublic static boolean isLinux() {\n    return IS_LINUX;\n}"
            ],
            [
                "isMac",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a mac\n */\npublic static boolean isMac() {\n    return IS_MAC;\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * @return the singleton instance\n */\npublic static InfoDialog getInstance() {\n    if (instance == null)\n        try {\n            instance = new InfoDialog();\n        } catch (IOException e) {\n            System.out.println(\"error reading InfoDialog \" + e.getMessage());\n        }\n    return instance;\n}"
            ],
            [
                "read",
                "de.neemann.digital.core.memory.importer",
                "Importer",
                "/**\n * Reads the given file to a single data field.\n *\n * @param hexFile   the file to read\n * @param dataBits  the bits used in the data field\n * @param bigEndian uses big endian at import\n * @return the data field\n * @throws IOException IOException\n */\npublic static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException {\n    DataField df = new DataField(1024);\n    read(hexFile, new DataFieldValueArray(df, dataBits), bigEndian);\n    return df;\n}"
            ],
            [
                "getOriginOf",
                "de.neemann.digital.core",
                "ExceptionWithOrigin",
                "/**\n * Returns the file or the files that caused the given exception.\n * If no origin is found null is returned.\n *\n * @param e the exception\n * @return the origin or null;\n */\npublic static String getOriginOf(Throwable e) {\n    while (e != null) {\n        if (e instanceof ExceptionWithOriginInterface) {\n            Set<File> origins = ((ExceptionWithOriginInterface) e).getOrigin();\n            if (origins != null && origins.size() > 0) {\n                StringBuilder sb = new StringBuilder();\n                for (File o : origins) {\n                    if (o != null) {\n                        if (sb.length() > 0)\n                            sb.append(\", \");\n                        sb.append(o.getName());\n                    }\n                }\n                if (sb.length() > 0)\n                    return sb.toString();\n                else\n                    return null;\n            }\n        }\n        e = e.getCause();\n    }\n    return null;\n}"
            ],
            [
                "zMaskString",
                "de.neemann.digital.core",
                "ObservableValue",
                "static String zMaskString(long value, long highZ, int bits) {\n    StringBuilder sb = new StringBuilder();\n    long m = Bits.up(1, bits - 1);\n    for (int i = 0; i < bits; i++) {\n        if ((highZ & m) != 0) {\n            sb.append(\"z\");\n        } else {\n            if ((value & m) != 0) {\n                sb.append(\"1\");\n            } else {\n                sb.append(\"0\");\n            }\n        }\n        m >>>= 1;\n    }\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core",
                "GlobalValues",
                "/**\n * @return returns the global instance\n */\npublic static GlobalValues getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core.io",
                "MIDIHelper",
                "/**\n * @return the MIDIHelper\n */\npublic static MIDIHelper getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new input\n */\npublic static PinInfo input(String name) {\n    return new PinInfo(name, null, Direction.input);\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name        the pins name\n * @param description the pins description\n * @return the new input\n */\npublic static PinInfo input(String name, String description) {\n    return new PinInfo(name, description, Direction.input);\n}"
            ],
            [
                "output",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new output\n */\npublic static PinInfo output(String name) {\n    return new PinInfo(name, null, Direction.output);\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "PinDescription",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "Direction",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "getKeyByName",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Returns the key of the given name.\n * If key does not exist, null is returned.\n *\n * @param name the name of the key\n * @return the key or null\n */\npublic static Key getKeyByName(String name) {\n    return InstanceHolder.INSTANCE.get(name);\n}"
            ],
            [
                "getKeys",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * @return all available keys\n */\npublic static Iterable<Key> getKeys() {\n    return InstanceHolder.INSTANCE.values();\n}"
            ],
            [
                "combine",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "/**\n * Combines two lists\n *\n * @param a   first list\n * @param b   second list\n * @param <T> the Type of the elements\n * @return the new combined list\n */\npublic static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b) {\n    T[] com = Arrays.copyOf(a.items, a.size() + b.size());\n    System.arraycopy(b.items, 0, com, a.size(), b.size());\n    return new ImmutableList<>(com);\n}"
            ],
            [
                "createSwitchModel",
                "de.neemann.digital.core.switching",
                "PlainSwitch",
                "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException {\n    if (input1 instanceof CommonBusValue) {\n        if (input2 instanceof CommonBusValue) {\n            final CommonBusValue in1 = (CommonBusValue) input1;\n            final CommonBusValue in2 = (CommonBusValue) input2;\n            ObservableValue constant = in1.searchConstant();\n            if (constant != null)\n                return new UniDirectionalSwitch(constant, output2);\n            else {\n                constant = in2.searchConstant();\n                if (constant != null)\n                    return new UniDirectionalSwitch(constant, output1);\n                else\n                    return new RealSwitch(in1, output1, in2, output2);\n            }\n        } else\n            return new UniDirectionalSwitch(input1, output2);\n    } else {\n        if (input2 instanceof CommonBusValue) {\n            return new UniDirectionalSwitch(input2, output1);\n        } else {\n            throw new NodeException(Lang.get(\"err_switchHasNoNet\"), output1, output2);\n        }\n    }\n}"
            ],
            [
                "createOneToN",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a one to N splitter\n *\n * @param bits number of outputs\n * @return the splitter\n */\npublic static Splitter createOneToN(int bits) {\n    Ports in = new Ports();\n    in.add(new Port(0, bits));\n    Ports out = new Ports();\n    for (int i = 0; i < bits; i++) out.add(new Port(i, 1));\n    return new Splitter(in, out);\n}"
            ],
            [
                "createNToOne",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a N to one splitter\n *\n * @param bits number of inputs\n * @return the splitter\n */\npublic static Splitter createNToOne(int bits) {\n    Ports in = new Ports();\n    for (int i = 0; i < bits; i++) in.add(new Port(i, 1));\n    Ports out = new Ports();\n    out.add(new Port(0, bits));\n    return new Splitter(in, out);\n}"
            ],
            [
                "ovs",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * Helper to create a {@link ObservableValues} instance\n *\n * @param items the items\n * @return the created instance\n */\npublic static ObservableValues ovs(ObservableValue... items) {\n    return new ObservableValues(items);\n}"
            ],
            [
                "toShortHex",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * Creates a short hex representation of the given value.\n * Use only to represent a value.\n * If confusion is excluded, the prefix '0x' is omitted.\n * Thus 0x1A3 is converted to \"1A3\" which can not be parsed back to a long because \"0x\" is missing.\n *\n * @param value the value\n * @return the hex string\n */\npublic static String toShortHex(long value) {\n    return toShortHex(value, false);\n}"
            ],
            [
                "up",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value up\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long up(long val, int bits) {\n    if (bits < 64)\n        return val << bits;\n    else\n        return 0;\n}"
            ],
            [
                "down",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value down\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long down(long val, int bits) {\n    if (bits < 64)\n        return val >>> bits;\n    else\n        return 0;\n}"
            ],
            [
                "mask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Creates a bit mask with the lowest [bits] bits set.\n *\n * @param bits the number of 1 bits\n * @return a value with the lowest [bits] bits set.\n */\npublic static long mask(int bits) {\n    if (bits < 64)\n        return (1L << bits) - 1;\n    else\n        return -1;\n}"
            ],
            [
                "signedFlagMask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * calculates the signed flag.\n *\n * @param bits the bit count\n * @return the last used bit ( 1<<(bits-1) )\n */\npublic static long signedFlagMask(int bits) {\n    return up(1, bits - 1);\n}"
            ],
            [
                "isNegative",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Returns true if value is negative\n *\n * @param value the value\n * @param bits  the bit count\n * @return true if the last relevant bit is set\n */\npublic static boolean isNegative(long value, int bits) {\n    return (value & signedFlagMask(bits)) != 0;\n}"
            ],
            [
                "signExtend",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Sign extension of the value.\n * signExtend(3,2) returns -1.\n *\n * @param value the value\n * @param bits  number of bits\n * @return the sign extended value\n */\npublic static long signExtend(long value, int bits) {\n    if (bits >= 64)\n        return value;\n    else {\n        if ((value & signedFlagMask(bits)) == 0)\n            return value;\n        else\n            return value | ~mask(bits);\n    }\n}"
            ],
            [
                "binLn2",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Calculates the number of bits needed to store the given value b.\n *\n * @param b number\n * @return number of bits needed to store b\n */\npublic static int binLn2(long b) {\n    int outBits = 1;\n    while ((1L << outBits) <= b) outBits++;\n    return outBits;\n}"
            ],
            [
                "removeBitFromValue",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Removes a bit from a value.\n * This means it shifts the higher bits down. Behaves like removing an item from a list.\n *\n * @param value the value\n * @param bit   the bit to remove\n * @return the new value\n */\npublic static int removeBitFromValue(int value, int bit) {\n    if (bit > 0) {\n        return ((value & (~((1 << (bit + 1)) - 1))) >>> 1) | (value & ((1 << bit) - 1));\n    } else {\n        return value >>> 1;\n    }\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str the string\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str) throws NumberFormatException {\n    return decode(str, false);\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str         the string\n * @param parseFloats if true also floats are parsed\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str, boolean parseFloats) throws NumberFormatException {\n    if (str == null)\n        return 0;\n    str = str.trim();\n    if (str.length() == 0)\n        return 0;\n    if (str.indexOf(':') >= 0)\n        return decodeFixed(str);\n    if (parseFloats && str.indexOf('.') > -1) {\n        try {\n            if (str.endsWith(\"d\") || str.endsWith(\"D\"))\n                return Double.doubleToLongBits(Double.parseDouble(str.substring(0, str.length() - 1)));\n            else\n                return Float.floatToIntBits(Float.parseFloat(str));\n        } catch (java.lang.NumberFormatException e) {\n            throw new NumberFormatException(str, 0);\n        }\n    }\n    int p = 0;\n    boolean neg = false;\n    if (str.charAt(p) == '-') {\n        neg = true;\n        p++;\n    }\n    if (p >= str.length())\n        throw new NumberFormatException(str, p);\n    boolean wasZero = false;\n    while (str.length() > p && str.charAt(p) == '0') {\n        wasZero = true;\n        p++;\n    }\n    if (p >= str.length())\n        return 0;\n    int radix;\n    if (wasZero) {\n        if (neg)\n            throw new NumberFormatException(str, p);\n        switch(str.charAt(p)) {\n            case 'x':\n            case 'X':\n                radix = 16;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            case 'b':\n            case 'B':\n                radix = 2;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            default:\n                radix = 8;\n        }\n    } else {\n        if (str.charAt(p) == '\\'') {\n            if (neg)\n                throw new NumberFormatException(str, p);\n            p++;\n            if (p == str.length())\n                throw new NumberFormatException(str, p);\n            return str.charAt(p);\n        } else\n            radix = 10;\n    }\n    long val = decode(str, p, radix);\n    if (neg)\n        val = -val;\n    return val;\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes the given string starting at position p\n *\n * @param str   the string to decode\n * @param p     the starting position\n * @param radix the radix\n * @return the value\n * @throws NumberFormatException NumberFormatException\n */\npublic static long decode(String str, int p, int radix) throws NumberFormatException {\n    long val = 0;\n    while (p < str.length()) {\n        int d = Character.digit(str.charAt(p), radix);\n        if (d < 0)\n            throw new NumberFormatException(str, p);\n        val = val * radix + d;\n        p++;\n    }\n    return val;\n}"
            ],
            [
                "getCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Extract the code from the attributes.\n * The code is either stored directly or there is a file given.\n *\n * @param attr the attributes\n * @param root the projects main folder\n * @return the code\n * @throws IOException IOException\n */\nstatic String getCode(ElementAttributes attr, File root) throws IOException {\n    if (attr.contains(Keys.EXTERNAL_CODE))\n        return attr.get(Keys.EXTERNAL_CODE);\n    if (attr.contains(Keys.EXTERNAL_CODE_FILE))\n        return readCode(attr.getFile(Keys.EXTERNAL_CODE_FILE, root));\n    return \"\";\n}"
            ],
            [
                "readCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Reads the code from a file\n *\n * @param file the file\n * @return the code\n * @throws IOException IOException\n */\nstatic String readCode(File file) throws IOException {\n    byte[] data = Files.readAllBytes(file.toPath());\n    return new String(data, StandardCharsets.UTF_8);\n}"
            ],
            [
                "create",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Creates a new application instance\n *\n * @param type the type of the process\n * @param attr the elements attributes\n * @return the created process handler\n */\nstatic Application create(Type type, ElementAttributes attr) {\n    switch(type) {\n        case Generic:\n            return new ApplicationGeneric();\n        case GHDL:\n            return new ApplicationGHDL(attr);\n        case IVERILOG:\n            return new ApplicationIVerilog(attr);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "start",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Helper to start a process.\n * If result value is not null an exception is thrown.\n *\n * @param dir  the folder in which the process is started\n * @param args the argument\n * @return the console output\n * @throws IOException IOException\n */\npublic static String start(File dir, String... args) throws IOException {\n    ProcessBuilder pb = new ProcessBuilder(args).redirectErrorStream(true);\n    if (dir != null)\n        pb.directory(dir);\n    Process p;\n    try {\n        p = pb.start();\n    } catch (IOException e) {\n        throw new CouldNotStartProcessException(Lang.get(\"err_couldNotStartProcess_N\", Arrays.toString(args)), e);\n    }\n    ReaderThread rt = new ReaderThread(p.getInputStream());\n    rt.start();\n    try {\n        int exitValue = p.waitFor();\n        rt.join();\n        String output = rt.toString();\n        if (exitValue != 0)\n            throw new IOException(Lang.get(\"err_exitValueNotNull_N_O\", exitValue, output));\n        return output;\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n}"
            ],
            [
                "joinStrings",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Merges the given string.\n * If all strings are null or empty, null is returned\n *\n * @param strings the strings to join\n * @return the joined string or null\n */\npublic static String joinStrings(String... strings) {\n    StringBuilder sb = new StringBuilder();\n    for (String s : strings) {\n        if (s != null) {\n            String str = s.trim();\n            if (str.length() > 0) {\n                if (sb.length() > 0)\n                    sb.append(\"\\n\");\n                sb.append(str);\n            }\n        }\n    }\n    if (sb.length() > 0)\n        return sb.toString();\n    else\n        return null;\n}"
            ],
            [
                "fromString",
                "de.neemann.digital.cli.cli",
                "Argument",
                "/**\n * Creates a value from a string\n *\n * @param val      the value as a string\n * @param defValue the default value\n * @return the value converted to the type of the default value\n * @throws CLIException CLIException\n */\npublic static Object fromString(String val, Object defValue) throws CLIException {\n    if (defValue instanceof String)\n        return val;\n    else if (defValue instanceof Boolean)\n        switch(val.toLowerCase()) {\n            case \"yes\":\n            case \"1\":\n            case \"true\":\n                return true;\n            case \"no\":\n            case \"0\":\n            case \"false\":\n                return false;\n            default:\n                throw new CLIException(Lang.get(\"cli_notABool_N\", val), 106);\n        }\n    else if (defValue instanceof Integer) {\n        try {\n            return Integer.parseInt(val);\n        } catch (NumberFormatException e) {\n            throw new CLIException(Lang.get(\"cli_notANumber_N\", val), e);\n        }\n    } else\n        throw new CLIException(Lang.get(\"cli_invalidType_N\", defValue.getClass().getSimpleName()), 203);\n}"
            ],
            [
                "fac",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the factorial of a number.\n * If the result is greater as the max long value, the max value is returned.\n *\n * @param n integer\n * @return the factorial of the given number\n */\npublic static long fac(int n) {\n    if (n > 20)\n        return Long.MAX_VALUE;\n    return FAC_TABLE[n];\n}"
            ],
            [
                "getTimeComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the time complexity of optimizing the given fsm\n *\n * @param fsm the fsm\n * @return the time complexity\n */\npublic static long getTimeComplexity(FSM fsm) {\n    List<State> states = fsm.getStates();\n    int size = states.size();\n    int sizeInclDC = 1 << Bits.binLn2(size - 1);\n    if (sizeInclDC > 20)\n        return Long.MAX_VALUE;\n    return fac(sizeInclDC) / fac(sizeInclDC - size);\n}"
            ],
            [
                "calcComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException {\n    TruthTable tt = fsm.createTruthTable(null);\n    MinimizerInterface mi = new MinimizerQuineMcCluskey();\n    ComplexityListener listener = new ComplexityListener(out);\n    for (int i = 0; i < tt.getResultCount(); i++) mi.minimize(tt.getVars(), tt.getResult(i), tt.getResultName(i), listener);\n    return listener.complexity;\n}"
            ],
            [
                "blink",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Blink\n *\n * @return the fsm\n */\npublic static FSM blink() {\n    State off = new State(\"off\");\n    State on = new State(\"on\");\n    return new FSM(off, on).transition(on, off, null).transition(off, on, null);\n}"
            ],
            [
                "rotDecoder",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a debounced rotary switch decoder\n *\n * @return the fsm\n */\npublic static FSM rotDecoder() {\n    State init = new State(\"init\");\n    State top = new State(\"top\");\n    State topSetLeft = new State(\"topSetLeft\").setValues(\"L=1\");\n    State topSetRight = new State(\"topSetRight\").setValues(\"R=1\");\n    State leftTop = new State(\"leftTop\");\n    State leftBottom = new State(\"leftBottom\");\n    State bottom = new State(\"bottom\");\n    State bottomSetLeft = new State(\"bottomSetRight\").setValues(\"R=1\");\n    State bottomSetRight = new State(\"bottomSetLeft\").setValues(\"L=1\");\n    State rightTop = new State(\"rightTop\");\n    State rightBottom = new State(\"rightBottom\");\n    return new FSM(init, top, topSetLeft, leftTop, leftBottom, bottomSetLeft, bottom, bottomSetRight, rightBottom, rightTop, topSetRight).transition(init, top, \"A=0 & B=0\").transition(init, bottom, \"A=1 & B=1\").transition(top, leftTop, \"A=1 & B=0\").transition(top, rightTop, \"A=0 & B=1\").transition(topSetLeft, top, null).transition(topSetRight, top, null).transition(rightTop, top, \"A=0 & B=0\").transition(rightBottom, topSetRight, \"A=0 & B=0\").transition(leftTop, top, \"A=0 & B=0\").transition(leftBottom, topSetLeft, \"A=0 & B=0\").transition(bottom, leftBottom, \"A=1 & B=0\").transition(bottom, rightBottom, \"A=0 & B=1\").transition(bottomSetLeft, bottom, null).transition(bottomSetRight, bottom, null).transition(rightBottom, bottom, \"A=1 & B=1\").transition(rightTop, bottomSetRight, \"A=1 & B=1\").transition(leftBottom, bottom, \"A=1 & B=1\").transition(leftTop, bottomSetLeft, \"A=1 & B=1\");\n}"
            ],
            [
                "counter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a counter\n *\n * @param n the number of states\n * @return the fsm\n */\npublic static FSM counter(int n) {\n    FSM fsm = new FSM();\n    State last = null;\n    for (int i = 0; i < n; i++) {\n        State s = new State(\"\").setNumber(i);\n        fsm.add(s);\n        if (last != null)\n            fsm.transition(last, s, null);\n        last = s;\n    }\n    fsm.transition(last, fsm.getStates().get(0), null);\n    return fsm;\n}"
            ],
            [
                "trafficLight",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLight() {\n    State red = new State(\"red\").setNumber(0).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(1).setValues(\"R=1,Y=1\");\n    State green = new State(\"green\").setNumber(2).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(3).setValues(\"Y=1\");\n    return new FSM(red, redYellow, green, yellow).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "trafficLightMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLightMedwedew() {\n    State init = new State(\"init\").setNumber(0);\n    State red = new State(\"red\").setNumber(1).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(3).setValues(\"R=1, Y=1\");\n    State green = new State(\"green\").setNumber(4).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(2).setValues(\"Y=1\");\n    return new FSM(init, red, redYellow, green, yellow).transition(init, red, null).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "selCounter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM selCounter() {\n    State s0 = new State(\"s0\").setNumber(0);\n    State s1 = new State(\"s1\").setNumber(1);\n    State s2 = new State(\"s2\").setNumber(2);\n    State s3 = new State(\"s3\").setNumber(3);\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, null).transition(s0, s0, \"!T0  !T1\").transition(s1, s2, null).transition(s1, s0, \"T0 !T1\").transition(s2, s3, null).transition(s2, s0, \"!T0 T1\").transition(s3, s0, null);\n}"
            ],
            [
                "stepper",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepper() {\n    State s0 = new State(\"s0\").setNumber(0).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(1).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(2).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(3).setValues(\"P3=1,P0=1\");\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "stepperMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepperMedwedew() {\n    State init = new State(\"init\").setNumber(0).setValues(\"P0=2,P1=2,P2=2,P3=2\");\n    State s0 = new State(\"s0\").setNumber(3).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(6).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(12).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(9).setValues(\"P3=1,P0=1\");\n    return new FSM(init, s0, s1, s2, s3).transition(init, s0, null).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"fsm\", FSM.class);\n    xStream.alias(\"state\", State.class);\n    xStream.alias(\"transition\", Transition.class);\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"vectorf\", VectorFloat.class);\n    xStream.aliasAttribute(VectorFloat.class, \"x\", \"x\");\n    xStream.aliasAttribute(VectorFloat.class, \"y\", \"y\");\n    return xStream;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename filename\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(File filename) throws IOException {\n    final FSM fsm = loadFSM(new FileInputStream(filename));\n    fsm.file = filename;\n    return fsm;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new fsm instance from a stored file\n *\n * @param in the input stream\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        final FSM fsm = (FSM) xStream.fromXML(in);\n        for (Transition t : fsm.transitions) t.setFSM(fsm);\n        for (State s : fsm.states) s.setFSM(fsm);\n        fsm.modified = false;\n        fsm.activeStateTransition = -1;\n        return fsm;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "get",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string of key if no translation present\n */\npublic static String get(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKey(key, params);\n}"
            ],
            [
                "getNull",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string or null if no translation present\n */\npublic static String getNull(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKeyNull(key, params);\n}"
            ],
            [
                "getBundle",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the resource bundle\n */\npublic static Bundle getBundle() {\n    return InstanceHolder.INSTANCE.bundle;\n}"
            ],
            [
                "currentLanguage",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the current language\n */\npublic static Language currentLanguage() {\n    return InstanceHolder.INSTANCE.currentLanguage;\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * Resolves a multilingual user defined string.\n * Allows the user to define multilingual content by using a simple syntax:\n * You can enter strings like \"Word! {{de Welt!}} {{fr Monde!}}\". This method extracts\n * the appropriate string for the current language.\n *\n * @param text the complete text description\n * @return the evaluated text.\n */\npublic static String evalMultilingualContent(String text) {\n    return evalMultilingualContent(text, currentLanguage());\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "static String evalMultilingualContent(String text, Language currentLanguage) {\n    int pos = text.indexOf(\"{{\");\n    if (pos < 0)\n        return text;\n    String def = text.substring(0, pos).trim();\n    do {\n        int p2 = pos + 1;\n        int count = 1;\n        while (count > 0) {\n            char c = text.charAt(p2);\n            if (c == '{')\n                count++;\n            else if (c == '}')\n                count--;\n            p2++;\n            if (p2 == text.length() && count > 0) {\n                p2 = 1;\n                break;\n            }\n        }\n        p2 -= 2;\n        if (p2 > pos + 3) {\n            String l = text.substring(pos + 2, pos + 4);\n            if (l.equalsIgnoreCase(currentLanguage.getName()))\n                return text.substring(pos + 4, p2).trim();\n            if (l.equalsIgnoreCase(\"en\") && def.isEmpty())\n                def = text.substring(pos + 4, p2).trim();\n            pos = text.indexOf(\"{{\", p2);\n        } else\n            return def;\n    } while (pos > 0);\n    return def;\n}"
            ],
            [
                "lowest",
                "de.neemann.digital.testing.parser",
                "OperatorPrecedence",
                "/**\n * @return the lowest operator precedence to start evaluation with\n */\npublic static OperatorPrecedence lowest() {\n    return OR;\n}"
            ],
            [
                "addOne",
                "de.neemann.digital.analyse",
                "ModelAnalyser",
                "/**\n * Adds the \"+1\" to the variables name\n *\n * @param name the vars name\n * @return the modified name\n */\npublic static String addOne(String name) {\n    if (name.endsWith(\"^n\"))\n        return name.substring(0, name.length() - 1) + \"{n+1}\";\n    else\n        return name + \"+1\";\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param file the file\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(File file) throws IOException {\n    return readCSV(new FileReader(file));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the string to read\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(String csv) throws IOException {\n    return readCSV(new StringReader(csv));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the reader\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(Reader csv) throws IOException {\n    BufferedReader r = new BufferedReader(csv);\n    TruthTable tt = readHeader(r);\n    while (true) {\n        String line = r.readLine();\n        if (line == null)\n            return tt;\n        line = line.trim();\n        if (!line.isEmpty())\n            parseLine(tt, line);\n    }\n}"
            ],
            [
                "createDoubledValues",
                "de.neemann.digital.analyse.quinemc",
                "BoolTableByteArray",
                "/**\n * Creates a table where all values added twive\n *\n * @param values the original values\n * @return the new values\n */\npublic static BoolTableByteArray createDoubledValues(BoolTable values) {\n    BoolTableByteArray t = new BoolTableByteArray(values.size() * 2);\n    for (int i = 0; i < values.size(); i++) {\n        int v = values.get(i).asInt();\n        t.set(i * 2, v);\n        t.set(i * 2 + 1, v);\n    }\n    return t;\n}"
            ],
            [
                "simplify",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Simplifies the given expression.\n * If no simplification was found, the original expression is returned unchanged.\n *\n * @param expression the expression to simplify\n * @return the simplified expression\n * @throws ExpressionException ExpressionException\n */\npublic static Expression simplify(Expression expression) throws ExpressionException {\n    int initialCplx = expression.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    Expression newExp = new QuineMcCluskey(expression).simplify().getExpression();\n    int newCplx = newExp.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    if (newCplx < initialCplx)\n        return newExp;\n    else\n        return expression;\n}"
            ],
            [
                "addAnd",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Creates the final expression\n *\n * @param e         the expression to complete\n * @param rows      the rows to add\n * @param variables the variables to use to build the expression\n * @return the expression\n */\npublic static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables) {\n    for (TableRow r : rows) {\n        Expression n = r.getExpression(variables);\n        if (e == null)\n            e = n;\n        else\n            e = or(e, n);\n    }\n    return e;\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from a bool\n *\n * @param bool the bool\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(boolean bool) {\n    if (bool) {\n        return one;\n    } else {\n        return zero;\n    }\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from an int\n * 0 and 1 work as expected, any other value means \"dont care\"\n *\n * @param value the value\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(int value) {\n    switch(value) {\n        case 0:\n            return ThreeStateValue.zero;\n        case 1:\n            return ThreeStateValue.one;\n        default:\n            return ThreeStateValue.dontCare;\n    }\n}"
            ],
            [
                "doImplicitTypeCasts",
                "de.neemann.digital.analyse",
                "SubstituteLibrary",
                "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val) {\n    if (expectedClass == Integer.class && val instanceof Long) {\n        long l = (Long) val;\n        if (l <= Integer.MAX_VALUE && l >= Integer.MIN_VALUE)\n            return (int) l;\n    } else if (expectedClass == Long.class && val instanceof Number) {\n        return ((Number) val).longValue();\n    } else if (expectedClass == Color.class && val instanceof Number) {\n        return new Color(((Number) val).intValue());\n    } else if (expectedClass == Boolean.class && val instanceof Number) {\n        long b = ((Number) val).longValue();\n        return b != 0;\n    } else if (expectedClass == InValue.class) {\n        if (val instanceof Number)\n            return new InValue(((Number) val).longValue());\n        else {\n            try {\n                return new InValue(val.toString());\n            } catch (Bits.NumberFormatException e) {\n                return val;\n            }\n        }\n    } else if (expectedClass == InverterConfig.class && val instanceof java.util.List) {\n        InverterConfig.Builder b = new InverterConfig.Builder();\n        for (Object i : (java.util.List) val) b.add(i.toString());\n        return b.build();\n    } else if (expectedClass == DataField.class && val instanceof java.util.List) {\n        java.util.List list = (java.util.List) val;\n        long[] longs = new long[list.size()];\n        for (int i = 0; i < list.size(); i++) if (list.get(i) instanceof Number)\n            longs[i] = ((Number) list.get(i)).longValue();\n        else\n            return val;\n        return new DataField(longs);\n    } else if (expectedClass == Rotation.class && val instanceof Number) {\n        int r = ((Number) val).intValue();\n        return new Rotation(r % 4);\n    } else if (expectedClass == File.class && val instanceof String) {\n        return new File(val.toString());\n    } else if (expectedClass == TestCaseDescription.class && val instanceof String) {\n        try {\n            return new TestCaseDescription(val.toString());\n        } catch (Exception e) {\n            return val;\n        }\n    } else if (expectedClass.isEnum() && val instanceof Number) {\n        Class<Enum<?>> e = (Class<Enum<?>>) expectedClass;\n        Object[] values = e.getEnumConstants();\n        int index = ((Number) val).intValue();\n        if (index < 0 || index >= values.length)\n            return values[0];\n        else\n            return values[index];\n    }\n    return val;\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Iterable<Expression> exp) {\n    return simplify(new Or(exp, true));\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), true));\n}"
            ],
            [
                "xor",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new XOR expression\n *\n * @param a the expression to XOR\n * @param b the expression to XOR\n * @return the created expression\n */\npublic static Expression xor(Expression a, Expression b) {\n    if (b == Constant.ONE) {\n        return Not.not(a);\n    } else if (b == Constant.ZERO) {\n        return a;\n    } else if (a == Constant.ONE) {\n        return Not.not(b);\n    } else if (a == Constant.ZERO) {\n        return b;\n    } else\n        return simplify(new XOr(a, b));\n}"
            ],
            [
                "orNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression orNoMerge(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), false));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Iterable<Expression> exp) {\n    return simplify(new And(exp, true));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), true));\n}"
            ],
            [
                "andNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression andNoMerge(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), false));\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifier\n *\n * @param expression the expression to modify\n * @param modifier   the modifier to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier modifier) {\n    expression.modify(modifier);\n    return modifier.modify(expression);\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifiers\n *\n * @param expression the expression to modify\n * @param modifiers  the modifiers to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier... modifiers) {\n    for (ExpressionModifier m : modifiers) expression = modifyExpression(expression, m);\n    return expression;\n}"
            ],
            [
                "v",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates a new Variable\n *\n * @param name the variables name\n * @return the new Variable\n */\npublic static Variable v(String name) {\n    return new Variable(name);\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates an array of variables\n *\n * @param n the number of varfiables to create.\n * @return variables named \"A0\", \"A1\", \"A2\" and so on\n */\npublic static ArrayList<Variable> vars(int n) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (int i = 0; i < n; i++) v.add(new Variable(\"\" + (char) ('A' + i)));\n    return v;\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Create a list of variables using the given names\n *\n * @param names the names used to create the variables\n * @return the list of variables\n */\npublic static ArrayList<Variable> vars(String... names) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (String n : names) v.add(new Variable(n));\n    return v;\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable.\n */\npublic static boolean isVar(Expression e) {\n    return e instanceof Variable;\n}"
            ],
            [
                "isVarOrNotVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable or a inverted variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable or a inverted variable.\n */\npublic static boolean isVarOrNotVar(Expression e) {\n    return isVar(e) || (e instanceof Not && isVar(((Not) e).getExpression()));\n}"
            ],
            [
                "getDefaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * @return the default format\n */\npublic static FormatToExpression getDefaultFormat() {\n    return Settings.getInstance().get(Keys.SETTINGS_EXPRESSION_FORMAT);\n}"
            ],
            [
                "defaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * Formats a expression to a string.\n * Uses the default format for presentation on the screen.\n *\n * @param exp the expression to format\n * @return the string representation\n */\npublic static String defaultFormat(Expression exp) {\n    return getDefaultFormat().format(exp);\n}"
            ],
            [
                "not",
                "de.neemann.digital.analyse.expression",
                "Not",
                "/**\n * Creates a not expression.\n * Simplifies the expression if possible.\n *\n * @param a the child expression to invert\n * @return the inverted expression\n */\npublic static Expression not(Expression a) {\n    if (a == Constant.ONE)\n        return Constant.ZERO;\n    if (a == Constant.ZERO)\n        return Constant.ONE;\n    if (a instanceof Not && !((Not) a).protect) {\n        return ((Not) a).expression;\n    } else\n        return new Not(a);\n}"
            ],
            [
                "readFromFile",
                "de.neemann.digital.analyse",
                "TruthTable",
                "/**\n * Load the given file and returns a truth table instance\n *\n * @param filename filename\n * @return the {@link TruthTable}\n * @throws IOException IOException\n */\npublic static TruthTable readFromFile(File filename) throws IOException {\n    if (filename.getName().toLowerCase().endsWith(\".csv\"))\n        return CSVImporter.readCSV(filename);\n    else {\n        XStream xStream = getxStream();\n        try (InputStream in = new FileInputStream(filename)) {\n            return (TruthTable) xStream.fromXML(in);\n        }\n    }\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param s the signal\n * @return the port pins used\n */\npublic static SplitPinString create(Signal s) {\n    if (s.missingPinNumber())\n        return EMPTY;\n    return create(s.getPinNumber());\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param pinStr the pins definition;\n * @return the port pins used\n */\npublic static SplitPinString create(String pinStr) {\n    if (pinStr == null || pinStr.trim().length() == 0)\n        return EMPTY;\n    StringTokenizer st = new StringTokenizer(pinStr, \",;\");\n    ArrayList<String> pins = new ArrayList<>();\n    while (st.hasMoreTokens()) pins.add(st.nextToken().trim());\n    return new PinsArray(pins);\n}"
            ],
            [
                "checkSuffix",
                "de.neemann.digital.gui",
                "SaveAsHelper",
                "/**\n * Adds the given suffix to the file\n *\n * @param filename filename\n * @param suffix   suffix\n * @return the file name with the given suffix\n */\npublic static File checkSuffix(File filename, String suffix) {\n    if (suffix == null || filename == null)\n        return filename;\n    String name = filename.getName();\n    int p = name.lastIndexOf('.');\n    if (p >= 0) {\n        String suf = name.substring(p + 1).toLowerCase();\n        if (KNOWN.contains(suf))\n            name = name.substring(0, p);\n        while (name.length() > 0 && name.charAt(name.length() - 1) == '.') name = name.substring(0, name.length() - 1);\n    }\n    return new File(filename.getParentFile(), name + \".\" + suffix);\n}"
            ],
            [
                "addF1Traversal",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Adds F1 as a focus traversal key to a text components.\n *\n * @param text The text component\n * @param <TC> the concrete type of the text component\n * @return the given text component\n */\npublic static <TC extends JTextComponent> TC addF1Traversal(TC text) {\n    HashSet<AWTKeyStroke> set = new HashSet<>(text.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n    set.add(KeyStroke.getKeyStroke(\"F1\"));\n    text.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, set);\n    return text;\n}"
            ],
            [
                "createUndoManager",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Enables undo in the given text component.\n *\n * @param text the text component\n * @return the undo manager\n */\npublic static UndoManager createUndoManager(JTextComponent text) {\n    final UndoManager undoManager;\n    undoManager = new UndoManager();\n    text.getDocument().addUndoableEditListener(undoManager);\n    text.addKeyListener(new KeyAdapter() {\n\n        @Override\n        public void keyPressed(KeyEvent e) {\n            if (e.getKeyCode() == KeyEvent.VK_Z && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canUndo())\n                    undoManager.undo();\n            } else if (e.getKeyCode() == KeyEvent.VK_Y && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canRedo())\n                    undoManager.redo();\n            }\n        }\n    });\n    return undoManager;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components.modification",
                "ModifyInsertWires",
                "/**\n * Creates a simplified modification.\n *\n * @param newWires the wires to insert\n * @return the modification\n */\npublic static Modification<Circuit> create(List<Wire> newWires) {\n    switch(newWires.size()) {\n        case 0:\n            return null;\n        case 1:\n            return new ModifyInsertWire(newWires.get(0));\n        default:\n            return new ModifyInsertWires(newWires);\n    }\n}"
            ],
            [
                "getToolTipName",
                "de.neemann.digital.gui.components.modification",
                "ModificationOfVisualElement",
                "/**\n * Creates a translated name of the given element\n *\n * @param ve the element\n * @return translated name\n */\npublic static String getToolTipName(VisualElement ve) {\n    String s = Lang.getNull(\"elem_\" + ve.getElementName());\n    if (s == null) {\n        s = ve.getElementName();\n        if (s.endsWith(\".dig\"))\n            s = s.substring(0, s.length() - 4);\n    }\n    String l = ve.getElementAttributes().get(Keys.LABEL);\n    if (l.length() > 0)\n        s += \" (\" + l + \")\";\n    return s;\n}"
            ],
            [
                "getTerminal",
                "de.neemann.digital.gui.components.terminal",
                "TerminalDialog",
                "/**\n * Creates a new GUI terminal\n *\n * @param model the model\n * @param attr  the terminals attributes\n * @return the terminal interface\n */\nstatic TerminalInterface getTerminal(Model model, ElementAttributes attr) {\n    return new MyTerminal(model, attr);\n}"
            ],
            [
                "createList",
                "de.neemann.digital.gui.components",
                "CircuitTransferable",
                "/**\n * Creates a list of objects from inserted data\n * Can also throw a {@link ClassCastException}!\n *\n * @param data         the inserted data\n * @param shapeFactory the shapeFactory to set to the elements\n * @return the elements or null\n * @throws IOException IOException\n */\npublic static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException {\n    if (!(data instanceof String))\n        return null;\n    XStream xStream = Circuit.getxStream();\n    try (Reader in = new StringReader(data.toString())) {\n        ArrayList<Movable> elements = (ArrayList<Movable>) xStream.fromXML(in);\n        if (elements == null)\n            return null;\n        for (Movable m : elements) if (m instanceof VisualElement)\n            ((VisualElement) m).setShapeFactory(shapeFactory);\n        return elements;\n    }\n}"
            ],
            [
                "createURLStreamHandlerFactory",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "/**\n * @return factory which catches 'image' protocol requests to deliver images via an URL.\n */\npublic static URLStreamHandlerFactory createURLStreamHandlerFactory() {\n    return new MyURLStreamHandlerFactory();\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "MyURLStreamHandlerFactory",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "isSequentialVar",
                "de.neemann.digital.gui.components.table",
                "ExpressionListenerJK",
                "/**\n * If the name belongs to a sequential state var, the state vars name is returned.\n * Otherwise a null is returned\n *\n * @param name the name of the variable\n * @return the state variable or null\n */\npublic static String isSequentialVar(String name) {\n    String detName = null;\n    if (name.endsWith(\"n+1\")) {\n        detName = name.substring(0, name.length() - 2);\n    } else if (name.endsWith(\"{n+1}\")) {\n        detName = name.substring(0, name.length() - 5) + \"n\";\n    }\n    return detName;\n}"
            ],
            [
                "getAttrList",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * @return returns the list of circuit attributes\n */\npublic static ArrayList<Key> getAttrList() {\n    return ATTR_LIST;\n}"
            ],
            [
                "raster",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * rounds the given vector to the raster\n *\n * @param pos the vector\n * @return pos round to raster\n */\npublic static Vector raster(Vector pos) {\n    return new Vector((int) Math.round((double) pos.x / SIZE) * SIZE, (int) Math.round((double) pos.y / SIZE) * SIZE);\n}"
            ],
            [
                "createLiveDialog",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "/**\n * Creates a instance prepared for \"live logging\"\n *\n * @param owner      the parent frame\n * @param model      the model\n * @param microStep  stepping mode\n * @param ordering   the ordering to use\n * @param sampleSize the number of samples\n * @return the created instance\n */\npublic static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize) {\n    String title;\n    if (microStep)\n        title = Lang.get(\"win_measures_microstep\");\n    else\n        title = Lang.get(\"win_measures_fullstep\");\n    ArrayList<Signal> signals = model.getSignalsCopy();\n    signals.removeIf(signal -> !signal.isShowInGraph());\n    new OrderMerger<String, Signal>(ordering) {\n\n        @Override\n        public boolean equals(Signal a, String b) {\n            return a.getName().equals(b);\n        }\n    }.order(signals);\n    ValueTableObserver valueTableObserver = new ValueTableObserver(microStep, signals, sampleSize);\n    GraphDialog graphDialog = new GraphDialog(owner, title, valueTableObserver.getLogData(), model, true).setColumnInfo(createColumnsInfo(signals));\n    graphDialog.addWindowListener(new WindowAdapter() {\n\n        @Override\n        public void windowOpened(WindowEvent e) {\n            model.addObserver(valueTableObserver);\n        }\n\n        @Override\n        public void windowClosed(WindowEvent e) {\n            model.removeObserver(valueTableObserver);\n        }\n    });\n    return graphDialog;\n}"
            ],
            [
                "createColumnsInfo",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals) {\n    ValueTable.ColumnInfo[] info = new ValueTable.ColumnInfo[signals.size()];\n    for (int i = 0; i < signals.size(); i++) {\n        Signal s = signals.get(i);\n        info[i] = new ValueTable.ColumnInfo(s.getFormat(), s.getValue().getBits());\n    }\n    return info;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "isExperimentalMode",
                "de.neemann.digital.gui",
                "Main",
                "/**\n * @return true if experimental features are enabled\n */\npublic static boolean isExperimentalMode() {\n    return experimental;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "WindowManager",
                "/**\n * @return the WindowManager\n */\npublic static WindowManager getInstance() {\n    return InstanceHolderClass.INSTANCE;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "Settings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static Settings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "getRange",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog bit range\n *\n * @param bits the number of bits\n * @return the bit range\n */\npublic static String getRange(int bits) {\n    if (bits == 1)\n        return \"\";\n    else\n        return \"[\" + (bits - 1) + \":0]\";\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog type for a signal\n *\n * @param def  the signal type (input or output) used if dir is not \"inout\"\n * @param dir  used to check if direction is \"inout\"\n * @param bits the number of bits\n * @return the verilog signal type\n */\npublic static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits) {\n    String result;\n    if (dir == HDLPort.Direction.INOUT)\n        result = \"inout\";\n    else\n        result = (def == HDLPort.Direction.IN) ? \"input\" : \"output\";\n    if (bits > 1) {\n        result += \" [\" + (bits - 1) + \":0]\";\n    }\n    return result;\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    return (bits + \"'b\" + s);\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.verilog2.lib",
                "VerilogTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given\n * element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(MODULE_PREFIX + elementName);\n}"
            ],
            [
                "createFromJar",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n *\n * @param path the path of the file to load\n * @param cl   the classloader used to load the template. If set to null, the SystemClassLoader is used\n * @return the statement\n * @throws IOException     IOException\n * @throws ParserException ParserException\n */\npublic static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException {\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    InputStream in = cl.getResourceAsStream(path);\n    if (in == null)\n        throw new FileNotFoundException(\"file not found: \" + path);\n    try (Reader r = new InputStreamReader(in, StandardCharsets.UTF_8)) {\n        Parser p = new Parser(r, path);\n        return p.parse();\n    }\n}"
            ],
            [
                "createFromJarStatic",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n * Throws only a RuntimeException so use with care!\n *\n * @param path the path of the file to load\n * @return the statement\n */\npublic static Statement createFromJarStatic(String path) {\n    try {\n        return createFromJar(path, null);\n    } catch (IOException | ParserException e) {\n        throw new RuntimeException(\"could not parse: \" + path, e);\n    }\n}"
            ],
            [
                "isWhiteSpace",
                "de.neemann.digital.hdl.hgs",
                "Tokenizer",
                "/**\n * Returns true if the given character is a white space.\n *\n * @param c the character to test\n * @return true in c is a white space\n */\npublic static boolean isWhiteSpace(int c) {\n    return c == ' ' || c == '\\t' || c == '\\n' || c == '\\r';\n}"
            ],
            [
                "toLong",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a long\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static long toLong(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toDouble",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a double\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static double toDouble(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).doubleValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toInt",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an int\n *\n * @param value the value to convert\n * @return the int value\n * @throws HGSEvalException HGSEvalException\n */\npublic static int toInt(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).intValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toBool",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a bool\n *\n * @param value the value to convert\n * @return the bool value\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean toBool(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue() != 0;\n    if (value instanceof Boolean)\n        return ((Boolean) value);\n    throw new HGSEvalException(\"Must be an integer or a bool, is: \" + value.getClass().getSimpleName() + \"=\" + value);\n}"
            ],
            [
                "toString",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a string\n *\n * @param value the value to convert\n * @return the string\n * @throws HGSEvalException HGSEvalException\n */\npublic static String toString(Object value) throws HGSEvalException {\n    if (value instanceof String)\n        return value.toString();\n    throw new HGSEvalException(\"must be a string, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toArray",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an array\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSArray toArray(Object value) throws HGSEvalException {\n    if (value instanceof HGSArray)\n        return (HGSArray) value;\n    if (value instanceof List)\n        return new HGSArrayList((List) value);\n    throw new HGSEvalException(\"must be an array, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toMap",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a map\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSMap toMap(Object value) throws HGSEvalException {\n    if (value instanceof HGSMap)\n        return (HGSMap) value;\n    if (value instanceof Map)\n        return new HGSMapMap((Map) value);\n    throw new HGSEvalException(\"must be a map, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "equals",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Compares two values\n *\n * @param a a value\n * @param b a value\n * @return true if both values are equal\n */\npublic static boolean equals(Object a, Object b) {\n    if (a instanceof Double || b instanceof Double)\n        return a.equals(b);\n    else if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() == ((Number) b).longValue();\n    else if (a instanceof String || b instanceof String)\n        return a.toString().equals(b.toString());\n    else\n        return a.equals(b);\n}"
            ],
            [
                "add",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Adds two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object add(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) + toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() + ((Number) b).longValue();\n    if (a instanceof String || b instanceof String)\n        return a.toString() + b.toString();\n    throw new HGSEvalException(\"arguments must be int or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "sub",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Subtracts two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object sub(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) - toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() - ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "mul",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Multiplies two values\n *\n * @param a a value\n * @param b a value\n * @return the product\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object mul(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) * toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() * ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "div",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Divides two numbers\n *\n * @param a a value\n * @param b a value\n * @return the quotient\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object div(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) / toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() / ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "or",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an or operation\n *\n * @param a a value\n * @param b a value\n * @return the or'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object or(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() | ((Number) b).longValue();\n    return toBool(a) || toBool(b);\n}"
            ],
            [
                "xor",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an xor operation\n *\n * @param a a value\n * @param b a value\n * @return the xor'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object xor(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() ^ ((Number) b).longValue();\n    return toBool(a) ^ toBool(b);\n}"
            ],
            [
                "and",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an and operation\n *\n * @param a a value\n * @param b a value\n * @return the and'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object and(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() & ((Number) b).longValue();\n    return toBool(a) && toBool(b);\n}"
            ],
            [
                "not",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs a not operation\n *\n * @param value a value\n * @return the inverted value\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object not(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ~((Number) value).longValue();\n    return !toBool(value);\n}"
            ],
            [
                "neg",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Changes the sign of the given value\n *\n * @param value the value\n * @return value with changed sign\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object neg(Object value) throws HGSEvalException {\n    if (value instanceof Double)\n        return -(Double) value;\n    return -toLong(value);\n}"
            ],
            [
                "less",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a&lt;b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean less(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) < toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) < toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) < 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "lessEqual",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a<=b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean lessEqual(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) <= toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) <= toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) <= 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "trimRight",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the right side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimRight(String str) {\n    int initial = str.length() - 1;\n    int pos = initial;\n    while (pos >= 0 && isWhiteSpace(str.charAt(pos))) pos--;\n    if (pos == initial)\n        return str;\n    else\n        return str.substring(0, pos + 1);\n}"
            ],
            [
                "trimLeft",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the left side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimLeft(String str) {\n    int pos = 0;\n    while (pos < str.length() && isWhiteSpace(str.charAt(pos))) pos++;\n    if (pos == 0)\n        return str;\n    else\n        return str.substring(pos);\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Returns the vhdl type name\n *\n * @param bits the number of bits\n * @return the types name\n */\npublic static String getType(int bits) {\n    if (bits == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector(\" + (bits - 1) + \" downto 0)\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    int missing = bits - s.length();\n    if (missing > 0)\n        s = ZEROS.substring(0, missing) + s;\n    if (bits > 1)\n        s = \"\\\"\" + s + \"\\\"\";\n    else\n        s = \"'\" + s + \"'\";\n    return s;\n}"
            ],
            [
                "isTemplate",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Returns true, if a hdl template is available.\n *\n * @param etd the {@link ElementTypeDescription}\n * @return true if VHDL template is available\n */\npublic static boolean isTemplate(ElementTypeDescription etd) {\n    ClassLoader cl = etd.getClassLoader();\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    URL url = cl.getResource(createFileName(ENTITY_PREFIX + etd.getName()));\n    return url != null;\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(ENTITY_PREFIX + elementName);\n}"
            ],
            [
                "zero",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Create a vhdl zero with the given bit number\n *\n * @param bits the bit number\n * @return '0' or (others => '0')\n */\npublic static String zero(long bits) {\n    if (bits == 1)\n        return \"'0'\";\n    else\n        return \"(others => '0')\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, long bits) {\n    return VHDLCreator.value(val, (int) bits);\n}"
            ],
            [
                "genericType",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates the code for a generic type\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String genericType(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector ((Bits-1) downto 0)\";\n}"
            ],
            [
                "type",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a type of given width\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String type(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector (\" + (n - 1) + \" downto 0)\";\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.hdl.model2.expression",
                "Expression",
                "/**\n * Helper to check if an expression is a net reference\n *\n * @param expr the expression to check\n * @param net  the net\n * @return true if the expression is a reference to the given net\n */\nstatic boolean isVar(Expression expr, HDLNet net) {\n    return expr instanceof ExprVar && ((ExprVar) expr).getNet() == net;\n}"
            ],
            [
                "isConstant",
                "de.neemann.digital.hdl.model2.expression",
                "ExprConstant",
                "/**\n * Returns the constant if th given node represents a constant\n *\n * @param node the node\n * @return the constant of null if node is not a constant\n */\npublic static ExprConstant isConstant(HDLNode node) {\n    if (node instanceof HDLNodeAssignment) {\n        HDLNodeAssignment expr = (HDLNodeAssignment) node;\n        if (expr.getExpression() instanceof ExprConstant) {\n            return (ExprConstant) expr.getExpression();\n        }\n    }\n    return null;\n}"
            ],
            [
                "getHighZ",
                "de.neemann.digital.data",
                "Value",
                "/**\n * @return returns a high z value\n */\npublic static Value getHighZ() {\n    return new Value(0, Type.HIGHZ);\n}"
            ],
            [
                "calcBackOffset",
                "de.neemann.digital.builder.circuit",
                "FragmentExpression",
                "static int calcBackOffset(int size, int i) {\n    if ((size & 1) != 0 && i == (size - 1) / 2)\n        return 0;\n    if (i >= size / 2)\n        return size - i;\n    else\n        return i + 1;\n}"
            ],
            [
                "isXNor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXNor(long[] data) {\n    for (int i = 0; i < data.length; i++) if ((Integer.bitCount(i) & 1) == data[i])\n        return false;\n    return true;\n}"
            ],
            [
                "isXor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXor(long[] data) {\n    for (int i = 0; i < data.length; i++) if (!((Integer.bitCount(i) & 1) == data[i]))\n        return false;\n    return true;\n}"
            ],
            [
                "getLibPath",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * @return the additional library path\n */\npublic static File getLibPath() {\n    String path;\n    try {\n        path = ElementLibrary.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath().replace('\\\\', '/');\n    } catch (URISyntaxException e) {\n        return new File(\"noLibFound\");\n    }\n    if (path.endsWith(\"/target/classes/\"))\n        return toCanonical(new File(path.substring(0, path.length() - 16) + \"/src/main/dig/lib\"));\n    if (path.endsWith(\"/target/Digital.jar\"))\n        return new File(path.substring(0, path.length() - 19) + \"/src/main/dig/lib\");\n    if (path.endsWith(\"Digital.jar\"))\n        return new File(path.substring(0, path.length() - 12) + \"/lib\");\n    return new File(\"noLibFound\");\n}"
            ],
            [
                "createCustomDescription",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * Creates a custom element description.\n *\n * @param file    the file\n * @param circuit the circuit\n * @param library the library\n * @return the type description\n * @throws PinException PinException\n */\npublic static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException {\n    ElementTypeDescriptionCustom d = new ElementTypeDescriptionCustom(file, circuit, library);\n    d.setElementFactory(attributes -> new CustomElement(d));\n    return d;\n}"
            ],
            [
                "createDeclarationDefault",
                "de.neemann.digital.draw.library",
                "ElementTypeDescriptionCustom",
                "/**\n * Creates the default for custom element declarations\n *\n * @param circuit the circuit\n * @return the default code template\n * @throws NodeException NodeException\n */\npublic static String createDeclarationDefault(Circuit circuit) throws NodeException {\n    TreeSet<String> nameSet = new TreeSet<>();\n    for (VisualElement ve : circuit.getElements()) {\n        String gen = ve.getElementAttributes().get(Keys.GENERIC).trim();\n        if (!gen.isEmpty()) {\n            try {\n                Parser p = new Parser(gen);\n                p.enableRefReadCollection();\n                p.parse(false);\n                for (Reference r : p.getRefsRead()) {\n                    if (r instanceof ReferenceToStruct) {\n                        ReferenceToStruct st = (ReferenceToStruct) r;\n                        if (st.getParent() instanceof ReferenceToVar) {\n                            ReferenceToVar var = (ReferenceToVar) st.getParent();\n                            if (var.getName().equals(\"args\")) {\n                                nameSet.add(st.getName());\n                            }\n                        }\n                    }\n                }\n            } catch (ParserException | IOException e) {\n                final NodeException ex = new NodeException(Lang.get(\"err_evaluatingGenericsCode_N_N\", ve, gen), e);\n                ex.setOrigin(circuit.getOrigin());\n                throw ex;\n            }\n        }\n    }\n    StringBuilder sb = new StringBuilder();\n    for (String name : nameSet) sb.append(name).append(\" := ;\\n\");\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Returns a comparator instance\n *\n * @return the singleton instance\n */\npublic static NumStringComparator getInstance() {\n    return InstanceHolder.INSTANCE;\n}"
            ],
            [
                "compareStr",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Compare two strings\n *\n * @param a a string\n * @param b a string\n * @return the comparison result\n */\npublic static int compareStr(String a, String b) {\n    int pa = 0;\n    int pb = 0;\n    while (true) {\n        final boolean ae = pa == a.length();\n        final boolean be = pb == b.length();\n        if (ae && be)\n            return 0;\n        else if (ae)\n            return -1;\n        else if (be)\n            return 1;\n        char ca = Character.toLowerCase(a.charAt(pa));\n        char cb = Character.toLowerCase(b.charAt(pb));\n        if (isDigit(ca) && isDigit(cb)) {\n            ParseNumber da = new ParseNumber(a, pa);\n            ParseNumber db = new ParseNumber(b, pb);\n            int c = Integer.compare(da.num, db.num);\n            if (c != 0)\n                return c;\n            else {\n                pa = da.p;\n                pb = db.p;\n            }\n        } else {\n            int c = Character.compare(ca, cb);\n            if (c != 0) {\n                return c;\n            } else {\n                pa++;\n                pb++;\n            }\n        }\n    }\n}"
            ],
            [
                "createPins",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Creates pins\n *\n * @param inputs    the inputs\n * @param outputs   the outputs\n * @param invert    true if invert output\n * @param ic        input inverter configuration\n * @param wideShape true if a wide shape is selected\n * @return the pins\n */\npublic static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape) {\n    return createPins(inputs, outputs, invert, wideShape ? 4 : 3, true, ic);\n}"
            ],
            [
                "readStyle",
                "de.neemann.digital.draw.shapes.custom.svg",
                "Context",
                "static Context readStyle(Context context, String style) throws SvgException {\n    SVGTokenizer t = new SVGTokenizer(style);\n    while (true) {\n        final String command = t.readTo(':');\n        if (command.length() == 0)\n            break;\n        final String value = t.readTo(';');\n        AttrParser p = PARSER.get(command);\n        if (p != null)\n            p.parse(context, value);\n    }\n    return context;\n}"
            ],
            [
                "getOutSize",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static int getOutSize(boolean small) {\n    if (small)\n        return SIZE2;\n    else\n        return OUT_SIZE;\n}"
            ],
            [
                "getOutStyle",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static Style getOutStyle(boolean small) {\n    if (small)\n        return Style.THIN;\n    else\n        return Style.NORMAL;\n}"
            ],
            [
                "getOutRad",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Inner circle size used for inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the output circle radius as a vector\n */\npublic static Vector getOutRad(boolean small) {\n    int s = getOutSize(small);\n    return new Vector(s - 6, s - 6);\n}"
            ],
            [
                "createTransform",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static Transform createTransform(int size) {\n    if (size == 2)\n        return Transform.IDENTITY;\n    else {\n        final TransformTranslate tr1 = new TransformTranslate(-70, -139);\n        final TransformTranslate tr2 = new TransformTranslate(70, 139);\n        float s = (2 + size) / 4f;\n        final TransformMatrix trm = new TransformMatrix(s, 0, 0, s, 0, 0);\n        return Transform.mul(tr1, Transform.mul(trm, tr2));\n    }\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"attributes\", ElementAttributes.class);\n    xStream.alias(\"visualElement\", VisualElement.class);\n    xStream.alias(\"wire\", Wire.class);\n    xStream.alias(\"circuit\", Circuit.class);\n    xStream.alias(\"intFormat\", IntFormat.class);\n    xStream.alias(\"exprFormat\", FormatToExpression.class);\n    xStream.alias(\"barrelShifterMode\", BarrelShifterMode.class);\n    xStream.alias(\"direction\", LeftRightFormat.class);\n    xStream.alias(\"rotation\", Rotation.class);\n    xStream.aliasAttribute(Rotation.class, \"rotation\", \"rotation\");\n    xStream.alias(\"language\", Language.class);\n    xStream.aliasAttribute(Language.class, \"name\", \"name\");\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"value\", InValue.class);\n    xStream.aliasAttribute(InValue.class, \"value\", \"v\");\n    xStream.aliasAttribute(InValue.class, \"highZ\", \"z\");\n    xStream.addImplicitCollection(ElementAttributes.class, \"attributes\");\n    xStream.alias(\"data\", DataField.class);\n    xStream.registerConverter(new DataFieldConverter());\n    xStream.alias(\"testData\", TestCaseDescription.class);\n    xStream.alias(\"inverterConfig\", InverterConfig.class);\n    xStream.addImplicitCollection(InverterConfig.class, \"inputs\");\n    xStream.alias(\"storedRoms\", ROMManager.class);\n    xStream.addImplicitCollection(ROMManager.class, \"roms\");\n    xStream.alias(\"romList\", ROMManagerFile.class);\n    xStream.alias(\"romFile\", ROMManagerFile.RomContainerFile.class);\n    xStream.alias(\"romData\", ROMManagerFile.RomContainerDataField.class);\n    xStream.alias(\"appType\", Application.Type.class);\n    xStream.ignoreUnknownElements();\n    xStream.alias(\"shape\", CustomShapeDescription.class);\n    xStream.alias(\"pin\", CustomShapeDescription.Pin.class);\n    xStream.alias(\"circle\", CustomShapeDescription.CircleHolder.class);\n    xStream.alias(\"line\", CustomShapeDescription.LineHolder.class);\n    xStream.alias(\"poly\", CustomShapeDescription.PolygonHolder.class);\n    xStream.alias(\"text\", CustomShapeDescription.TextHolder.class);\n    xStream.alias(\"polygon\", Polygon.class);\n    xStream.alias(\"shapeType\", CustomCircuitShapeType.class);\n    xStream.alias(\"transform\", TransformHolder.class);\n    xStream.registerConverter(new PolygonConverter());\n    return xStream;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename     filename\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load \" + filename);\n    final Circuit circuit = loadCircuit(new FileInputStream(filename), shapeFactory);\n    circuit.origin = filename;\n    return circuit;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param in           the input stream\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load stream\");\n    try {\n        XStream xStream = getxStream();\n        Circuit circuit = (Circuit) xStream.fromXML(in);\n        for (VisualElement ve : circuit.getElements()) ve.setShapeFactory(shapeFactory);\n        if (circuit.version == 0) {\n            // convert to version 1\n            for (Wire w : circuit.getWires()) {\n                w.p1 = w.p1.mul(2);\n                w.p2 = w.p2.mul(2);\n            }\n            for (VisualElement e : circuit.getElements()) e.setPos(e.getPos().mul(2));\n            circuit.version = 1;\n        }\n        if (circuit.version < 2) {\n            Object rm = circuit.getAttributes().get(Keys.ROMMANAGER);\n            if (rm instanceof ROMManager) {\n                circuit.getAttributes().set(Keys.ROMMANAGER, new ROMManagerFile((ROMManager) rm));\n            }\n            circuit.version = 2;\n        }\n        return circuit;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "fixGenerics",
                "de.neemann.digital.draw.model",
                "ModelCreator",
                "/**\n * Creates a concrete circuit from a generic on.\n * Uses the included generic init code.\n *\n * @param circuit the generic circuit\n * @param library the element library\n * @return the concrete circuit\n * @throws NodeException            NodeException\n * @throws ElementNotFoundException ElementNotFoundException\n */\npublic static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException {\n    if (circuit.getAttributes().get(Keys.IS_GENERIC))\n        return new ResolveGenerics(circuit, library).resolveCircuit(null).getCircuit();\n    else\n        return circuit;\n}"
            ],
            [
                "createFromPath",
                "de.neemann.digital.draw.graphics",
                "Polygon",
                "/**\n * Creates a polygon from a SVG path\n *\n * @param path the svg path\n * @return the polygon or null if there was an error\n */\npublic static Polygon createFromPath(String path) {\n    try {\n        return new PolygonParser(path).create();\n    } catch (PolygonParser.ParserException e) {\n        return null;\n    }\n}"
            ],
            [
                "vec",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Returns a new vector\n * shorthand for new Vector(x,y)\n *\n * @param x x\n * @param y y\n * @return the vector\n */\npublic static Vector vec(int x, int y) {\n    return new Vector(x, y);\n}"
            ],
            [
                "min",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the minimum vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the minimum\n */\npublic static Vector min(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x)\n            x = p[i].getX();\n        if (p[i].getY() < y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "max",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the maximim vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the maximum\n */\npublic static Vector max(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() > x)\n            x = p[i].getX();\n        if (p[i].getY() > y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "width",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the width of the given vectors.\n *\n * @param p the vectors\n * @return max(p)-min(p)\n */\npublic static Vector width(VectorInterface... p) {\n    int x1 = p[0].getX();\n    int y1 = p[0].getY();\n    int x2 = x1;\n    int y2 = y1;\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x1)\n            x1 = p[i].getX();\n        if (p[i].getY() < y1)\n            y1 = p[i].getY();\n        if (p[i].getX() > x2)\n            x2 = p[i].getX();\n        if (p[i].getY() > y2)\n            y2 = p[i].getY();\n    }\n    return new Vector(x2 - x1, y2 - y1);\n}"
            ],
            [
                "add",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Adds an offset to every vector in the given list\n *\n * @param vectors the original vectors\n * @param offs    the offset\n * @return the new list\n */\npublic static List<Vector> add(List<Vector> vectors, Vector offs) {\n    ArrayList<Vector> newVec = new ArrayList<>();\n    for (Vector v : vectors) newVec.add(v.add(offs));\n    return newVec;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static SVGSettings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "createKeyList",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * @return a list of available SVG export keys\n */\npublic static List<Key> createKeyList() {\n    ArrayList<Key> list = new ArrayList<>();\n    list.add(LATEX);\n    list.add(PINS_IN_MATH_MODE);\n    list.add(HIDE_TEST);\n    list.add(NO_SHAPE_FILLING);\n    list.add(SMALL_IO);\n    list.add(NO_PIN_MARKER);\n    list.add(THINNER_LINES);\n    list.add(HIGH_CONTRAST);\n    list.add(MONOCHROME);\n    return list;\n}"
            ],
            [
                "mul",
                "de.neemann.digital.draw.graphics",
                "Transform",
                "/**\n * Combines the two given transformations to a common transformation\n *\n * @param t1 first transformation\n * @param t2 second transformation\n * @return the resulting transformation\n */\nstatic Transform mul(Transform t1, Transform t2) {\n    TransformMatrix m1 = t1.getMatrix();\n    TransformMatrix m2 = t2.getMatrix();\n    return new TransformMatrix(m1.a * m2.a + m1.c * m2.b, m1.b * m2.a + m1.d * m2.b, m1.a * m2.c + m1.c * m2.d, m1.b * m2.c + m1.d * m2.d, m2.a * m1.x + m2.b * m1.y + m2.x, m2.c * m1.x + m2.d * m1.y + m2.y);\n}"
            ],
            [
                "rotate",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a rotation.\n * Rotates in mathematically positive direction. Takes into account that\n * in Digital the y-axis goes downwards.\n *\n * @param w the angle in 360 grad units\n * @return the transformation\n */\npublic static TransformMatrix rotate(double w) {\n    final double phi = w / 180 * Math.PI;\n    float cos = (float) Math.cos(phi);\n    float sin = (float) Math.sin(phi);\n    return new TransformMatrix(cos, -sin, sin, cos, 0, 0);\n}"
            ],
            [
                "scale",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a scaling transformation\n *\n * @param sx scaling in x direction\n * @param sy scaling in y direction\n * @return the transformation\n */\npublic static TransformMatrix scale(float sx, float sy) {\n    return new TransformMatrix(sx, 0, 0, sy, 0, 0);\n}"
            ],
            [
                "getTextWidth",
                "de.neemann.digital.draw.graphics",
                "GraphicMinMax",
                "/**\n * Returns a approximation of the width of the given text in the given style\n *\n * @param text  the text\n * @param style the style\n * @return the approximated text width\n */\npublic static int getTextWidth(String text, Style style) {\n    final FontRenderContext fontRenderContext = new FontRenderContext(null, true, false);\n    GraphicsFormatter.Fragment f = GraphicsFormatter.createFragment((fragment, font, str) -> {\n        Rectangle2D rec = style.getFont().getStringBounds(str, fontRenderContext);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), 0);\n    }, style.getFont(), text);\n    return f.getWidth();\n}"
            ],
            [
                "getSelected",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * @return the selected color map\n */\npublic static ColorScheme getSelected() {\n    if (instance == null) {\n        updateInstance();\n        Settings.getInstance().getAttributes().addListener(ColorScheme::updateInstance);\n    }\n    return instance;\n}"
            ],
            [
                "getWireStyle",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Returns the wire style depending on the given value\n *\n * @param value the value to represent\n * @return the style\n */\npublic static Style getWireStyle(Value value) {\n    if (value == null || value.getBits() > 1)\n        return WIRE;\n    if (value.isHighZ())\n        return WIRE_HIGHZ;\n    if (value.getValue() == 1)\n        return WIRE_HIGH;\n    else\n        return WIRE_LOW;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text the text\n * @return the string representation\n */\npublic static String format(Text text) {\n    return format(text, FormatToExpression.getDefaultFormat());\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text   the text\n * @param format the format to use\n * @return the string representation\n */\npublic static String format(Text text, FormatToExpression format) {\n    if (text instanceof Simple) {\n        return ((Simple) text).getText();\n    } else if (text instanceof Blank) {\n        return \" \";\n    } else if (text instanceof Character) {\n        return \"\" + ((Character) text).getChar();\n    } else if (text instanceof Decorate) {\n        Decorate d = (Decorate) text;\n        if (d.getStyle() == Decorate.Style.OVERLINE) {\n            final Text content = d.getContent();\n            if (content instanceof Simple || content instanceof Index)\n                return format.getNot() + format(content, format);\n            else\n                return format.getNot() + \"(\" + format(content, format) + \")\";\n        } else\n            return format(d.getContent(), format);\n    } else if (text instanceof Index) {\n        Index i = (Index) text;\n        String str = format(i.getVar(), format);\n        if (i.getSubScript() != null)\n            str += format(i.getSubScript(), format);\n        if (i.getSuperScript() != null)\n            str += format(i.getSuperScript(), format);\n        return str;\n    } else if (text instanceof Sentence) {\n        Sentence s = (Sentence) text;\n        StringBuilder sb = new StringBuilder();\n        for (Text t : s) sb.append(format(t, format));\n        return sb.toString();\n    } else\n        return \"\";\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "SVGFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr   the {@link Graphics2D} instance\n * @param text the text\n * @return the text fragment\n */\npublic static Fragment createFragment(Graphics2D gr, String text) {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), text);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr         the {@link Graphics2D} instance\n * @param expression the expression\n * @return the text fragment\n * @throws FormatterException FormatterException\n */\npublic static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), new ExpressionToText().createText(expression));\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param sizer the sizer instance\n * @param font  the font\n * @param text  the text\n * @return the fragment\n */\npublic static Fragment createFragment(FontSizer sizer, Font font, String text) {\n    Fragment fragment;\n    try {\n        Text t = new Parser(text).parse();\n        fragment = createFragment(sizer, font, t);\n    } catch (ParseException | FormatterException e) {\n        // if there was an exception, return the complete raw text as a fragment\n        fragment = new TextFragment(sizer, font, text);\n    }\n    return fragment;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param exp the expression to format\n * @return the formatted string\n */\npublic static String format(Expression exp) {\n    return format(new ExpressionToText().createText(exp, FormatToExpression.LATEX), true);\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "math",
                "de.neemann.digital.draw.graphics.text.text",
                "Decorate",
                "/**\n * Adds a MATH decoration to the given text.\n * If the text is already decorated the text is returned directly.\n *\n * @param t the text to decorate\n * @return the decorated text\n */\npublic static Text math(Text t) {\n    if (t instanceof Decorate) {\n        Decorate d = (Decorate) t;\n        if (d.getStyle() == Style.MATH)\n            return t;\n    }\n    return new Decorate(t, Style.MATH);\n}"
            ],
            [
                "escapeXML",
                "de.neemann.digital.draw.graphics",
                "GraphicSVG",
                "/**\n * Escapes a given string to XML\n *\n * @param text the text to escape\n * @return the escaped text.\n */\npublic static String escapeXML(String text) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        switch(c) {\n            case '&':\n                sb.append(\"&amp;\");\n                break;\n            case '<':\n                sb.append(\"&lt;\");\n                break;\n            case '>':\n                sb.append(\"&gt;\");\n                break;\n            case '\"':\n                sb.append(\"&quot;\");\n                break;\n            default:\n                sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
            ],
            [
                "getMirrorYOrientation",
                "de.neemann.digital.draw.graphics",
                "GraphicSwing",
                "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3) {\n    int oy = orientation.getY();\n    VectorInterface d0 = p2.sub(p1).getOrthogonal();\n    VectorInterface d1 = p3.sub(p1);\n    if (d0.scalar(d1) < 0)\n        oy = 2 - oy;\n    return oy;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param file the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(File file) throws IOException {\n    final Configuration configuration = load(new FileInputStream(file));\n    configuration.origin = file;\n    return configuration;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param in the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        return (Configuration) xStream.fromXML(in);\n    } catch (RuntimeException e) {\n        throw new IOException(\"error reading XML\", e);\n    }\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "UNKNOWN",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * Unknown release\n */\npublic static final String UNKNOWN = \"unknown\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullDown",
                "/**\n * The pull down description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "Diode",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeBackward",
                "/**\n * The description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullUp",
                "/**\n * The pull up description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeForward",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROMDualPort",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualAccess",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "CounterPreset",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Register",
                "/**\n * The registers {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "LookUpTable",
                "/**\n * The LUTs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "BlockRAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Counter",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROM",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMAsync",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROM",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROMDualPort",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePortSel",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RegisterFile",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "MIDI",
                "/**\n * The Speakers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RGBLED",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The Input description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "LEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);"
            ],
            [
                "POLARITYAWARELEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The polarity aware LED description\n */\npublic static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "SEVENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment display description\n */\npublic static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();"
            ],
            [
                "SEVENHEXDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment hex display description\n */\npublic static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "SIXTEENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * Sixteen Segment Display\n */\npublic static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RotEncoder",
                "/**\n * The rotary encoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PinControl",
                "/**\n * The description of the pin control logic\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "DipSwitch",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "LightBulb",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Probe",
                "/**\n * The Probe description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Button",
                "/**\n * The Button description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "ButtonLED",
                "/**\n * The ButtonLED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "In",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "STEPS",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * Steps for a full revolution\n */\npublic static final int STEPS = 72;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * The stepper motors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "NotConnected",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorBipolar",
                "/**\n * The bipolar motor description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Const",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PowerSupply",
                "/**\n * Enforces a power supply\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Ground",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "VDD",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.core.io.telnet",
                "ServerHolder",
                "/**\n * The singleton instance\n */\npublic static final ServerHolder INSTANCE = new ServerHolder();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io.telnet",
                "Telnet",
                "/**\n * The telnet server description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);"
            ],
            [
                "BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of bits in simple gates like And and Or\n */\npublic static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);"
            ],
            [
                "INPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * input bits of sign extender\n */\npublic static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);"
            ],
            [
                "OUTPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output bits of sign extender\n */\npublic static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);"
            ],
            [
                "INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in simple gates like And and Or\n */\npublic static final // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nKey.KeyInteger // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nINPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);"
            ],
            [
                "LUT_INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in the LUT\n */\npublic static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);"
            ],
            [
                "MAX_VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The counter max value\n */\npublic static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);"
            ],
            [
                "DELAY_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the delay time used by the delay component\n */\npublic static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);"
            ],
            [
                "MONOFLOP_DELAY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the timer delay time\n */\npublic static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);"
            ],
            [
                "LABEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The elements label\n */\npublic static final Key<String> LABEL = new Key<>(\"Label\", \"\");"
            ],
            [
                "FONT_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The font size\n */\npublic static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);"
            ],
            [
                "TEXT_ORIENTATION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * text orientation\n */\npublic static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();"
            ],
            [
                "LED_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a LED\n */\npublic static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();"
            ],
            [
                "SEVEN_SEG_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a seven seg display\n */\npublic static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);"
            ],
            [
                "VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The value of constants\n */\npublic static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();"
            ],
            [
                "DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of elements\n */\npublic static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();"
            ],
            [
                "INPUT_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of inputs\n */\npublic static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();"
            ],
            [
                "DIP_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of the dip switch\n */\npublic static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Color of LEDs\n */\npublic static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();"
            ],
            [
                "INPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The input splitting of a splitter\n */\npublic static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");"
            ],
            [
                "OUTPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The output splitting of a splitter\n */\npublic static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");"
            ],
            [
                "SPLITTER_SPREADING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The splitter spreading\n */\npublic static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();"
            ],
            [
                "IN_OUT_SMALL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to select small inputs and outputs\n */\npublic static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "RUN_AT_REAL_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable realtime mode at a clock\n */\npublic static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);"
            ],
            [
                "INVERT_OUTPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * inverts the output of a gate\n */\npublic static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);"
            ],
            [
                "FREQUENCY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The real time frequency of the clock\n */\npublic static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);"
            ],
            [
                "SELECTOR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the bit count of a muxer or decoder\n */\npublic static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);"
            ],
            [
                "ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of address bits of memory\n */\npublic static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);"
            ],
            [
                "BLOWN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a diode as blown fuse or as programmed\n */\npublic static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a switch as closed or not\n */\npublic static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();"
            ],
            [
                "SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * signed flag for comparator element\n */\npublic static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();"
            ],
            [
                "REMAINDER_POSITIVE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects if the reminder of the division is always positive\n */\npublic static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);"
            ],
            [
                "DATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the data key for memory\n */\npublic static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);"
            ],
            [
                "FLIP_SEL_POSITON",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag for flipping selector pos in muxers, decoders and drivers\n */\npublic static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();"
            ],
            [
                "ROTATE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the rotation of the elements\n */\npublic static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();"
            ],
            [
                "WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);"
            ],
            [
                "SHAPE_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * defines the shape type of the custom circuit\n */\npublic static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();"
            ],
            [
                "LAYOUT_SHAPE_DELTA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Defines the distance to the previous pin. Used by the layout shape type\n */\npublic static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));"
            ],
            [
                "TERM_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);"
            ],
            [
                "TERM_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);"
            ],
            [
                "CYCLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break timeout cycles\n */\npublic static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);"
            ],
            [
                "ENABLED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break enabled\n */\npublic static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();"
            ],
            [
                "VALUE_IS_PROBE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to make a value a probe\n */\npublic static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "IS_PROGRAM_MEMORY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();"
            ],
            [
                "IS_PROGRAM_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();"
            ],
            [
                "AUTO_RELOAD_ROM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the ROMs auto load function\n */\npublic static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();"
            ],
            [
                "LAST_DATA_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The last used ROM data file\n */\npublic static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();"
            ],
            [
                "SHOW_DATA_TABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data table window\n */\npublic static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH_MICRO",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window in single gate mode\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();"
            ],
            [
                "ADD_VALUE_TO_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to add the value to the measurement graph\n */\npublic static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();"
            ],
            [
                "MICRO_STEP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the single gate mode in the embedded data view\n */\npublic static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);"
            ],
            [
                "MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the embedded data view\n */\npublic static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);"
            ],
            [
                "SETTINGS_MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the default data view\n */\npublic static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);"
            ],
            [
                "IS_HIGH_Z",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable high z mode at an input\n */\npublic static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "AVOID_ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to avoid active low at an input\n */\npublic static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the description of an element\n */\npublic static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");"
            ],
            [
                "NETNAME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A net name\n */\npublic static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");"
            ],
            [
                "SETTINGS_IEEE_SHAPES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * shape setting\n */\npublic static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();"
            ],
            [
                "SETTINGS_LANGUAGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI Language\n */\npublic static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();"
            ],
            [
                "SETTINGS_DEFAULT_TREESELECT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Default state of the tree view\n */\npublic static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);"
            ],
            [
                "SETTINGS_EXPRESSION_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI expression string representation\n */\npublic static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);"
            ],
            [
                "SETTINGS_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the grid\n */\npublic static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();"
            ],
            [
                "SETTINGS_SHOW_WIRE_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the wire bits view\n */\npublic static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);"
            ],
            [
                "SETTINGS_MAC_MOUSE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the MAC mouse mode\n */\npublic static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables tunnel rename dialog\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);"
            ],
            [
                "SETTINGS_RENAME_LABELS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables renaming of labels ending with numbers while copying\n */\npublic static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);"
            ],
            [
                "SETTINGS_OPEN_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables remote port\n */\npublic static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();"
            ],
            [
                "SETTINGS_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * remote port\n */\npublic static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);"
            ],
            [
                "OSCILLATION_DETECTION_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Counter used to detect oscillations\n */\npublic static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);"
            ],
            [
                "INT_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();"
            ],
            [
                "PROBE_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());"
            ],
            [
                "FIXED_POINT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * fixed point fractional binary digits\n */\npublic static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();"
            ],
            [
                "GRAPHIC_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);"
            ],
            [
                "GRAPHIC_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);"
            ],
            [
                "RELAY_NORMALLY_CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a relay to indicate if it is normally open or normally closed.\n */\npublic static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();"
            ],
            [
                "POLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Number of poles in the double throw relay\n */\npublic static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();"
            ],
            [
                "BARREL_SHIFTER_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to select the shift mode\n */\npublic static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());"
            ],
            [
                "DIRECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate shift direction\n */\npublic static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());"
            ],
            [
                "BARREL_SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate if shift value is signed\n */\npublic static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);"
            ],
            [
                "COMMON_CONNECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to indicate if the 7-seg display has a common cathode output\n */\npublic static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();"
            ],
            [
                "COMMON_CONNECTION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to define the common connection type\n */\npublic static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();"
            ],
            [
                "LED_PERSISTENCE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);"
            ],
            [
                "LED_PERSIST_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();"
            ],
            [
                "SETTINGS_ATF1502_FITTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_ATMISP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Flash software for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();"
            ],
            [
                "ROW_DATA_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * row bits in led matrix\n */\npublic static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);"
            ],
            [
                "COL_ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * column address bits in led matrix\n */\npublic static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);"
            ],
            [
                "LOCKED_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * In locked mode the circuit can not be modified\n */\npublic static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);"
            ],
            [
                "PINNUMBER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin number\n */\npublic static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();"
            ],
            [
                "PINCOUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin count\n */\npublic static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));"
            ],
            [
                "INVERTER_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * contains the input inverter config\n */\npublic static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());"
            ],
            [
                "BACKGROUND_COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Background Color of nested circuits\n */\npublic static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));"
            ],
            [
                "SETTINGS_FONT_SCALING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the screen resolution\n */\npublic static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_USE_EQUALS_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses the equals key instead of the plus key.\n */\npublic static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;"
            ],
            [
                "WITH_ENABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if a enable input is needed\n */\npublic static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);"
            ],
            [
                "FET_UNIDIRECTIONAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true to simulate a unidirectional FET\n */\npublic static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);"
            ],
            [
                "ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if component is active low\n */\npublic static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();"
            ],
            [
                "MAP_TO_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if button is mapped to the keyboard\n */\npublic static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();"
            ],
            [
                "SETTINGS_LIBRARY_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf1502\n */\npublic static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_JAR_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A jar containing custom java components\n */\npublic static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "ROMMANAGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The manager which contains all the roms data\n */\npublic static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();"
            ],
            [
                "APPLICATION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The type of the external process\n */\npublic static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());"
            ],
            [
                "EXTERNAL_INPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The inputs used by the external process\n */\npublic static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");"
            ],
            [
                "EXTERNAL_OUTPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The outputs used by the external process\n */\npublic static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");"
            ],
            [
                "EXTERNAL_CODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);"
            ],
            [
                "EXTERNAL_CODE_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));"
            ],
            [
                "SETTINGS_GHDL_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to ghdl\n */\npublic static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();"
            ],
            [
                "GHDL_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The ghdl options\n */\npublic static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "IVERILOG_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The iverilog options\n */\npublic static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "SETTINGS_IVERILOG_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to iverilog installation directory\n */\npublic static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();"
            ],
            [
                "CUSTOM_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Shape used to represent a visual element\n */\npublic static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));"
            ],
            [
                "PRELOAD_PROGRAM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * True if a program is loaded to the simulator at startup\n */\npublic static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();"
            ],
            [
                "BIG_ENDIAN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);"
            ],
            [
                "PROGRAM_TO_PRELOAD",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The file to preload as a program at startup\n */\npublic static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "BIG_ENDIAN_SETTING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "WIDE_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects a wide shape\n */\npublic static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();"
            ],
            [
                "RECT_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of the rectangle\n */\npublic static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);"
            ],
            [
                "RECT_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the height of the rectangle\n */\npublic static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);"
            ],
            [
                "RECT_INSIDE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();"
            ],
            [
                "RECT_BOTTOM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();"
            ],
            [
                "RECT_RIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();"
            ],
            [
                "MIDI_CHANNEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);"
            ],
            [
                "MIDI_INSTRUMENT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");"
            ],
            [
                "MIDI_PROG_CHANGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables Program change\n */\npublic static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);"
            ],
            [
                "SETTINGS_TOOLCHAIN_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Stores the IDE settings file\n */\npublic static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();"
            ],
            [
                "GENERICLARGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();"
            ],
            [
                "IS_GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Circuit is generic\n */\npublic static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUTORIAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the tutorial\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();"
            ],
            [
                "SETTINGS_WIRETOOLTIP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the wire tool tips\n */\npublic static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);"
            ],
            [
                "SWITCH_ACTS_AS_INPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The switch acts as input\n */\npublic static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();"
            ],
            [
                "SNAP_TO_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Snaps the element to the grid\n */\npublic static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();"
            ],
            [
                "MIRROR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Mirrors the component\n */\npublic static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "TESTDATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The test data\n */\npublic static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);"
            ],
            [
                "TRIGGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The scope trigger mode\n */\npublic static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());"
            ],
            [
                "PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the telnet port\n */\npublic static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);"
            ],
            [
                "TELNET_ESCAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Telnet escape\n */\npublic static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();"
            ],
            [
                "SKIP_HDL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Skips HDL output for this circuit\n */\npublic static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();"
            ],
            [
                "PREFIX",
                "de.neemann.digital.core.basic",
                "FanIn",
                "/**\n * The inputs name prefix\n */\npublic static final String PREFIX = \"In_\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NOr",
                "/**\n * The NOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "And",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XNOr",
                "/**\n * The XNOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XOr",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Not",
                "/**\n * The Not description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NAnd",
                "/**\n * The NAnd description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Or",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "STARTED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STARTED event\n */\npublic static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CLOSED event\n */\npublic static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);"
            ],
            [
                "POSTCLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.POSTCLOSED event\n */\npublic static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);"
            ],
            [
                "STEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STEP event\n */\npublic static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);"
            ],
            [
                "CHECKBURN",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CHECKBURN event\n */\npublic static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);"
            ],
            [
                "MICROSTEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.MICROSTEP event\n */\npublic static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);"
            ],
            [
                "RUN_TO_BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK event\n */\npublic static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);"
            ],
            [
                "RUN_TO_BREAK_TIMEOUT",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK_TIMEOUT event\n */\npublic static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);"
            ],
            [
                "BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.BREAK event\n */\npublic static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGPFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "NFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGNFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "PFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "TransGate",
                "/**\n * The transmission gate description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "SwitchDT",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Relay",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "RelayDT",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Switch",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Fuse",
                "/**\n * The fuse description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Reset",
                "/**\n * The Reset description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Stop",
                "/**\n * The Stop element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Decoder",
                "/**\n * The Decoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Delay",
                "/**\n * The Delay description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Driver",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "DriverInvSel",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "PriorityEncoder",
                "/**\n * The PriorityEncoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BusSplitter",
                "/**\n * The bus splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * The splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Multiplexer",
                "/**\n * The Multiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BitSelector",
                "/**\n * The Bit Selector description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * The Break description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Clock",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "AsyncSeq",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Demultiplexer",
                "/**\n * The Demultiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopDAsync",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopD",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRSAsync",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopT",
                "/**\n * The T-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJKAsync",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJK",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "Monoflop",
                "/**\n * The Monoflop's description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRS",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BarrelShifter",
                "/**\n * The barrel shifter description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Mul",
                "/**\n * The multiplier description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Neg",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitExtender",
                "/**\n * Description of the sign extend component.\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Add",
                "/**\n * The adders description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Div",
                "/**\n * The dividers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "PRNG",
                "/**\n * The element type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Sub",
                "/**\n * The subtractors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Comparator",
                "/**\n * The comparators description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitCount",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "EMPTY_LIST",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * An empty list\n */\npublic static final ObservableValues EMPTY_LIST = new ObservableValues();"
            ],
            [
                "DEFAULT_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The default formatter\n */\npublic static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;"
            ],
            [
                "HEX_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The hexadecimal formatter\n */\npublic static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "External",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "ExternalFile",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DEFAULT_RAD",
                "de.neemann.digital.fsm",
                "State",
                "/**\n * The default state radius\n */\nstatic final int DEFAULT_RAD = 70;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "Lang",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "InstanceHolder",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.testing",
                "TestCaseElement",
                "/**\n * The TestCaseElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();"
            ],
            [
                "STATENAMES",
                "de.neemann.digital.analyse",
                "TruthTableTableModel",
                "/**\n * String representation of the states\n */\npublic static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };"
            ],
            [
                "ONE",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant true or one\n */\npublic static final Constant ONE = new Constant(true);"
            ],
            [
                "ZERO",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant false or zero\n */\npublic static final Constant ZERO = new Constant(false);"
            ],
            [
                "PRIMARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the primary panel\n */\npublic static final String PRIMARY = \"primary\";"
            ],
            [
                "SECONDARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the secondary panel\n */\npublic static final String SECONDARY = \"secondary\";"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * The single EditorFactory instance.\n */\nstatic final EditorFactory INSTANCE = new EditorFactory();"
            ],
            [
                "MAX_TERMINAL_STORED",
                "de.neemann.digital.gui.components.terminal",
                "ConsoleTerminal",
                "/**\n * Max amount of characters stored\n */\npublic static final int MAX_TERMINAL_STORED = 2048;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Terminal",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Keyboard",
                "/**\n * The keyboard description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "FAILED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for failed tests\n */\nstatic final Color FAILED_COLOR = new Color(255, 200, 200);"
            ],
            [
                "PASSED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for passed tests\n */\nstatic final Color PASSED_COLOR = new Color(200, 255, 200);"
            ],
            [
                "ICON_DELETE",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The delete icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");"
            ],
            [
                "ICON_COPY",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The copy icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "VGA",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "GraphicCard",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "LedMatrix",
                "/**\n * the LED-Matrix description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "ScopeTrigger",
                "/**\n * The ScopeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);"
            ],
            [
                "DATADESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The DataElement description\n */\npublic static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "TEXTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The TextElement description\n */\npublic static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "RECTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The shape for the rectangle\n */\npublic static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "LEFT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to left align the digits\n */\npublic final static float LEFT = 0.0f;"
            ],
            [
                "CENTER",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to center the digits\n */\npublic final static float CENTER = 0.5f;"
            ],
            [
                "RIGHT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to right align the digits\n */\npublic final static float RIGHT = 1.0f;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "Settings",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "SettingsHolder",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "BASE_FILE_KEY",
                "de.neemann.digital.hdl.hgs",
                "Context",
                "/**\n * Key used to store the base file name in the context\n */\npublic static final String BASE_FILE_KEY = \"baseFile\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericInitCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();"
            ],
            [
                "GEN_ARGS_KEY",
                "de.neemann.digital.draw.library",
                "ResolveGenerics",
                "/**\n * Key uses to store the args for the generic circuits\n */\npublic static final String GEN_ARGS_KEY = \"genArgs\";"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "ButtonShape",
                "protected static final int HEIGHT = OUT_SIZE / 2;"
            ],
            [
                "SIZE2",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Half the size of the used raster\n */\npublic static final int SIZE2 = 10;"
            ],
            [
                "SIZE",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * The size of the used raster\n */\npublic static final int SIZE = SIZE2 * 2;"
            ],
            [
                "CIRC",
                "de.neemann.digital.draw.shapes",
                "DILShape",
                "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);"
            ],
            [
                "DOWNSHIFT",
                "de.neemann.digital.draw.shapes",
                "VDDShape",
                "static final int DOWNSHIFT = 4;"
            ],
            [
                "CHARGED_GATE",
                "de.neemann.digital.draw.shapes",
                "FGFETShapeN",
                "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);"
            ],
            [
                "OUT_SIZE",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Size of the normal sized inputs and outputs\n */\npublic static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;"
            ],
            [
                "LATEX_RAD",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);"
            ],
            [
                "WIDTH2",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * half the width of the resistor\n */\npublic static final int WIDTH2 = SIZE2 - 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * height of the resistor\n */\npublic static final int HEIGHT = SIZE + SIZE / 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static final int HEIGHT = 7;"
            ],
            [
                "FRAME",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "/**\n * the Frame of the display\n */\npublic static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.elements",
                "Tunnel",
                "/**\n * The TunnelElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();"
            ],
            [
                "HIGH_CONTRAST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);"
            ],
            [
                "MONOCHROME",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);"
            ],
            [
                "SMALL_IO",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);"
            ],
            [
                "NO_PIN_MARKER",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);"
            ],
            [
                "THINNER_LINES",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);"
            ],
            [
                "HIDE_TEST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);"
            ],
            [
                "NO_SHAPE_FILLING",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);"
            ],
            [
                "LATEX",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);"
            ],
            [
                "PINS_IN_MATH_MODE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SettingsHolder",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to select the color map\n */\npublic static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();"
            ],
            [
                "CUSTOM_COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to define the custom color map\n */\npublic static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();"
            ],
            [
                "MAXLINETHICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * maximal line thickness\n */\npublic static final int MAXLINETHICK = 4;"
            ],
            [
                "NORMAL",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all lines to draw the shapes itself\n */\npublic static final Style NORMAL = new Builder().build();"
            ],
            [
                "DISABLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all disabled elements\n */\npublic static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();"
            ],
            [
                "INOUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for input and output labels\n */\npublic static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();"
            ],
            [
                "FAILED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the failed state lines in the measurement graph\n */\npublic static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();"
            ],
            [
                "PASS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the passed state lines in the measurement graph\n */\npublic static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();"
            ],
            [
                "NORMAL_TEXT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for text which is integral part of the shape.\n * Text which uses this style is always included in sizing!\n * Used for text only elements.\n */\npublic static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();"
            ],
            [
                "THIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin line used for the graphic in the clock or delay shape\n */\npublic static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();"
            ],
            [
                "THIN_FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin filled\n */\npublic static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();"
            ],
            [
                "THICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thick line used for the ground line\n */\npublic static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();"
            ],
            [
                "WIRE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in editing mode\n */\npublic static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "WIRE_LOW",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for low wires in running mode\n */\npublic static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();"
            ],
            [
                "WIRE_HIGH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for high wires in running mode\n */\npublic static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();"
            ],
            [
                "WIRE_HIGHZ",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in high Z state\n */\npublic static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();"
            ],
            [
                "WIRE_OUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the output dots\n */\npublic static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();"
            ],
            [
                "FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Filled style used to fill the splitter or the dark LEDs\n */\npublic static final Style FILLED = new Builder().setFilled(true).build();"
            ],
            [
                "DASH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the grid in the graph\n */\npublic static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();"
            ],
            [
                "SHAPE_PIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();"
            ],
            [
                "SHAPE_SPLITTER",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text for splitters\n */\npublic static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();"
            ],
            [
                "WIRE_VALUE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();"
            ],
            [
                "WIRE_BITS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the wire bit number\n */\npublic static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();"
            ],
            [
                "HIGHLIGHT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * highlight color used for the circles to mark an element\n */\npublic static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "ERROR",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * error color used for the circles to mark an element\n */\npublic static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "BLANK",
                "de.neemann.digital.draw.graphics.text.text",
                "Blank",
                "/**\n * the Blank instance\n */\npublic static final Blank BLANK = new Blank();"
            ],
            [
                "LOOK_AT_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String LOOK_AT_ALIAS = \"lookAt\";"
            ],
            [
                "REF_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String REF_ALIAS = \"ref\";"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "name",
                "java.lang",
                "String"
            ],
            [
                "expression",
                "de.neemann.digital.analyse.expression",
                "Expression"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getCombinatorial",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic Map<String, Expression> getCombinatorial() {\n    fixDoubleCellUsage();\n    return super.getCombinatorial();\n}"
            ],
            [
                "addSequential",
                "de.neemann.digital.builder",
                "BuilderInterface",
                "public abstract T addSequential(String arg0, Expression arg1) throws BuilderException"
            ],
            [
                "addSequential",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic BuilderCollector addSequential(String name, Expression expression) throws BuilderException {\n    checkOpen();\n    sequentialVars.add(name);\n    return super.addSequential(name, expression);\n}"
            ],
            [
                "addCombinatorial",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException {\n    checkOpen();\n    return super.addCombinatorial(name, expression);\n}"
            ],
            [
                "getOutputs",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic ArrayList<String> getOutputs() {\n    fixDoubleCellUsage();\n    return super.getOutputs();\n}"
            ],
            [
                "getRegistered",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic Map<String, Expression> getRegistered() {\n    fixDoubleCellUsage();\n    return super.getRegistered();\n}"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "addCombinatorial",
                "de.neemann.digital.builder",
                "BuilderInterface",
                "public abstract T addCombinatorial(String arg0, Expression arg1) throws BuilderException"
            ],
            [
                "getInputs",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic ArrayList<String> getInputs() {\n    fixDoubleCellUsage();\n    return super.getInputs();\n}"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ],
            [
                "getOrderString",
                "de.neemann.digital.analyse.expression",
                "Expression",
                "public abstract String getOrderString()"
            ],
            [
                "traverse",
                "de.neemann.digital.analyse.expression",
                "Expression",
                "public abstract <V> V traverse(V arg0)"
            ],
            [
                "copy",
                "de.neemann.digital.analyse.expression",
                "Expression",
                "public abstract Expression copy()"
            ],
            [
                "calculate",
                "de.neemann.digital.analyse.expression",
                "Expression",
                "public abstract boolean calculate(Context arg0) throws ExpressionException"
            ],
            [
                "getInputs",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public ArrayList<String> getInputs()"
            ],
            [
                "getCombinatorial",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public Map<String, Expression> getCombinatorial()"
            ],
            [
                "getOutputs",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public ArrayList<String> getOutputs()"
            ],
            [
                "getRegistered",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public Map<String, Expression> getRegistered()"
            ],
            [
                "addCombinatorial",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public BuilderCollector addCombinatorial(String arg0, Expression arg1) throws BuilderException"
            ],
            [
                "addSequential",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public BuilderCollector addSequential(String arg0, Expression arg1) throws BuilderException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 26711,
        "oracle": "expression == null;",
        "oracleType": "EXCEPT_POST",
        "projectName": "Digital",
        "packageName": "de.neemann.digital.builder.Gal16v8",
        "className": "BuilderCollectorGAL",
        "javadocTag": "",
        "methodJavadoc": "",
        "methodSourceCode": "public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException{\n    checkOpen();\n    return super.addCombinatorial(name, expression);\n}",
        "classJavadoc": "/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */",
        "classSourceCode": "/*\n * Copyright (c) 2019 Helmut Neemann.\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.builder.Gal16v8;\n\nimport de.neemann.digital.analyse.expression.Expression;\nimport de.neemann.digital.builder.BuilderCollector;\nimport de.neemann.digital.builder.BuilderException;\nimport de.neemann.digital.builder.PinMap;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Map;\n\n/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */\npublic class BuilderCollectorGAL extends BuilderCollector {\n    private final PinMap pinMap;\n    private HashSet<String> sequentialVars;\n    private boolean doubleCellUsageFixed = false;\n\n    /**\n     * Creates a new instance\n     *\n     * @param pinMap the used pinMap. Is required to handle aliases correctly\n     */\n    public BuilderCollectorGAL(PinMap pinMap) {\n        this.pinMap = pinMap;\n        sequentialVars = new HashSet<>();\n    }\n\n    @Override\n    public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        return super.addCombinatorial(name, expression);\n    }\n\n    @Override\n    public BuilderCollector addSequential(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        sequentialVars.add(name);\n        return super.addSequential(name, expression);\n    }\n\n    private void checkOpen() {\n        if (doubleCellUsageFixed)\n            throw new RuntimeException(\"wrong BuilderCollectorGAL usage!\");\n    }\n\n    private void fixDoubleCellUsage() {\n        if (!doubleCellUsageFixed) {\n\n            super.getCombinatorial().entrySet().removeIf(c -> {\n                if (pinMap.isSimpleAlias(c.getKey(), c.getValue(), sequentialVars)) {\n                    removeOutput(c.getKey());\n                    return true;\n                }\n                return false;\n            });\n\n            doubleCellUsageFixed = true;\n        }\n    }\n\n    @Override\n    public ArrayList<String> getOutputs() {\n        fixDoubleCellUsage();\n        return super.getOutputs();\n    }\n\n    @Override\n    public ArrayList<String> getInputs() {\n        fixDoubleCellUsage();\n        return super.getInputs();\n    }\n\n    @Override\n    public Map<String, Expression> getCombinatorial() {\n        fixDoubleCellUsage();\n        return super.getCombinatorial();\n    }\n\n    @Override\n    public Map<String, Expression> getRegistered() {\n        fixDoubleCellUsage();\n        return super.getRegistered();\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "CLI",
                "de.neemann"
            ],
            [
                "Mouse",
                "de.neemann.gui"
            ],
            [
                "LineBreaker",
                "de.neemann.gui"
            ],
            [
                "IconCreator",
                "de.neemann.gui"
            ],
            [
                "ConfirmDialogBuilder",
                "de.neemann.gui"
            ],
            [
                "Resources",
                "de.neemann.gui.language"
            ],
            [
                "Bundle",
                "de.neemann.gui.language"
            ],
            [
                "Language",
                "de.neemann.gui.language"
            ],
            [
                "ToolTipAction",
                "de.neemann.gui"
            ],
            [
                "MyFileChooser",
                "de.neemann.gui"
            ],
            [
                "ClosingWindowListener",
                "de.neemann.gui"
            ],
            [
                "ErrorMessage",
                "de.neemann.gui"
            ],
            [
                "WindowSizeStorage",
                "de.neemann.gui"
            ],
            [
                "Screen",
                "de.neemann.gui"
            ],
            [
                "ToolTipProvider",
                "de.neemann.gui"
            ],
            [
                "InfoDialog",
                "de.neemann.gui"
            ],
            [
                "ValueFormatter",
                "de.neemann.digital.core"
            ],
            [
                "ModelStateObserver",
                "de.neemann.digital.core"
            ],
            [
                "PullDown",
                "de.neemann.digital.core.pld"
            ],
            [
                "Diode",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeBackward",
                "de.neemann.digital.core.pld"
            ],
            [
                "PullUp",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeForward",
                "de.neemann.digital.core.pld"
            ],
            [
                "Node",
                "de.neemann.digital.core"
            ],
            [
                "RAMSinglePort",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualAccess",
                "de.neemann.digital.core.memory"
            ],
            [
                "ByteArrayFromValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "Importer",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "LogisimReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "DataFieldValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "IntelHexReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "BinReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "MultiValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "CounterPreset",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Register",
                "de.neemann.digital.core.memory"
            ],
            [
                "LookUpTable",
                "de.neemann.digital.core.memory"
            ],
            [
                "BlockRAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Counter",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMMangerBase",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManagerFile",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManager",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMInterface",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "EEPROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramCounter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMAsync",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataField",
                "de.neemann.digital.core.memory"
            ],
            [
                "EEPROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMInterface",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataFieldConverter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMSinglePortSel",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramMemory",
                "de.neemann.digital.core.memory"
            ],
            [
                "RegisterFile",
                "de.neemann.digital.core.memory"
            ],
            [
                "ModelStateObserverTyped",
                "de.neemann.digital.core"
            ],
            [
                "Observable",
                "de.neemann.digital.core"
            ],
            [
                "NodeWithoutDelay",
                "de.neemann.digital.core"
            ],
            [
                "ExceptionWithOrigin",
                "de.neemann.digital.core"
            ],
            [
                "ObservableValue",
                "de.neemann.digital.core"
            ],
            [
                "SpeedTest",
                "de.neemann.digital.core"
            ],
            [
                "BurnException",
                "de.neemann.digital.core"
            ],
            [
                "GlobalValues",
                "de.neemann.digital.core"
            ],
            [
                "MIDI",
                "de.neemann.digital.core.io"
            ],
            [
                "RGBLED",
                "de.neemann.digital.core.io"
            ],
            [
                "Out",
                "de.neemann.digital.core.io"
            ],
            [
                "RotEncoder",
                "de.neemann.digital.core.io"
            ],
            [
                "PinControl",
                "de.neemann.digital.core.io"
            ],
            [
                "DipSwitch",
                "de.neemann.digital.core.io"
            ],
            [
                "CommonConnectionType",
                "de.neemann.digital.core.io"
            ],
            [
                "LightBulb",
                "de.neemann.digital.core.io"
            ],
            [
                "Probe",
                "de.neemann.digital.core.io"
            ],
            [
                "Button",
                "de.neemann.digital.core.io"
            ],
            [
                "ButtonLED",
                "de.neemann.digital.core.io"
            ],
            [
                "In",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorUnipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "ProbeMode",
                "de.neemann.digital.core.io"
            ],
            [
                "NotConnected",
                "de.neemann.digital.core.io"
            ],
            [
                "MIDIHelper",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorBipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "Const",
                "de.neemann.digital.core.io"
            ],
            [
                "PowerSupply",
                "de.neemann.digital.core.io"
            ],
            [
                "Ground",
                "de.neemann.digital.core.io"
            ],
            [
                "InValue",
                "de.neemann.digital.core.io"
            ],
            [
                "VDD",
                "de.neemann.digital.core.io"
            ],
            [
                "ServerHolder",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Telnet",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ByteBuffer",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Server",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ElementAttributes",
                "de.neemann.digital.core.element"
            ],
            [
                "Element",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementFactory",
                "de.neemann.digital.core.element"
            ],
            [
                "PinInfo",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescriptions",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "Keys",
                "de.neemann.digital.core.element"
            ],
            [
                "Rotation",
                "de.neemann.digital.core.element"
            ],
            [
                "AttributeListener",
                "de.neemann.digital.core.element"
            ],
            [
                "Key",
                "de.neemann.digital.core.element"
            ],
            [
                "ImmutableList",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementTypeDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "FanIn",
                "de.neemann.digital.core.basic"
            ],
            [
                "NOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "And",
                "de.neemann.digital.core.basic"
            ],
            [
                "XNOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "XOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "Not",
                "de.neemann.digital.core.basic"
            ],
            [
                "NAnd",
                "de.neemann.digital.core.basic"
            ],
            [
                "Function",
                "de.neemann.digital.core.basic"
            ],
            [
                "Or",
                "de.neemann.digital.core.basic"
            ],
            [
                "ExceptionWithOriginInterface",
                "de.neemann.digital.core"
            ],
            [
                "ModelEvent",
                "de.neemann.digital.core"
            ],
            [
                "BacktrackException",
                "de.neemann.digital.core"
            ],
            [
                "PlainSwitch",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGPFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "NFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGNFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PlainSwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "TransGate",
                "de.neemann.digital.core.switching"
            ],
            [
                "SwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Relay",
                "de.neemann.digital.core.switching"
            ],
            [
                "RelayDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Switch",
                "de.neemann.digital.core.switching"
            ],
            [
                "Fuse",
                "de.neemann.digital.core.switching"
            ],
            [
                "Reset",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Stop",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Decoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Delay",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Driver",
                "de.neemann.digital.core.wiring"
            ],
            [
                "DataBus",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "SingleBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "ConnectedBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "AbstractBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "BusModelStateObserver",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "CommonBusValue",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "DriverInvSel",
                "de.neemann.digital.core.wiring"
            ],
            [
                "PriorityEncoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BusSplitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Splitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Multiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitSelector",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Break",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Clock",
                "de.neemann.digital.core.wiring"
            ],
            [
                "AsyncSeq",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Demultiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitsException",
                "de.neemann.digital.core"
            ],
            [
                "NodeInterface",
                "de.neemann.digital.core"
            ],
            [
                "NodeException",
                "de.neemann.digital.core"
            ],
            [
                "FlipflopDAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopD",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRSAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopT",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJKAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJK",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "Monoflop",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRS",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopBit",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "BarrelShifter",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Mul",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Neg",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitExtender",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Add",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Div",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "LeftRightFormat",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "PRNG",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Sub",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BarrelShifterMode",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Comparator",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitCount",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "ObservableValues",
                "de.neemann.digital.core"
            ],
            [
                "Value",
                "de.neemann.digital.core"
            ],
            [
                "IntFormat",
                "de.neemann.digital.core"
            ],
            [
                "SyncAccess",
                "de.neemann.digital.core"
            ],
            [
                "Bits",
                "de.neemann.digital.core"
            ],
            [
                "ProcessInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "StdIOInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "ApplicationVerilogStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "Application",
                "de.neemann.digital.core.extern"
            ],
            [
                "External",
                "de.neemann.digital.core.extern"
            ],
            [
                "Port",
                "de.neemann.digital.core.extern"
            ],
            [
                "PortDefinition",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGHDL",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationIVerilog",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationVHDLStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "VHDLTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGeneric",
                "de.neemann.digital.core.extern"
            ],
            [
                "Options",
                "de.neemann.digital.core.extern"
            ],
            [
                "VerilogTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ExternalFile",
                "de.neemann.digital.core.extern"
            ],
            [
                "ProcessStarter",
                "de.neemann.digital.core.extern"
            ],
            [
                "ModelEventType",
                "de.neemann.digital.core"
            ],
            [
                "Observer",
                "de.neemann.digital.core"
            ],
            [
                "ErrorDetector",
                "de.neemann.digital.core"
            ],
            [
                "Statistics",
                "de.neemann.digital.core.stats"
            ],
            [
                "Countable",
                "de.neemann.digital.core.stats"
            ],
            [
                "Model",
                "de.neemann.digital.core"
            ],
            [
                "Signal",
                "de.neemann.digital.core"
            ],
            [
                "StringList",
                "de.neemann.digital"
            ],
            [
                "XStreamValid",
                "de.neemann.digital"
            ],
            [
                "StatsExport",
                "de.neemann.digital.cli"
            ],
            [
                "SVGExport",
                "de.neemann.digital.cli"
            ],
            [
                "CommandLineTester",
                "de.neemann.digital.cli"
            ],
            [
                "CSVWriter",
                "de.neemann.digital.cli"
            ],
            [
                "BasicCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Argument",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLIException",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Muxer",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentKey",
                "de.neemann.digital.cli.cli"
            ],
            [
                "NamedCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLICommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentBase",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CircuitLoader",
                "de.neemann.digital.cli"
            ],
            [
                "Main",
                "de.neemann.digital.cli"
            ],
            [
                "Modification",
                "de.neemann.digital.undo"
            ],
            [
                "Modifications",
                "de.neemann.digital.undo"
            ],
            [
                "ModifyException",
                "de.neemann.digital.undo"
            ],
            [
                "Copyable",
                "de.neemann.digital.undo"
            ],
            [
                "UndoManager",
                "de.neemann.digital.undo"
            ],
            [
                "ChangedListener",
                "de.neemann.digital.undo"
            ],
            [
                "CircuitRepresentation",
                "de.neemann.digital.fsm"
            ],
            [
                "Transition",
                "de.neemann.digital.fsm"
            ],
            [
                "Movable",
                "de.neemann.digital.fsm"
            ],
            [
                "MouseMovable",
                "de.neemann.digital.fsm"
            ],
            [
                "Optimizer",
                "de.neemann.digital.fsm"
            ],
            [
                "Permute",
                "de.neemann.digital.fsm"
            ],
            [
                "FiniteStateMachineException",
                "de.neemann.digital.fsm"
            ],
            [
                "TransitionTableCreator",
                "de.neemann.digital.fsm"
            ],
            [
                "ValueParser",
                "de.neemann.digital.fsm"
            ],
            [
                "WaitGroup",
                "de.neemann.digital.fsm"
            ],
            [
                "FSMComponent",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMFrame",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "OptimizerDialog",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMDemos",
                "de.neemann.digital.fsm"
            ],
            [
                "FSM",
                "de.neemann.digital.fsm"
            ],
            [
                "State",
                "de.neemann.digital.fsm"
            ],
            [
                "Lang",
                "de.neemann.digital.lang"
            ],
            [
                "LineListenerResolveDontCare",
                "de.neemann.digital.testing"
            ],
            [
                "TestingDataException",
                "de.neemann.digital.testing"
            ],
            [
                "UnitTester",
                "de.neemann.digital.testing"
            ],
            [
                "FolderTestRunner",
                "de.neemann.digital.testing"
            ],
            [
                "TestExecutor",
                "de.neemann.digital.testing"
            ],
            [
                "Transitions",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseDescription",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseElement",
                "de.neemann.digital.testing"
            ],
            [
                "LineEmitterRepeat",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Parser",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppenderBits",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ParserException",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Context",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ModelInitializer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Expression",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterList",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestRow",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitter",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterWhile",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterSimple",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Random",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "SignExtend",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "IfThenElse",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "Function",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "LineListener",
                "de.neemann.digital.testing.parser"
            ],
            [
                "VirtualSignal",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppender",
                "de.neemann.digital.testing.parser"
            ],
            [
                "OperatorPrecedence",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestResultListener",
                "de.neemann.digital.testing"
            ],
            [
                "MatchedValue",
                "de.neemann.digital.testing"
            ],
            [
                "TestResult",
                "de.neemann.digital.testing"
            ],
            [
                "MinimizerInterface",
                "de.neemann.digital.analyse"
            ],
            [
                "LabelNumbering",
                "de.neemann.digital.analyse"
            ],
            [
                "ModelAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "CSVImporter",
                "de.neemann.digital.analyse"
            ],
            [
                "BoolTableExpanded",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableTableModel",
                "de.neemann.digital.analyse"
            ],
            [
                "TableReducer",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "PrimeSelector",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForce",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "LargestFirst",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForceGetAll",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "PrimeSelectorDefault",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BoolTableByteArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "IndependentChecker",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskey",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableExpression",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableBoolArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTable",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRows",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "ThreeStateValue",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskeyExam",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRow",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TruthTableConverter",
                "de.neemann.digital.analyse"
            ],
            [
                "DetermineJKStateMachine",
                "de.neemann.digital.analyse"
            ],
            [
                "Parser",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ParseException",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ModelAnalyserInfo",
                "de.neemann.digital.analyse"
            ],
            [
                "AnalyseException",
                "de.neemann.digital.analyse"
            ],
            [
                "DependencyAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "SubstituteLibrary",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableFormatterHex",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatter",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterTestCase",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterCSV",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterLaTeX",
                "de.neemann.digital.analyse.format"
            ],
            [
                "MinimizerQuineMcCluskey",
                "de.neemann.digital.analyse"
            ],
            [
                "ContextFiller",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "BitSetter",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ContextMap",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Operation",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Context",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NInputs",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NOr",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "ExpressionModifier",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NAnd",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "Constant",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Variable",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionException",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityInclNotVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Equals",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "FormatToExpression",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTable",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Formatter",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatterException",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTableLatex",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Not",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "VariableVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NamedExpression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "MinimizerQuineMcCluskeyExam",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTable",
                "de.neemann.digital.analyse"
            ],
            [
                "SplitPinString",
                "de.neemann.digital.analyse"
            ],
            [
                "CycleDetector",
                "de.neemann.digital.analyse"
            ],
            [
                "DigitalRemoteInterface",
                "de.neemann.digital.gui"
            ],
            [
                "TextSearchFilter",
                "de.neemann.digital.gui"
            ],
            [
                "ExportZipAction",
                "de.neemann.digital.gui"
            ],
            [
                "SettingsBase",
                "de.neemann.digital.gui"
            ],
            [
                "DocumentationLocator",
                "de.neemann.digital.gui"
            ],
            [
                "InitialTutorial",
                "de.neemann.digital.gui.tutorial"
            ],
            [
                "InsertAction",
                "de.neemann.digital.gui"
            ],
            [
                "StatusInterface",
                "de.neemann.digital.gui"
            ],
            [
                "SearchTextField",
                "de.neemann.digital.gui"
            ],
            [
                "SaveAsHelper",
                "de.neemann.digital.gui"
            ],
            [
                "FileHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ReleaseInfo",
                "de.neemann.digital.gui.release"
            ],
            [
                "CheckForNewRelease",
                "de.neemann.digital.gui.release"
            ],
            [
                "StateInterface",
                "de.neemann.digital.gui.state"
            ],
            [
                "StateManager",
                "de.neemann.digital.gui.state"
            ],
            [
                "State",
                "de.neemann.digital.gui.state"
            ],
            [
                "CircuitScrollPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "ItemPicker",
                "de.neemann.digital.gui.components"
            ],
            [
                "LibraryTreeModel",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "SelectTree",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "WindowPosManager",
                "de.neemann.digital.gui.components"
            ],
            [
                "CustomShapeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "TransformHolder",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "BehavioralFixtureCreator",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorFactory",
                "de.neemann.digital.gui.components"
            ],
            [
                "OrderMerger",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementOrderer",
                "de.neemann.digital.gui.components"
            ],
            [
                "ModifyMoveSelected",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteRect",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWires",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfVisualElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyCircuitAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveAndRotElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMeasurementOrdering",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttribute",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "DataEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "CircuitModifierPostClosed",
                "de.neemann.digital.gui.components"
            ],
            [
                "CharDeleter",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "ConsoleTerminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Terminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalInterface",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Keyboard",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "KeyboardDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Editor",
                "de.neemann.digital.gui.components"
            ],
            [
                "VarRectList",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMap",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapComponent",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapDialog",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "MapLayout",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughException",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "CircuitTransferable",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementHelpDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "TestCaseDescriptionDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ValueTableDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestCaseDescriptionEditor",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestAllDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ExpressionListenerOptimizeJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "LaTeXExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "HardwareDescriptionGenerator",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateFile",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateCUPL",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "ExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderOutputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AllSolutionsDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerCSVCondensed",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "BuilderExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionComponent",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "PlainTextExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableReorderManager",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ShowStringDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderInputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ProgressDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "CheckResultListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerStore",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AttributeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ProbeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ColorSchemeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "ROMEditorDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "LabelGenerator",
                "de.neemann.digital.gui.components"
            ],
            [
                "SingleValueDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ExpressionDialog",
                "de.neemann.digital.gui.components.expression"
            ],
            [
                "CircuitComponent",
                "de.neemann.digital.gui.components"
            ],
            [
                "VGA",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicCard",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrix",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "VGADialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "MoveFocusTo",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "ConstraintsBuilder",
                "de.neemann.digital.gui.components"
            ],
            [
                "ScopeTrigger",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphDialog",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphComponent",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "DummyElement",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "ValueTableObserver",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "CircuitModifier",
                "de.neemann.digital.gui.components"
            ],
            [
                "CopiedElementLabelRenamer",
                "de.neemann.digital.gui.components"
            ],
            [
                "TextLineNumber",
                "de.neemann.digital.gui.components"
            ],
            [
                "InsertHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ProgramMemoryLoader",
                "de.neemann.digital.gui"
            ],
            [
                "Main",
                "de.neemann.digital.gui"
            ],
            [
                "StatsDialog",
                "de.neemann.digital.gui"
            ],
            [
                "WindowManager",
                "de.neemann.digital.gui"
            ],
            [
                "Settings",
                "de.neemann.digital.gui"
            ],
            [
                "LibrarySelector",
                "de.neemann.digital.gui"
            ],
            [
                "DigitalUncaughtExceptionHandler",
                "de.neemann.digital.gui"
            ],
            [
                "NumberingWizard",
                "de.neemann.digital.gui"
            ],
            [
                "HandlerInterface",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteSever",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteException",
                "de.neemann.digital.gui.remote"
            ],
            [
                "DigitalHandler",
                "de.neemann.digital.gui.remote"
            ],
            [
                "ModelModifier",
                "de.neemann.digital.gui"
            ],
            [
                "VerilogCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogRenaming",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogGenerator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogTestBenchCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogElement",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogTemplate",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogLibrary",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "CodePrinter",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "CodePrinterStr",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "Statements",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Parser",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ParserException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Statement",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Context",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "FirstClassFunctionCall",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "InnerFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "JavaClass",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "FirstClassFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Func",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Function",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSEvalException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ReferenceToFunc",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToStruct",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToArray",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Reference",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToVar",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Value",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSMap",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSArray",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Separator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLLibrary",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLRenaming",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLGenerator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLEntity",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplate",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplateFunctions",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTestBenchCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "HDLModel",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNode",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNet",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "Printable",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLException",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLPort",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HasName",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "InlineManyToOne",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeAssignments",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "Optimization",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeConstants",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "ReplaceOneToMany",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NameConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "OptimizeExpressions",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "RemoveConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NodeSorterExpressionBased",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "HDLNodeSplitterManyToOne",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeCustom",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeAssignment",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLCircuit",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "ExprVar",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Visitor",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprVarRange",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExpressionOptimizer",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprNot",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprConstant",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprOperate",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprUsingNet",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "HDLNodeBuildIn",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLClockIntegrator",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockIntegratorGeneric",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockInfo",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "HDLNodeSplitterOneToMany",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "FileLocator",
                "de.neemann.digital"
            ],
            [
                "ValueTable",
                "de.neemann.digital.data"
            ],
            [
                "ValueTableModel",
                "de.neemann.digital.data"
            ],
            [
                "DataPlotter",
                "de.neemann.digital.data"
            ],
            [
                "Value",
                "de.neemann.digital.data"
            ],
            [
                "ExpressionExporter",
                "de.neemann.digital.builder"
            ],
            [
                "ExpressionToFileExporter",
                "de.neemann.digital.builder"
            ],
            [
                "RotationByteArrayOutputStream",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "TT2Exporter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "StartATF150xFitter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "OSExecute",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "CreateCHN",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDevice",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDialog",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PL",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATF150xCuplExporter",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PinMap",
                "de.neemann.digital.builder"
            ],
            [
                "PinMapException",
                "de.neemann.digital.builder"
            ],
            [
                "FragmentExpression",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisualElement",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentSameInValue",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "CircuitBuilder",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisitor",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVariable",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Fragment",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Box",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Gal16v8JEDECExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CuplExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "BuilderCollectorGAL",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CleanNameBuilder",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderCollector",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderInterface",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderException",
                "de.neemann.digital.builder"
            ],
            [
                "Gal22v10JEDECExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "Gal22v10CuplExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "FuseMap",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFillerException",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFiller",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "JedecWriter",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "GenericCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibrary",
                "de.neemann.digital.draw.library"
            ],
            [
                "GenericInitCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "Visitor",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryListener",
                "de.neemann.digital.draw.library"
            ],
            [
                "JarComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibraryFolder",
                "de.neemann.digital.draw.library"
            ],
            [
                "CustomElement",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundNotification",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundException",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentSource",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryInterface",
                "de.neemann.digital.draw.library"
            ],
            [
                "ResolveGenerics",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryNode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementTypeDescriptionCustom",
                "de.neemann.digital.draw.library"
            ],
            [
                "InvalidNodeException",
                "de.neemann.digital.draw.library"
            ],
            [
                "NumStringComparator",
                "de.neemann.digital.draw.library"
            ],
            [
                "InputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Interactor",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Drawable",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeBackwardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FuseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DILShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DipSwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LightBulbShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LayoutShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PolarityAwareLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ConstShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BreakShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TextShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegHexShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ProbeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "NotConnectedShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "StepperMotorShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BitSelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericInitCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RectShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "VDDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RAMShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ScopeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DemuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BusSplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullUpShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TestCaseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TunnelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PinControlShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FGFETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TransGateShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ResetShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeForewardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SixteenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "CustomCircuitShapeType",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "InteractorInterface",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeSpecificMatch",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RGBLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RotEncoderShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "IEEEGenericShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEENotShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEAndShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEXOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "ObservableValueReader",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SvgTemplate",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "TransformParser",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "Context",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgException",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgImporter",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "CustomShapeDescription",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "CustomShape",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "FGFETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "OutputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GroundShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "AsyncClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Shape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MissingShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeFactory",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullDownShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DriverShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DataShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DotCreator",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Wire",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Movable",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pins",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Circuit",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Tunnel",
                "de.neemann.digital.draw.elements"
            ],
            [
                "PinException",
                "de.neemann.digital.draw.elements"
            ],
            [
                "ElementOrder",
                "de.neemann.digital.draw.elements"
            ],
            [
                "VisualElement",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pin",
                "de.neemann.digital.draw.elements"
            ],
            [
                "IOState",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireMerger",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireConsistencyChecker",
                "de.neemann.digital.draw.elements"
            ],
            [
                "AsyncSequentialClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelEntry",
                "de.neemann.digital.draw.model"
            ],
            [
                "Net",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelCreator",
                "de.neemann.digital.draw.model"
            ],
            [
                "InverterConfig",
                "de.neemann.digital.draw.model"
            ],
            [
                "NetList",
                "de.neemann.digital.draw.model"
            ],
            [
                "RealTimeClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "Polygon",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Orientation",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Vector",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGSettings",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Transform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorKey",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ExportFactory",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicsImage",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorInterface",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformMatrix",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatLaTeX",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicMinMax",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicTransform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorScheme",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Style",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSkipLines",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "GraphicLineCollector",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "PolygonConverter",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorFloat",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformRotate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Graphic",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleHighContrast",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Parser",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "ParseException",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "PlainTextFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "SVGFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "GraphicsFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "LaTeXFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "Decorate",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Text",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Index",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Sentence",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Blank",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Character",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "ExpressionToText",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Simple",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Export",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleMonochrome",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformTranslate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSwing",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "PolygonParser",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGTokenizer",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GifSequenceWriter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "GifExporter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "ConfigCache",
                "de.neemann.digital.toolchain"
            ],
            [
                "Configuration",
                "de.neemann.digital.toolchain"
            ],
            [
                "Command",
                "de.neemann.digital.toolchain"
            ],
            [
                "FileToCreate",
                "de.neemann.digital.toolchain"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "getMouse",
                "de.neemann.gui",
                "Mouse",
                "/**\n * Returns a mouse event interpreter\n *\n * @return a Mouse interface implementation\n */\nstatic Mouse getMouse() {\n    if (Settings.getInstance().get(Keys.SETTINGS_MAC_MOUSE))\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && !e.isControlDown();\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && e.isControlDown();\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isShiftDown();\n            }\n        };\n    else\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1;\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON3;\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isControlDown();\n            }\n        };\n}"
            ],
            [
                "create",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an icon from a resource\n *\n * @param name name of the resource\n * @return the icon\n */\npublic static Icon create(String name) {\n    return new ImageIcon(createImage(name));\n}"
            ],
            [
                "createImage",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image from a resource\n *\n * @param name name of the resource\n * @return the image\n */\npublic static Image createImage(String name) {\n    try {\n        final float scaling = Screen.getInstance().getScaling();\n        if (scaling == 1) {\n            return getImage(name);\n        } else {\n            BufferedImage image = getImageOrNull(name.substring(0, name.length() - 4) + \"_hi.png\");\n            if (image != null) {\n                int w = (int) (image.getWidth() * scaling / 2);\n                int h = (int) (image.getHeight() * scaling / 2);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            } else {\n                LOGGER.info(\"upscaling of \" + name);\n                image = getImage(name);\n                int w = (int) (image.getWidth() * scaling);\n                int h = (int) (image.getHeight() * scaling);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            }\n        }\n    } catch (IOException e) {\n        throw new RuntimeException(\"Image \" + name + \" not found\", e);\n    }\n}"
            ],
            [
                "createImages",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image list from a resource\n *\n * @param names names of the resource\n * @return the image\n */\npublic static ArrayList<Image> createImages(String... names) {\n    try {\n        ArrayList<Image> list = new ArrayList<Image>(names.length);\n        for (String name : names) {\n            list.add(getImage(name));\n        }\n        return list;\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}"
            ],
            [
                "getCTRLMask",
                "de.neemann.gui",
                "ToolTipAction",
                "/**\n * @return the system specific CTRL mask.\n */\npublic static int getCTRLMask() {\n    int mask = InputEvent.CTRL_DOWN_MASK;\n    if (Screen.isMac())\n        mask = InputEvent.META_DOWN_MASK;\n    return mask;\n}"
            ],
            [
                "checkForSave",
                "de.neemann.gui",
                "ClosingWindowListener",
                "/**\n * Used to check for save! No Window closing is performed!\n *\n * @param parent      the Parent frame\n * @param confirmSave the confirmSafe interface\n * @return true if to proceed\n */\npublic static boolean checkForSave(JFrame parent, ConfirmSave confirmSave) {\n    if (confirmSave.isStateChanged()) {\n        int r = new ConfirmDialogBuilder(SAVE_CHANGES_MESSAGE).setTitle(STATE_CHANGED_MESSAGE).setNoOption(NO_MESSAGE).setYesOption(YES_MESSAGE).setCancleOption(CANCEL_MESSAGE).show(parent);\n        if (r == JOptionPane.YES_OPTION || r == JOptionPane.NO_OPTION) {\n            if (r == JOptionPane.YES_OPTION) {\n                confirmSave.saveChanges();\n                return !confirmSave.isStateChanged();\n            } else\n                return true;\n        } else\n            return false;\n    }\n    return true;\n}"
            ],
            [
                "getParentWindow",
                "de.neemann.gui",
                "ErrorMessage",
                "/**\n * Get the parent window of the given component.\n * If the component is a window this window is returned\n *\n * @param parent the parent component\n * @return the window instance\n */\npublic static Window getParentWindow(Component parent) {\n    if (parent == null)\n        return null;\n    else if (parent instanceof Window)\n        return (Window) parent;\n    else\n        return SwingUtilities.getWindowAncestor(parent);\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the Screen instance\n */\npublic static Screen getInstance() {\n    return InstanceHolder.instance;\n}"
            ],
            [
                "getDefaultFontScaling",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the default font scaling in percent\n */\npublic static int getDefaultFontScaling() {\n    if (// macOS has its own retina handling\n    IS_MAC)\n        return 100;\n    int dpi = getDefaultScreenResolution();\n    int s = (dpi * 100) / 96;\n    if (s > 95 && s < 105)\n        s = 100;\n    return s;\n}"
            ],
            [
                "isLinux",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a windows system\n */\npublic static boolean isLinux() {\n    return IS_LINUX;\n}"
            ],
            [
                "isMac",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a mac\n */\npublic static boolean isMac() {\n    return IS_MAC;\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * @return the singleton instance\n */\npublic static InfoDialog getInstance() {\n    if (instance == null)\n        try {\n            instance = new InfoDialog();\n        } catch (IOException e) {\n            System.out.println(\"error reading InfoDialog \" + e.getMessage());\n        }\n    return instance;\n}"
            ],
            [
                "read",
                "de.neemann.digital.core.memory.importer",
                "Importer",
                "/**\n * Reads the given file to a single data field.\n *\n * @param hexFile   the file to read\n * @param dataBits  the bits used in the data field\n * @param bigEndian uses big endian at import\n * @return the data field\n * @throws IOException IOException\n */\npublic static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException {\n    DataField df = new DataField(1024);\n    read(hexFile, new DataFieldValueArray(df, dataBits), bigEndian);\n    return df;\n}"
            ],
            [
                "getOriginOf",
                "de.neemann.digital.core",
                "ExceptionWithOrigin",
                "/**\n * Returns the file or the files that caused the given exception.\n * If no origin is found null is returned.\n *\n * @param e the exception\n * @return the origin or null;\n */\npublic static String getOriginOf(Throwable e) {\n    while (e != null) {\n        if (e instanceof ExceptionWithOriginInterface) {\n            Set<File> origins = ((ExceptionWithOriginInterface) e).getOrigin();\n            if (origins != null && origins.size() > 0) {\n                StringBuilder sb = new StringBuilder();\n                for (File o : origins) {\n                    if (o != null) {\n                        if (sb.length() > 0)\n                            sb.append(\", \");\n                        sb.append(o.getName());\n                    }\n                }\n                if (sb.length() > 0)\n                    return sb.toString();\n                else\n                    return null;\n            }\n        }\n        e = e.getCause();\n    }\n    return null;\n}"
            ],
            [
                "zMaskString",
                "de.neemann.digital.core",
                "ObservableValue",
                "static String zMaskString(long value, long highZ, int bits) {\n    StringBuilder sb = new StringBuilder();\n    long m = Bits.up(1, bits - 1);\n    for (int i = 0; i < bits; i++) {\n        if ((highZ & m) != 0) {\n            sb.append(\"z\");\n        } else {\n            if ((value & m) != 0) {\n                sb.append(\"1\");\n            } else {\n                sb.append(\"0\");\n            }\n        }\n        m >>>= 1;\n    }\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core",
                "GlobalValues",
                "/**\n * @return returns the global instance\n */\npublic static GlobalValues getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core.io",
                "MIDIHelper",
                "/**\n * @return the MIDIHelper\n */\npublic static MIDIHelper getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new input\n */\npublic static PinInfo input(String name) {\n    return new PinInfo(name, null, Direction.input);\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name        the pins name\n * @param description the pins description\n * @return the new input\n */\npublic static PinInfo input(String name, String description) {\n    return new PinInfo(name, description, Direction.input);\n}"
            ],
            [
                "output",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new output\n */\npublic static PinInfo output(String name) {\n    return new PinInfo(name, null, Direction.output);\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "PinDescription",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "Direction",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "getKeyByName",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Returns the key of the given name.\n * If key does not exist, null is returned.\n *\n * @param name the name of the key\n * @return the key or null\n */\npublic static Key getKeyByName(String name) {\n    return InstanceHolder.INSTANCE.get(name);\n}"
            ],
            [
                "getKeys",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * @return all available keys\n */\npublic static Iterable<Key> getKeys() {\n    return InstanceHolder.INSTANCE.values();\n}"
            ],
            [
                "combine",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "/**\n * Combines two lists\n *\n * @param a   first list\n * @param b   second list\n * @param <T> the Type of the elements\n * @return the new combined list\n */\npublic static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b) {\n    T[] com = Arrays.copyOf(a.items, a.size() + b.size());\n    System.arraycopy(b.items, 0, com, a.size(), b.size());\n    return new ImmutableList<>(com);\n}"
            ],
            [
                "createSwitchModel",
                "de.neemann.digital.core.switching",
                "PlainSwitch",
                "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException {\n    if (input1 instanceof CommonBusValue) {\n        if (input2 instanceof CommonBusValue) {\n            final CommonBusValue in1 = (CommonBusValue) input1;\n            final CommonBusValue in2 = (CommonBusValue) input2;\n            ObservableValue constant = in1.searchConstant();\n            if (constant != null)\n                return new UniDirectionalSwitch(constant, output2);\n            else {\n                constant = in2.searchConstant();\n                if (constant != null)\n                    return new UniDirectionalSwitch(constant, output1);\n                else\n                    return new RealSwitch(in1, output1, in2, output2);\n            }\n        } else\n            return new UniDirectionalSwitch(input1, output2);\n    } else {\n        if (input2 instanceof CommonBusValue) {\n            return new UniDirectionalSwitch(input2, output1);\n        } else {\n            throw new NodeException(Lang.get(\"err_switchHasNoNet\"), output1, output2);\n        }\n    }\n}"
            ],
            [
                "createOneToN",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a one to N splitter\n *\n * @param bits number of outputs\n * @return the splitter\n */\npublic static Splitter createOneToN(int bits) {\n    Ports in = new Ports();\n    in.add(new Port(0, bits));\n    Ports out = new Ports();\n    for (int i = 0; i < bits; i++) out.add(new Port(i, 1));\n    return new Splitter(in, out);\n}"
            ],
            [
                "createNToOne",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a N to one splitter\n *\n * @param bits number of inputs\n * @return the splitter\n */\npublic static Splitter createNToOne(int bits) {\n    Ports in = new Ports();\n    for (int i = 0; i < bits; i++) in.add(new Port(i, 1));\n    Ports out = new Ports();\n    out.add(new Port(0, bits));\n    return new Splitter(in, out);\n}"
            ],
            [
                "ovs",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * Helper to create a {@link ObservableValues} instance\n *\n * @param items the items\n * @return the created instance\n */\npublic static ObservableValues ovs(ObservableValue... items) {\n    return new ObservableValues(items);\n}"
            ],
            [
                "toShortHex",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * Creates a short hex representation of the given value.\n * Use only to represent a value.\n * If confusion is excluded, the prefix '0x' is omitted.\n * Thus 0x1A3 is converted to \"1A3\" which can not be parsed back to a long because \"0x\" is missing.\n *\n * @param value the value\n * @return the hex string\n */\npublic static String toShortHex(long value) {\n    return toShortHex(value, false);\n}"
            ],
            [
                "up",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value up\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long up(long val, int bits) {\n    if (bits < 64)\n        return val << bits;\n    else\n        return 0;\n}"
            ],
            [
                "down",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value down\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long down(long val, int bits) {\n    if (bits < 64)\n        return val >>> bits;\n    else\n        return 0;\n}"
            ],
            [
                "mask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Creates a bit mask with the lowest [bits] bits set.\n *\n * @param bits the number of 1 bits\n * @return a value with the lowest [bits] bits set.\n */\npublic static long mask(int bits) {\n    if (bits < 64)\n        return (1L << bits) - 1;\n    else\n        return -1;\n}"
            ],
            [
                "signedFlagMask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * calculates the signed flag.\n *\n * @param bits the bit count\n * @return the last used bit ( 1<<(bits-1) )\n */\npublic static long signedFlagMask(int bits) {\n    return up(1, bits - 1);\n}"
            ],
            [
                "isNegative",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Returns true if value is negative\n *\n * @param value the value\n * @param bits  the bit count\n * @return true if the last relevant bit is set\n */\npublic static boolean isNegative(long value, int bits) {\n    return (value & signedFlagMask(bits)) != 0;\n}"
            ],
            [
                "signExtend",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Sign extension of the value.\n * signExtend(3,2) returns -1.\n *\n * @param value the value\n * @param bits  number of bits\n * @return the sign extended value\n */\npublic static long signExtend(long value, int bits) {\n    if (bits >= 64)\n        return value;\n    else {\n        if ((value & signedFlagMask(bits)) == 0)\n            return value;\n        else\n            return value | ~mask(bits);\n    }\n}"
            ],
            [
                "binLn2",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Calculates the number of bits needed to store the given value b.\n *\n * @param b number\n * @return number of bits needed to store b\n */\npublic static int binLn2(long b) {\n    int outBits = 1;\n    while ((1L << outBits) <= b) outBits++;\n    return outBits;\n}"
            ],
            [
                "removeBitFromValue",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Removes a bit from a value.\n * This means it shifts the higher bits down. Behaves like removing an item from a list.\n *\n * @param value the value\n * @param bit   the bit to remove\n * @return the new value\n */\npublic static int removeBitFromValue(int value, int bit) {\n    if (bit > 0) {\n        return ((value & (~((1 << (bit + 1)) - 1))) >>> 1) | (value & ((1 << bit) - 1));\n    } else {\n        return value >>> 1;\n    }\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str the string\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str) throws NumberFormatException {\n    return decode(str, false);\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str         the string\n * @param parseFloats if true also floats are parsed\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str, boolean parseFloats) throws NumberFormatException {\n    if (str == null)\n        return 0;\n    str = str.trim();\n    if (str.length() == 0)\n        return 0;\n    if (str.indexOf(':') >= 0)\n        return decodeFixed(str);\n    if (parseFloats && str.indexOf('.') > -1) {\n        try {\n            if (str.endsWith(\"d\") || str.endsWith(\"D\"))\n                return Double.doubleToLongBits(Double.parseDouble(str.substring(0, str.length() - 1)));\n            else\n                return Float.floatToIntBits(Float.parseFloat(str));\n        } catch (java.lang.NumberFormatException e) {\n            throw new NumberFormatException(str, 0);\n        }\n    }\n    int p = 0;\n    boolean neg = false;\n    if (str.charAt(p) == '-') {\n        neg = true;\n        p++;\n    }\n    if (p >= str.length())\n        throw new NumberFormatException(str, p);\n    boolean wasZero = false;\n    while (str.length() > p && str.charAt(p) == '0') {\n        wasZero = true;\n        p++;\n    }\n    if (p >= str.length())\n        return 0;\n    int radix;\n    if (wasZero) {\n        if (neg)\n            throw new NumberFormatException(str, p);\n        switch(str.charAt(p)) {\n            case 'x':\n            case 'X':\n                radix = 16;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            case 'b':\n            case 'B':\n                radix = 2;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            default:\n                radix = 8;\n        }\n    } else {\n        if (str.charAt(p) == '\\'') {\n            if (neg)\n                throw new NumberFormatException(str, p);\n            p++;\n            if (p == str.length())\n                throw new NumberFormatException(str, p);\n            return str.charAt(p);\n        } else\n            radix = 10;\n    }\n    long val = decode(str, p, radix);\n    if (neg)\n        val = -val;\n    return val;\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes the given string starting at position p\n *\n * @param str   the string to decode\n * @param p     the starting position\n * @param radix the radix\n * @return the value\n * @throws NumberFormatException NumberFormatException\n */\npublic static long decode(String str, int p, int radix) throws NumberFormatException {\n    long val = 0;\n    while (p < str.length()) {\n        int d = Character.digit(str.charAt(p), radix);\n        if (d < 0)\n            throw new NumberFormatException(str, p);\n        val = val * radix + d;\n        p++;\n    }\n    return val;\n}"
            ],
            [
                "getCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Extract the code from the attributes.\n * The code is either stored directly or there is a file given.\n *\n * @param attr the attributes\n * @param root the projects main folder\n * @return the code\n * @throws IOException IOException\n */\nstatic String getCode(ElementAttributes attr, File root) throws IOException {\n    if (attr.contains(Keys.EXTERNAL_CODE))\n        return attr.get(Keys.EXTERNAL_CODE);\n    if (attr.contains(Keys.EXTERNAL_CODE_FILE))\n        return readCode(attr.getFile(Keys.EXTERNAL_CODE_FILE, root));\n    return \"\";\n}"
            ],
            [
                "readCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Reads the code from a file\n *\n * @param file the file\n * @return the code\n * @throws IOException IOException\n */\nstatic String readCode(File file) throws IOException {\n    byte[] data = Files.readAllBytes(file.toPath());\n    return new String(data, StandardCharsets.UTF_8);\n}"
            ],
            [
                "create",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Creates a new application instance\n *\n * @param type the type of the process\n * @param attr the elements attributes\n * @return the created process handler\n */\nstatic Application create(Type type, ElementAttributes attr) {\n    switch(type) {\n        case Generic:\n            return new ApplicationGeneric();\n        case GHDL:\n            return new ApplicationGHDL(attr);\n        case IVERILOG:\n            return new ApplicationIVerilog(attr);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "start",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Helper to start a process.\n * If result value is not null an exception is thrown.\n *\n * @param dir  the folder in which the process is started\n * @param args the argument\n * @return the console output\n * @throws IOException IOException\n */\npublic static String start(File dir, String... args) throws IOException {\n    ProcessBuilder pb = new ProcessBuilder(args).redirectErrorStream(true);\n    if (dir != null)\n        pb.directory(dir);\n    Process p;\n    try {\n        p = pb.start();\n    } catch (IOException e) {\n        throw new CouldNotStartProcessException(Lang.get(\"err_couldNotStartProcess_N\", Arrays.toString(args)), e);\n    }\n    ReaderThread rt = new ReaderThread(p.getInputStream());\n    rt.start();\n    try {\n        int exitValue = p.waitFor();\n        rt.join();\n        String output = rt.toString();\n        if (exitValue != 0)\n            throw new IOException(Lang.get(\"err_exitValueNotNull_N_O\", exitValue, output));\n        return output;\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n}"
            ],
            [
                "joinStrings",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Merges the given string.\n * If all strings are null or empty, null is returned\n *\n * @param strings the strings to join\n * @return the joined string or null\n */\npublic static String joinStrings(String... strings) {\n    StringBuilder sb = new StringBuilder();\n    for (String s : strings) {\n        if (s != null) {\n            String str = s.trim();\n            if (str.length() > 0) {\n                if (sb.length() > 0)\n                    sb.append(\"\\n\");\n                sb.append(str);\n            }\n        }\n    }\n    if (sb.length() > 0)\n        return sb.toString();\n    else\n        return null;\n}"
            ],
            [
                "fromString",
                "de.neemann.digital.cli.cli",
                "Argument",
                "/**\n * Creates a value from a string\n *\n * @param val      the value as a string\n * @param defValue the default value\n * @return the value converted to the type of the default value\n * @throws CLIException CLIException\n */\npublic static Object fromString(String val, Object defValue) throws CLIException {\n    if (defValue instanceof String)\n        return val;\n    else if (defValue instanceof Boolean)\n        switch(val.toLowerCase()) {\n            case \"yes\":\n            case \"1\":\n            case \"true\":\n                return true;\n            case \"no\":\n            case \"0\":\n            case \"false\":\n                return false;\n            default:\n                throw new CLIException(Lang.get(\"cli_notABool_N\", val), 106);\n        }\n    else if (defValue instanceof Integer) {\n        try {\n            return Integer.parseInt(val);\n        } catch (NumberFormatException e) {\n            throw new CLIException(Lang.get(\"cli_notANumber_N\", val), e);\n        }\n    } else\n        throw new CLIException(Lang.get(\"cli_invalidType_N\", defValue.getClass().getSimpleName()), 203);\n}"
            ],
            [
                "fac",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the factorial of a number.\n * If the result is greater as the max long value, the max value is returned.\n *\n * @param n integer\n * @return the factorial of the given number\n */\npublic static long fac(int n) {\n    if (n > 20)\n        return Long.MAX_VALUE;\n    return FAC_TABLE[n];\n}"
            ],
            [
                "getTimeComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the time complexity of optimizing the given fsm\n *\n * @param fsm the fsm\n * @return the time complexity\n */\npublic static long getTimeComplexity(FSM fsm) {\n    List<State> states = fsm.getStates();\n    int size = states.size();\n    int sizeInclDC = 1 << Bits.binLn2(size - 1);\n    if (sizeInclDC > 20)\n        return Long.MAX_VALUE;\n    return fac(sizeInclDC) / fac(sizeInclDC - size);\n}"
            ],
            [
                "calcComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException {\n    TruthTable tt = fsm.createTruthTable(null);\n    MinimizerInterface mi = new MinimizerQuineMcCluskey();\n    ComplexityListener listener = new ComplexityListener(out);\n    for (int i = 0; i < tt.getResultCount(); i++) mi.minimize(tt.getVars(), tt.getResult(i), tt.getResultName(i), listener);\n    return listener.complexity;\n}"
            ],
            [
                "blink",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Blink\n *\n * @return the fsm\n */\npublic static FSM blink() {\n    State off = new State(\"off\");\n    State on = new State(\"on\");\n    return new FSM(off, on).transition(on, off, null).transition(off, on, null);\n}"
            ],
            [
                "rotDecoder",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a debounced rotary switch decoder\n *\n * @return the fsm\n */\npublic static FSM rotDecoder() {\n    State init = new State(\"init\");\n    State top = new State(\"top\");\n    State topSetLeft = new State(\"topSetLeft\").setValues(\"L=1\");\n    State topSetRight = new State(\"topSetRight\").setValues(\"R=1\");\n    State leftTop = new State(\"leftTop\");\n    State leftBottom = new State(\"leftBottom\");\n    State bottom = new State(\"bottom\");\n    State bottomSetLeft = new State(\"bottomSetRight\").setValues(\"R=1\");\n    State bottomSetRight = new State(\"bottomSetLeft\").setValues(\"L=1\");\n    State rightTop = new State(\"rightTop\");\n    State rightBottom = new State(\"rightBottom\");\n    return new FSM(init, top, topSetLeft, leftTop, leftBottom, bottomSetLeft, bottom, bottomSetRight, rightBottom, rightTop, topSetRight).transition(init, top, \"A=0 & B=0\").transition(init, bottom, \"A=1 & B=1\").transition(top, leftTop, \"A=1 & B=0\").transition(top, rightTop, \"A=0 & B=1\").transition(topSetLeft, top, null).transition(topSetRight, top, null).transition(rightTop, top, \"A=0 & B=0\").transition(rightBottom, topSetRight, \"A=0 & B=0\").transition(leftTop, top, \"A=0 & B=0\").transition(leftBottom, topSetLeft, \"A=0 & B=0\").transition(bottom, leftBottom, \"A=1 & B=0\").transition(bottom, rightBottom, \"A=0 & B=1\").transition(bottomSetLeft, bottom, null).transition(bottomSetRight, bottom, null).transition(rightBottom, bottom, \"A=1 & B=1\").transition(rightTop, bottomSetRight, \"A=1 & B=1\").transition(leftBottom, bottom, \"A=1 & B=1\").transition(leftTop, bottomSetLeft, \"A=1 & B=1\");\n}"
            ],
            [
                "counter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a counter\n *\n * @param n the number of states\n * @return the fsm\n */\npublic static FSM counter(int n) {\n    FSM fsm = new FSM();\n    State last = null;\n    for (int i = 0; i < n; i++) {\n        State s = new State(\"\").setNumber(i);\n        fsm.add(s);\n        if (last != null)\n            fsm.transition(last, s, null);\n        last = s;\n    }\n    fsm.transition(last, fsm.getStates().get(0), null);\n    return fsm;\n}"
            ],
            [
                "trafficLight",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLight() {\n    State red = new State(\"red\").setNumber(0).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(1).setValues(\"R=1,Y=1\");\n    State green = new State(\"green\").setNumber(2).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(3).setValues(\"Y=1\");\n    return new FSM(red, redYellow, green, yellow).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "trafficLightMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLightMedwedew() {\n    State init = new State(\"init\").setNumber(0);\n    State red = new State(\"red\").setNumber(1).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(3).setValues(\"R=1, Y=1\");\n    State green = new State(\"green\").setNumber(4).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(2).setValues(\"Y=1\");\n    return new FSM(init, red, redYellow, green, yellow).transition(init, red, null).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "selCounter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM selCounter() {\n    State s0 = new State(\"s0\").setNumber(0);\n    State s1 = new State(\"s1\").setNumber(1);\n    State s2 = new State(\"s2\").setNumber(2);\n    State s3 = new State(\"s3\").setNumber(3);\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, null).transition(s0, s0, \"!T0  !T1\").transition(s1, s2, null).transition(s1, s0, \"T0 !T1\").transition(s2, s3, null).transition(s2, s0, \"!T0 T1\").transition(s3, s0, null);\n}"
            ],
            [
                "stepper",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepper() {\n    State s0 = new State(\"s0\").setNumber(0).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(1).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(2).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(3).setValues(\"P3=1,P0=1\");\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "stepperMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepperMedwedew() {\n    State init = new State(\"init\").setNumber(0).setValues(\"P0=2,P1=2,P2=2,P3=2\");\n    State s0 = new State(\"s0\").setNumber(3).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(6).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(12).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(9).setValues(\"P3=1,P0=1\");\n    return new FSM(init, s0, s1, s2, s3).transition(init, s0, null).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"fsm\", FSM.class);\n    xStream.alias(\"state\", State.class);\n    xStream.alias(\"transition\", Transition.class);\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"vectorf\", VectorFloat.class);\n    xStream.aliasAttribute(VectorFloat.class, \"x\", \"x\");\n    xStream.aliasAttribute(VectorFloat.class, \"y\", \"y\");\n    return xStream;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename filename\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(File filename) throws IOException {\n    final FSM fsm = loadFSM(new FileInputStream(filename));\n    fsm.file = filename;\n    return fsm;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new fsm instance from a stored file\n *\n * @param in the input stream\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        final FSM fsm = (FSM) xStream.fromXML(in);\n        for (Transition t : fsm.transitions) t.setFSM(fsm);\n        for (State s : fsm.states) s.setFSM(fsm);\n        fsm.modified = false;\n        fsm.activeStateTransition = -1;\n        return fsm;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "get",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string of key if no translation present\n */\npublic static String get(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKey(key, params);\n}"
            ],
            [
                "getNull",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string or null if no translation present\n */\npublic static String getNull(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKeyNull(key, params);\n}"
            ],
            [
                "getBundle",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the resource bundle\n */\npublic static Bundle getBundle() {\n    return InstanceHolder.INSTANCE.bundle;\n}"
            ],
            [
                "currentLanguage",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the current language\n */\npublic static Language currentLanguage() {\n    return InstanceHolder.INSTANCE.currentLanguage;\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * Resolves a multilingual user defined string.\n * Allows the user to define multilingual content by using a simple syntax:\n * You can enter strings like \"Word! {{de Welt!}} {{fr Monde!}}\". This method extracts\n * the appropriate string for the current language.\n *\n * @param text the complete text description\n * @return the evaluated text.\n */\npublic static String evalMultilingualContent(String text) {\n    return evalMultilingualContent(text, currentLanguage());\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "static String evalMultilingualContent(String text, Language currentLanguage) {\n    int pos = text.indexOf(\"{{\");\n    if (pos < 0)\n        return text;\n    String def = text.substring(0, pos).trim();\n    do {\n        int p2 = pos + 1;\n        int count = 1;\n        while (count > 0) {\n            char c = text.charAt(p2);\n            if (c == '{')\n                count++;\n            else if (c == '}')\n                count--;\n            p2++;\n            if (p2 == text.length() && count > 0) {\n                p2 = 1;\n                break;\n            }\n        }\n        p2 -= 2;\n        if (p2 > pos + 3) {\n            String l = text.substring(pos + 2, pos + 4);\n            if (l.equalsIgnoreCase(currentLanguage.getName()))\n                return text.substring(pos + 4, p2).trim();\n            if (l.equalsIgnoreCase(\"en\") && def.isEmpty())\n                def = text.substring(pos + 4, p2).trim();\n            pos = text.indexOf(\"{{\", p2);\n        } else\n            return def;\n    } while (pos > 0);\n    return def;\n}"
            ],
            [
                "lowest",
                "de.neemann.digital.testing.parser",
                "OperatorPrecedence",
                "/**\n * @return the lowest operator precedence to start evaluation with\n */\npublic static OperatorPrecedence lowest() {\n    return OR;\n}"
            ],
            [
                "addOne",
                "de.neemann.digital.analyse",
                "ModelAnalyser",
                "/**\n * Adds the \"+1\" to the variables name\n *\n * @param name the vars name\n * @return the modified name\n */\npublic static String addOne(String name) {\n    if (name.endsWith(\"^n\"))\n        return name.substring(0, name.length() - 1) + \"{n+1}\";\n    else\n        return name + \"+1\";\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param file the file\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(File file) throws IOException {\n    return readCSV(new FileReader(file));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the string to read\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(String csv) throws IOException {\n    return readCSV(new StringReader(csv));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the reader\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(Reader csv) throws IOException {\n    BufferedReader r = new BufferedReader(csv);\n    TruthTable tt = readHeader(r);\n    while (true) {\n        String line = r.readLine();\n        if (line == null)\n            return tt;\n        line = line.trim();\n        if (!line.isEmpty())\n            parseLine(tt, line);\n    }\n}"
            ],
            [
                "createDoubledValues",
                "de.neemann.digital.analyse.quinemc",
                "BoolTableByteArray",
                "/**\n * Creates a table where all values added twive\n *\n * @param values the original values\n * @return the new values\n */\npublic static BoolTableByteArray createDoubledValues(BoolTable values) {\n    BoolTableByteArray t = new BoolTableByteArray(values.size() * 2);\n    for (int i = 0; i < values.size(); i++) {\n        int v = values.get(i).asInt();\n        t.set(i * 2, v);\n        t.set(i * 2 + 1, v);\n    }\n    return t;\n}"
            ],
            [
                "simplify",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Simplifies the given expression.\n * If no simplification was found, the original expression is returned unchanged.\n *\n * @param expression the expression to simplify\n * @return the simplified expression\n * @throws ExpressionException ExpressionException\n */\npublic static Expression simplify(Expression expression) throws ExpressionException {\n    int initialCplx = expression.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    Expression newExp = new QuineMcCluskey(expression).simplify().getExpression();\n    int newCplx = newExp.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    if (newCplx < initialCplx)\n        return newExp;\n    else\n        return expression;\n}"
            ],
            [
                "addAnd",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Creates the final expression\n *\n * @param e         the expression to complete\n * @param rows      the rows to add\n * @param variables the variables to use to build the expression\n * @return the expression\n */\npublic static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables) {\n    for (TableRow r : rows) {\n        Expression n = r.getExpression(variables);\n        if (e == null)\n            e = n;\n        else\n            e = or(e, n);\n    }\n    return e;\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from a bool\n *\n * @param bool the bool\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(boolean bool) {\n    if (bool) {\n        return one;\n    } else {\n        return zero;\n    }\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from an int\n * 0 and 1 work as expected, any other value means \"dont care\"\n *\n * @param value the value\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(int value) {\n    switch(value) {\n        case 0:\n            return ThreeStateValue.zero;\n        case 1:\n            return ThreeStateValue.one;\n        default:\n            return ThreeStateValue.dontCare;\n    }\n}"
            ],
            [
                "doImplicitTypeCasts",
                "de.neemann.digital.analyse",
                "SubstituteLibrary",
                "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val) {\n    if (expectedClass == Integer.class && val instanceof Long) {\n        long l = (Long) val;\n        if (l <= Integer.MAX_VALUE && l >= Integer.MIN_VALUE)\n            return (int) l;\n    } else if (expectedClass == Long.class && val instanceof Number) {\n        return ((Number) val).longValue();\n    } else if (expectedClass == Color.class && val instanceof Number) {\n        return new Color(((Number) val).intValue());\n    } else if (expectedClass == Boolean.class && val instanceof Number) {\n        long b = ((Number) val).longValue();\n        return b != 0;\n    } else if (expectedClass == InValue.class) {\n        if (val instanceof Number)\n            return new InValue(((Number) val).longValue());\n        else {\n            try {\n                return new InValue(val.toString());\n            } catch (Bits.NumberFormatException e) {\n                return val;\n            }\n        }\n    } else if (expectedClass == InverterConfig.class && val instanceof java.util.List) {\n        InverterConfig.Builder b = new InverterConfig.Builder();\n        for (Object i : (java.util.List) val) b.add(i.toString());\n        return b.build();\n    } else if (expectedClass == DataField.class && val instanceof java.util.List) {\n        java.util.List list = (java.util.List) val;\n        long[] longs = new long[list.size()];\n        for (int i = 0; i < list.size(); i++) if (list.get(i) instanceof Number)\n            longs[i] = ((Number) list.get(i)).longValue();\n        else\n            return val;\n        return new DataField(longs);\n    } else if (expectedClass == Rotation.class && val instanceof Number) {\n        int r = ((Number) val).intValue();\n        return new Rotation(r % 4);\n    } else if (expectedClass == File.class && val instanceof String) {\n        return new File(val.toString());\n    } else if (expectedClass == TestCaseDescription.class && val instanceof String) {\n        try {\n            return new TestCaseDescription(val.toString());\n        } catch (Exception e) {\n            return val;\n        }\n    } else if (expectedClass.isEnum() && val instanceof Number) {\n        Class<Enum<?>> e = (Class<Enum<?>>) expectedClass;\n        Object[] values = e.getEnumConstants();\n        int index = ((Number) val).intValue();\n        if (index < 0 || index >= values.length)\n            return values[0];\n        else\n            return values[index];\n    }\n    return val;\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Iterable<Expression> exp) {\n    return simplify(new Or(exp, true));\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), true));\n}"
            ],
            [
                "xor",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new XOR expression\n *\n * @param a the expression to XOR\n * @param b the expression to XOR\n * @return the created expression\n */\npublic static Expression xor(Expression a, Expression b) {\n    if (b == Constant.ONE) {\n        return Not.not(a);\n    } else if (b == Constant.ZERO) {\n        return a;\n    } else if (a == Constant.ONE) {\n        return Not.not(b);\n    } else if (a == Constant.ZERO) {\n        return b;\n    } else\n        return simplify(new XOr(a, b));\n}"
            ],
            [
                "orNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression orNoMerge(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), false));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Iterable<Expression> exp) {\n    return simplify(new And(exp, true));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), true));\n}"
            ],
            [
                "andNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression andNoMerge(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), false));\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifier\n *\n * @param expression the expression to modify\n * @param modifier   the modifier to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier modifier) {\n    expression.modify(modifier);\n    return modifier.modify(expression);\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifiers\n *\n * @param expression the expression to modify\n * @param modifiers  the modifiers to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier... modifiers) {\n    for (ExpressionModifier m : modifiers) expression = modifyExpression(expression, m);\n    return expression;\n}"
            ],
            [
                "v",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates a new Variable\n *\n * @param name the variables name\n * @return the new Variable\n */\npublic static Variable v(String name) {\n    return new Variable(name);\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates an array of variables\n *\n * @param n the number of varfiables to create.\n * @return variables named \"A0\", \"A1\", \"A2\" and so on\n */\npublic static ArrayList<Variable> vars(int n) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (int i = 0; i < n; i++) v.add(new Variable(\"\" + (char) ('A' + i)));\n    return v;\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Create a list of variables using the given names\n *\n * @param names the names used to create the variables\n * @return the list of variables\n */\npublic static ArrayList<Variable> vars(String... names) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (String n : names) v.add(new Variable(n));\n    return v;\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable.\n */\npublic static boolean isVar(Expression e) {\n    return e instanceof Variable;\n}"
            ],
            [
                "isVarOrNotVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable or a inverted variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable or a inverted variable.\n */\npublic static boolean isVarOrNotVar(Expression e) {\n    return isVar(e) || (e instanceof Not && isVar(((Not) e).getExpression()));\n}"
            ],
            [
                "getDefaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * @return the default format\n */\npublic static FormatToExpression getDefaultFormat() {\n    return Settings.getInstance().get(Keys.SETTINGS_EXPRESSION_FORMAT);\n}"
            ],
            [
                "defaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * Formats a expression to a string.\n * Uses the default format for presentation on the screen.\n *\n * @param exp the expression to format\n * @return the string representation\n */\npublic static String defaultFormat(Expression exp) {\n    return getDefaultFormat().format(exp);\n}"
            ],
            [
                "not",
                "de.neemann.digital.analyse.expression",
                "Not",
                "/**\n * Creates a not expression.\n * Simplifies the expression if possible.\n *\n * @param a the child expression to invert\n * @return the inverted expression\n */\npublic static Expression not(Expression a) {\n    if (a == Constant.ONE)\n        return Constant.ZERO;\n    if (a == Constant.ZERO)\n        return Constant.ONE;\n    if (a instanceof Not && !((Not) a).protect) {\n        return ((Not) a).expression;\n    } else\n        return new Not(a);\n}"
            ],
            [
                "readFromFile",
                "de.neemann.digital.analyse",
                "TruthTable",
                "/**\n * Load the given file and returns a truth table instance\n *\n * @param filename filename\n * @return the {@link TruthTable}\n * @throws IOException IOException\n */\npublic static TruthTable readFromFile(File filename) throws IOException {\n    if (filename.getName().toLowerCase().endsWith(\".csv\"))\n        return CSVImporter.readCSV(filename);\n    else {\n        XStream xStream = getxStream();\n        try (InputStream in = new FileInputStream(filename)) {\n            return (TruthTable) xStream.fromXML(in);\n        }\n    }\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param s the signal\n * @return the port pins used\n */\npublic static SplitPinString create(Signal s) {\n    if (s.missingPinNumber())\n        return EMPTY;\n    return create(s.getPinNumber());\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param pinStr the pins definition;\n * @return the port pins used\n */\npublic static SplitPinString create(String pinStr) {\n    if (pinStr == null || pinStr.trim().length() == 0)\n        return EMPTY;\n    StringTokenizer st = new StringTokenizer(pinStr, \",;\");\n    ArrayList<String> pins = new ArrayList<>();\n    while (st.hasMoreTokens()) pins.add(st.nextToken().trim());\n    return new PinsArray(pins);\n}"
            ],
            [
                "checkSuffix",
                "de.neemann.digital.gui",
                "SaveAsHelper",
                "/**\n * Adds the given suffix to the file\n *\n * @param filename filename\n * @param suffix   suffix\n * @return the file name with the given suffix\n */\npublic static File checkSuffix(File filename, String suffix) {\n    if (suffix == null || filename == null)\n        return filename;\n    String name = filename.getName();\n    int p = name.lastIndexOf('.');\n    if (p >= 0) {\n        String suf = name.substring(p + 1).toLowerCase();\n        if (KNOWN.contains(suf))\n            name = name.substring(0, p);\n        while (name.length() > 0 && name.charAt(name.length() - 1) == '.') name = name.substring(0, name.length() - 1);\n    }\n    return new File(filename.getParentFile(), name + \".\" + suffix);\n}"
            ],
            [
                "addF1Traversal",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Adds F1 as a focus traversal key to a text components.\n *\n * @param text The text component\n * @param <TC> the concrete type of the text component\n * @return the given text component\n */\npublic static <TC extends JTextComponent> TC addF1Traversal(TC text) {\n    HashSet<AWTKeyStroke> set = new HashSet<>(text.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n    set.add(KeyStroke.getKeyStroke(\"F1\"));\n    text.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, set);\n    return text;\n}"
            ],
            [
                "createUndoManager",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Enables undo in the given text component.\n *\n * @param text the text component\n * @return the undo manager\n */\npublic static UndoManager createUndoManager(JTextComponent text) {\n    final UndoManager undoManager;\n    undoManager = new UndoManager();\n    text.getDocument().addUndoableEditListener(undoManager);\n    text.addKeyListener(new KeyAdapter() {\n\n        @Override\n        public void keyPressed(KeyEvent e) {\n            if (e.getKeyCode() == KeyEvent.VK_Z && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canUndo())\n                    undoManager.undo();\n            } else if (e.getKeyCode() == KeyEvent.VK_Y && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canRedo())\n                    undoManager.redo();\n            }\n        }\n    });\n    return undoManager;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components.modification",
                "ModifyInsertWires",
                "/**\n * Creates a simplified modification.\n *\n * @param newWires the wires to insert\n * @return the modification\n */\npublic static Modification<Circuit> create(List<Wire> newWires) {\n    switch(newWires.size()) {\n        case 0:\n            return null;\n        case 1:\n            return new ModifyInsertWire(newWires.get(0));\n        default:\n            return new ModifyInsertWires(newWires);\n    }\n}"
            ],
            [
                "getToolTipName",
                "de.neemann.digital.gui.components.modification",
                "ModificationOfVisualElement",
                "/**\n * Creates a translated name of the given element\n *\n * @param ve the element\n * @return translated name\n */\npublic static String getToolTipName(VisualElement ve) {\n    String s = Lang.getNull(\"elem_\" + ve.getElementName());\n    if (s == null) {\n        s = ve.getElementName();\n        if (s.endsWith(\".dig\"))\n            s = s.substring(0, s.length() - 4);\n    }\n    String l = ve.getElementAttributes().get(Keys.LABEL);\n    if (l.length() > 0)\n        s += \" (\" + l + \")\";\n    return s;\n}"
            ],
            [
                "getTerminal",
                "de.neemann.digital.gui.components.terminal",
                "TerminalDialog",
                "/**\n * Creates a new GUI terminal\n *\n * @param model the model\n * @param attr  the terminals attributes\n * @return the terminal interface\n */\nstatic TerminalInterface getTerminal(Model model, ElementAttributes attr) {\n    return new MyTerminal(model, attr);\n}"
            ],
            [
                "createList",
                "de.neemann.digital.gui.components",
                "CircuitTransferable",
                "/**\n * Creates a list of objects from inserted data\n * Can also throw a {@link ClassCastException}!\n *\n * @param data         the inserted data\n * @param shapeFactory the shapeFactory to set to the elements\n * @return the elements or null\n * @throws IOException IOException\n */\npublic static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException {\n    if (!(data instanceof String))\n        return null;\n    XStream xStream = Circuit.getxStream();\n    try (Reader in = new StringReader(data.toString())) {\n        ArrayList<Movable> elements = (ArrayList<Movable>) xStream.fromXML(in);\n        if (elements == null)\n            return null;\n        for (Movable m : elements) if (m instanceof VisualElement)\n            ((VisualElement) m).setShapeFactory(shapeFactory);\n        return elements;\n    }\n}"
            ],
            [
                "createURLStreamHandlerFactory",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "/**\n * @return factory which catches 'image' protocol requests to deliver images via an URL.\n */\npublic static URLStreamHandlerFactory createURLStreamHandlerFactory() {\n    return new MyURLStreamHandlerFactory();\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "MyURLStreamHandlerFactory",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "isSequentialVar",
                "de.neemann.digital.gui.components.table",
                "ExpressionListenerJK",
                "/**\n * If the name belongs to a sequential state var, the state vars name is returned.\n * Otherwise a null is returned\n *\n * @param name the name of the variable\n * @return the state variable or null\n */\npublic static String isSequentialVar(String name) {\n    String detName = null;\n    if (name.endsWith(\"n+1\")) {\n        detName = name.substring(0, name.length() - 2);\n    } else if (name.endsWith(\"{n+1}\")) {\n        detName = name.substring(0, name.length() - 5) + \"n\";\n    }\n    return detName;\n}"
            ],
            [
                "getAttrList",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * @return returns the list of circuit attributes\n */\npublic static ArrayList<Key> getAttrList() {\n    return ATTR_LIST;\n}"
            ],
            [
                "raster",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * rounds the given vector to the raster\n *\n * @param pos the vector\n * @return pos round to raster\n */\npublic static Vector raster(Vector pos) {\n    return new Vector((int) Math.round((double) pos.x / SIZE) * SIZE, (int) Math.round((double) pos.y / SIZE) * SIZE);\n}"
            ],
            [
                "createLiveDialog",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "/**\n * Creates a instance prepared for \"live logging\"\n *\n * @param owner      the parent frame\n * @param model      the model\n * @param microStep  stepping mode\n * @param ordering   the ordering to use\n * @param sampleSize the number of samples\n * @return the created instance\n */\npublic static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize) {\n    String title;\n    if (microStep)\n        title = Lang.get(\"win_measures_microstep\");\n    else\n        title = Lang.get(\"win_measures_fullstep\");\n    ArrayList<Signal> signals = model.getSignalsCopy();\n    signals.removeIf(signal -> !signal.isShowInGraph());\n    new OrderMerger<String, Signal>(ordering) {\n\n        @Override\n        public boolean equals(Signal a, String b) {\n            return a.getName().equals(b);\n        }\n    }.order(signals);\n    ValueTableObserver valueTableObserver = new ValueTableObserver(microStep, signals, sampleSize);\n    GraphDialog graphDialog = new GraphDialog(owner, title, valueTableObserver.getLogData(), model, true).setColumnInfo(createColumnsInfo(signals));\n    graphDialog.addWindowListener(new WindowAdapter() {\n\n        @Override\n        public void windowOpened(WindowEvent e) {\n            model.addObserver(valueTableObserver);\n        }\n\n        @Override\n        public void windowClosed(WindowEvent e) {\n            model.removeObserver(valueTableObserver);\n        }\n    });\n    return graphDialog;\n}"
            ],
            [
                "createColumnsInfo",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals) {\n    ValueTable.ColumnInfo[] info = new ValueTable.ColumnInfo[signals.size()];\n    for (int i = 0; i < signals.size(); i++) {\n        Signal s = signals.get(i);\n        info[i] = new ValueTable.ColumnInfo(s.getFormat(), s.getValue().getBits());\n    }\n    return info;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "isExperimentalMode",
                "de.neemann.digital.gui",
                "Main",
                "/**\n * @return true if experimental features are enabled\n */\npublic static boolean isExperimentalMode() {\n    return experimental;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "WindowManager",
                "/**\n * @return the WindowManager\n */\npublic static WindowManager getInstance() {\n    return InstanceHolderClass.INSTANCE;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "Settings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static Settings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "getRange",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog bit range\n *\n * @param bits the number of bits\n * @return the bit range\n */\npublic static String getRange(int bits) {\n    if (bits == 1)\n        return \"\";\n    else\n        return \"[\" + (bits - 1) + \":0]\";\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog type for a signal\n *\n * @param def  the signal type (input or output) used if dir is not \"inout\"\n * @param dir  used to check if direction is \"inout\"\n * @param bits the number of bits\n * @return the verilog signal type\n */\npublic static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits) {\n    String result;\n    if (dir == HDLPort.Direction.INOUT)\n        result = \"inout\";\n    else\n        result = (def == HDLPort.Direction.IN) ? \"input\" : \"output\";\n    if (bits > 1) {\n        result += \" [\" + (bits - 1) + \":0]\";\n    }\n    return result;\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    return (bits + \"'b\" + s);\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.verilog2.lib",
                "VerilogTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given\n * element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(MODULE_PREFIX + elementName);\n}"
            ],
            [
                "createFromJar",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n *\n * @param path the path of the file to load\n * @param cl   the classloader used to load the template. If set to null, the SystemClassLoader is used\n * @return the statement\n * @throws IOException     IOException\n * @throws ParserException ParserException\n */\npublic static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException {\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    InputStream in = cl.getResourceAsStream(path);\n    if (in == null)\n        throw new FileNotFoundException(\"file not found: \" + path);\n    try (Reader r = new InputStreamReader(in, StandardCharsets.UTF_8)) {\n        Parser p = new Parser(r, path);\n        return p.parse();\n    }\n}"
            ],
            [
                "createFromJarStatic",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n * Throws only a RuntimeException so use with care!\n *\n * @param path the path of the file to load\n * @return the statement\n */\npublic static Statement createFromJarStatic(String path) {\n    try {\n        return createFromJar(path, null);\n    } catch (IOException | ParserException e) {\n        throw new RuntimeException(\"could not parse: \" + path, e);\n    }\n}"
            ],
            [
                "isWhiteSpace",
                "de.neemann.digital.hdl.hgs",
                "Tokenizer",
                "/**\n * Returns true if the given character is a white space.\n *\n * @param c the character to test\n * @return true in c is a white space\n */\npublic static boolean isWhiteSpace(int c) {\n    return c == ' ' || c == '\\t' || c == '\\n' || c == '\\r';\n}"
            ],
            [
                "toLong",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a long\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static long toLong(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toDouble",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a double\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static double toDouble(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).doubleValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toInt",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an int\n *\n * @param value the value to convert\n * @return the int value\n * @throws HGSEvalException HGSEvalException\n */\npublic static int toInt(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).intValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toBool",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a bool\n *\n * @param value the value to convert\n * @return the bool value\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean toBool(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue() != 0;\n    if (value instanceof Boolean)\n        return ((Boolean) value);\n    throw new HGSEvalException(\"Must be an integer or a bool, is: \" + value.getClass().getSimpleName() + \"=\" + value);\n}"
            ],
            [
                "toString",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a string\n *\n * @param value the value to convert\n * @return the string\n * @throws HGSEvalException HGSEvalException\n */\npublic static String toString(Object value) throws HGSEvalException {\n    if (value instanceof String)\n        return value.toString();\n    throw new HGSEvalException(\"must be a string, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toArray",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an array\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSArray toArray(Object value) throws HGSEvalException {\n    if (value instanceof HGSArray)\n        return (HGSArray) value;\n    if (value instanceof List)\n        return new HGSArrayList((List) value);\n    throw new HGSEvalException(\"must be an array, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toMap",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a map\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSMap toMap(Object value) throws HGSEvalException {\n    if (value instanceof HGSMap)\n        return (HGSMap) value;\n    if (value instanceof Map)\n        return new HGSMapMap((Map) value);\n    throw new HGSEvalException(\"must be a map, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "equals",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Compares two values\n *\n * @param a a value\n * @param b a value\n * @return true if both values are equal\n */\npublic static boolean equals(Object a, Object b) {\n    if (a instanceof Double || b instanceof Double)\n        return a.equals(b);\n    else if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() == ((Number) b).longValue();\n    else if (a instanceof String || b instanceof String)\n        return a.toString().equals(b.toString());\n    else\n        return a.equals(b);\n}"
            ],
            [
                "add",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Adds two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object add(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) + toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() + ((Number) b).longValue();\n    if (a instanceof String || b instanceof String)\n        return a.toString() + b.toString();\n    throw new HGSEvalException(\"arguments must be int or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "sub",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Subtracts two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object sub(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) - toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() - ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "mul",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Multiplies two values\n *\n * @param a a value\n * @param b a value\n * @return the product\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object mul(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) * toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() * ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "div",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Divides two numbers\n *\n * @param a a value\n * @param b a value\n * @return the quotient\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object div(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) / toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() / ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "or",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an or operation\n *\n * @param a a value\n * @param b a value\n * @return the or'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object or(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() | ((Number) b).longValue();\n    return toBool(a) || toBool(b);\n}"
            ],
            [
                "xor",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an xor operation\n *\n * @param a a value\n * @param b a value\n * @return the xor'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object xor(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() ^ ((Number) b).longValue();\n    return toBool(a) ^ toBool(b);\n}"
            ],
            [
                "and",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an and operation\n *\n * @param a a value\n * @param b a value\n * @return the and'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object and(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() & ((Number) b).longValue();\n    return toBool(a) && toBool(b);\n}"
            ],
            [
                "not",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs a not operation\n *\n * @param value a value\n * @return the inverted value\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object not(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ~((Number) value).longValue();\n    return !toBool(value);\n}"
            ],
            [
                "neg",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Changes the sign of the given value\n *\n * @param value the value\n * @return value with changed sign\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object neg(Object value) throws HGSEvalException {\n    if (value instanceof Double)\n        return -(Double) value;\n    return -toLong(value);\n}"
            ],
            [
                "less",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a&lt;b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean less(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) < toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) < toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) < 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "lessEqual",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a<=b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean lessEqual(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) <= toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) <= toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) <= 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "trimRight",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the right side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimRight(String str) {\n    int initial = str.length() - 1;\n    int pos = initial;\n    while (pos >= 0 && isWhiteSpace(str.charAt(pos))) pos--;\n    if (pos == initial)\n        return str;\n    else\n        return str.substring(0, pos + 1);\n}"
            ],
            [
                "trimLeft",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the left side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimLeft(String str) {\n    int pos = 0;\n    while (pos < str.length() && isWhiteSpace(str.charAt(pos))) pos++;\n    if (pos == 0)\n        return str;\n    else\n        return str.substring(pos);\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Returns the vhdl type name\n *\n * @param bits the number of bits\n * @return the types name\n */\npublic static String getType(int bits) {\n    if (bits == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector(\" + (bits - 1) + \" downto 0)\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    int missing = bits - s.length();\n    if (missing > 0)\n        s = ZEROS.substring(0, missing) + s;\n    if (bits > 1)\n        s = \"\\\"\" + s + \"\\\"\";\n    else\n        s = \"'\" + s + \"'\";\n    return s;\n}"
            ],
            [
                "isTemplate",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Returns true, if a hdl template is available.\n *\n * @param etd the {@link ElementTypeDescription}\n * @return true if VHDL template is available\n */\npublic static boolean isTemplate(ElementTypeDescription etd) {\n    ClassLoader cl = etd.getClassLoader();\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    URL url = cl.getResource(createFileName(ENTITY_PREFIX + etd.getName()));\n    return url != null;\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(ENTITY_PREFIX + elementName);\n}"
            ],
            [
                "zero",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Create a vhdl zero with the given bit number\n *\n * @param bits the bit number\n * @return '0' or (others => '0')\n */\npublic static String zero(long bits) {\n    if (bits == 1)\n        return \"'0'\";\n    else\n        return \"(others => '0')\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, long bits) {\n    return VHDLCreator.value(val, (int) bits);\n}"
            ],
            [
                "genericType",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates the code for a generic type\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String genericType(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector ((Bits-1) downto 0)\";\n}"
            ],
            [
                "type",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a type of given width\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String type(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector (\" + (n - 1) + \" downto 0)\";\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.hdl.model2.expression",
                "Expression",
                "/**\n * Helper to check if an expression is a net reference\n *\n * @param expr the expression to check\n * @param net  the net\n * @return true if the expression is a reference to the given net\n */\nstatic boolean isVar(Expression expr, HDLNet net) {\n    return expr instanceof ExprVar && ((ExprVar) expr).getNet() == net;\n}"
            ],
            [
                "isConstant",
                "de.neemann.digital.hdl.model2.expression",
                "ExprConstant",
                "/**\n * Returns the constant if th given node represents a constant\n *\n * @param node the node\n * @return the constant of null if node is not a constant\n */\npublic static ExprConstant isConstant(HDLNode node) {\n    if (node instanceof HDLNodeAssignment) {\n        HDLNodeAssignment expr = (HDLNodeAssignment) node;\n        if (expr.getExpression() instanceof ExprConstant) {\n            return (ExprConstant) expr.getExpression();\n        }\n    }\n    return null;\n}"
            ],
            [
                "getHighZ",
                "de.neemann.digital.data",
                "Value",
                "/**\n * @return returns a high z value\n */\npublic static Value getHighZ() {\n    return new Value(0, Type.HIGHZ);\n}"
            ],
            [
                "calcBackOffset",
                "de.neemann.digital.builder.circuit",
                "FragmentExpression",
                "static int calcBackOffset(int size, int i) {\n    if ((size & 1) != 0 && i == (size - 1) / 2)\n        return 0;\n    if (i >= size / 2)\n        return size - i;\n    else\n        return i + 1;\n}"
            ],
            [
                "isXNor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXNor(long[] data) {\n    for (int i = 0; i < data.length; i++) if ((Integer.bitCount(i) & 1) == data[i])\n        return false;\n    return true;\n}"
            ],
            [
                "isXor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXor(long[] data) {\n    for (int i = 0; i < data.length; i++) if (!((Integer.bitCount(i) & 1) == data[i]))\n        return false;\n    return true;\n}"
            ],
            [
                "getLibPath",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * @return the additional library path\n */\npublic static File getLibPath() {\n    String path;\n    try {\n        path = ElementLibrary.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath().replace('\\\\', '/');\n    } catch (URISyntaxException e) {\n        return new File(\"noLibFound\");\n    }\n    if (path.endsWith(\"/target/classes/\"))\n        return toCanonical(new File(path.substring(0, path.length() - 16) + \"/src/main/dig/lib\"));\n    if (path.endsWith(\"/target/Digital.jar\"))\n        return new File(path.substring(0, path.length() - 19) + \"/src/main/dig/lib\");\n    if (path.endsWith(\"Digital.jar\"))\n        return new File(path.substring(0, path.length() - 12) + \"/lib\");\n    return new File(\"noLibFound\");\n}"
            ],
            [
                "createCustomDescription",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * Creates a custom element description.\n *\n * @param file    the file\n * @param circuit the circuit\n * @param library the library\n * @return the type description\n * @throws PinException PinException\n */\npublic static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException {\n    ElementTypeDescriptionCustom d = new ElementTypeDescriptionCustom(file, circuit, library);\n    d.setElementFactory(attributes -> new CustomElement(d));\n    return d;\n}"
            ],
            [
                "createDeclarationDefault",
                "de.neemann.digital.draw.library",
                "ElementTypeDescriptionCustom",
                "/**\n * Creates the default for custom element declarations\n *\n * @param circuit the circuit\n * @return the default code template\n * @throws NodeException NodeException\n */\npublic static String createDeclarationDefault(Circuit circuit) throws NodeException {\n    TreeSet<String> nameSet = new TreeSet<>();\n    for (VisualElement ve : circuit.getElements()) {\n        String gen = ve.getElementAttributes().get(Keys.GENERIC).trim();\n        if (!gen.isEmpty()) {\n            try {\n                Parser p = new Parser(gen);\n                p.enableRefReadCollection();\n                p.parse(false);\n                for (Reference r : p.getRefsRead()) {\n                    if (r instanceof ReferenceToStruct) {\n                        ReferenceToStruct st = (ReferenceToStruct) r;\n                        if (st.getParent() instanceof ReferenceToVar) {\n                            ReferenceToVar var = (ReferenceToVar) st.getParent();\n                            if (var.getName().equals(\"args\")) {\n                                nameSet.add(st.getName());\n                            }\n                        }\n                    }\n                }\n            } catch (ParserException | IOException e) {\n                final NodeException ex = new NodeException(Lang.get(\"err_evaluatingGenericsCode_N_N\", ve, gen), e);\n                ex.setOrigin(circuit.getOrigin());\n                throw ex;\n            }\n        }\n    }\n    StringBuilder sb = new StringBuilder();\n    for (String name : nameSet) sb.append(name).append(\" := ;\\n\");\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Returns a comparator instance\n *\n * @return the singleton instance\n */\npublic static NumStringComparator getInstance() {\n    return InstanceHolder.INSTANCE;\n}"
            ],
            [
                "compareStr",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Compare two strings\n *\n * @param a a string\n * @param b a string\n * @return the comparison result\n */\npublic static int compareStr(String a, String b) {\n    int pa = 0;\n    int pb = 0;\n    while (true) {\n        final boolean ae = pa == a.length();\n        final boolean be = pb == b.length();\n        if (ae && be)\n            return 0;\n        else if (ae)\n            return -1;\n        else if (be)\n            return 1;\n        char ca = Character.toLowerCase(a.charAt(pa));\n        char cb = Character.toLowerCase(b.charAt(pb));\n        if (isDigit(ca) && isDigit(cb)) {\n            ParseNumber da = new ParseNumber(a, pa);\n            ParseNumber db = new ParseNumber(b, pb);\n            int c = Integer.compare(da.num, db.num);\n            if (c != 0)\n                return c;\n            else {\n                pa = da.p;\n                pb = db.p;\n            }\n        } else {\n            int c = Character.compare(ca, cb);\n            if (c != 0) {\n                return c;\n            } else {\n                pa++;\n                pb++;\n            }\n        }\n    }\n}"
            ],
            [
                "createPins",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Creates pins\n *\n * @param inputs    the inputs\n * @param outputs   the outputs\n * @param invert    true if invert output\n * @param ic        input inverter configuration\n * @param wideShape true if a wide shape is selected\n * @return the pins\n */\npublic static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape) {\n    return createPins(inputs, outputs, invert, wideShape ? 4 : 3, true, ic);\n}"
            ],
            [
                "readStyle",
                "de.neemann.digital.draw.shapes.custom.svg",
                "Context",
                "static Context readStyle(Context context, String style) throws SvgException {\n    SVGTokenizer t = new SVGTokenizer(style);\n    while (true) {\n        final String command = t.readTo(':');\n        if (command.length() == 0)\n            break;\n        final String value = t.readTo(';');\n        AttrParser p = PARSER.get(command);\n        if (p != null)\n            p.parse(context, value);\n    }\n    return context;\n}"
            ],
            [
                "getOutSize",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static int getOutSize(boolean small) {\n    if (small)\n        return SIZE2;\n    else\n        return OUT_SIZE;\n}"
            ],
            [
                "getOutStyle",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static Style getOutStyle(boolean small) {\n    if (small)\n        return Style.THIN;\n    else\n        return Style.NORMAL;\n}"
            ],
            [
                "getOutRad",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Inner circle size used for inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the output circle radius as a vector\n */\npublic static Vector getOutRad(boolean small) {\n    int s = getOutSize(small);\n    return new Vector(s - 6, s - 6);\n}"
            ],
            [
                "createTransform",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static Transform createTransform(int size) {\n    if (size == 2)\n        return Transform.IDENTITY;\n    else {\n        final TransformTranslate tr1 = new TransformTranslate(-70, -139);\n        final TransformTranslate tr2 = new TransformTranslate(70, 139);\n        float s = (2 + size) / 4f;\n        final TransformMatrix trm = new TransformMatrix(s, 0, 0, s, 0, 0);\n        return Transform.mul(tr1, Transform.mul(trm, tr2));\n    }\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"attributes\", ElementAttributes.class);\n    xStream.alias(\"visualElement\", VisualElement.class);\n    xStream.alias(\"wire\", Wire.class);\n    xStream.alias(\"circuit\", Circuit.class);\n    xStream.alias(\"intFormat\", IntFormat.class);\n    xStream.alias(\"exprFormat\", FormatToExpression.class);\n    xStream.alias(\"barrelShifterMode\", BarrelShifterMode.class);\n    xStream.alias(\"direction\", LeftRightFormat.class);\n    xStream.alias(\"rotation\", Rotation.class);\n    xStream.aliasAttribute(Rotation.class, \"rotation\", \"rotation\");\n    xStream.alias(\"language\", Language.class);\n    xStream.aliasAttribute(Language.class, \"name\", \"name\");\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"value\", InValue.class);\n    xStream.aliasAttribute(InValue.class, \"value\", \"v\");\n    xStream.aliasAttribute(InValue.class, \"highZ\", \"z\");\n    xStream.addImplicitCollection(ElementAttributes.class, \"attributes\");\n    xStream.alias(\"data\", DataField.class);\n    xStream.registerConverter(new DataFieldConverter());\n    xStream.alias(\"testData\", TestCaseDescription.class);\n    xStream.alias(\"inverterConfig\", InverterConfig.class);\n    xStream.addImplicitCollection(InverterConfig.class, \"inputs\");\n    xStream.alias(\"storedRoms\", ROMManager.class);\n    xStream.addImplicitCollection(ROMManager.class, \"roms\");\n    xStream.alias(\"romList\", ROMManagerFile.class);\n    xStream.alias(\"romFile\", ROMManagerFile.RomContainerFile.class);\n    xStream.alias(\"romData\", ROMManagerFile.RomContainerDataField.class);\n    xStream.alias(\"appType\", Application.Type.class);\n    xStream.ignoreUnknownElements();\n    xStream.alias(\"shape\", CustomShapeDescription.class);\n    xStream.alias(\"pin\", CustomShapeDescription.Pin.class);\n    xStream.alias(\"circle\", CustomShapeDescription.CircleHolder.class);\n    xStream.alias(\"line\", CustomShapeDescription.LineHolder.class);\n    xStream.alias(\"poly\", CustomShapeDescription.PolygonHolder.class);\n    xStream.alias(\"text\", CustomShapeDescription.TextHolder.class);\n    xStream.alias(\"polygon\", Polygon.class);\n    xStream.alias(\"shapeType\", CustomCircuitShapeType.class);\n    xStream.alias(\"transform\", TransformHolder.class);\n    xStream.registerConverter(new PolygonConverter());\n    return xStream;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename     filename\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load \" + filename);\n    final Circuit circuit = loadCircuit(new FileInputStream(filename), shapeFactory);\n    circuit.origin = filename;\n    return circuit;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param in           the input stream\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load stream\");\n    try {\n        XStream xStream = getxStream();\n        Circuit circuit = (Circuit) xStream.fromXML(in);\n        for (VisualElement ve : circuit.getElements()) ve.setShapeFactory(shapeFactory);\n        if (circuit.version == 0) {\n            // convert to version 1\n            for (Wire w : circuit.getWires()) {\n                w.p1 = w.p1.mul(2);\n                w.p2 = w.p2.mul(2);\n            }\n            for (VisualElement e : circuit.getElements()) e.setPos(e.getPos().mul(2));\n            circuit.version = 1;\n        }\n        if (circuit.version < 2) {\n            Object rm = circuit.getAttributes().get(Keys.ROMMANAGER);\n            if (rm instanceof ROMManager) {\n                circuit.getAttributes().set(Keys.ROMMANAGER, new ROMManagerFile((ROMManager) rm));\n            }\n            circuit.version = 2;\n        }\n        return circuit;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "fixGenerics",
                "de.neemann.digital.draw.model",
                "ModelCreator",
                "/**\n * Creates a concrete circuit from a generic on.\n * Uses the included generic init code.\n *\n * @param circuit the generic circuit\n * @param library the element library\n * @return the concrete circuit\n * @throws NodeException            NodeException\n * @throws ElementNotFoundException ElementNotFoundException\n */\npublic static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException {\n    if (circuit.getAttributes().get(Keys.IS_GENERIC))\n        return new ResolveGenerics(circuit, library).resolveCircuit(null).getCircuit();\n    else\n        return circuit;\n}"
            ],
            [
                "createFromPath",
                "de.neemann.digital.draw.graphics",
                "Polygon",
                "/**\n * Creates a polygon from a SVG path\n *\n * @param path the svg path\n * @return the polygon or null if there was an error\n */\npublic static Polygon createFromPath(String path) {\n    try {\n        return new PolygonParser(path).create();\n    } catch (PolygonParser.ParserException e) {\n        return null;\n    }\n}"
            ],
            [
                "vec",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Returns a new vector\n * shorthand for new Vector(x,y)\n *\n * @param x x\n * @param y y\n * @return the vector\n */\npublic static Vector vec(int x, int y) {\n    return new Vector(x, y);\n}"
            ],
            [
                "min",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the minimum vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the minimum\n */\npublic static Vector min(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x)\n            x = p[i].getX();\n        if (p[i].getY() < y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "max",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the maximim vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the maximum\n */\npublic static Vector max(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() > x)\n            x = p[i].getX();\n        if (p[i].getY() > y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "width",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the width of the given vectors.\n *\n * @param p the vectors\n * @return max(p)-min(p)\n */\npublic static Vector width(VectorInterface... p) {\n    int x1 = p[0].getX();\n    int y1 = p[0].getY();\n    int x2 = x1;\n    int y2 = y1;\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x1)\n            x1 = p[i].getX();\n        if (p[i].getY() < y1)\n            y1 = p[i].getY();\n        if (p[i].getX() > x2)\n            x2 = p[i].getX();\n        if (p[i].getY() > y2)\n            y2 = p[i].getY();\n    }\n    return new Vector(x2 - x1, y2 - y1);\n}"
            ],
            [
                "add",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Adds an offset to every vector in the given list\n *\n * @param vectors the original vectors\n * @param offs    the offset\n * @return the new list\n */\npublic static List<Vector> add(List<Vector> vectors, Vector offs) {\n    ArrayList<Vector> newVec = new ArrayList<>();\n    for (Vector v : vectors) newVec.add(v.add(offs));\n    return newVec;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static SVGSettings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "createKeyList",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * @return a list of available SVG export keys\n */\npublic static List<Key> createKeyList() {\n    ArrayList<Key> list = new ArrayList<>();\n    list.add(LATEX);\n    list.add(PINS_IN_MATH_MODE);\n    list.add(HIDE_TEST);\n    list.add(NO_SHAPE_FILLING);\n    list.add(SMALL_IO);\n    list.add(NO_PIN_MARKER);\n    list.add(THINNER_LINES);\n    list.add(HIGH_CONTRAST);\n    list.add(MONOCHROME);\n    return list;\n}"
            ],
            [
                "mul",
                "de.neemann.digital.draw.graphics",
                "Transform",
                "/**\n * Combines the two given transformations to a common transformation\n *\n * @param t1 first transformation\n * @param t2 second transformation\n * @return the resulting transformation\n */\nstatic Transform mul(Transform t1, Transform t2) {\n    TransformMatrix m1 = t1.getMatrix();\n    TransformMatrix m2 = t2.getMatrix();\n    return new TransformMatrix(m1.a * m2.a + m1.c * m2.b, m1.b * m2.a + m1.d * m2.b, m1.a * m2.c + m1.c * m2.d, m1.b * m2.c + m1.d * m2.d, m2.a * m1.x + m2.b * m1.y + m2.x, m2.c * m1.x + m2.d * m1.y + m2.y);\n}"
            ],
            [
                "rotate",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a rotation.\n * Rotates in mathematically positive direction. Takes into account that\n * in Digital the y-axis goes downwards.\n *\n * @param w the angle in 360 grad units\n * @return the transformation\n */\npublic static TransformMatrix rotate(double w) {\n    final double phi = w / 180 * Math.PI;\n    float cos = (float) Math.cos(phi);\n    float sin = (float) Math.sin(phi);\n    return new TransformMatrix(cos, -sin, sin, cos, 0, 0);\n}"
            ],
            [
                "scale",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a scaling transformation\n *\n * @param sx scaling in x direction\n * @param sy scaling in y direction\n * @return the transformation\n */\npublic static TransformMatrix scale(float sx, float sy) {\n    return new TransformMatrix(sx, 0, 0, sy, 0, 0);\n}"
            ],
            [
                "getTextWidth",
                "de.neemann.digital.draw.graphics",
                "GraphicMinMax",
                "/**\n * Returns a approximation of the width of the given text in the given style\n *\n * @param text  the text\n * @param style the style\n * @return the approximated text width\n */\npublic static int getTextWidth(String text, Style style) {\n    final FontRenderContext fontRenderContext = new FontRenderContext(null, true, false);\n    GraphicsFormatter.Fragment f = GraphicsFormatter.createFragment((fragment, font, str) -> {\n        Rectangle2D rec = style.getFont().getStringBounds(str, fontRenderContext);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), 0);\n    }, style.getFont(), text);\n    return f.getWidth();\n}"
            ],
            [
                "getSelected",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * @return the selected color map\n */\npublic static ColorScheme getSelected() {\n    if (instance == null) {\n        updateInstance();\n        Settings.getInstance().getAttributes().addListener(ColorScheme::updateInstance);\n    }\n    return instance;\n}"
            ],
            [
                "getWireStyle",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Returns the wire style depending on the given value\n *\n * @param value the value to represent\n * @return the style\n */\npublic static Style getWireStyle(Value value) {\n    if (value == null || value.getBits() > 1)\n        return WIRE;\n    if (value.isHighZ())\n        return WIRE_HIGHZ;\n    if (value.getValue() == 1)\n        return WIRE_HIGH;\n    else\n        return WIRE_LOW;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text the text\n * @return the string representation\n */\npublic static String format(Text text) {\n    return format(text, FormatToExpression.getDefaultFormat());\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text   the text\n * @param format the format to use\n * @return the string representation\n */\npublic static String format(Text text, FormatToExpression format) {\n    if (text instanceof Simple) {\n        return ((Simple) text).getText();\n    } else if (text instanceof Blank) {\n        return \" \";\n    } else if (text instanceof Character) {\n        return \"\" + ((Character) text).getChar();\n    } else if (text instanceof Decorate) {\n        Decorate d = (Decorate) text;\n        if (d.getStyle() == Decorate.Style.OVERLINE) {\n            final Text content = d.getContent();\n            if (content instanceof Simple || content instanceof Index)\n                return format.getNot() + format(content, format);\n            else\n                return format.getNot() + \"(\" + format(content, format) + \")\";\n        } else\n            return format(d.getContent(), format);\n    } else if (text instanceof Index) {\n        Index i = (Index) text;\n        String str = format(i.getVar(), format);\n        if (i.getSubScript() != null)\n            str += format(i.getSubScript(), format);\n        if (i.getSuperScript() != null)\n            str += format(i.getSuperScript(), format);\n        return str;\n    } else if (text instanceof Sentence) {\n        Sentence s = (Sentence) text;\n        StringBuilder sb = new StringBuilder();\n        for (Text t : s) sb.append(format(t, format));\n        return sb.toString();\n    } else\n        return \"\";\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "SVGFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr   the {@link Graphics2D} instance\n * @param text the text\n * @return the text fragment\n */\npublic static Fragment createFragment(Graphics2D gr, String text) {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), text);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr         the {@link Graphics2D} instance\n * @param expression the expression\n * @return the text fragment\n * @throws FormatterException FormatterException\n */\npublic static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), new ExpressionToText().createText(expression));\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param sizer the sizer instance\n * @param font  the font\n * @param text  the text\n * @return the fragment\n */\npublic static Fragment createFragment(FontSizer sizer, Font font, String text) {\n    Fragment fragment;\n    try {\n        Text t = new Parser(text).parse();\n        fragment = createFragment(sizer, font, t);\n    } catch (ParseException | FormatterException e) {\n        // if there was an exception, return the complete raw text as a fragment\n        fragment = new TextFragment(sizer, font, text);\n    }\n    return fragment;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param exp the expression to format\n * @return the formatted string\n */\npublic static String format(Expression exp) {\n    return format(new ExpressionToText().createText(exp, FormatToExpression.LATEX), true);\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "math",
                "de.neemann.digital.draw.graphics.text.text",
                "Decorate",
                "/**\n * Adds a MATH decoration to the given text.\n * If the text is already decorated the text is returned directly.\n *\n * @param t the text to decorate\n * @return the decorated text\n */\npublic static Text math(Text t) {\n    if (t instanceof Decorate) {\n        Decorate d = (Decorate) t;\n        if (d.getStyle() == Style.MATH)\n            return t;\n    }\n    return new Decorate(t, Style.MATH);\n}"
            ],
            [
                "escapeXML",
                "de.neemann.digital.draw.graphics",
                "GraphicSVG",
                "/**\n * Escapes a given string to XML\n *\n * @param text the text to escape\n * @return the escaped text.\n */\npublic static String escapeXML(String text) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        switch(c) {\n            case '&':\n                sb.append(\"&amp;\");\n                break;\n            case '<':\n                sb.append(\"&lt;\");\n                break;\n            case '>':\n                sb.append(\"&gt;\");\n                break;\n            case '\"':\n                sb.append(\"&quot;\");\n                break;\n            default:\n                sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
            ],
            [
                "getMirrorYOrientation",
                "de.neemann.digital.draw.graphics",
                "GraphicSwing",
                "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3) {\n    int oy = orientation.getY();\n    VectorInterface d0 = p2.sub(p1).getOrthogonal();\n    VectorInterface d1 = p3.sub(p1);\n    if (d0.scalar(d1) < 0)\n        oy = 2 - oy;\n    return oy;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param file the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(File file) throws IOException {\n    final Configuration configuration = load(new FileInputStream(file));\n    configuration.origin = file;\n    return configuration;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param in the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        return (Configuration) xStream.fromXML(in);\n    } catch (RuntimeException e) {\n        throw new IOException(\"error reading XML\", e);\n    }\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "UNKNOWN",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * Unknown release\n */\npublic static final String UNKNOWN = \"unknown\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullDown",
                "/**\n * The pull down description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "Diode",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeBackward",
                "/**\n * The description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullUp",
                "/**\n * The pull up description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeForward",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROMDualPort",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualAccess",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "CounterPreset",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Register",
                "/**\n * The registers {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "LookUpTable",
                "/**\n * The LUTs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "BlockRAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Counter",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROM",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMAsync",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROM",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROMDualPort",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePortSel",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RegisterFile",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "MIDI",
                "/**\n * The Speakers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RGBLED",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The Input description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "LEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);"
            ],
            [
                "POLARITYAWARELEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The polarity aware LED description\n */\npublic static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "SEVENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment display description\n */\npublic static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();"
            ],
            [
                "SEVENHEXDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment hex display description\n */\npublic static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "SIXTEENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * Sixteen Segment Display\n */\npublic static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RotEncoder",
                "/**\n * The rotary encoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PinControl",
                "/**\n * The description of the pin control logic\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "DipSwitch",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "LightBulb",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Probe",
                "/**\n * The Probe description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Button",
                "/**\n * The Button description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "ButtonLED",
                "/**\n * The ButtonLED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "In",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "STEPS",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * Steps for a full revolution\n */\npublic static final int STEPS = 72;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * The stepper motors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "NotConnected",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorBipolar",
                "/**\n * The bipolar motor description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Const",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PowerSupply",
                "/**\n * Enforces a power supply\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Ground",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "VDD",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.core.io.telnet",
                "ServerHolder",
                "/**\n * The singleton instance\n */\npublic static final ServerHolder INSTANCE = new ServerHolder();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io.telnet",
                "Telnet",
                "/**\n * The telnet server description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);"
            ],
            [
                "BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of bits in simple gates like And and Or\n */\npublic static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);"
            ],
            [
                "INPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * input bits of sign extender\n */\npublic static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);"
            ],
            [
                "OUTPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output bits of sign extender\n */\npublic static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);"
            ],
            [
                "INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in simple gates like And and Or\n */\npublic static final // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nKey.KeyInteger // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nINPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);"
            ],
            [
                "LUT_INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in the LUT\n */\npublic static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);"
            ],
            [
                "MAX_VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The counter max value\n */\npublic static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);"
            ],
            [
                "DELAY_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the delay time used by the delay component\n */\npublic static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);"
            ],
            [
                "MONOFLOP_DELAY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the timer delay time\n */\npublic static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);"
            ],
            [
                "LABEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The elements label\n */\npublic static final Key<String> LABEL = new Key<>(\"Label\", \"\");"
            ],
            [
                "FONT_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The font size\n */\npublic static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);"
            ],
            [
                "TEXT_ORIENTATION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * text orientation\n */\npublic static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();"
            ],
            [
                "LED_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a LED\n */\npublic static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();"
            ],
            [
                "SEVEN_SEG_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a seven seg display\n */\npublic static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);"
            ],
            [
                "VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The value of constants\n */\npublic static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();"
            ],
            [
                "DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of elements\n */\npublic static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();"
            ],
            [
                "INPUT_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of inputs\n */\npublic static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();"
            ],
            [
                "DIP_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of the dip switch\n */\npublic static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Color of LEDs\n */\npublic static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();"
            ],
            [
                "INPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The input splitting of a splitter\n */\npublic static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");"
            ],
            [
                "OUTPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The output splitting of a splitter\n */\npublic static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");"
            ],
            [
                "SPLITTER_SPREADING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The splitter spreading\n */\npublic static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();"
            ],
            [
                "IN_OUT_SMALL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to select small inputs and outputs\n */\npublic static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "RUN_AT_REAL_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable realtime mode at a clock\n */\npublic static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);"
            ],
            [
                "INVERT_OUTPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * inverts the output of a gate\n */\npublic static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);"
            ],
            [
                "FREQUENCY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The real time frequency of the clock\n */\npublic static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);"
            ],
            [
                "SELECTOR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the bit count of a muxer or decoder\n */\npublic static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);"
            ],
            [
                "ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of address bits of memory\n */\npublic static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);"
            ],
            [
                "BLOWN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a diode as blown fuse or as programmed\n */\npublic static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a switch as closed or not\n */\npublic static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();"
            ],
            [
                "SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * signed flag for comparator element\n */\npublic static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();"
            ],
            [
                "REMAINDER_POSITIVE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects if the reminder of the division is always positive\n */\npublic static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);"
            ],
            [
                "DATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the data key for memory\n */\npublic static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);"
            ],
            [
                "FLIP_SEL_POSITON",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag for flipping selector pos in muxers, decoders and drivers\n */\npublic static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();"
            ],
            [
                "ROTATE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the rotation of the elements\n */\npublic static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();"
            ],
            [
                "WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);"
            ],
            [
                "SHAPE_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * defines the shape type of the custom circuit\n */\npublic static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();"
            ],
            [
                "LAYOUT_SHAPE_DELTA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Defines the distance to the previous pin. Used by the layout shape type\n */\npublic static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));"
            ],
            [
                "TERM_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);"
            ],
            [
                "TERM_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);"
            ],
            [
                "CYCLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break timeout cycles\n */\npublic static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);"
            ],
            [
                "ENABLED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break enabled\n */\npublic static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();"
            ],
            [
                "VALUE_IS_PROBE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to make a value a probe\n */\npublic static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "IS_PROGRAM_MEMORY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();"
            ],
            [
                "IS_PROGRAM_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();"
            ],
            [
                "AUTO_RELOAD_ROM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the ROMs auto load function\n */\npublic static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();"
            ],
            [
                "LAST_DATA_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The last used ROM data file\n */\npublic static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();"
            ],
            [
                "SHOW_DATA_TABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data table window\n */\npublic static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH_MICRO",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window in single gate mode\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();"
            ],
            [
                "ADD_VALUE_TO_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to add the value to the measurement graph\n */\npublic static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();"
            ],
            [
                "MICRO_STEP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the single gate mode in the embedded data view\n */\npublic static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);"
            ],
            [
                "MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the embedded data view\n */\npublic static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);"
            ],
            [
                "SETTINGS_MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the default data view\n */\npublic static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);"
            ],
            [
                "IS_HIGH_Z",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable high z mode at an input\n */\npublic static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "AVOID_ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to avoid active low at an input\n */\npublic static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the description of an element\n */\npublic static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");"
            ],
            [
                "NETNAME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A net name\n */\npublic static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");"
            ],
            [
                "SETTINGS_IEEE_SHAPES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * shape setting\n */\npublic static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();"
            ],
            [
                "SETTINGS_LANGUAGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI Language\n */\npublic static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();"
            ],
            [
                "SETTINGS_DEFAULT_TREESELECT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Default state of the tree view\n */\npublic static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);"
            ],
            [
                "SETTINGS_EXPRESSION_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI expression string representation\n */\npublic static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);"
            ],
            [
                "SETTINGS_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the grid\n */\npublic static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();"
            ],
            [
                "SETTINGS_SHOW_WIRE_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the wire bits view\n */\npublic static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);"
            ],
            [
                "SETTINGS_MAC_MOUSE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the MAC mouse mode\n */\npublic static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables tunnel rename dialog\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);"
            ],
            [
                "SETTINGS_RENAME_LABELS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables renaming of labels ending with numbers while copying\n */\npublic static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);"
            ],
            [
                "SETTINGS_OPEN_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables remote port\n */\npublic static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();"
            ],
            [
                "SETTINGS_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * remote port\n */\npublic static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);"
            ],
            [
                "OSCILLATION_DETECTION_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Counter used to detect oscillations\n */\npublic static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);"
            ],
            [
                "INT_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();"
            ],
            [
                "PROBE_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());"
            ],
            [
                "FIXED_POINT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * fixed point fractional binary digits\n */\npublic static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();"
            ],
            [
                "GRAPHIC_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);"
            ],
            [
                "GRAPHIC_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);"
            ],
            [
                "RELAY_NORMALLY_CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a relay to indicate if it is normally open or normally closed.\n */\npublic static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();"
            ],
            [
                "POLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Number of poles in the double throw relay\n */\npublic static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();"
            ],
            [
                "BARREL_SHIFTER_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to select the shift mode\n */\npublic static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());"
            ],
            [
                "DIRECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate shift direction\n */\npublic static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());"
            ],
            [
                "BARREL_SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate if shift value is signed\n */\npublic static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);"
            ],
            [
                "COMMON_CONNECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to indicate if the 7-seg display has a common cathode output\n */\npublic static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();"
            ],
            [
                "COMMON_CONNECTION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to define the common connection type\n */\npublic static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();"
            ],
            [
                "LED_PERSISTENCE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);"
            ],
            [
                "LED_PERSIST_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();"
            ],
            [
                "SETTINGS_ATF1502_FITTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_ATMISP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Flash software for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();"
            ],
            [
                "ROW_DATA_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * row bits in led matrix\n */\npublic static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);"
            ],
            [
                "COL_ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * column address bits in led matrix\n */\npublic static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);"
            ],
            [
                "LOCKED_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * In locked mode the circuit can not be modified\n */\npublic static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);"
            ],
            [
                "PINNUMBER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin number\n */\npublic static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();"
            ],
            [
                "PINCOUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin count\n */\npublic static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));"
            ],
            [
                "INVERTER_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * contains the input inverter config\n */\npublic static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());"
            ],
            [
                "BACKGROUND_COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Background Color of nested circuits\n */\npublic static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));"
            ],
            [
                "SETTINGS_FONT_SCALING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the screen resolution\n */\npublic static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_USE_EQUALS_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses the equals key instead of the plus key.\n */\npublic static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;"
            ],
            [
                "WITH_ENABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if a enable input is needed\n */\npublic static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);"
            ],
            [
                "FET_UNIDIRECTIONAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true to simulate a unidirectional FET\n */\npublic static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);"
            ],
            [
                "ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if component is active low\n */\npublic static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();"
            ],
            [
                "MAP_TO_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if button is mapped to the keyboard\n */\npublic static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();"
            ],
            [
                "SETTINGS_LIBRARY_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf1502\n */\npublic static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_JAR_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A jar containing custom java components\n */\npublic static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "ROMMANAGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The manager which contains all the roms data\n */\npublic static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();"
            ],
            [
                "APPLICATION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The type of the external process\n */\npublic static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());"
            ],
            [
                "EXTERNAL_INPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The inputs used by the external process\n */\npublic static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");"
            ],
            [
                "EXTERNAL_OUTPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The outputs used by the external process\n */\npublic static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");"
            ],
            [
                "EXTERNAL_CODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);"
            ],
            [
                "EXTERNAL_CODE_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));"
            ],
            [
                "SETTINGS_GHDL_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to ghdl\n */\npublic static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();"
            ],
            [
                "GHDL_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The ghdl options\n */\npublic static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "IVERILOG_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The iverilog options\n */\npublic static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "SETTINGS_IVERILOG_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to iverilog installation directory\n */\npublic static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();"
            ],
            [
                "CUSTOM_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Shape used to represent a visual element\n */\npublic static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));"
            ],
            [
                "PRELOAD_PROGRAM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * True if a program is loaded to the simulator at startup\n */\npublic static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();"
            ],
            [
                "BIG_ENDIAN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);"
            ],
            [
                "PROGRAM_TO_PRELOAD",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The file to preload as a program at startup\n */\npublic static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "BIG_ENDIAN_SETTING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "WIDE_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects a wide shape\n */\npublic static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();"
            ],
            [
                "RECT_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of the rectangle\n */\npublic static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);"
            ],
            [
                "RECT_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the height of the rectangle\n */\npublic static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);"
            ],
            [
                "RECT_INSIDE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();"
            ],
            [
                "RECT_BOTTOM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();"
            ],
            [
                "RECT_RIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();"
            ],
            [
                "MIDI_CHANNEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);"
            ],
            [
                "MIDI_INSTRUMENT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");"
            ],
            [
                "MIDI_PROG_CHANGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables Program change\n */\npublic static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);"
            ],
            [
                "SETTINGS_TOOLCHAIN_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Stores the IDE settings file\n */\npublic static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();"
            ],
            [
                "GENERICLARGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();"
            ],
            [
                "IS_GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Circuit is generic\n */\npublic static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUTORIAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the tutorial\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();"
            ],
            [
                "SETTINGS_WIRETOOLTIP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the wire tool tips\n */\npublic static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);"
            ],
            [
                "SWITCH_ACTS_AS_INPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The switch acts as input\n */\npublic static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();"
            ],
            [
                "SNAP_TO_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Snaps the element to the grid\n */\npublic static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();"
            ],
            [
                "MIRROR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Mirrors the component\n */\npublic static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "TESTDATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The test data\n */\npublic static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);"
            ],
            [
                "TRIGGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The scope trigger mode\n */\npublic static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());"
            ],
            [
                "PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the telnet port\n */\npublic static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);"
            ],
            [
                "TELNET_ESCAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Telnet escape\n */\npublic static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();"
            ],
            [
                "SKIP_HDL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Skips HDL output for this circuit\n */\npublic static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();"
            ],
            [
                "PREFIX",
                "de.neemann.digital.core.basic",
                "FanIn",
                "/**\n * The inputs name prefix\n */\npublic static final String PREFIX = \"In_\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NOr",
                "/**\n * The NOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "And",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XNOr",
                "/**\n * The XNOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XOr",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Not",
                "/**\n * The Not description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NAnd",
                "/**\n * The NAnd description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Or",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "STARTED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STARTED event\n */\npublic static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CLOSED event\n */\npublic static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);"
            ],
            [
                "POSTCLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.POSTCLOSED event\n */\npublic static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);"
            ],
            [
                "STEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STEP event\n */\npublic static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);"
            ],
            [
                "CHECKBURN",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CHECKBURN event\n */\npublic static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);"
            ],
            [
                "MICROSTEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.MICROSTEP event\n */\npublic static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);"
            ],
            [
                "RUN_TO_BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK event\n */\npublic static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);"
            ],
            [
                "RUN_TO_BREAK_TIMEOUT",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK_TIMEOUT event\n */\npublic static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);"
            ],
            [
                "BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.BREAK event\n */\npublic static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGPFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "NFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGNFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "PFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "TransGate",
                "/**\n * The transmission gate description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "SwitchDT",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Relay",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "RelayDT",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Switch",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Fuse",
                "/**\n * The fuse description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Reset",
                "/**\n * The Reset description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Stop",
                "/**\n * The Stop element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Decoder",
                "/**\n * The Decoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Delay",
                "/**\n * The Delay description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Driver",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "DriverInvSel",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "PriorityEncoder",
                "/**\n * The PriorityEncoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BusSplitter",
                "/**\n * The bus splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * The splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Multiplexer",
                "/**\n * The Multiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BitSelector",
                "/**\n * The Bit Selector description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * The Break description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Clock",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "AsyncSeq",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Demultiplexer",
                "/**\n * The Demultiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopDAsync",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopD",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRSAsync",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopT",
                "/**\n * The T-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJKAsync",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJK",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "Monoflop",
                "/**\n * The Monoflop's description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRS",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BarrelShifter",
                "/**\n * The barrel shifter description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Mul",
                "/**\n * The multiplier description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Neg",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitExtender",
                "/**\n * Description of the sign extend component.\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Add",
                "/**\n * The adders description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Div",
                "/**\n * The dividers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "PRNG",
                "/**\n * The element type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Sub",
                "/**\n * The subtractors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Comparator",
                "/**\n * The comparators description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitCount",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "EMPTY_LIST",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * An empty list\n */\npublic static final ObservableValues EMPTY_LIST = new ObservableValues();"
            ],
            [
                "DEFAULT_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The default formatter\n */\npublic static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;"
            ],
            [
                "HEX_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The hexadecimal formatter\n */\npublic static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "External",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "ExternalFile",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DEFAULT_RAD",
                "de.neemann.digital.fsm",
                "State",
                "/**\n * The default state radius\n */\nstatic final int DEFAULT_RAD = 70;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "Lang",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "InstanceHolder",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.testing",
                "TestCaseElement",
                "/**\n * The TestCaseElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();"
            ],
            [
                "STATENAMES",
                "de.neemann.digital.analyse",
                "TruthTableTableModel",
                "/**\n * String representation of the states\n */\npublic static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };"
            ],
            [
                "ONE",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant true or one\n */\npublic static final Constant ONE = new Constant(true);"
            ],
            [
                "ZERO",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant false or zero\n */\npublic static final Constant ZERO = new Constant(false);"
            ],
            [
                "PRIMARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the primary panel\n */\npublic static final String PRIMARY = \"primary\";"
            ],
            [
                "SECONDARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the secondary panel\n */\npublic static final String SECONDARY = \"secondary\";"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * The single EditorFactory instance.\n */\nstatic final EditorFactory INSTANCE = new EditorFactory();"
            ],
            [
                "MAX_TERMINAL_STORED",
                "de.neemann.digital.gui.components.terminal",
                "ConsoleTerminal",
                "/**\n * Max amount of characters stored\n */\npublic static final int MAX_TERMINAL_STORED = 2048;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Terminal",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Keyboard",
                "/**\n * The keyboard description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "FAILED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for failed tests\n */\nstatic final Color FAILED_COLOR = new Color(255, 200, 200);"
            ],
            [
                "PASSED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for passed tests\n */\nstatic final Color PASSED_COLOR = new Color(200, 255, 200);"
            ],
            [
                "ICON_DELETE",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The delete icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");"
            ],
            [
                "ICON_COPY",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The copy icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "VGA",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "GraphicCard",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "LedMatrix",
                "/**\n * the LED-Matrix description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "ScopeTrigger",
                "/**\n * The ScopeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);"
            ],
            [
                "DATADESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The DataElement description\n */\npublic static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "TEXTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The TextElement description\n */\npublic static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "RECTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The shape for the rectangle\n */\npublic static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "LEFT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to left align the digits\n */\npublic final static float LEFT = 0.0f;"
            ],
            [
                "CENTER",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to center the digits\n */\npublic final static float CENTER = 0.5f;"
            ],
            [
                "RIGHT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to right align the digits\n */\npublic final static float RIGHT = 1.0f;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "Settings",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "SettingsHolder",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "BASE_FILE_KEY",
                "de.neemann.digital.hdl.hgs",
                "Context",
                "/**\n * Key used to store the base file name in the context\n */\npublic static final String BASE_FILE_KEY = \"baseFile\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericInitCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();"
            ],
            [
                "GEN_ARGS_KEY",
                "de.neemann.digital.draw.library",
                "ResolveGenerics",
                "/**\n * Key uses to store the args for the generic circuits\n */\npublic static final String GEN_ARGS_KEY = \"genArgs\";"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "ButtonShape",
                "protected static final int HEIGHT = OUT_SIZE / 2;"
            ],
            [
                "SIZE2",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Half the size of the used raster\n */\npublic static final int SIZE2 = 10;"
            ],
            [
                "SIZE",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * The size of the used raster\n */\npublic static final int SIZE = SIZE2 * 2;"
            ],
            [
                "CIRC",
                "de.neemann.digital.draw.shapes",
                "DILShape",
                "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);"
            ],
            [
                "DOWNSHIFT",
                "de.neemann.digital.draw.shapes",
                "VDDShape",
                "static final int DOWNSHIFT = 4;"
            ],
            [
                "CHARGED_GATE",
                "de.neemann.digital.draw.shapes",
                "FGFETShapeN",
                "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);"
            ],
            [
                "OUT_SIZE",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Size of the normal sized inputs and outputs\n */\npublic static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;"
            ],
            [
                "LATEX_RAD",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);"
            ],
            [
                "WIDTH2",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * half the width of the resistor\n */\npublic static final int WIDTH2 = SIZE2 - 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * height of the resistor\n */\npublic static final int HEIGHT = SIZE + SIZE / 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static final int HEIGHT = 7;"
            ],
            [
                "FRAME",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "/**\n * the Frame of the display\n */\npublic static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.elements",
                "Tunnel",
                "/**\n * The TunnelElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();"
            ],
            [
                "HIGH_CONTRAST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);"
            ],
            [
                "MONOCHROME",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);"
            ],
            [
                "SMALL_IO",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);"
            ],
            [
                "NO_PIN_MARKER",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);"
            ],
            [
                "THINNER_LINES",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);"
            ],
            [
                "HIDE_TEST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);"
            ],
            [
                "NO_SHAPE_FILLING",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);"
            ],
            [
                "LATEX",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);"
            ],
            [
                "PINS_IN_MATH_MODE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SettingsHolder",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to select the color map\n */\npublic static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();"
            ],
            [
                "CUSTOM_COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to define the custom color map\n */\npublic static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();"
            ],
            [
                "MAXLINETHICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * maximal line thickness\n */\npublic static final int MAXLINETHICK = 4;"
            ],
            [
                "NORMAL",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all lines to draw the shapes itself\n */\npublic static final Style NORMAL = new Builder().build();"
            ],
            [
                "DISABLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all disabled elements\n */\npublic static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();"
            ],
            [
                "INOUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for input and output labels\n */\npublic static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();"
            ],
            [
                "FAILED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the failed state lines in the measurement graph\n */\npublic static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();"
            ],
            [
                "PASS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the passed state lines in the measurement graph\n */\npublic static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();"
            ],
            [
                "NORMAL_TEXT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for text which is integral part of the shape.\n * Text which uses this style is always included in sizing!\n * Used for text only elements.\n */\npublic static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();"
            ],
            [
                "THIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin line used for the graphic in the clock or delay shape\n */\npublic static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();"
            ],
            [
                "THIN_FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin filled\n */\npublic static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();"
            ],
            [
                "THICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thick line used for the ground line\n */\npublic static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();"
            ],
            [
                "WIRE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in editing mode\n */\npublic static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "WIRE_LOW",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for low wires in running mode\n */\npublic static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();"
            ],
            [
                "WIRE_HIGH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for high wires in running mode\n */\npublic static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();"
            ],
            [
                "WIRE_HIGHZ",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in high Z state\n */\npublic static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();"
            ],
            [
                "WIRE_OUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the output dots\n */\npublic static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();"
            ],
            [
                "FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Filled style used to fill the splitter or the dark LEDs\n */\npublic static final Style FILLED = new Builder().setFilled(true).build();"
            ],
            [
                "DASH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the grid in the graph\n */\npublic static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();"
            ],
            [
                "SHAPE_PIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();"
            ],
            [
                "SHAPE_SPLITTER",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text for splitters\n */\npublic static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();"
            ],
            [
                "WIRE_VALUE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();"
            ],
            [
                "WIRE_BITS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the wire bit number\n */\npublic static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();"
            ],
            [
                "HIGHLIGHT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * highlight color used for the circles to mark an element\n */\npublic static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "ERROR",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * error color used for the circles to mark an element\n */\npublic static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "BLANK",
                "de.neemann.digital.draw.graphics.text.text",
                "Blank",
                "/**\n * the Blank instance\n */\npublic static final Blank BLANK = new Blank();"
            ],
            [
                "LOOK_AT_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String LOOK_AT_ALIAS = \"lookAt\";"
            ],
            [
                "REF_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String REF_ALIAS = \"ref\";"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "name",
                "java.lang",
                "String"
            ],
            [
                "expression",
                "de.neemann.digital.analyse.expression",
                "Expression"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getCombinatorial",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic Map<String, Expression> getCombinatorial() {\n    fixDoubleCellUsage();\n    return super.getCombinatorial();\n}"
            ],
            [
                "addSequential",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic BuilderCollector addSequential(String name, Expression expression) throws BuilderException {\n    checkOpen();\n    sequentialVars.add(name);\n    return super.addSequential(name, expression);\n}"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getOutputs",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic ArrayList<String> getOutputs() {\n    fixDoubleCellUsage();\n    return super.getOutputs();\n}"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getRegistered",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic Map<String, Expression> getRegistered() {\n    fixDoubleCellUsage();\n    return super.getRegistered();\n}"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "addCombinatorial",
                "de.neemann.digital.builder",
                "BuilderInterface",
                "public abstract T addCombinatorial(String arg0, Expression arg1) throws BuilderException"
            ],
            [
                "getInputs",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic ArrayList<String> getInputs() {\n    fixDoubleCellUsage();\n    return super.getInputs();\n}"
            ],
            [
                "addCombinatorial",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException {\n    checkOpen();\n    return super.addCombinatorial(name, expression);\n}"
            ],
            [
                "addSequential",
                "de.neemann.digital.builder",
                "BuilderInterface",
                "public abstract T addSequential(String arg0, Expression arg1) throws BuilderException"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ],
            [
                "calculate",
                "de.neemann.digital.analyse.expression",
                "Expression",
                "public abstract boolean calculate(Context arg0) throws ExpressionException"
            ],
            [
                "getOrderString",
                "de.neemann.digital.analyse.expression",
                "Expression",
                "public abstract String getOrderString()"
            ],
            [
                "traverse",
                "de.neemann.digital.analyse.expression",
                "Expression",
                "public abstract <V> V traverse(V arg0)"
            ],
            [
                "copy",
                "de.neemann.digital.analyse.expression",
                "Expression",
                "public abstract Expression copy()"
            ],
            [
                "getInputs",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public ArrayList<String> getInputs()"
            ],
            [
                "getCombinatorial",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public Map<String, Expression> getCombinatorial()"
            ],
            [
                "getRegistered",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public Map<String, Expression> getRegistered()"
            ],
            [
                "addCombinatorial",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public BuilderCollector addCombinatorial(String arg0, Expression arg1) throws BuilderException"
            ],
            [
                "getOutputs",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public ArrayList<String> getOutputs()"
            ],
            [
                "addSequential",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public BuilderCollector addSequential(String arg0, Expression arg1) throws BuilderException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 26712,
        "oracle": "expression != null;",
        "oracleType": "PRE",
        "projectName": "Digital",
        "packageName": "de.neemann.digital.builder.Gal16v8",
        "className": "BuilderCollectorGAL",
        "javadocTag": "",
        "methodJavadoc": "",
        "methodSourceCode": "public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException{\n    checkOpen();\n    return super.addCombinatorial(name, expression);\n}",
        "classJavadoc": "/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */",
        "classSourceCode": "/*\n * Copyright (c) 2019 Helmut Neemann.\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.builder.Gal16v8;\n\nimport de.neemann.digital.analyse.expression.Expression;\nimport de.neemann.digital.builder.BuilderCollector;\nimport de.neemann.digital.builder.BuilderException;\nimport de.neemann.digital.builder.PinMap;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Map;\n\n/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */\npublic class BuilderCollectorGAL extends BuilderCollector {\n    private final PinMap pinMap;\n    private HashSet<String> sequentialVars;\n    private boolean doubleCellUsageFixed = false;\n\n    /**\n     * Creates a new instance\n     *\n     * @param pinMap the used pinMap. Is required to handle aliases correctly\n     */\n    public BuilderCollectorGAL(PinMap pinMap) {\n        this.pinMap = pinMap;\n        sequentialVars = new HashSet<>();\n    }\n\n    @Override\n    public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        return super.addCombinatorial(name, expression);\n    }\n\n    @Override\n    public BuilderCollector addSequential(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        sequentialVars.add(name);\n        return super.addSequential(name, expression);\n    }\n\n    private void checkOpen() {\n        if (doubleCellUsageFixed)\n            throw new RuntimeException(\"wrong BuilderCollectorGAL usage!\");\n    }\n\n    private void fixDoubleCellUsage() {\n        if (!doubleCellUsageFixed) {\n\n            super.getCombinatorial().entrySet().removeIf(c -> {\n                if (pinMap.isSimpleAlias(c.getKey(), c.getValue(), sequentialVars)) {\n                    removeOutput(c.getKey());\n                    return true;\n                }\n                return false;\n            });\n\n            doubleCellUsageFixed = true;\n        }\n    }\n\n    @Override\n    public ArrayList<String> getOutputs() {\n        fixDoubleCellUsage();\n        return super.getOutputs();\n    }\n\n    @Override\n    public ArrayList<String> getInputs() {\n        fixDoubleCellUsage();\n        return super.getInputs();\n    }\n\n    @Override\n    public Map<String, Expression> getCombinatorial() {\n        fixDoubleCellUsage();\n        return super.getCombinatorial();\n    }\n\n    @Override\n    public Map<String, Expression> getRegistered() {\n        fixDoubleCellUsage();\n        return super.getRegistered();\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "CLI",
                "de.neemann"
            ],
            [
                "Mouse",
                "de.neemann.gui"
            ],
            [
                "LineBreaker",
                "de.neemann.gui"
            ],
            [
                "IconCreator",
                "de.neemann.gui"
            ],
            [
                "ConfirmDialogBuilder",
                "de.neemann.gui"
            ],
            [
                "Resources",
                "de.neemann.gui.language"
            ],
            [
                "Bundle",
                "de.neemann.gui.language"
            ],
            [
                "Language",
                "de.neemann.gui.language"
            ],
            [
                "ToolTipAction",
                "de.neemann.gui"
            ],
            [
                "MyFileChooser",
                "de.neemann.gui"
            ],
            [
                "ClosingWindowListener",
                "de.neemann.gui"
            ],
            [
                "ErrorMessage",
                "de.neemann.gui"
            ],
            [
                "WindowSizeStorage",
                "de.neemann.gui"
            ],
            [
                "Screen",
                "de.neemann.gui"
            ],
            [
                "ToolTipProvider",
                "de.neemann.gui"
            ],
            [
                "InfoDialog",
                "de.neemann.gui"
            ],
            [
                "ValueFormatter",
                "de.neemann.digital.core"
            ],
            [
                "ModelStateObserver",
                "de.neemann.digital.core"
            ],
            [
                "PullDown",
                "de.neemann.digital.core.pld"
            ],
            [
                "Diode",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeBackward",
                "de.neemann.digital.core.pld"
            ],
            [
                "PullUp",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeForward",
                "de.neemann.digital.core.pld"
            ],
            [
                "Node",
                "de.neemann.digital.core"
            ],
            [
                "RAMSinglePort",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualAccess",
                "de.neemann.digital.core.memory"
            ],
            [
                "ByteArrayFromValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "Importer",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "LogisimReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "DataFieldValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "IntelHexReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "BinReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "MultiValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "CounterPreset",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Register",
                "de.neemann.digital.core.memory"
            ],
            [
                "LookUpTable",
                "de.neemann.digital.core.memory"
            ],
            [
                "BlockRAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Counter",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMMangerBase",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManagerFile",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManager",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMInterface",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "EEPROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramCounter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMAsync",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataField",
                "de.neemann.digital.core.memory"
            ],
            [
                "EEPROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMInterface",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataFieldConverter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMSinglePortSel",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramMemory",
                "de.neemann.digital.core.memory"
            ],
            [
                "RegisterFile",
                "de.neemann.digital.core.memory"
            ],
            [
                "ModelStateObserverTyped",
                "de.neemann.digital.core"
            ],
            [
                "Observable",
                "de.neemann.digital.core"
            ],
            [
                "NodeWithoutDelay",
                "de.neemann.digital.core"
            ],
            [
                "ExceptionWithOrigin",
                "de.neemann.digital.core"
            ],
            [
                "ObservableValue",
                "de.neemann.digital.core"
            ],
            [
                "SpeedTest",
                "de.neemann.digital.core"
            ],
            [
                "BurnException",
                "de.neemann.digital.core"
            ],
            [
                "GlobalValues",
                "de.neemann.digital.core"
            ],
            [
                "MIDI",
                "de.neemann.digital.core.io"
            ],
            [
                "RGBLED",
                "de.neemann.digital.core.io"
            ],
            [
                "Out",
                "de.neemann.digital.core.io"
            ],
            [
                "RotEncoder",
                "de.neemann.digital.core.io"
            ],
            [
                "PinControl",
                "de.neemann.digital.core.io"
            ],
            [
                "DipSwitch",
                "de.neemann.digital.core.io"
            ],
            [
                "CommonConnectionType",
                "de.neemann.digital.core.io"
            ],
            [
                "LightBulb",
                "de.neemann.digital.core.io"
            ],
            [
                "Probe",
                "de.neemann.digital.core.io"
            ],
            [
                "Button",
                "de.neemann.digital.core.io"
            ],
            [
                "ButtonLED",
                "de.neemann.digital.core.io"
            ],
            [
                "In",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorUnipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "ProbeMode",
                "de.neemann.digital.core.io"
            ],
            [
                "NotConnected",
                "de.neemann.digital.core.io"
            ],
            [
                "MIDIHelper",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorBipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "Const",
                "de.neemann.digital.core.io"
            ],
            [
                "PowerSupply",
                "de.neemann.digital.core.io"
            ],
            [
                "Ground",
                "de.neemann.digital.core.io"
            ],
            [
                "InValue",
                "de.neemann.digital.core.io"
            ],
            [
                "VDD",
                "de.neemann.digital.core.io"
            ],
            [
                "ServerHolder",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Telnet",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ByteBuffer",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Server",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ElementAttributes",
                "de.neemann.digital.core.element"
            ],
            [
                "Element",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementFactory",
                "de.neemann.digital.core.element"
            ],
            [
                "PinInfo",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescriptions",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "Keys",
                "de.neemann.digital.core.element"
            ],
            [
                "Rotation",
                "de.neemann.digital.core.element"
            ],
            [
                "AttributeListener",
                "de.neemann.digital.core.element"
            ],
            [
                "Key",
                "de.neemann.digital.core.element"
            ],
            [
                "ImmutableList",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementTypeDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "FanIn",
                "de.neemann.digital.core.basic"
            ],
            [
                "NOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "And",
                "de.neemann.digital.core.basic"
            ],
            [
                "XNOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "XOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "Not",
                "de.neemann.digital.core.basic"
            ],
            [
                "NAnd",
                "de.neemann.digital.core.basic"
            ],
            [
                "Function",
                "de.neemann.digital.core.basic"
            ],
            [
                "Or",
                "de.neemann.digital.core.basic"
            ],
            [
                "ExceptionWithOriginInterface",
                "de.neemann.digital.core"
            ],
            [
                "ModelEvent",
                "de.neemann.digital.core"
            ],
            [
                "BacktrackException",
                "de.neemann.digital.core"
            ],
            [
                "PlainSwitch",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGPFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "NFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGNFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PlainSwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "TransGate",
                "de.neemann.digital.core.switching"
            ],
            [
                "SwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Relay",
                "de.neemann.digital.core.switching"
            ],
            [
                "RelayDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Switch",
                "de.neemann.digital.core.switching"
            ],
            [
                "Fuse",
                "de.neemann.digital.core.switching"
            ],
            [
                "Reset",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Stop",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Decoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Delay",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Driver",
                "de.neemann.digital.core.wiring"
            ],
            [
                "DataBus",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "SingleBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "ConnectedBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "AbstractBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "BusModelStateObserver",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "CommonBusValue",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "DriverInvSel",
                "de.neemann.digital.core.wiring"
            ],
            [
                "PriorityEncoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BusSplitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Splitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Multiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitSelector",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Break",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Clock",
                "de.neemann.digital.core.wiring"
            ],
            [
                "AsyncSeq",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Demultiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitsException",
                "de.neemann.digital.core"
            ],
            [
                "NodeInterface",
                "de.neemann.digital.core"
            ],
            [
                "NodeException",
                "de.neemann.digital.core"
            ],
            [
                "FlipflopDAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopD",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRSAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopT",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJKAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJK",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "Monoflop",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRS",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopBit",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "BarrelShifter",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Mul",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Neg",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitExtender",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Add",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Div",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "LeftRightFormat",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "PRNG",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Sub",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BarrelShifterMode",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Comparator",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitCount",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "ObservableValues",
                "de.neemann.digital.core"
            ],
            [
                "Value",
                "de.neemann.digital.core"
            ],
            [
                "IntFormat",
                "de.neemann.digital.core"
            ],
            [
                "SyncAccess",
                "de.neemann.digital.core"
            ],
            [
                "Bits",
                "de.neemann.digital.core"
            ],
            [
                "ProcessInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "StdIOInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "ApplicationVerilogStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "Application",
                "de.neemann.digital.core.extern"
            ],
            [
                "External",
                "de.neemann.digital.core.extern"
            ],
            [
                "Port",
                "de.neemann.digital.core.extern"
            ],
            [
                "PortDefinition",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGHDL",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationIVerilog",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationVHDLStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "VHDLTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGeneric",
                "de.neemann.digital.core.extern"
            ],
            [
                "Options",
                "de.neemann.digital.core.extern"
            ],
            [
                "VerilogTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ExternalFile",
                "de.neemann.digital.core.extern"
            ],
            [
                "ProcessStarter",
                "de.neemann.digital.core.extern"
            ],
            [
                "ModelEventType",
                "de.neemann.digital.core"
            ],
            [
                "Observer",
                "de.neemann.digital.core"
            ],
            [
                "ErrorDetector",
                "de.neemann.digital.core"
            ],
            [
                "Statistics",
                "de.neemann.digital.core.stats"
            ],
            [
                "Countable",
                "de.neemann.digital.core.stats"
            ],
            [
                "Model",
                "de.neemann.digital.core"
            ],
            [
                "Signal",
                "de.neemann.digital.core"
            ],
            [
                "StringList",
                "de.neemann.digital"
            ],
            [
                "XStreamValid",
                "de.neemann.digital"
            ],
            [
                "StatsExport",
                "de.neemann.digital.cli"
            ],
            [
                "SVGExport",
                "de.neemann.digital.cli"
            ],
            [
                "CommandLineTester",
                "de.neemann.digital.cli"
            ],
            [
                "CSVWriter",
                "de.neemann.digital.cli"
            ],
            [
                "BasicCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Argument",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLIException",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Muxer",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentKey",
                "de.neemann.digital.cli.cli"
            ],
            [
                "NamedCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLICommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentBase",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CircuitLoader",
                "de.neemann.digital.cli"
            ],
            [
                "Main",
                "de.neemann.digital.cli"
            ],
            [
                "Modification",
                "de.neemann.digital.undo"
            ],
            [
                "Modifications",
                "de.neemann.digital.undo"
            ],
            [
                "ModifyException",
                "de.neemann.digital.undo"
            ],
            [
                "Copyable",
                "de.neemann.digital.undo"
            ],
            [
                "UndoManager",
                "de.neemann.digital.undo"
            ],
            [
                "ChangedListener",
                "de.neemann.digital.undo"
            ],
            [
                "CircuitRepresentation",
                "de.neemann.digital.fsm"
            ],
            [
                "Transition",
                "de.neemann.digital.fsm"
            ],
            [
                "Movable",
                "de.neemann.digital.fsm"
            ],
            [
                "MouseMovable",
                "de.neemann.digital.fsm"
            ],
            [
                "Optimizer",
                "de.neemann.digital.fsm"
            ],
            [
                "Permute",
                "de.neemann.digital.fsm"
            ],
            [
                "FiniteStateMachineException",
                "de.neemann.digital.fsm"
            ],
            [
                "TransitionTableCreator",
                "de.neemann.digital.fsm"
            ],
            [
                "ValueParser",
                "de.neemann.digital.fsm"
            ],
            [
                "WaitGroup",
                "de.neemann.digital.fsm"
            ],
            [
                "FSMComponent",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMFrame",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "OptimizerDialog",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMDemos",
                "de.neemann.digital.fsm"
            ],
            [
                "FSM",
                "de.neemann.digital.fsm"
            ],
            [
                "State",
                "de.neemann.digital.fsm"
            ],
            [
                "Lang",
                "de.neemann.digital.lang"
            ],
            [
                "LineListenerResolveDontCare",
                "de.neemann.digital.testing"
            ],
            [
                "TestingDataException",
                "de.neemann.digital.testing"
            ],
            [
                "UnitTester",
                "de.neemann.digital.testing"
            ],
            [
                "FolderTestRunner",
                "de.neemann.digital.testing"
            ],
            [
                "TestExecutor",
                "de.neemann.digital.testing"
            ],
            [
                "Transitions",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseDescription",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseElement",
                "de.neemann.digital.testing"
            ],
            [
                "LineEmitterRepeat",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Parser",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppenderBits",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ParserException",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Context",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ModelInitializer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Expression",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterList",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestRow",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitter",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterWhile",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterSimple",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Random",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "SignExtend",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "IfThenElse",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "Function",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "LineListener",
                "de.neemann.digital.testing.parser"
            ],
            [
                "VirtualSignal",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppender",
                "de.neemann.digital.testing.parser"
            ],
            [
                "OperatorPrecedence",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestResultListener",
                "de.neemann.digital.testing"
            ],
            [
                "MatchedValue",
                "de.neemann.digital.testing"
            ],
            [
                "TestResult",
                "de.neemann.digital.testing"
            ],
            [
                "MinimizerInterface",
                "de.neemann.digital.analyse"
            ],
            [
                "LabelNumbering",
                "de.neemann.digital.analyse"
            ],
            [
                "ModelAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "CSVImporter",
                "de.neemann.digital.analyse"
            ],
            [
                "BoolTableExpanded",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableTableModel",
                "de.neemann.digital.analyse"
            ],
            [
                "TableReducer",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "PrimeSelector",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForce",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "LargestFirst",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForceGetAll",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "PrimeSelectorDefault",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BoolTableByteArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "IndependentChecker",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskey",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableExpression",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableBoolArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTable",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRows",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "ThreeStateValue",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskeyExam",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRow",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TruthTableConverter",
                "de.neemann.digital.analyse"
            ],
            [
                "DetermineJKStateMachine",
                "de.neemann.digital.analyse"
            ],
            [
                "Parser",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ParseException",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ModelAnalyserInfo",
                "de.neemann.digital.analyse"
            ],
            [
                "AnalyseException",
                "de.neemann.digital.analyse"
            ],
            [
                "DependencyAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "SubstituteLibrary",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableFormatterHex",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatter",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterTestCase",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterCSV",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterLaTeX",
                "de.neemann.digital.analyse.format"
            ],
            [
                "MinimizerQuineMcCluskey",
                "de.neemann.digital.analyse"
            ],
            [
                "ContextFiller",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "BitSetter",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ContextMap",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Operation",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Context",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NInputs",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NOr",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "ExpressionModifier",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NAnd",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "Constant",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Variable",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionException",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityInclNotVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Equals",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "FormatToExpression",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTable",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Formatter",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatterException",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTableLatex",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Not",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "VariableVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NamedExpression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "MinimizerQuineMcCluskeyExam",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTable",
                "de.neemann.digital.analyse"
            ],
            [
                "SplitPinString",
                "de.neemann.digital.analyse"
            ],
            [
                "CycleDetector",
                "de.neemann.digital.analyse"
            ],
            [
                "DigitalRemoteInterface",
                "de.neemann.digital.gui"
            ],
            [
                "TextSearchFilter",
                "de.neemann.digital.gui"
            ],
            [
                "ExportZipAction",
                "de.neemann.digital.gui"
            ],
            [
                "SettingsBase",
                "de.neemann.digital.gui"
            ],
            [
                "DocumentationLocator",
                "de.neemann.digital.gui"
            ],
            [
                "InitialTutorial",
                "de.neemann.digital.gui.tutorial"
            ],
            [
                "InsertAction",
                "de.neemann.digital.gui"
            ],
            [
                "StatusInterface",
                "de.neemann.digital.gui"
            ],
            [
                "SearchTextField",
                "de.neemann.digital.gui"
            ],
            [
                "SaveAsHelper",
                "de.neemann.digital.gui"
            ],
            [
                "FileHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ReleaseInfo",
                "de.neemann.digital.gui.release"
            ],
            [
                "CheckForNewRelease",
                "de.neemann.digital.gui.release"
            ],
            [
                "StateInterface",
                "de.neemann.digital.gui.state"
            ],
            [
                "StateManager",
                "de.neemann.digital.gui.state"
            ],
            [
                "State",
                "de.neemann.digital.gui.state"
            ],
            [
                "CircuitScrollPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "ItemPicker",
                "de.neemann.digital.gui.components"
            ],
            [
                "LibraryTreeModel",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "SelectTree",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "WindowPosManager",
                "de.neemann.digital.gui.components"
            ],
            [
                "CustomShapeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "TransformHolder",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "BehavioralFixtureCreator",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorFactory",
                "de.neemann.digital.gui.components"
            ],
            [
                "OrderMerger",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementOrderer",
                "de.neemann.digital.gui.components"
            ],
            [
                "ModifyMoveSelected",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteRect",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWires",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfVisualElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyCircuitAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveAndRotElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMeasurementOrdering",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttribute",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "DataEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "CircuitModifierPostClosed",
                "de.neemann.digital.gui.components"
            ],
            [
                "CharDeleter",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "ConsoleTerminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Terminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalInterface",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Keyboard",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "KeyboardDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Editor",
                "de.neemann.digital.gui.components"
            ],
            [
                "VarRectList",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMap",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapComponent",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapDialog",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "MapLayout",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughException",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "CircuitTransferable",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementHelpDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "TestCaseDescriptionDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ValueTableDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestCaseDescriptionEditor",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestAllDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ExpressionListenerOptimizeJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "LaTeXExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "HardwareDescriptionGenerator",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateFile",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateCUPL",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "ExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderOutputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AllSolutionsDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerCSVCondensed",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "BuilderExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionComponent",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "PlainTextExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableReorderManager",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ShowStringDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderInputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ProgressDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "CheckResultListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerStore",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AttributeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ProbeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ColorSchemeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "ROMEditorDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "LabelGenerator",
                "de.neemann.digital.gui.components"
            ],
            [
                "SingleValueDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ExpressionDialog",
                "de.neemann.digital.gui.components.expression"
            ],
            [
                "CircuitComponent",
                "de.neemann.digital.gui.components"
            ],
            [
                "VGA",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicCard",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrix",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "VGADialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "MoveFocusTo",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "ConstraintsBuilder",
                "de.neemann.digital.gui.components"
            ],
            [
                "ScopeTrigger",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphDialog",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphComponent",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "DummyElement",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "ValueTableObserver",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "CircuitModifier",
                "de.neemann.digital.gui.components"
            ],
            [
                "CopiedElementLabelRenamer",
                "de.neemann.digital.gui.components"
            ],
            [
                "TextLineNumber",
                "de.neemann.digital.gui.components"
            ],
            [
                "InsertHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ProgramMemoryLoader",
                "de.neemann.digital.gui"
            ],
            [
                "Main",
                "de.neemann.digital.gui"
            ],
            [
                "StatsDialog",
                "de.neemann.digital.gui"
            ],
            [
                "WindowManager",
                "de.neemann.digital.gui"
            ],
            [
                "Settings",
                "de.neemann.digital.gui"
            ],
            [
                "LibrarySelector",
                "de.neemann.digital.gui"
            ],
            [
                "DigitalUncaughtExceptionHandler",
                "de.neemann.digital.gui"
            ],
            [
                "NumberingWizard",
                "de.neemann.digital.gui"
            ],
            [
                "HandlerInterface",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteSever",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteException",
                "de.neemann.digital.gui.remote"
            ],
            [
                "DigitalHandler",
                "de.neemann.digital.gui.remote"
            ],
            [
                "ModelModifier",
                "de.neemann.digital.gui"
            ],
            [
                "VerilogCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogRenaming",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogGenerator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogTestBenchCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogElement",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogTemplate",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogLibrary",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "CodePrinter",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "CodePrinterStr",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "Statements",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Parser",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ParserException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Statement",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Context",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "FirstClassFunctionCall",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "InnerFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "JavaClass",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "FirstClassFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Func",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Function",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSEvalException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ReferenceToFunc",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToStruct",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToArray",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Reference",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToVar",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Value",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSMap",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSArray",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Separator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLLibrary",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLRenaming",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLGenerator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLEntity",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplate",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplateFunctions",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTestBenchCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "HDLModel",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNode",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNet",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "Printable",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLException",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLPort",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HasName",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "InlineManyToOne",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeAssignments",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "Optimization",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeConstants",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "ReplaceOneToMany",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NameConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "OptimizeExpressions",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "RemoveConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NodeSorterExpressionBased",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "HDLNodeSplitterManyToOne",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeCustom",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeAssignment",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLCircuit",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "ExprVar",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Visitor",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprVarRange",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExpressionOptimizer",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprNot",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprConstant",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprOperate",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprUsingNet",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "HDLNodeBuildIn",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLClockIntegrator",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockIntegratorGeneric",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockInfo",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "HDLNodeSplitterOneToMany",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "FileLocator",
                "de.neemann.digital"
            ],
            [
                "ValueTable",
                "de.neemann.digital.data"
            ],
            [
                "ValueTableModel",
                "de.neemann.digital.data"
            ],
            [
                "DataPlotter",
                "de.neemann.digital.data"
            ],
            [
                "Value",
                "de.neemann.digital.data"
            ],
            [
                "ExpressionExporter",
                "de.neemann.digital.builder"
            ],
            [
                "ExpressionToFileExporter",
                "de.neemann.digital.builder"
            ],
            [
                "RotationByteArrayOutputStream",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "TT2Exporter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "StartATF150xFitter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "OSExecute",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "CreateCHN",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDevice",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDialog",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PL",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATF150xCuplExporter",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PinMap",
                "de.neemann.digital.builder"
            ],
            [
                "PinMapException",
                "de.neemann.digital.builder"
            ],
            [
                "FragmentExpression",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisualElement",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentSameInValue",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "CircuitBuilder",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisitor",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVariable",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Fragment",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Box",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Gal16v8JEDECExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CuplExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "BuilderCollectorGAL",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CleanNameBuilder",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderCollector",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderInterface",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderException",
                "de.neemann.digital.builder"
            ],
            [
                "Gal22v10JEDECExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "Gal22v10CuplExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "FuseMap",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFillerException",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFiller",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "JedecWriter",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "GenericCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibrary",
                "de.neemann.digital.draw.library"
            ],
            [
                "GenericInitCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "Visitor",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryListener",
                "de.neemann.digital.draw.library"
            ],
            [
                "JarComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibraryFolder",
                "de.neemann.digital.draw.library"
            ],
            [
                "CustomElement",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundNotification",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundException",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentSource",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryInterface",
                "de.neemann.digital.draw.library"
            ],
            [
                "ResolveGenerics",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryNode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementTypeDescriptionCustom",
                "de.neemann.digital.draw.library"
            ],
            [
                "InvalidNodeException",
                "de.neemann.digital.draw.library"
            ],
            [
                "NumStringComparator",
                "de.neemann.digital.draw.library"
            ],
            [
                "InputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Interactor",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Drawable",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeBackwardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FuseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DILShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DipSwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LightBulbShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LayoutShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PolarityAwareLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ConstShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BreakShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TextShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegHexShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ProbeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "NotConnectedShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "StepperMotorShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BitSelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericInitCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RectShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "VDDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RAMShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ScopeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DemuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BusSplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullUpShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TestCaseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TunnelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PinControlShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FGFETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TransGateShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ResetShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeForewardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SixteenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "CustomCircuitShapeType",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "InteractorInterface",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeSpecificMatch",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RGBLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RotEncoderShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "IEEEGenericShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEENotShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEAndShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEXOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "ObservableValueReader",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SvgTemplate",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "TransformParser",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "Context",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgException",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgImporter",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "CustomShapeDescription",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "CustomShape",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "FGFETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "OutputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GroundShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "AsyncClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Shape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MissingShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeFactory",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullDownShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DriverShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DataShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DotCreator",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Wire",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Movable",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pins",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Circuit",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Tunnel",
                "de.neemann.digital.draw.elements"
            ],
            [
                "PinException",
                "de.neemann.digital.draw.elements"
            ],
            [
                "ElementOrder",
                "de.neemann.digital.draw.elements"
            ],
            [
                "VisualElement",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pin",
                "de.neemann.digital.draw.elements"
            ],
            [
                "IOState",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireMerger",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireConsistencyChecker",
                "de.neemann.digital.draw.elements"
            ],
            [
                "AsyncSequentialClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelEntry",
                "de.neemann.digital.draw.model"
            ],
            [
                "Net",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelCreator",
                "de.neemann.digital.draw.model"
            ],
            [
                "InverterConfig",
                "de.neemann.digital.draw.model"
            ],
            [
                "NetList",
                "de.neemann.digital.draw.model"
            ],
            [
                "RealTimeClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "Polygon",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Orientation",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Vector",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGSettings",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Transform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorKey",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ExportFactory",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicsImage",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorInterface",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformMatrix",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatLaTeX",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicMinMax",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicTransform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorScheme",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Style",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSkipLines",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "GraphicLineCollector",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "PolygonConverter",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorFloat",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformRotate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Graphic",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleHighContrast",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Parser",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "ParseException",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "PlainTextFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "SVGFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "GraphicsFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "LaTeXFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "Decorate",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Text",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Index",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Sentence",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Blank",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Character",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "ExpressionToText",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Simple",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Export",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleMonochrome",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformTranslate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSwing",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "PolygonParser",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGTokenizer",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GifSequenceWriter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "GifExporter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "ConfigCache",
                "de.neemann.digital.toolchain"
            ],
            [
                "Configuration",
                "de.neemann.digital.toolchain"
            ],
            [
                "Command",
                "de.neemann.digital.toolchain"
            ],
            [
                "FileToCreate",
                "de.neemann.digital.toolchain"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "getMouse",
                "de.neemann.gui",
                "Mouse",
                "/**\n * Returns a mouse event interpreter\n *\n * @return a Mouse interface implementation\n */\nstatic Mouse getMouse() {\n    if (Settings.getInstance().get(Keys.SETTINGS_MAC_MOUSE))\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && !e.isControlDown();\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && e.isControlDown();\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isShiftDown();\n            }\n        };\n    else\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1;\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON3;\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isControlDown();\n            }\n        };\n}"
            ],
            [
                "create",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an icon from a resource\n *\n * @param name name of the resource\n * @return the icon\n */\npublic static Icon create(String name) {\n    return new ImageIcon(createImage(name));\n}"
            ],
            [
                "createImage",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image from a resource\n *\n * @param name name of the resource\n * @return the image\n */\npublic static Image createImage(String name) {\n    try {\n        final float scaling = Screen.getInstance().getScaling();\n        if (scaling == 1) {\n            return getImage(name);\n        } else {\n            BufferedImage image = getImageOrNull(name.substring(0, name.length() - 4) + \"_hi.png\");\n            if (image != null) {\n                int w = (int) (image.getWidth() * scaling / 2);\n                int h = (int) (image.getHeight() * scaling / 2);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            } else {\n                LOGGER.info(\"upscaling of \" + name);\n                image = getImage(name);\n                int w = (int) (image.getWidth() * scaling);\n                int h = (int) (image.getHeight() * scaling);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            }\n        }\n    } catch (IOException e) {\n        throw new RuntimeException(\"Image \" + name + \" not found\", e);\n    }\n}"
            ],
            [
                "createImages",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image list from a resource\n *\n * @param names names of the resource\n * @return the image\n */\npublic static ArrayList<Image> createImages(String... names) {\n    try {\n        ArrayList<Image> list = new ArrayList<Image>(names.length);\n        for (String name : names) {\n            list.add(getImage(name));\n        }\n        return list;\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}"
            ],
            [
                "getCTRLMask",
                "de.neemann.gui",
                "ToolTipAction",
                "/**\n * @return the system specific CTRL mask.\n */\npublic static int getCTRLMask() {\n    int mask = InputEvent.CTRL_DOWN_MASK;\n    if (Screen.isMac())\n        mask = InputEvent.META_DOWN_MASK;\n    return mask;\n}"
            ],
            [
                "checkForSave",
                "de.neemann.gui",
                "ClosingWindowListener",
                "/**\n * Used to check for save! No Window closing is performed!\n *\n * @param parent      the Parent frame\n * @param confirmSave the confirmSafe interface\n * @return true if to proceed\n */\npublic static boolean checkForSave(JFrame parent, ConfirmSave confirmSave) {\n    if (confirmSave.isStateChanged()) {\n        int r = new ConfirmDialogBuilder(SAVE_CHANGES_MESSAGE).setTitle(STATE_CHANGED_MESSAGE).setNoOption(NO_MESSAGE).setYesOption(YES_MESSAGE).setCancleOption(CANCEL_MESSAGE).show(parent);\n        if (r == JOptionPane.YES_OPTION || r == JOptionPane.NO_OPTION) {\n            if (r == JOptionPane.YES_OPTION) {\n                confirmSave.saveChanges();\n                return !confirmSave.isStateChanged();\n            } else\n                return true;\n        } else\n            return false;\n    }\n    return true;\n}"
            ],
            [
                "getParentWindow",
                "de.neemann.gui",
                "ErrorMessage",
                "/**\n * Get the parent window of the given component.\n * If the component is a window this window is returned\n *\n * @param parent the parent component\n * @return the window instance\n */\npublic static Window getParentWindow(Component parent) {\n    if (parent == null)\n        return null;\n    else if (parent instanceof Window)\n        return (Window) parent;\n    else\n        return SwingUtilities.getWindowAncestor(parent);\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the Screen instance\n */\npublic static Screen getInstance() {\n    return InstanceHolder.instance;\n}"
            ],
            [
                "getDefaultFontScaling",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the default font scaling in percent\n */\npublic static int getDefaultFontScaling() {\n    if (// macOS has its own retina handling\n    IS_MAC)\n        return 100;\n    int dpi = getDefaultScreenResolution();\n    int s = (dpi * 100) / 96;\n    if (s > 95 && s < 105)\n        s = 100;\n    return s;\n}"
            ],
            [
                "isLinux",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a windows system\n */\npublic static boolean isLinux() {\n    return IS_LINUX;\n}"
            ],
            [
                "isMac",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a mac\n */\npublic static boolean isMac() {\n    return IS_MAC;\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * @return the singleton instance\n */\npublic static InfoDialog getInstance() {\n    if (instance == null)\n        try {\n            instance = new InfoDialog();\n        } catch (IOException e) {\n            System.out.println(\"error reading InfoDialog \" + e.getMessage());\n        }\n    return instance;\n}"
            ],
            [
                "read",
                "de.neemann.digital.core.memory.importer",
                "Importer",
                "/**\n * Reads the given file to a single data field.\n *\n * @param hexFile   the file to read\n * @param dataBits  the bits used in the data field\n * @param bigEndian uses big endian at import\n * @return the data field\n * @throws IOException IOException\n */\npublic static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException {\n    DataField df = new DataField(1024);\n    read(hexFile, new DataFieldValueArray(df, dataBits), bigEndian);\n    return df;\n}"
            ],
            [
                "getOriginOf",
                "de.neemann.digital.core",
                "ExceptionWithOrigin",
                "/**\n * Returns the file or the files that caused the given exception.\n * If no origin is found null is returned.\n *\n * @param e the exception\n * @return the origin or null;\n */\npublic static String getOriginOf(Throwable e) {\n    while (e != null) {\n        if (e instanceof ExceptionWithOriginInterface) {\n            Set<File> origins = ((ExceptionWithOriginInterface) e).getOrigin();\n            if (origins != null && origins.size() > 0) {\n                StringBuilder sb = new StringBuilder();\n                for (File o : origins) {\n                    if (o != null) {\n                        if (sb.length() > 0)\n                            sb.append(\", \");\n                        sb.append(o.getName());\n                    }\n                }\n                if (sb.length() > 0)\n                    return sb.toString();\n                else\n                    return null;\n            }\n        }\n        e = e.getCause();\n    }\n    return null;\n}"
            ],
            [
                "zMaskString",
                "de.neemann.digital.core",
                "ObservableValue",
                "static String zMaskString(long value, long highZ, int bits) {\n    StringBuilder sb = new StringBuilder();\n    long m = Bits.up(1, bits - 1);\n    for (int i = 0; i < bits; i++) {\n        if ((highZ & m) != 0) {\n            sb.append(\"z\");\n        } else {\n            if ((value & m) != 0) {\n                sb.append(\"1\");\n            } else {\n                sb.append(\"0\");\n            }\n        }\n        m >>>= 1;\n    }\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core",
                "GlobalValues",
                "/**\n * @return returns the global instance\n */\npublic static GlobalValues getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core.io",
                "MIDIHelper",
                "/**\n * @return the MIDIHelper\n */\npublic static MIDIHelper getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new input\n */\npublic static PinInfo input(String name) {\n    return new PinInfo(name, null, Direction.input);\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name        the pins name\n * @param description the pins description\n * @return the new input\n */\npublic static PinInfo input(String name, String description) {\n    return new PinInfo(name, description, Direction.input);\n}"
            ],
            [
                "output",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new output\n */\npublic static PinInfo output(String name) {\n    return new PinInfo(name, null, Direction.output);\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "PinDescription",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "Direction",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "getKeyByName",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Returns the key of the given name.\n * If key does not exist, null is returned.\n *\n * @param name the name of the key\n * @return the key or null\n */\npublic static Key getKeyByName(String name) {\n    return InstanceHolder.INSTANCE.get(name);\n}"
            ],
            [
                "getKeys",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * @return all available keys\n */\npublic static Iterable<Key> getKeys() {\n    return InstanceHolder.INSTANCE.values();\n}"
            ],
            [
                "combine",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "/**\n * Combines two lists\n *\n * @param a   first list\n * @param b   second list\n * @param <T> the Type of the elements\n * @return the new combined list\n */\npublic static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b) {\n    T[] com = Arrays.copyOf(a.items, a.size() + b.size());\n    System.arraycopy(b.items, 0, com, a.size(), b.size());\n    return new ImmutableList<>(com);\n}"
            ],
            [
                "createSwitchModel",
                "de.neemann.digital.core.switching",
                "PlainSwitch",
                "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException {\n    if (input1 instanceof CommonBusValue) {\n        if (input2 instanceof CommonBusValue) {\n            final CommonBusValue in1 = (CommonBusValue) input1;\n            final CommonBusValue in2 = (CommonBusValue) input2;\n            ObservableValue constant = in1.searchConstant();\n            if (constant != null)\n                return new UniDirectionalSwitch(constant, output2);\n            else {\n                constant = in2.searchConstant();\n                if (constant != null)\n                    return new UniDirectionalSwitch(constant, output1);\n                else\n                    return new RealSwitch(in1, output1, in2, output2);\n            }\n        } else\n            return new UniDirectionalSwitch(input1, output2);\n    } else {\n        if (input2 instanceof CommonBusValue) {\n            return new UniDirectionalSwitch(input2, output1);\n        } else {\n            throw new NodeException(Lang.get(\"err_switchHasNoNet\"), output1, output2);\n        }\n    }\n}"
            ],
            [
                "createOneToN",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a one to N splitter\n *\n * @param bits number of outputs\n * @return the splitter\n */\npublic static Splitter createOneToN(int bits) {\n    Ports in = new Ports();\n    in.add(new Port(0, bits));\n    Ports out = new Ports();\n    for (int i = 0; i < bits; i++) out.add(new Port(i, 1));\n    return new Splitter(in, out);\n}"
            ],
            [
                "createNToOne",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a N to one splitter\n *\n * @param bits number of inputs\n * @return the splitter\n */\npublic static Splitter createNToOne(int bits) {\n    Ports in = new Ports();\n    for (int i = 0; i < bits; i++) in.add(new Port(i, 1));\n    Ports out = new Ports();\n    out.add(new Port(0, bits));\n    return new Splitter(in, out);\n}"
            ],
            [
                "ovs",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * Helper to create a {@link ObservableValues} instance\n *\n * @param items the items\n * @return the created instance\n */\npublic static ObservableValues ovs(ObservableValue... items) {\n    return new ObservableValues(items);\n}"
            ],
            [
                "toShortHex",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * Creates a short hex representation of the given value.\n * Use only to represent a value.\n * If confusion is excluded, the prefix '0x' is omitted.\n * Thus 0x1A3 is converted to \"1A3\" which can not be parsed back to a long because \"0x\" is missing.\n *\n * @param value the value\n * @return the hex string\n */\npublic static String toShortHex(long value) {\n    return toShortHex(value, false);\n}"
            ],
            [
                "up",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value up\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long up(long val, int bits) {\n    if (bits < 64)\n        return val << bits;\n    else\n        return 0;\n}"
            ],
            [
                "down",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value down\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long down(long val, int bits) {\n    if (bits < 64)\n        return val >>> bits;\n    else\n        return 0;\n}"
            ],
            [
                "mask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Creates a bit mask with the lowest [bits] bits set.\n *\n * @param bits the number of 1 bits\n * @return a value with the lowest [bits] bits set.\n */\npublic static long mask(int bits) {\n    if (bits < 64)\n        return (1L << bits) - 1;\n    else\n        return -1;\n}"
            ],
            [
                "signedFlagMask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * calculates the signed flag.\n *\n * @param bits the bit count\n * @return the last used bit ( 1<<(bits-1) )\n */\npublic static long signedFlagMask(int bits) {\n    return up(1, bits - 1);\n}"
            ],
            [
                "isNegative",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Returns true if value is negative\n *\n * @param value the value\n * @param bits  the bit count\n * @return true if the last relevant bit is set\n */\npublic static boolean isNegative(long value, int bits) {\n    return (value & signedFlagMask(bits)) != 0;\n}"
            ],
            [
                "signExtend",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Sign extension of the value.\n * signExtend(3,2) returns -1.\n *\n * @param value the value\n * @param bits  number of bits\n * @return the sign extended value\n */\npublic static long signExtend(long value, int bits) {\n    if (bits >= 64)\n        return value;\n    else {\n        if ((value & signedFlagMask(bits)) == 0)\n            return value;\n        else\n            return value | ~mask(bits);\n    }\n}"
            ],
            [
                "binLn2",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Calculates the number of bits needed to store the given value b.\n *\n * @param b number\n * @return number of bits needed to store b\n */\npublic static int binLn2(long b) {\n    int outBits = 1;\n    while ((1L << outBits) <= b) outBits++;\n    return outBits;\n}"
            ],
            [
                "removeBitFromValue",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Removes a bit from a value.\n * This means it shifts the higher bits down. Behaves like removing an item from a list.\n *\n * @param value the value\n * @param bit   the bit to remove\n * @return the new value\n */\npublic static int removeBitFromValue(int value, int bit) {\n    if (bit > 0) {\n        return ((value & (~((1 << (bit + 1)) - 1))) >>> 1) | (value & ((1 << bit) - 1));\n    } else {\n        return value >>> 1;\n    }\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str the string\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str) throws NumberFormatException {\n    return decode(str, false);\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str         the string\n * @param parseFloats if true also floats are parsed\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str, boolean parseFloats) throws NumberFormatException {\n    if (str == null)\n        return 0;\n    str = str.trim();\n    if (str.length() == 0)\n        return 0;\n    if (str.indexOf(':') >= 0)\n        return decodeFixed(str);\n    if (parseFloats && str.indexOf('.') > -1) {\n        try {\n            if (str.endsWith(\"d\") || str.endsWith(\"D\"))\n                return Double.doubleToLongBits(Double.parseDouble(str.substring(0, str.length() - 1)));\n            else\n                return Float.floatToIntBits(Float.parseFloat(str));\n        } catch (java.lang.NumberFormatException e) {\n            throw new NumberFormatException(str, 0);\n        }\n    }\n    int p = 0;\n    boolean neg = false;\n    if (str.charAt(p) == '-') {\n        neg = true;\n        p++;\n    }\n    if (p >= str.length())\n        throw new NumberFormatException(str, p);\n    boolean wasZero = false;\n    while (str.length() > p && str.charAt(p) == '0') {\n        wasZero = true;\n        p++;\n    }\n    if (p >= str.length())\n        return 0;\n    int radix;\n    if (wasZero) {\n        if (neg)\n            throw new NumberFormatException(str, p);\n        switch(str.charAt(p)) {\n            case 'x':\n            case 'X':\n                radix = 16;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            case 'b':\n            case 'B':\n                radix = 2;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            default:\n                radix = 8;\n        }\n    } else {\n        if (str.charAt(p) == '\\'') {\n            if (neg)\n                throw new NumberFormatException(str, p);\n            p++;\n            if (p == str.length())\n                throw new NumberFormatException(str, p);\n            return str.charAt(p);\n        } else\n            radix = 10;\n    }\n    long val = decode(str, p, radix);\n    if (neg)\n        val = -val;\n    return val;\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes the given string starting at position p\n *\n * @param str   the string to decode\n * @param p     the starting position\n * @param radix the radix\n * @return the value\n * @throws NumberFormatException NumberFormatException\n */\npublic static long decode(String str, int p, int radix) throws NumberFormatException {\n    long val = 0;\n    while (p < str.length()) {\n        int d = Character.digit(str.charAt(p), radix);\n        if (d < 0)\n            throw new NumberFormatException(str, p);\n        val = val * radix + d;\n        p++;\n    }\n    return val;\n}"
            ],
            [
                "getCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Extract the code from the attributes.\n * The code is either stored directly or there is a file given.\n *\n * @param attr the attributes\n * @param root the projects main folder\n * @return the code\n * @throws IOException IOException\n */\nstatic String getCode(ElementAttributes attr, File root) throws IOException {\n    if (attr.contains(Keys.EXTERNAL_CODE))\n        return attr.get(Keys.EXTERNAL_CODE);\n    if (attr.contains(Keys.EXTERNAL_CODE_FILE))\n        return readCode(attr.getFile(Keys.EXTERNAL_CODE_FILE, root));\n    return \"\";\n}"
            ],
            [
                "readCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Reads the code from a file\n *\n * @param file the file\n * @return the code\n * @throws IOException IOException\n */\nstatic String readCode(File file) throws IOException {\n    byte[] data = Files.readAllBytes(file.toPath());\n    return new String(data, StandardCharsets.UTF_8);\n}"
            ],
            [
                "create",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Creates a new application instance\n *\n * @param type the type of the process\n * @param attr the elements attributes\n * @return the created process handler\n */\nstatic Application create(Type type, ElementAttributes attr) {\n    switch(type) {\n        case Generic:\n            return new ApplicationGeneric();\n        case GHDL:\n            return new ApplicationGHDL(attr);\n        case IVERILOG:\n            return new ApplicationIVerilog(attr);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "start",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Helper to start a process.\n * If result value is not null an exception is thrown.\n *\n * @param dir  the folder in which the process is started\n * @param args the argument\n * @return the console output\n * @throws IOException IOException\n */\npublic static String start(File dir, String... args) throws IOException {\n    ProcessBuilder pb = new ProcessBuilder(args).redirectErrorStream(true);\n    if (dir != null)\n        pb.directory(dir);\n    Process p;\n    try {\n        p = pb.start();\n    } catch (IOException e) {\n        throw new CouldNotStartProcessException(Lang.get(\"err_couldNotStartProcess_N\", Arrays.toString(args)), e);\n    }\n    ReaderThread rt = new ReaderThread(p.getInputStream());\n    rt.start();\n    try {\n        int exitValue = p.waitFor();\n        rt.join();\n        String output = rt.toString();\n        if (exitValue != 0)\n            throw new IOException(Lang.get(\"err_exitValueNotNull_N_O\", exitValue, output));\n        return output;\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n}"
            ],
            [
                "joinStrings",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Merges the given string.\n * If all strings are null or empty, null is returned\n *\n * @param strings the strings to join\n * @return the joined string or null\n */\npublic static String joinStrings(String... strings) {\n    StringBuilder sb = new StringBuilder();\n    for (String s : strings) {\n        if (s != null) {\n            String str = s.trim();\n            if (str.length() > 0) {\n                if (sb.length() > 0)\n                    sb.append(\"\\n\");\n                sb.append(str);\n            }\n        }\n    }\n    if (sb.length() > 0)\n        return sb.toString();\n    else\n        return null;\n}"
            ],
            [
                "fromString",
                "de.neemann.digital.cli.cli",
                "Argument",
                "/**\n * Creates a value from a string\n *\n * @param val      the value as a string\n * @param defValue the default value\n * @return the value converted to the type of the default value\n * @throws CLIException CLIException\n */\npublic static Object fromString(String val, Object defValue) throws CLIException {\n    if (defValue instanceof String)\n        return val;\n    else if (defValue instanceof Boolean)\n        switch(val.toLowerCase()) {\n            case \"yes\":\n            case \"1\":\n            case \"true\":\n                return true;\n            case \"no\":\n            case \"0\":\n            case \"false\":\n                return false;\n            default:\n                throw new CLIException(Lang.get(\"cli_notABool_N\", val), 106);\n        }\n    else if (defValue instanceof Integer) {\n        try {\n            return Integer.parseInt(val);\n        } catch (NumberFormatException e) {\n            throw new CLIException(Lang.get(\"cli_notANumber_N\", val), e);\n        }\n    } else\n        throw new CLIException(Lang.get(\"cli_invalidType_N\", defValue.getClass().getSimpleName()), 203);\n}"
            ],
            [
                "fac",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the factorial of a number.\n * If the result is greater as the max long value, the max value is returned.\n *\n * @param n integer\n * @return the factorial of the given number\n */\npublic static long fac(int n) {\n    if (n > 20)\n        return Long.MAX_VALUE;\n    return FAC_TABLE[n];\n}"
            ],
            [
                "getTimeComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the time complexity of optimizing the given fsm\n *\n * @param fsm the fsm\n * @return the time complexity\n */\npublic static long getTimeComplexity(FSM fsm) {\n    List<State> states = fsm.getStates();\n    int size = states.size();\n    int sizeInclDC = 1 << Bits.binLn2(size - 1);\n    if (sizeInclDC > 20)\n        return Long.MAX_VALUE;\n    return fac(sizeInclDC) / fac(sizeInclDC - size);\n}"
            ],
            [
                "calcComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException {\n    TruthTable tt = fsm.createTruthTable(null);\n    MinimizerInterface mi = new MinimizerQuineMcCluskey();\n    ComplexityListener listener = new ComplexityListener(out);\n    for (int i = 0; i < tt.getResultCount(); i++) mi.minimize(tt.getVars(), tt.getResult(i), tt.getResultName(i), listener);\n    return listener.complexity;\n}"
            ],
            [
                "blink",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Blink\n *\n * @return the fsm\n */\npublic static FSM blink() {\n    State off = new State(\"off\");\n    State on = new State(\"on\");\n    return new FSM(off, on).transition(on, off, null).transition(off, on, null);\n}"
            ],
            [
                "rotDecoder",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a debounced rotary switch decoder\n *\n * @return the fsm\n */\npublic static FSM rotDecoder() {\n    State init = new State(\"init\");\n    State top = new State(\"top\");\n    State topSetLeft = new State(\"topSetLeft\").setValues(\"L=1\");\n    State topSetRight = new State(\"topSetRight\").setValues(\"R=1\");\n    State leftTop = new State(\"leftTop\");\n    State leftBottom = new State(\"leftBottom\");\n    State bottom = new State(\"bottom\");\n    State bottomSetLeft = new State(\"bottomSetRight\").setValues(\"R=1\");\n    State bottomSetRight = new State(\"bottomSetLeft\").setValues(\"L=1\");\n    State rightTop = new State(\"rightTop\");\n    State rightBottom = new State(\"rightBottom\");\n    return new FSM(init, top, topSetLeft, leftTop, leftBottom, bottomSetLeft, bottom, bottomSetRight, rightBottom, rightTop, topSetRight).transition(init, top, \"A=0 & B=0\").transition(init, bottom, \"A=1 & B=1\").transition(top, leftTop, \"A=1 & B=0\").transition(top, rightTop, \"A=0 & B=1\").transition(topSetLeft, top, null).transition(topSetRight, top, null).transition(rightTop, top, \"A=0 & B=0\").transition(rightBottom, topSetRight, \"A=0 & B=0\").transition(leftTop, top, \"A=0 & B=0\").transition(leftBottom, topSetLeft, \"A=0 & B=0\").transition(bottom, leftBottom, \"A=1 & B=0\").transition(bottom, rightBottom, \"A=0 & B=1\").transition(bottomSetLeft, bottom, null).transition(bottomSetRight, bottom, null).transition(rightBottom, bottom, \"A=1 & B=1\").transition(rightTop, bottomSetRight, \"A=1 & B=1\").transition(leftBottom, bottom, \"A=1 & B=1\").transition(leftTop, bottomSetLeft, \"A=1 & B=1\");\n}"
            ],
            [
                "counter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a counter\n *\n * @param n the number of states\n * @return the fsm\n */\npublic static FSM counter(int n) {\n    FSM fsm = new FSM();\n    State last = null;\n    for (int i = 0; i < n; i++) {\n        State s = new State(\"\").setNumber(i);\n        fsm.add(s);\n        if (last != null)\n            fsm.transition(last, s, null);\n        last = s;\n    }\n    fsm.transition(last, fsm.getStates().get(0), null);\n    return fsm;\n}"
            ],
            [
                "trafficLight",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLight() {\n    State red = new State(\"red\").setNumber(0).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(1).setValues(\"R=1,Y=1\");\n    State green = new State(\"green\").setNumber(2).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(3).setValues(\"Y=1\");\n    return new FSM(red, redYellow, green, yellow).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "trafficLightMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLightMedwedew() {\n    State init = new State(\"init\").setNumber(0);\n    State red = new State(\"red\").setNumber(1).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(3).setValues(\"R=1, Y=1\");\n    State green = new State(\"green\").setNumber(4).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(2).setValues(\"Y=1\");\n    return new FSM(init, red, redYellow, green, yellow).transition(init, red, null).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "selCounter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM selCounter() {\n    State s0 = new State(\"s0\").setNumber(0);\n    State s1 = new State(\"s1\").setNumber(1);\n    State s2 = new State(\"s2\").setNumber(2);\n    State s3 = new State(\"s3\").setNumber(3);\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, null).transition(s0, s0, \"!T0  !T1\").transition(s1, s2, null).transition(s1, s0, \"T0 !T1\").transition(s2, s3, null).transition(s2, s0, \"!T0 T1\").transition(s3, s0, null);\n}"
            ],
            [
                "stepper",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepper() {\n    State s0 = new State(\"s0\").setNumber(0).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(1).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(2).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(3).setValues(\"P3=1,P0=1\");\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "stepperMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepperMedwedew() {\n    State init = new State(\"init\").setNumber(0).setValues(\"P0=2,P1=2,P2=2,P3=2\");\n    State s0 = new State(\"s0\").setNumber(3).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(6).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(12).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(9).setValues(\"P3=1,P0=1\");\n    return new FSM(init, s0, s1, s2, s3).transition(init, s0, null).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"fsm\", FSM.class);\n    xStream.alias(\"state\", State.class);\n    xStream.alias(\"transition\", Transition.class);\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"vectorf\", VectorFloat.class);\n    xStream.aliasAttribute(VectorFloat.class, \"x\", \"x\");\n    xStream.aliasAttribute(VectorFloat.class, \"y\", \"y\");\n    return xStream;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename filename\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(File filename) throws IOException {\n    final FSM fsm = loadFSM(new FileInputStream(filename));\n    fsm.file = filename;\n    return fsm;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new fsm instance from a stored file\n *\n * @param in the input stream\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        final FSM fsm = (FSM) xStream.fromXML(in);\n        for (Transition t : fsm.transitions) t.setFSM(fsm);\n        for (State s : fsm.states) s.setFSM(fsm);\n        fsm.modified = false;\n        fsm.activeStateTransition = -1;\n        return fsm;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "get",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string of key if no translation present\n */\npublic static String get(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKey(key, params);\n}"
            ],
            [
                "getNull",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string or null if no translation present\n */\npublic static String getNull(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKeyNull(key, params);\n}"
            ],
            [
                "getBundle",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the resource bundle\n */\npublic static Bundle getBundle() {\n    return InstanceHolder.INSTANCE.bundle;\n}"
            ],
            [
                "currentLanguage",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the current language\n */\npublic static Language currentLanguage() {\n    return InstanceHolder.INSTANCE.currentLanguage;\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * Resolves a multilingual user defined string.\n * Allows the user to define multilingual content by using a simple syntax:\n * You can enter strings like \"Word! {{de Welt!}} {{fr Monde!}}\". This method extracts\n * the appropriate string for the current language.\n *\n * @param text the complete text description\n * @return the evaluated text.\n */\npublic static String evalMultilingualContent(String text) {\n    return evalMultilingualContent(text, currentLanguage());\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "static String evalMultilingualContent(String text, Language currentLanguage) {\n    int pos = text.indexOf(\"{{\");\n    if (pos < 0)\n        return text;\n    String def = text.substring(0, pos).trim();\n    do {\n        int p2 = pos + 1;\n        int count = 1;\n        while (count > 0) {\n            char c = text.charAt(p2);\n            if (c == '{')\n                count++;\n            else if (c == '}')\n                count--;\n            p2++;\n            if (p2 == text.length() && count > 0) {\n                p2 = 1;\n                break;\n            }\n        }\n        p2 -= 2;\n        if (p2 > pos + 3) {\n            String l = text.substring(pos + 2, pos + 4);\n            if (l.equalsIgnoreCase(currentLanguage.getName()))\n                return text.substring(pos + 4, p2).trim();\n            if (l.equalsIgnoreCase(\"en\") && def.isEmpty())\n                def = text.substring(pos + 4, p2).trim();\n            pos = text.indexOf(\"{{\", p2);\n        } else\n            return def;\n    } while (pos > 0);\n    return def;\n}"
            ],
            [
                "lowest",
                "de.neemann.digital.testing.parser",
                "OperatorPrecedence",
                "/**\n * @return the lowest operator precedence to start evaluation with\n */\npublic static OperatorPrecedence lowest() {\n    return OR;\n}"
            ],
            [
                "addOne",
                "de.neemann.digital.analyse",
                "ModelAnalyser",
                "/**\n * Adds the \"+1\" to the variables name\n *\n * @param name the vars name\n * @return the modified name\n */\npublic static String addOne(String name) {\n    if (name.endsWith(\"^n\"))\n        return name.substring(0, name.length() - 1) + \"{n+1}\";\n    else\n        return name + \"+1\";\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param file the file\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(File file) throws IOException {\n    return readCSV(new FileReader(file));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the string to read\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(String csv) throws IOException {\n    return readCSV(new StringReader(csv));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the reader\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(Reader csv) throws IOException {\n    BufferedReader r = new BufferedReader(csv);\n    TruthTable tt = readHeader(r);\n    while (true) {\n        String line = r.readLine();\n        if (line == null)\n            return tt;\n        line = line.trim();\n        if (!line.isEmpty())\n            parseLine(tt, line);\n    }\n}"
            ],
            [
                "createDoubledValues",
                "de.neemann.digital.analyse.quinemc",
                "BoolTableByteArray",
                "/**\n * Creates a table where all values added twive\n *\n * @param values the original values\n * @return the new values\n */\npublic static BoolTableByteArray createDoubledValues(BoolTable values) {\n    BoolTableByteArray t = new BoolTableByteArray(values.size() * 2);\n    for (int i = 0; i < values.size(); i++) {\n        int v = values.get(i).asInt();\n        t.set(i * 2, v);\n        t.set(i * 2 + 1, v);\n    }\n    return t;\n}"
            ],
            [
                "simplify",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Simplifies the given expression.\n * If no simplification was found, the original expression is returned unchanged.\n *\n * @param expression the expression to simplify\n * @return the simplified expression\n * @throws ExpressionException ExpressionException\n */\npublic static Expression simplify(Expression expression) throws ExpressionException {\n    int initialCplx = expression.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    Expression newExp = new QuineMcCluskey(expression).simplify().getExpression();\n    int newCplx = newExp.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    if (newCplx < initialCplx)\n        return newExp;\n    else\n        return expression;\n}"
            ],
            [
                "addAnd",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Creates the final expression\n *\n * @param e         the expression to complete\n * @param rows      the rows to add\n * @param variables the variables to use to build the expression\n * @return the expression\n */\npublic static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables) {\n    for (TableRow r : rows) {\n        Expression n = r.getExpression(variables);\n        if (e == null)\n            e = n;\n        else\n            e = or(e, n);\n    }\n    return e;\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from a bool\n *\n * @param bool the bool\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(boolean bool) {\n    if (bool) {\n        return one;\n    } else {\n        return zero;\n    }\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from an int\n * 0 and 1 work as expected, any other value means \"dont care\"\n *\n * @param value the value\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(int value) {\n    switch(value) {\n        case 0:\n            return ThreeStateValue.zero;\n        case 1:\n            return ThreeStateValue.one;\n        default:\n            return ThreeStateValue.dontCare;\n    }\n}"
            ],
            [
                "doImplicitTypeCasts",
                "de.neemann.digital.analyse",
                "SubstituteLibrary",
                "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val) {\n    if (expectedClass == Integer.class && val instanceof Long) {\n        long l = (Long) val;\n        if (l <= Integer.MAX_VALUE && l >= Integer.MIN_VALUE)\n            return (int) l;\n    } else if (expectedClass == Long.class && val instanceof Number) {\n        return ((Number) val).longValue();\n    } else if (expectedClass == Color.class && val instanceof Number) {\n        return new Color(((Number) val).intValue());\n    } else if (expectedClass == Boolean.class && val instanceof Number) {\n        long b = ((Number) val).longValue();\n        return b != 0;\n    } else if (expectedClass == InValue.class) {\n        if (val instanceof Number)\n            return new InValue(((Number) val).longValue());\n        else {\n            try {\n                return new InValue(val.toString());\n            } catch (Bits.NumberFormatException e) {\n                return val;\n            }\n        }\n    } else if (expectedClass == InverterConfig.class && val instanceof java.util.List) {\n        InverterConfig.Builder b = new InverterConfig.Builder();\n        for (Object i : (java.util.List) val) b.add(i.toString());\n        return b.build();\n    } else if (expectedClass == DataField.class && val instanceof java.util.List) {\n        java.util.List list = (java.util.List) val;\n        long[] longs = new long[list.size()];\n        for (int i = 0; i < list.size(); i++) if (list.get(i) instanceof Number)\n            longs[i] = ((Number) list.get(i)).longValue();\n        else\n            return val;\n        return new DataField(longs);\n    } else if (expectedClass == Rotation.class && val instanceof Number) {\n        int r = ((Number) val).intValue();\n        return new Rotation(r % 4);\n    } else if (expectedClass == File.class && val instanceof String) {\n        return new File(val.toString());\n    } else if (expectedClass == TestCaseDescription.class && val instanceof String) {\n        try {\n            return new TestCaseDescription(val.toString());\n        } catch (Exception e) {\n            return val;\n        }\n    } else if (expectedClass.isEnum() && val instanceof Number) {\n        Class<Enum<?>> e = (Class<Enum<?>>) expectedClass;\n        Object[] values = e.getEnumConstants();\n        int index = ((Number) val).intValue();\n        if (index < 0 || index >= values.length)\n            return values[0];\n        else\n            return values[index];\n    }\n    return val;\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Iterable<Expression> exp) {\n    return simplify(new Or(exp, true));\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), true));\n}"
            ],
            [
                "xor",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new XOR expression\n *\n * @param a the expression to XOR\n * @param b the expression to XOR\n * @return the created expression\n */\npublic static Expression xor(Expression a, Expression b) {\n    if (b == Constant.ONE) {\n        return Not.not(a);\n    } else if (b == Constant.ZERO) {\n        return a;\n    } else if (a == Constant.ONE) {\n        return Not.not(b);\n    } else if (a == Constant.ZERO) {\n        return b;\n    } else\n        return simplify(new XOr(a, b));\n}"
            ],
            [
                "orNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression orNoMerge(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), false));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Iterable<Expression> exp) {\n    return simplify(new And(exp, true));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), true));\n}"
            ],
            [
                "andNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression andNoMerge(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), false));\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifier\n *\n * @param expression the expression to modify\n * @param modifier   the modifier to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier modifier) {\n    expression.modify(modifier);\n    return modifier.modify(expression);\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifiers\n *\n * @param expression the expression to modify\n * @param modifiers  the modifiers to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier... modifiers) {\n    for (ExpressionModifier m : modifiers) expression = modifyExpression(expression, m);\n    return expression;\n}"
            ],
            [
                "v",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates a new Variable\n *\n * @param name the variables name\n * @return the new Variable\n */\npublic static Variable v(String name) {\n    return new Variable(name);\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates an array of variables\n *\n * @param n the number of varfiables to create.\n * @return variables named \"A0\", \"A1\", \"A2\" and so on\n */\npublic static ArrayList<Variable> vars(int n) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (int i = 0; i < n; i++) v.add(new Variable(\"\" + (char) ('A' + i)));\n    return v;\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Create a list of variables using the given names\n *\n * @param names the names used to create the variables\n * @return the list of variables\n */\npublic static ArrayList<Variable> vars(String... names) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (String n : names) v.add(new Variable(n));\n    return v;\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable.\n */\npublic static boolean isVar(Expression e) {\n    return e instanceof Variable;\n}"
            ],
            [
                "isVarOrNotVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable or a inverted variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable or a inverted variable.\n */\npublic static boolean isVarOrNotVar(Expression e) {\n    return isVar(e) || (e instanceof Not && isVar(((Not) e).getExpression()));\n}"
            ],
            [
                "getDefaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * @return the default format\n */\npublic static FormatToExpression getDefaultFormat() {\n    return Settings.getInstance().get(Keys.SETTINGS_EXPRESSION_FORMAT);\n}"
            ],
            [
                "defaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * Formats a expression to a string.\n * Uses the default format for presentation on the screen.\n *\n * @param exp the expression to format\n * @return the string representation\n */\npublic static String defaultFormat(Expression exp) {\n    return getDefaultFormat().format(exp);\n}"
            ],
            [
                "not",
                "de.neemann.digital.analyse.expression",
                "Not",
                "/**\n * Creates a not expression.\n * Simplifies the expression if possible.\n *\n * @param a the child expression to invert\n * @return the inverted expression\n */\npublic static Expression not(Expression a) {\n    if (a == Constant.ONE)\n        return Constant.ZERO;\n    if (a == Constant.ZERO)\n        return Constant.ONE;\n    if (a instanceof Not && !((Not) a).protect) {\n        return ((Not) a).expression;\n    } else\n        return new Not(a);\n}"
            ],
            [
                "readFromFile",
                "de.neemann.digital.analyse",
                "TruthTable",
                "/**\n * Load the given file and returns a truth table instance\n *\n * @param filename filename\n * @return the {@link TruthTable}\n * @throws IOException IOException\n */\npublic static TruthTable readFromFile(File filename) throws IOException {\n    if (filename.getName().toLowerCase().endsWith(\".csv\"))\n        return CSVImporter.readCSV(filename);\n    else {\n        XStream xStream = getxStream();\n        try (InputStream in = new FileInputStream(filename)) {\n            return (TruthTable) xStream.fromXML(in);\n        }\n    }\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param s the signal\n * @return the port pins used\n */\npublic static SplitPinString create(Signal s) {\n    if (s.missingPinNumber())\n        return EMPTY;\n    return create(s.getPinNumber());\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param pinStr the pins definition;\n * @return the port pins used\n */\npublic static SplitPinString create(String pinStr) {\n    if (pinStr == null || pinStr.trim().length() == 0)\n        return EMPTY;\n    StringTokenizer st = new StringTokenizer(pinStr, \",;\");\n    ArrayList<String> pins = new ArrayList<>();\n    while (st.hasMoreTokens()) pins.add(st.nextToken().trim());\n    return new PinsArray(pins);\n}"
            ],
            [
                "checkSuffix",
                "de.neemann.digital.gui",
                "SaveAsHelper",
                "/**\n * Adds the given suffix to the file\n *\n * @param filename filename\n * @param suffix   suffix\n * @return the file name with the given suffix\n */\npublic static File checkSuffix(File filename, String suffix) {\n    if (suffix == null || filename == null)\n        return filename;\n    String name = filename.getName();\n    int p = name.lastIndexOf('.');\n    if (p >= 0) {\n        String suf = name.substring(p + 1).toLowerCase();\n        if (KNOWN.contains(suf))\n            name = name.substring(0, p);\n        while (name.length() > 0 && name.charAt(name.length() - 1) == '.') name = name.substring(0, name.length() - 1);\n    }\n    return new File(filename.getParentFile(), name + \".\" + suffix);\n}"
            ],
            [
                "addF1Traversal",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Adds F1 as a focus traversal key to a text components.\n *\n * @param text The text component\n * @param <TC> the concrete type of the text component\n * @return the given text component\n */\npublic static <TC extends JTextComponent> TC addF1Traversal(TC text) {\n    HashSet<AWTKeyStroke> set = new HashSet<>(text.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n    set.add(KeyStroke.getKeyStroke(\"F1\"));\n    text.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, set);\n    return text;\n}"
            ],
            [
                "createUndoManager",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Enables undo in the given text component.\n *\n * @param text the text component\n * @return the undo manager\n */\npublic static UndoManager createUndoManager(JTextComponent text) {\n    final UndoManager undoManager;\n    undoManager = new UndoManager();\n    text.getDocument().addUndoableEditListener(undoManager);\n    text.addKeyListener(new KeyAdapter() {\n\n        @Override\n        public void keyPressed(KeyEvent e) {\n            if (e.getKeyCode() == KeyEvent.VK_Z && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canUndo())\n                    undoManager.undo();\n            } else if (e.getKeyCode() == KeyEvent.VK_Y && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canRedo())\n                    undoManager.redo();\n            }\n        }\n    });\n    return undoManager;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components.modification",
                "ModifyInsertWires",
                "/**\n * Creates a simplified modification.\n *\n * @param newWires the wires to insert\n * @return the modification\n */\npublic static Modification<Circuit> create(List<Wire> newWires) {\n    switch(newWires.size()) {\n        case 0:\n            return null;\n        case 1:\n            return new ModifyInsertWire(newWires.get(0));\n        default:\n            return new ModifyInsertWires(newWires);\n    }\n}"
            ],
            [
                "getToolTipName",
                "de.neemann.digital.gui.components.modification",
                "ModificationOfVisualElement",
                "/**\n * Creates a translated name of the given element\n *\n * @param ve the element\n * @return translated name\n */\npublic static String getToolTipName(VisualElement ve) {\n    String s = Lang.getNull(\"elem_\" + ve.getElementName());\n    if (s == null) {\n        s = ve.getElementName();\n        if (s.endsWith(\".dig\"))\n            s = s.substring(0, s.length() - 4);\n    }\n    String l = ve.getElementAttributes().get(Keys.LABEL);\n    if (l.length() > 0)\n        s += \" (\" + l + \")\";\n    return s;\n}"
            ],
            [
                "getTerminal",
                "de.neemann.digital.gui.components.terminal",
                "TerminalDialog",
                "/**\n * Creates a new GUI terminal\n *\n * @param model the model\n * @param attr  the terminals attributes\n * @return the terminal interface\n */\nstatic TerminalInterface getTerminal(Model model, ElementAttributes attr) {\n    return new MyTerminal(model, attr);\n}"
            ],
            [
                "createList",
                "de.neemann.digital.gui.components",
                "CircuitTransferable",
                "/**\n * Creates a list of objects from inserted data\n * Can also throw a {@link ClassCastException}!\n *\n * @param data         the inserted data\n * @param shapeFactory the shapeFactory to set to the elements\n * @return the elements or null\n * @throws IOException IOException\n */\npublic static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException {\n    if (!(data instanceof String))\n        return null;\n    XStream xStream = Circuit.getxStream();\n    try (Reader in = new StringReader(data.toString())) {\n        ArrayList<Movable> elements = (ArrayList<Movable>) xStream.fromXML(in);\n        if (elements == null)\n            return null;\n        for (Movable m : elements) if (m instanceof VisualElement)\n            ((VisualElement) m).setShapeFactory(shapeFactory);\n        return elements;\n    }\n}"
            ],
            [
                "createURLStreamHandlerFactory",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "/**\n * @return factory which catches 'image' protocol requests to deliver images via an URL.\n */\npublic static URLStreamHandlerFactory createURLStreamHandlerFactory() {\n    return new MyURLStreamHandlerFactory();\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "MyURLStreamHandlerFactory",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "isSequentialVar",
                "de.neemann.digital.gui.components.table",
                "ExpressionListenerJK",
                "/**\n * If the name belongs to a sequential state var, the state vars name is returned.\n * Otherwise a null is returned\n *\n * @param name the name of the variable\n * @return the state variable or null\n */\npublic static String isSequentialVar(String name) {\n    String detName = null;\n    if (name.endsWith(\"n+1\")) {\n        detName = name.substring(0, name.length() - 2);\n    } else if (name.endsWith(\"{n+1}\")) {\n        detName = name.substring(0, name.length() - 5) + \"n\";\n    }\n    return detName;\n}"
            ],
            [
                "getAttrList",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * @return returns the list of circuit attributes\n */\npublic static ArrayList<Key> getAttrList() {\n    return ATTR_LIST;\n}"
            ],
            [
                "raster",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * rounds the given vector to the raster\n *\n * @param pos the vector\n * @return pos round to raster\n */\npublic static Vector raster(Vector pos) {\n    return new Vector((int) Math.round((double) pos.x / SIZE) * SIZE, (int) Math.round((double) pos.y / SIZE) * SIZE);\n}"
            ],
            [
                "createLiveDialog",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "/**\n * Creates a instance prepared for \"live logging\"\n *\n * @param owner      the parent frame\n * @param model      the model\n * @param microStep  stepping mode\n * @param ordering   the ordering to use\n * @param sampleSize the number of samples\n * @return the created instance\n */\npublic static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize) {\n    String title;\n    if (microStep)\n        title = Lang.get(\"win_measures_microstep\");\n    else\n        title = Lang.get(\"win_measures_fullstep\");\n    ArrayList<Signal> signals = model.getSignalsCopy();\n    signals.removeIf(signal -> !signal.isShowInGraph());\n    new OrderMerger<String, Signal>(ordering) {\n\n        @Override\n        public boolean equals(Signal a, String b) {\n            return a.getName().equals(b);\n        }\n    }.order(signals);\n    ValueTableObserver valueTableObserver = new ValueTableObserver(microStep, signals, sampleSize);\n    GraphDialog graphDialog = new GraphDialog(owner, title, valueTableObserver.getLogData(), model, true).setColumnInfo(createColumnsInfo(signals));\n    graphDialog.addWindowListener(new WindowAdapter() {\n\n        @Override\n        public void windowOpened(WindowEvent e) {\n            model.addObserver(valueTableObserver);\n        }\n\n        @Override\n        public void windowClosed(WindowEvent e) {\n            model.removeObserver(valueTableObserver);\n        }\n    });\n    return graphDialog;\n}"
            ],
            [
                "createColumnsInfo",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals) {\n    ValueTable.ColumnInfo[] info = new ValueTable.ColumnInfo[signals.size()];\n    for (int i = 0; i < signals.size(); i++) {\n        Signal s = signals.get(i);\n        info[i] = new ValueTable.ColumnInfo(s.getFormat(), s.getValue().getBits());\n    }\n    return info;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "isExperimentalMode",
                "de.neemann.digital.gui",
                "Main",
                "/**\n * @return true if experimental features are enabled\n */\npublic static boolean isExperimentalMode() {\n    return experimental;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "WindowManager",
                "/**\n * @return the WindowManager\n */\npublic static WindowManager getInstance() {\n    return InstanceHolderClass.INSTANCE;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "Settings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static Settings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "getRange",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog bit range\n *\n * @param bits the number of bits\n * @return the bit range\n */\npublic static String getRange(int bits) {\n    if (bits == 1)\n        return \"\";\n    else\n        return \"[\" + (bits - 1) + \":0]\";\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog type for a signal\n *\n * @param def  the signal type (input or output) used if dir is not \"inout\"\n * @param dir  used to check if direction is \"inout\"\n * @param bits the number of bits\n * @return the verilog signal type\n */\npublic static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits) {\n    String result;\n    if (dir == HDLPort.Direction.INOUT)\n        result = \"inout\";\n    else\n        result = (def == HDLPort.Direction.IN) ? \"input\" : \"output\";\n    if (bits > 1) {\n        result += \" [\" + (bits - 1) + \":0]\";\n    }\n    return result;\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    return (bits + \"'b\" + s);\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.verilog2.lib",
                "VerilogTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given\n * element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(MODULE_PREFIX + elementName);\n}"
            ],
            [
                "createFromJar",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n *\n * @param path the path of the file to load\n * @param cl   the classloader used to load the template. If set to null, the SystemClassLoader is used\n * @return the statement\n * @throws IOException     IOException\n * @throws ParserException ParserException\n */\npublic static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException {\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    InputStream in = cl.getResourceAsStream(path);\n    if (in == null)\n        throw new FileNotFoundException(\"file not found: \" + path);\n    try (Reader r = new InputStreamReader(in, StandardCharsets.UTF_8)) {\n        Parser p = new Parser(r, path);\n        return p.parse();\n    }\n}"
            ],
            [
                "createFromJarStatic",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n * Throws only a RuntimeException so use with care!\n *\n * @param path the path of the file to load\n * @return the statement\n */\npublic static Statement createFromJarStatic(String path) {\n    try {\n        return createFromJar(path, null);\n    } catch (IOException | ParserException e) {\n        throw new RuntimeException(\"could not parse: \" + path, e);\n    }\n}"
            ],
            [
                "isWhiteSpace",
                "de.neemann.digital.hdl.hgs",
                "Tokenizer",
                "/**\n * Returns true if the given character is a white space.\n *\n * @param c the character to test\n * @return true in c is a white space\n */\npublic static boolean isWhiteSpace(int c) {\n    return c == ' ' || c == '\\t' || c == '\\n' || c == '\\r';\n}"
            ],
            [
                "toLong",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a long\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static long toLong(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toDouble",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a double\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static double toDouble(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).doubleValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toInt",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an int\n *\n * @param value the value to convert\n * @return the int value\n * @throws HGSEvalException HGSEvalException\n */\npublic static int toInt(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).intValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toBool",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a bool\n *\n * @param value the value to convert\n * @return the bool value\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean toBool(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue() != 0;\n    if (value instanceof Boolean)\n        return ((Boolean) value);\n    throw new HGSEvalException(\"Must be an integer or a bool, is: \" + value.getClass().getSimpleName() + \"=\" + value);\n}"
            ],
            [
                "toString",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a string\n *\n * @param value the value to convert\n * @return the string\n * @throws HGSEvalException HGSEvalException\n */\npublic static String toString(Object value) throws HGSEvalException {\n    if (value instanceof String)\n        return value.toString();\n    throw new HGSEvalException(\"must be a string, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toArray",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an array\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSArray toArray(Object value) throws HGSEvalException {\n    if (value instanceof HGSArray)\n        return (HGSArray) value;\n    if (value instanceof List)\n        return new HGSArrayList((List) value);\n    throw new HGSEvalException(\"must be an array, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toMap",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a map\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSMap toMap(Object value) throws HGSEvalException {\n    if (value instanceof HGSMap)\n        return (HGSMap) value;\n    if (value instanceof Map)\n        return new HGSMapMap((Map) value);\n    throw new HGSEvalException(\"must be a map, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "equals",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Compares two values\n *\n * @param a a value\n * @param b a value\n * @return true if both values are equal\n */\npublic static boolean equals(Object a, Object b) {\n    if (a instanceof Double || b instanceof Double)\n        return a.equals(b);\n    else if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() == ((Number) b).longValue();\n    else if (a instanceof String || b instanceof String)\n        return a.toString().equals(b.toString());\n    else\n        return a.equals(b);\n}"
            ],
            [
                "add",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Adds two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object add(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) + toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() + ((Number) b).longValue();\n    if (a instanceof String || b instanceof String)\n        return a.toString() + b.toString();\n    throw new HGSEvalException(\"arguments must be int or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "sub",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Subtracts two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object sub(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) - toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() - ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "mul",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Multiplies two values\n *\n * @param a a value\n * @param b a value\n * @return the product\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object mul(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) * toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() * ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "div",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Divides two numbers\n *\n * @param a a value\n * @param b a value\n * @return the quotient\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object div(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) / toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() / ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "or",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an or operation\n *\n * @param a a value\n * @param b a value\n * @return the or'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object or(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() | ((Number) b).longValue();\n    return toBool(a) || toBool(b);\n}"
            ],
            [
                "xor",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an xor operation\n *\n * @param a a value\n * @param b a value\n * @return the xor'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object xor(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() ^ ((Number) b).longValue();\n    return toBool(a) ^ toBool(b);\n}"
            ],
            [
                "and",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an and operation\n *\n * @param a a value\n * @param b a value\n * @return the and'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object and(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() & ((Number) b).longValue();\n    return toBool(a) && toBool(b);\n}"
            ],
            [
                "not",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs a not operation\n *\n * @param value a value\n * @return the inverted value\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object not(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ~((Number) value).longValue();\n    return !toBool(value);\n}"
            ],
            [
                "neg",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Changes the sign of the given value\n *\n * @param value the value\n * @return value with changed sign\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object neg(Object value) throws HGSEvalException {\n    if (value instanceof Double)\n        return -(Double) value;\n    return -toLong(value);\n}"
            ],
            [
                "less",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a&lt;b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean less(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) < toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) < toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) < 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "lessEqual",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a<=b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean lessEqual(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) <= toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) <= toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) <= 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "trimRight",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the right side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimRight(String str) {\n    int initial = str.length() - 1;\n    int pos = initial;\n    while (pos >= 0 && isWhiteSpace(str.charAt(pos))) pos--;\n    if (pos == initial)\n        return str;\n    else\n        return str.substring(0, pos + 1);\n}"
            ],
            [
                "trimLeft",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the left side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimLeft(String str) {\n    int pos = 0;\n    while (pos < str.length() && isWhiteSpace(str.charAt(pos))) pos++;\n    if (pos == 0)\n        return str;\n    else\n        return str.substring(pos);\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Returns the vhdl type name\n *\n * @param bits the number of bits\n * @return the types name\n */\npublic static String getType(int bits) {\n    if (bits == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector(\" + (bits - 1) + \" downto 0)\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    int missing = bits - s.length();\n    if (missing > 0)\n        s = ZEROS.substring(0, missing) + s;\n    if (bits > 1)\n        s = \"\\\"\" + s + \"\\\"\";\n    else\n        s = \"'\" + s + \"'\";\n    return s;\n}"
            ],
            [
                "isTemplate",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Returns true, if a hdl template is available.\n *\n * @param etd the {@link ElementTypeDescription}\n * @return true if VHDL template is available\n */\npublic static boolean isTemplate(ElementTypeDescription etd) {\n    ClassLoader cl = etd.getClassLoader();\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    URL url = cl.getResource(createFileName(ENTITY_PREFIX + etd.getName()));\n    return url != null;\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(ENTITY_PREFIX + elementName);\n}"
            ],
            [
                "zero",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Create a vhdl zero with the given bit number\n *\n * @param bits the bit number\n * @return '0' or (others => '0')\n */\npublic static String zero(long bits) {\n    if (bits == 1)\n        return \"'0'\";\n    else\n        return \"(others => '0')\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, long bits) {\n    return VHDLCreator.value(val, (int) bits);\n}"
            ],
            [
                "genericType",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates the code for a generic type\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String genericType(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector ((Bits-1) downto 0)\";\n}"
            ],
            [
                "type",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a type of given width\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String type(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector (\" + (n - 1) + \" downto 0)\";\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.hdl.model2.expression",
                "Expression",
                "/**\n * Helper to check if an expression is a net reference\n *\n * @param expr the expression to check\n * @param net  the net\n * @return true if the expression is a reference to the given net\n */\nstatic boolean isVar(Expression expr, HDLNet net) {\n    return expr instanceof ExprVar && ((ExprVar) expr).getNet() == net;\n}"
            ],
            [
                "isConstant",
                "de.neemann.digital.hdl.model2.expression",
                "ExprConstant",
                "/**\n * Returns the constant if th given node represents a constant\n *\n * @param node the node\n * @return the constant of null if node is not a constant\n */\npublic static ExprConstant isConstant(HDLNode node) {\n    if (node instanceof HDLNodeAssignment) {\n        HDLNodeAssignment expr = (HDLNodeAssignment) node;\n        if (expr.getExpression() instanceof ExprConstant) {\n            return (ExprConstant) expr.getExpression();\n        }\n    }\n    return null;\n}"
            ],
            [
                "getHighZ",
                "de.neemann.digital.data",
                "Value",
                "/**\n * @return returns a high z value\n */\npublic static Value getHighZ() {\n    return new Value(0, Type.HIGHZ);\n}"
            ],
            [
                "calcBackOffset",
                "de.neemann.digital.builder.circuit",
                "FragmentExpression",
                "static int calcBackOffset(int size, int i) {\n    if ((size & 1) != 0 && i == (size - 1) / 2)\n        return 0;\n    if (i >= size / 2)\n        return size - i;\n    else\n        return i + 1;\n}"
            ],
            [
                "isXNor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXNor(long[] data) {\n    for (int i = 0; i < data.length; i++) if ((Integer.bitCount(i) & 1) == data[i])\n        return false;\n    return true;\n}"
            ],
            [
                "isXor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXor(long[] data) {\n    for (int i = 0; i < data.length; i++) if (!((Integer.bitCount(i) & 1) == data[i]))\n        return false;\n    return true;\n}"
            ],
            [
                "getLibPath",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * @return the additional library path\n */\npublic static File getLibPath() {\n    String path;\n    try {\n        path = ElementLibrary.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath().replace('\\\\', '/');\n    } catch (URISyntaxException e) {\n        return new File(\"noLibFound\");\n    }\n    if (path.endsWith(\"/target/classes/\"))\n        return toCanonical(new File(path.substring(0, path.length() - 16) + \"/src/main/dig/lib\"));\n    if (path.endsWith(\"/target/Digital.jar\"))\n        return new File(path.substring(0, path.length() - 19) + \"/src/main/dig/lib\");\n    if (path.endsWith(\"Digital.jar\"))\n        return new File(path.substring(0, path.length() - 12) + \"/lib\");\n    return new File(\"noLibFound\");\n}"
            ],
            [
                "createCustomDescription",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * Creates a custom element description.\n *\n * @param file    the file\n * @param circuit the circuit\n * @param library the library\n * @return the type description\n * @throws PinException PinException\n */\npublic static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException {\n    ElementTypeDescriptionCustom d = new ElementTypeDescriptionCustom(file, circuit, library);\n    d.setElementFactory(attributes -> new CustomElement(d));\n    return d;\n}"
            ],
            [
                "createDeclarationDefault",
                "de.neemann.digital.draw.library",
                "ElementTypeDescriptionCustom",
                "/**\n * Creates the default for custom element declarations\n *\n * @param circuit the circuit\n * @return the default code template\n * @throws NodeException NodeException\n */\npublic static String createDeclarationDefault(Circuit circuit) throws NodeException {\n    TreeSet<String> nameSet = new TreeSet<>();\n    for (VisualElement ve : circuit.getElements()) {\n        String gen = ve.getElementAttributes().get(Keys.GENERIC).trim();\n        if (!gen.isEmpty()) {\n            try {\n                Parser p = new Parser(gen);\n                p.enableRefReadCollection();\n                p.parse(false);\n                for (Reference r : p.getRefsRead()) {\n                    if (r instanceof ReferenceToStruct) {\n                        ReferenceToStruct st = (ReferenceToStruct) r;\n                        if (st.getParent() instanceof ReferenceToVar) {\n                            ReferenceToVar var = (ReferenceToVar) st.getParent();\n                            if (var.getName().equals(\"args\")) {\n                                nameSet.add(st.getName());\n                            }\n                        }\n                    }\n                }\n            } catch (ParserException | IOException e) {\n                final NodeException ex = new NodeException(Lang.get(\"err_evaluatingGenericsCode_N_N\", ve, gen), e);\n                ex.setOrigin(circuit.getOrigin());\n                throw ex;\n            }\n        }\n    }\n    StringBuilder sb = new StringBuilder();\n    for (String name : nameSet) sb.append(name).append(\" := ;\\n\");\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Returns a comparator instance\n *\n * @return the singleton instance\n */\npublic static NumStringComparator getInstance() {\n    return InstanceHolder.INSTANCE;\n}"
            ],
            [
                "compareStr",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Compare two strings\n *\n * @param a a string\n * @param b a string\n * @return the comparison result\n */\npublic static int compareStr(String a, String b) {\n    int pa = 0;\n    int pb = 0;\n    while (true) {\n        final boolean ae = pa == a.length();\n        final boolean be = pb == b.length();\n        if (ae && be)\n            return 0;\n        else if (ae)\n            return -1;\n        else if (be)\n            return 1;\n        char ca = Character.toLowerCase(a.charAt(pa));\n        char cb = Character.toLowerCase(b.charAt(pb));\n        if (isDigit(ca) && isDigit(cb)) {\n            ParseNumber da = new ParseNumber(a, pa);\n            ParseNumber db = new ParseNumber(b, pb);\n            int c = Integer.compare(da.num, db.num);\n            if (c != 0)\n                return c;\n            else {\n                pa = da.p;\n                pb = db.p;\n            }\n        } else {\n            int c = Character.compare(ca, cb);\n            if (c != 0) {\n                return c;\n            } else {\n                pa++;\n                pb++;\n            }\n        }\n    }\n}"
            ],
            [
                "createPins",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Creates pins\n *\n * @param inputs    the inputs\n * @param outputs   the outputs\n * @param invert    true if invert output\n * @param ic        input inverter configuration\n * @param wideShape true if a wide shape is selected\n * @return the pins\n */\npublic static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape) {\n    return createPins(inputs, outputs, invert, wideShape ? 4 : 3, true, ic);\n}"
            ],
            [
                "readStyle",
                "de.neemann.digital.draw.shapes.custom.svg",
                "Context",
                "static Context readStyle(Context context, String style) throws SvgException {\n    SVGTokenizer t = new SVGTokenizer(style);\n    while (true) {\n        final String command = t.readTo(':');\n        if (command.length() == 0)\n            break;\n        final String value = t.readTo(';');\n        AttrParser p = PARSER.get(command);\n        if (p != null)\n            p.parse(context, value);\n    }\n    return context;\n}"
            ],
            [
                "getOutSize",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static int getOutSize(boolean small) {\n    if (small)\n        return SIZE2;\n    else\n        return OUT_SIZE;\n}"
            ],
            [
                "getOutStyle",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static Style getOutStyle(boolean small) {\n    if (small)\n        return Style.THIN;\n    else\n        return Style.NORMAL;\n}"
            ],
            [
                "getOutRad",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Inner circle size used for inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the output circle radius as a vector\n */\npublic static Vector getOutRad(boolean small) {\n    int s = getOutSize(small);\n    return new Vector(s - 6, s - 6);\n}"
            ],
            [
                "createTransform",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static Transform createTransform(int size) {\n    if (size == 2)\n        return Transform.IDENTITY;\n    else {\n        final TransformTranslate tr1 = new TransformTranslate(-70, -139);\n        final TransformTranslate tr2 = new TransformTranslate(70, 139);\n        float s = (2 + size) / 4f;\n        final TransformMatrix trm = new TransformMatrix(s, 0, 0, s, 0, 0);\n        return Transform.mul(tr1, Transform.mul(trm, tr2));\n    }\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"attributes\", ElementAttributes.class);\n    xStream.alias(\"visualElement\", VisualElement.class);\n    xStream.alias(\"wire\", Wire.class);\n    xStream.alias(\"circuit\", Circuit.class);\n    xStream.alias(\"intFormat\", IntFormat.class);\n    xStream.alias(\"exprFormat\", FormatToExpression.class);\n    xStream.alias(\"barrelShifterMode\", BarrelShifterMode.class);\n    xStream.alias(\"direction\", LeftRightFormat.class);\n    xStream.alias(\"rotation\", Rotation.class);\n    xStream.aliasAttribute(Rotation.class, \"rotation\", \"rotation\");\n    xStream.alias(\"language\", Language.class);\n    xStream.aliasAttribute(Language.class, \"name\", \"name\");\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"value\", InValue.class);\n    xStream.aliasAttribute(InValue.class, \"value\", \"v\");\n    xStream.aliasAttribute(InValue.class, \"highZ\", \"z\");\n    xStream.addImplicitCollection(ElementAttributes.class, \"attributes\");\n    xStream.alias(\"data\", DataField.class);\n    xStream.registerConverter(new DataFieldConverter());\n    xStream.alias(\"testData\", TestCaseDescription.class);\n    xStream.alias(\"inverterConfig\", InverterConfig.class);\n    xStream.addImplicitCollection(InverterConfig.class, \"inputs\");\n    xStream.alias(\"storedRoms\", ROMManager.class);\n    xStream.addImplicitCollection(ROMManager.class, \"roms\");\n    xStream.alias(\"romList\", ROMManagerFile.class);\n    xStream.alias(\"romFile\", ROMManagerFile.RomContainerFile.class);\n    xStream.alias(\"romData\", ROMManagerFile.RomContainerDataField.class);\n    xStream.alias(\"appType\", Application.Type.class);\n    xStream.ignoreUnknownElements();\n    xStream.alias(\"shape\", CustomShapeDescription.class);\n    xStream.alias(\"pin\", CustomShapeDescription.Pin.class);\n    xStream.alias(\"circle\", CustomShapeDescription.CircleHolder.class);\n    xStream.alias(\"line\", CustomShapeDescription.LineHolder.class);\n    xStream.alias(\"poly\", CustomShapeDescription.PolygonHolder.class);\n    xStream.alias(\"text\", CustomShapeDescription.TextHolder.class);\n    xStream.alias(\"polygon\", Polygon.class);\n    xStream.alias(\"shapeType\", CustomCircuitShapeType.class);\n    xStream.alias(\"transform\", TransformHolder.class);\n    xStream.registerConverter(new PolygonConverter());\n    return xStream;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename     filename\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load \" + filename);\n    final Circuit circuit = loadCircuit(new FileInputStream(filename), shapeFactory);\n    circuit.origin = filename;\n    return circuit;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param in           the input stream\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load stream\");\n    try {\n        XStream xStream = getxStream();\n        Circuit circuit = (Circuit) xStream.fromXML(in);\n        for (VisualElement ve : circuit.getElements()) ve.setShapeFactory(shapeFactory);\n        if (circuit.version == 0) {\n            // convert to version 1\n            for (Wire w : circuit.getWires()) {\n                w.p1 = w.p1.mul(2);\n                w.p2 = w.p2.mul(2);\n            }\n            for (VisualElement e : circuit.getElements()) e.setPos(e.getPos().mul(2));\n            circuit.version = 1;\n        }\n        if (circuit.version < 2) {\n            Object rm = circuit.getAttributes().get(Keys.ROMMANAGER);\n            if (rm instanceof ROMManager) {\n                circuit.getAttributes().set(Keys.ROMMANAGER, new ROMManagerFile((ROMManager) rm));\n            }\n            circuit.version = 2;\n        }\n        return circuit;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "fixGenerics",
                "de.neemann.digital.draw.model",
                "ModelCreator",
                "/**\n * Creates a concrete circuit from a generic on.\n * Uses the included generic init code.\n *\n * @param circuit the generic circuit\n * @param library the element library\n * @return the concrete circuit\n * @throws NodeException            NodeException\n * @throws ElementNotFoundException ElementNotFoundException\n */\npublic static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException {\n    if (circuit.getAttributes().get(Keys.IS_GENERIC))\n        return new ResolveGenerics(circuit, library).resolveCircuit(null).getCircuit();\n    else\n        return circuit;\n}"
            ],
            [
                "createFromPath",
                "de.neemann.digital.draw.graphics",
                "Polygon",
                "/**\n * Creates a polygon from a SVG path\n *\n * @param path the svg path\n * @return the polygon or null if there was an error\n */\npublic static Polygon createFromPath(String path) {\n    try {\n        return new PolygonParser(path).create();\n    } catch (PolygonParser.ParserException e) {\n        return null;\n    }\n}"
            ],
            [
                "vec",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Returns a new vector\n * shorthand for new Vector(x,y)\n *\n * @param x x\n * @param y y\n * @return the vector\n */\npublic static Vector vec(int x, int y) {\n    return new Vector(x, y);\n}"
            ],
            [
                "min",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the minimum vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the minimum\n */\npublic static Vector min(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x)\n            x = p[i].getX();\n        if (p[i].getY() < y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "max",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the maximim vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the maximum\n */\npublic static Vector max(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() > x)\n            x = p[i].getX();\n        if (p[i].getY() > y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "width",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the width of the given vectors.\n *\n * @param p the vectors\n * @return max(p)-min(p)\n */\npublic static Vector width(VectorInterface... p) {\n    int x1 = p[0].getX();\n    int y1 = p[0].getY();\n    int x2 = x1;\n    int y2 = y1;\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x1)\n            x1 = p[i].getX();\n        if (p[i].getY() < y1)\n            y1 = p[i].getY();\n        if (p[i].getX() > x2)\n            x2 = p[i].getX();\n        if (p[i].getY() > y2)\n            y2 = p[i].getY();\n    }\n    return new Vector(x2 - x1, y2 - y1);\n}"
            ],
            [
                "add",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Adds an offset to every vector in the given list\n *\n * @param vectors the original vectors\n * @param offs    the offset\n * @return the new list\n */\npublic static List<Vector> add(List<Vector> vectors, Vector offs) {\n    ArrayList<Vector> newVec = new ArrayList<>();\n    for (Vector v : vectors) newVec.add(v.add(offs));\n    return newVec;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static SVGSettings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "createKeyList",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * @return a list of available SVG export keys\n */\npublic static List<Key> createKeyList() {\n    ArrayList<Key> list = new ArrayList<>();\n    list.add(LATEX);\n    list.add(PINS_IN_MATH_MODE);\n    list.add(HIDE_TEST);\n    list.add(NO_SHAPE_FILLING);\n    list.add(SMALL_IO);\n    list.add(NO_PIN_MARKER);\n    list.add(THINNER_LINES);\n    list.add(HIGH_CONTRAST);\n    list.add(MONOCHROME);\n    return list;\n}"
            ],
            [
                "mul",
                "de.neemann.digital.draw.graphics",
                "Transform",
                "/**\n * Combines the two given transformations to a common transformation\n *\n * @param t1 first transformation\n * @param t2 second transformation\n * @return the resulting transformation\n */\nstatic Transform mul(Transform t1, Transform t2) {\n    TransformMatrix m1 = t1.getMatrix();\n    TransformMatrix m2 = t2.getMatrix();\n    return new TransformMatrix(m1.a * m2.a + m1.c * m2.b, m1.b * m2.a + m1.d * m2.b, m1.a * m2.c + m1.c * m2.d, m1.b * m2.c + m1.d * m2.d, m2.a * m1.x + m2.b * m1.y + m2.x, m2.c * m1.x + m2.d * m1.y + m2.y);\n}"
            ],
            [
                "rotate",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a rotation.\n * Rotates in mathematically positive direction. Takes into account that\n * in Digital the y-axis goes downwards.\n *\n * @param w the angle in 360 grad units\n * @return the transformation\n */\npublic static TransformMatrix rotate(double w) {\n    final double phi = w / 180 * Math.PI;\n    float cos = (float) Math.cos(phi);\n    float sin = (float) Math.sin(phi);\n    return new TransformMatrix(cos, -sin, sin, cos, 0, 0);\n}"
            ],
            [
                "scale",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a scaling transformation\n *\n * @param sx scaling in x direction\n * @param sy scaling in y direction\n * @return the transformation\n */\npublic static TransformMatrix scale(float sx, float sy) {\n    return new TransformMatrix(sx, 0, 0, sy, 0, 0);\n}"
            ],
            [
                "getTextWidth",
                "de.neemann.digital.draw.graphics",
                "GraphicMinMax",
                "/**\n * Returns a approximation of the width of the given text in the given style\n *\n * @param text  the text\n * @param style the style\n * @return the approximated text width\n */\npublic static int getTextWidth(String text, Style style) {\n    final FontRenderContext fontRenderContext = new FontRenderContext(null, true, false);\n    GraphicsFormatter.Fragment f = GraphicsFormatter.createFragment((fragment, font, str) -> {\n        Rectangle2D rec = style.getFont().getStringBounds(str, fontRenderContext);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), 0);\n    }, style.getFont(), text);\n    return f.getWidth();\n}"
            ],
            [
                "getSelected",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * @return the selected color map\n */\npublic static ColorScheme getSelected() {\n    if (instance == null) {\n        updateInstance();\n        Settings.getInstance().getAttributes().addListener(ColorScheme::updateInstance);\n    }\n    return instance;\n}"
            ],
            [
                "getWireStyle",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Returns the wire style depending on the given value\n *\n * @param value the value to represent\n * @return the style\n */\npublic static Style getWireStyle(Value value) {\n    if (value == null || value.getBits() > 1)\n        return WIRE;\n    if (value.isHighZ())\n        return WIRE_HIGHZ;\n    if (value.getValue() == 1)\n        return WIRE_HIGH;\n    else\n        return WIRE_LOW;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text the text\n * @return the string representation\n */\npublic static String format(Text text) {\n    return format(text, FormatToExpression.getDefaultFormat());\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text   the text\n * @param format the format to use\n * @return the string representation\n */\npublic static String format(Text text, FormatToExpression format) {\n    if (text instanceof Simple) {\n        return ((Simple) text).getText();\n    } else if (text instanceof Blank) {\n        return \" \";\n    } else if (text instanceof Character) {\n        return \"\" + ((Character) text).getChar();\n    } else if (text instanceof Decorate) {\n        Decorate d = (Decorate) text;\n        if (d.getStyle() == Decorate.Style.OVERLINE) {\n            final Text content = d.getContent();\n            if (content instanceof Simple || content instanceof Index)\n                return format.getNot() + format(content, format);\n            else\n                return format.getNot() + \"(\" + format(content, format) + \")\";\n        } else\n            return format(d.getContent(), format);\n    } else if (text instanceof Index) {\n        Index i = (Index) text;\n        String str = format(i.getVar(), format);\n        if (i.getSubScript() != null)\n            str += format(i.getSubScript(), format);\n        if (i.getSuperScript() != null)\n            str += format(i.getSuperScript(), format);\n        return str;\n    } else if (text instanceof Sentence) {\n        Sentence s = (Sentence) text;\n        StringBuilder sb = new StringBuilder();\n        for (Text t : s) sb.append(format(t, format));\n        return sb.toString();\n    } else\n        return \"\";\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "SVGFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr   the {@link Graphics2D} instance\n * @param text the text\n * @return the text fragment\n */\npublic static Fragment createFragment(Graphics2D gr, String text) {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), text);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr         the {@link Graphics2D} instance\n * @param expression the expression\n * @return the text fragment\n * @throws FormatterException FormatterException\n */\npublic static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), new ExpressionToText().createText(expression));\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param sizer the sizer instance\n * @param font  the font\n * @param text  the text\n * @return the fragment\n */\npublic static Fragment createFragment(FontSizer sizer, Font font, String text) {\n    Fragment fragment;\n    try {\n        Text t = new Parser(text).parse();\n        fragment = createFragment(sizer, font, t);\n    } catch (ParseException | FormatterException e) {\n        // if there was an exception, return the complete raw text as a fragment\n        fragment = new TextFragment(sizer, font, text);\n    }\n    return fragment;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param exp the expression to format\n * @return the formatted string\n */\npublic static String format(Expression exp) {\n    return format(new ExpressionToText().createText(exp, FormatToExpression.LATEX), true);\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "math",
                "de.neemann.digital.draw.graphics.text.text",
                "Decorate",
                "/**\n * Adds a MATH decoration to the given text.\n * If the text is already decorated the text is returned directly.\n *\n * @param t the text to decorate\n * @return the decorated text\n */\npublic static Text math(Text t) {\n    if (t instanceof Decorate) {\n        Decorate d = (Decorate) t;\n        if (d.getStyle() == Style.MATH)\n            return t;\n    }\n    return new Decorate(t, Style.MATH);\n}"
            ],
            [
                "escapeXML",
                "de.neemann.digital.draw.graphics",
                "GraphicSVG",
                "/**\n * Escapes a given string to XML\n *\n * @param text the text to escape\n * @return the escaped text.\n */\npublic static String escapeXML(String text) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        switch(c) {\n            case '&':\n                sb.append(\"&amp;\");\n                break;\n            case '<':\n                sb.append(\"&lt;\");\n                break;\n            case '>':\n                sb.append(\"&gt;\");\n                break;\n            case '\"':\n                sb.append(\"&quot;\");\n                break;\n            default:\n                sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
            ],
            [
                "getMirrorYOrientation",
                "de.neemann.digital.draw.graphics",
                "GraphicSwing",
                "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3) {\n    int oy = orientation.getY();\n    VectorInterface d0 = p2.sub(p1).getOrthogonal();\n    VectorInterface d1 = p3.sub(p1);\n    if (d0.scalar(d1) < 0)\n        oy = 2 - oy;\n    return oy;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param file the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(File file) throws IOException {\n    final Configuration configuration = load(new FileInputStream(file));\n    configuration.origin = file;\n    return configuration;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param in the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        return (Configuration) xStream.fromXML(in);\n    } catch (RuntimeException e) {\n        throw new IOException(\"error reading XML\", e);\n    }\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "UNKNOWN",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * Unknown release\n */\npublic static final String UNKNOWN = \"unknown\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullDown",
                "/**\n * The pull down description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "Diode",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeBackward",
                "/**\n * The description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullUp",
                "/**\n * The pull up description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeForward",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROMDualPort",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualAccess",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "CounterPreset",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Register",
                "/**\n * The registers {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "LookUpTable",
                "/**\n * The LUTs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "BlockRAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Counter",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROM",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMAsync",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROM",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROMDualPort",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePortSel",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RegisterFile",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "MIDI",
                "/**\n * The Speakers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RGBLED",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The Input description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "LEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);"
            ],
            [
                "POLARITYAWARELEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The polarity aware LED description\n */\npublic static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "SEVENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment display description\n */\npublic static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();"
            ],
            [
                "SEVENHEXDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment hex display description\n */\npublic static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "SIXTEENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * Sixteen Segment Display\n */\npublic static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RotEncoder",
                "/**\n * The rotary encoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PinControl",
                "/**\n * The description of the pin control logic\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "DipSwitch",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "LightBulb",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Probe",
                "/**\n * The Probe description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Button",
                "/**\n * The Button description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "ButtonLED",
                "/**\n * The ButtonLED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "In",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "STEPS",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * Steps for a full revolution\n */\npublic static final int STEPS = 72;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * The stepper motors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "NotConnected",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorBipolar",
                "/**\n * The bipolar motor description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Const",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PowerSupply",
                "/**\n * Enforces a power supply\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Ground",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "VDD",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.core.io.telnet",
                "ServerHolder",
                "/**\n * The singleton instance\n */\npublic static final ServerHolder INSTANCE = new ServerHolder();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io.telnet",
                "Telnet",
                "/**\n * The telnet server description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);"
            ],
            [
                "BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of bits in simple gates like And and Or\n */\npublic static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);"
            ],
            [
                "INPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * input bits of sign extender\n */\npublic static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);"
            ],
            [
                "OUTPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output bits of sign extender\n */\npublic static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);"
            ],
            [
                "INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in simple gates like And and Or\n */\npublic static final // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nKey.KeyInteger // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nINPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);"
            ],
            [
                "LUT_INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in the LUT\n */\npublic static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);"
            ],
            [
                "MAX_VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The counter max value\n */\npublic static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);"
            ],
            [
                "DELAY_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the delay time used by the delay component\n */\npublic static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);"
            ],
            [
                "MONOFLOP_DELAY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the timer delay time\n */\npublic static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);"
            ],
            [
                "LABEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The elements label\n */\npublic static final Key<String> LABEL = new Key<>(\"Label\", \"\");"
            ],
            [
                "FONT_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The font size\n */\npublic static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);"
            ],
            [
                "TEXT_ORIENTATION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * text orientation\n */\npublic static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();"
            ],
            [
                "LED_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a LED\n */\npublic static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();"
            ],
            [
                "SEVEN_SEG_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a seven seg display\n */\npublic static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);"
            ],
            [
                "VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The value of constants\n */\npublic static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();"
            ],
            [
                "DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of elements\n */\npublic static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();"
            ],
            [
                "INPUT_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of inputs\n */\npublic static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();"
            ],
            [
                "DIP_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of the dip switch\n */\npublic static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Color of LEDs\n */\npublic static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();"
            ],
            [
                "INPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The input splitting of a splitter\n */\npublic static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");"
            ],
            [
                "OUTPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The output splitting of a splitter\n */\npublic static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");"
            ],
            [
                "SPLITTER_SPREADING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The splitter spreading\n */\npublic static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();"
            ],
            [
                "IN_OUT_SMALL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to select small inputs and outputs\n */\npublic static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "RUN_AT_REAL_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable realtime mode at a clock\n */\npublic static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);"
            ],
            [
                "INVERT_OUTPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * inverts the output of a gate\n */\npublic static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);"
            ],
            [
                "FREQUENCY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The real time frequency of the clock\n */\npublic static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);"
            ],
            [
                "SELECTOR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the bit count of a muxer or decoder\n */\npublic static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);"
            ],
            [
                "ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of address bits of memory\n */\npublic static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);"
            ],
            [
                "BLOWN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a diode as blown fuse or as programmed\n */\npublic static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a switch as closed or not\n */\npublic static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();"
            ],
            [
                "SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * signed flag for comparator element\n */\npublic static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();"
            ],
            [
                "REMAINDER_POSITIVE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects if the reminder of the division is always positive\n */\npublic static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);"
            ],
            [
                "DATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the data key for memory\n */\npublic static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);"
            ],
            [
                "FLIP_SEL_POSITON",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag for flipping selector pos in muxers, decoders and drivers\n */\npublic static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();"
            ],
            [
                "ROTATE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the rotation of the elements\n */\npublic static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();"
            ],
            [
                "WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);"
            ],
            [
                "SHAPE_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * defines the shape type of the custom circuit\n */\npublic static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();"
            ],
            [
                "LAYOUT_SHAPE_DELTA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Defines the distance to the previous pin. Used by the layout shape type\n */\npublic static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));"
            ],
            [
                "TERM_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);"
            ],
            [
                "TERM_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);"
            ],
            [
                "CYCLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break timeout cycles\n */\npublic static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);"
            ],
            [
                "ENABLED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break enabled\n */\npublic static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();"
            ],
            [
                "VALUE_IS_PROBE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to make a value a probe\n */\npublic static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "IS_PROGRAM_MEMORY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();"
            ],
            [
                "IS_PROGRAM_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();"
            ],
            [
                "AUTO_RELOAD_ROM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the ROMs auto load function\n */\npublic static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();"
            ],
            [
                "LAST_DATA_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The last used ROM data file\n */\npublic static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();"
            ],
            [
                "SHOW_DATA_TABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data table window\n */\npublic static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH_MICRO",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window in single gate mode\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();"
            ],
            [
                "ADD_VALUE_TO_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to add the value to the measurement graph\n */\npublic static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();"
            ],
            [
                "MICRO_STEP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the single gate mode in the embedded data view\n */\npublic static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);"
            ],
            [
                "MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the embedded data view\n */\npublic static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);"
            ],
            [
                "SETTINGS_MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the default data view\n */\npublic static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);"
            ],
            [
                "IS_HIGH_Z",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable high z mode at an input\n */\npublic static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "AVOID_ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to avoid active low at an input\n */\npublic static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the description of an element\n */\npublic static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");"
            ],
            [
                "NETNAME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A net name\n */\npublic static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");"
            ],
            [
                "SETTINGS_IEEE_SHAPES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * shape setting\n */\npublic static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();"
            ],
            [
                "SETTINGS_LANGUAGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI Language\n */\npublic static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();"
            ],
            [
                "SETTINGS_DEFAULT_TREESELECT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Default state of the tree view\n */\npublic static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);"
            ],
            [
                "SETTINGS_EXPRESSION_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI expression string representation\n */\npublic static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);"
            ],
            [
                "SETTINGS_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the grid\n */\npublic static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();"
            ],
            [
                "SETTINGS_SHOW_WIRE_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the wire bits view\n */\npublic static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);"
            ],
            [
                "SETTINGS_MAC_MOUSE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the MAC mouse mode\n */\npublic static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables tunnel rename dialog\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);"
            ],
            [
                "SETTINGS_RENAME_LABELS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables renaming of labels ending with numbers while copying\n */\npublic static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);"
            ],
            [
                "SETTINGS_OPEN_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables remote port\n */\npublic static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();"
            ],
            [
                "SETTINGS_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * remote port\n */\npublic static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);"
            ],
            [
                "OSCILLATION_DETECTION_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Counter used to detect oscillations\n */\npublic static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);"
            ],
            [
                "INT_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();"
            ],
            [
                "PROBE_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());"
            ],
            [
                "FIXED_POINT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * fixed point fractional binary digits\n */\npublic static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();"
            ],
            [
                "GRAPHIC_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);"
            ],
            [
                "GRAPHIC_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);"
            ],
            [
                "RELAY_NORMALLY_CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a relay to indicate if it is normally open or normally closed.\n */\npublic static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();"
            ],
            [
                "POLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Number of poles in the double throw relay\n */\npublic static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();"
            ],
            [
                "BARREL_SHIFTER_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to select the shift mode\n */\npublic static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());"
            ],
            [
                "DIRECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate shift direction\n */\npublic static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());"
            ],
            [
                "BARREL_SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate if shift value is signed\n */\npublic static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);"
            ],
            [
                "COMMON_CONNECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to indicate if the 7-seg display has a common cathode output\n */\npublic static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();"
            ],
            [
                "COMMON_CONNECTION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to define the common connection type\n */\npublic static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();"
            ],
            [
                "LED_PERSISTENCE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);"
            ],
            [
                "LED_PERSIST_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();"
            ],
            [
                "SETTINGS_ATF1502_FITTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_ATMISP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Flash software for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();"
            ],
            [
                "ROW_DATA_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * row bits in led matrix\n */\npublic static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);"
            ],
            [
                "COL_ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * column address bits in led matrix\n */\npublic static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);"
            ],
            [
                "LOCKED_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * In locked mode the circuit can not be modified\n */\npublic static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);"
            ],
            [
                "PINNUMBER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin number\n */\npublic static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();"
            ],
            [
                "PINCOUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin count\n */\npublic static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));"
            ],
            [
                "INVERTER_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * contains the input inverter config\n */\npublic static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());"
            ],
            [
                "BACKGROUND_COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Background Color of nested circuits\n */\npublic static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));"
            ],
            [
                "SETTINGS_FONT_SCALING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the screen resolution\n */\npublic static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_USE_EQUALS_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses the equals key instead of the plus key.\n */\npublic static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;"
            ],
            [
                "WITH_ENABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if a enable input is needed\n */\npublic static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);"
            ],
            [
                "FET_UNIDIRECTIONAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true to simulate a unidirectional FET\n */\npublic static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);"
            ],
            [
                "ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if component is active low\n */\npublic static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();"
            ],
            [
                "MAP_TO_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if button is mapped to the keyboard\n */\npublic static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();"
            ],
            [
                "SETTINGS_LIBRARY_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf1502\n */\npublic static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_JAR_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A jar containing custom java components\n */\npublic static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "ROMMANAGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The manager which contains all the roms data\n */\npublic static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();"
            ],
            [
                "APPLICATION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The type of the external process\n */\npublic static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());"
            ],
            [
                "EXTERNAL_INPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The inputs used by the external process\n */\npublic static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");"
            ],
            [
                "EXTERNAL_OUTPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The outputs used by the external process\n */\npublic static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");"
            ],
            [
                "EXTERNAL_CODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);"
            ],
            [
                "EXTERNAL_CODE_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));"
            ],
            [
                "SETTINGS_GHDL_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to ghdl\n */\npublic static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();"
            ],
            [
                "GHDL_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The ghdl options\n */\npublic static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "IVERILOG_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The iverilog options\n */\npublic static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "SETTINGS_IVERILOG_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to iverilog installation directory\n */\npublic static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();"
            ],
            [
                "CUSTOM_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Shape used to represent a visual element\n */\npublic static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));"
            ],
            [
                "PRELOAD_PROGRAM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * True if a program is loaded to the simulator at startup\n */\npublic static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();"
            ],
            [
                "BIG_ENDIAN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);"
            ],
            [
                "PROGRAM_TO_PRELOAD",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The file to preload as a program at startup\n */\npublic static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "BIG_ENDIAN_SETTING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "WIDE_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects a wide shape\n */\npublic static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();"
            ],
            [
                "RECT_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of the rectangle\n */\npublic static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);"
            ],
            [
                "RECT_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the height of the rectangle\n */\npublic static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);"
            ],
            [
                "RECT_INSIDE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();"
            ],
            [
                "RECT_BOTTOM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();"
            ],
            [
                "RECT_RIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();"
            ],
            [
                "MIDI_CHANNEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);"
            ],
            [
                "MIDI_INSTRUMENT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");"
            ],
            [
                "MIDI_PROG_CHANGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables Program change\n */\npublic static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);"
            ],
            [
                "SETTINGS_TOOLCHAIN_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Stores the IDE settings file\n */\npublic static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();"
            ],
            [
                "GENERICLARGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();"
            ],
            [
                "IS_GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Circuit is generic\n */\npublic static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUTORIAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the tutorial\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();"
            ],
            [
                "SETTINGS_WIRETOOLTIP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the wire tool tips\n */\npublic static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);"
            ],
            [
                "SWITCH_ACTS_AS_INPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The switch acts as input\n */\npublic static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();"
            ],
            [
                "SNAP_TO_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Snaps the element to the grid\n */\npublic static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();"
            ],
            [
                "MIRROR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Mirrors the component\n */\npublic static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "TESTDATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The test data\n */\npublic static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);"
            ],
            [
                "TRIGGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The scope trigger mode\n */\npublic static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());"
            ],
            [
                "PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the telnet port\n */\npublic static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);"
            ],
            [
                "TELNET_ESCAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Telnet escape\n */\npublic static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();"
            ],
            [
                "SKIP_HDL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Skips HDL output for this circuit\n */\npublic static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();"
            ],
            [
                "PREFIX",
                "de.neemann.digital.core.basic",
                "FanIn",
                "/**\n * The inputs name prefix\n */\npublic static final String PREFIX = \"In_\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NOr",
                "/**\n * The NOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "And",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XNOr",
                "/**\n * The XNOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XOr",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Not",
                "/**\n * The Not description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NAnd",
                "/**\n * The NAnd description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Or",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "STARTED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STARTED event\n */\npublic static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CLOSED event\n */\npublic static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);"
            ],
            [
                "POSTCLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.POSTCLOSED event\n */\npublic static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);"
            ],
            [
                "STEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STEP event\n */\npublic static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);"
            ],
            [
                "CHECKBURN",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CHECKBURN event\n */\npublic static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);"
            ],
            [
                "MICROSTEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.MICROSTEP event\n */\npublic static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);"
            ],
            [
                "RUN_TO_BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK event\n */\npublic static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);"
            ],
            [
                "RUN_TO_BREAK_TIMEOUT",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK_TIMEOUT event\n */\npublic static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);"
            ],
            [
                "BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.BREAK event\n */\npublic static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGPFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "NFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGNFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "PFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "TransGate",
                "/**\n * The transmission gate description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "SwitchDT",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Relay",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "RelayDT",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Switch",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Fuse",
                "/**\n * The fuse description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Reset",
                "/**\n * The Reset description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Stop",
                "/**\n * The Stop element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Decoder",
                "/**\n * The Decoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Delay",
                "/**\n * The Delay description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Driver",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "DriverInvSel",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "PriorityEncoder",
                "/**\n * The PriorityEncoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BusSplitter",
                "/**\n * The bus splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * The splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Multiplexer",
                "/**\n * The Multiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BitSelector",
                "/**\n * The Bit Selector description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * The Break description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Clock",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "AsyncSeq",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Demultiplexer",
                "/**\n * The Demultiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopDAsync",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopD",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRSAsync",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopT",
                "/**\n * The T-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJKAsync",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJK",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "Monoflop",
                "/**\n * The Monoflop's description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRS",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BarrelShifter",
                "/**\n * The barrel shifter description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Mul",
                "/**\n * The multiplier description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Neg",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitExtender",
                "/**\n * Description of the sign extend component.\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Add",
                "/**\n * The adders description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Div",
                "/**\n * The dividers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "PRNG",
                "/**\n * The element type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Sub",
                "/**\n * The subtractors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Comparator",
                "/**\n * The comparators description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitCount",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "EMPTY_LIST",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * An empty list\n */\npublic static final ObservableValues EMPTY_LIST = new ObservableValues();"
            ],
            [
                "DEFAULT_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The default formatter\n */\npublic static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;"
            ],
            [
                "HEX_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The hexadecimal formatter\n */\npublic static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "External",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "ExternalFile",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DEFAULT_RAD",
                "de.neemann.digital.fsm",
                "State",
                "/**\n * The default state radius\n */\nstatic final int DEFAULT_RAD = 70;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "Lang",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "InstanceHolder",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.testing",
                "TestCaseElement",
                "/**\n * The TestCaseElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();"
            ],
            [
                "STATENAMES",
                "de.neemann.digital.analyse",
                "TruthTableTableModel",
                "/**\n * String representation of the states\n */\npublic static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };"
            ],
            [
                "ONE",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant true or one\n */\npublic static final Constant ONE = new Constant(true);"
            ],
            [
                "ZERO",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant false or zero\n */\npublic static final Constant ZERO = new Constant(false);"
            ],
            [
                "PRIMARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the primary panel\n */\npublic static final String PRIMARY = \"primary\";"
            ],
            [
                "SECONDARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the secondary panel\n */\npublic static final String SECONDARY = \"secondary\";"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * The single EditorFactory instance.\n */\nstatic final EditorFactory INSTANCE = new EditorFactory();"
            ],
            [
                "MAX_TERMINAL_STORED",
                "de.neemann.digital.gui.components.terminal",
                "ConsoleTerminal",
                "/**\n * Max amount of characters stored\n */\npublic static final int MAX_TERMINAL_STORED = 2048;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Terminal",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Keyboard",
                "/**\n * The keyboard description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "FAILED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for failed tests\n */\nstatic final Color FAILED_COLOR = new Color(255, 200, 200);"
            ],
            [
                "PASSED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for passed tests\n */\nstatic final Color PASSED_COLOR = new Color(200, 255, 200);"
            ],
            [
                "ICON_DELETE",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The delete icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");"
            ],
            [
                "ICON_COPY",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The copy icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "VGA",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "GraphicCard",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "LedMatrix",
                "/**\n * the LED-Matrix description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "ScopeTrigger",
                "/**\n * The ScopeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);"
            ],
            [
                "DATADESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The DataElement description\n */\npublic static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "TEXTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The TextElement description\n */\npublic static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "RECTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The shape for the rectangle\n */\npublic static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "LEFT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to left align the digits\n */\npublic final static float LEFT = 0.0f;"
            ],
            [
                "CENTER",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to center the digits\n */\npublic final static float CENTER = 0.5f;"
            ],
            [
                "RIGHT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to right align the digits\n */\npublic final static float RIGHT = 1.0f;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "Settings",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "SettingsHolder",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "BASE_FILE_KEY",
                "de.neemann.digital.hdl.hgs",
                "Context",
                "/**\n * Key used to store the base file name in the context\n */\npublic static final String BASE_FILE_KEY = \"baseFile\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericInitCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();"
            ],
            [
                "GEN_ARGS_KEY",
                "de.neemann.digital.draw.library",
                "ResolveGenerics",
                "/**\n * Key uses to store the args for the generic circuits\n */\npublic static final String GEN_ARGS_KEY = \"genArgs\";"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "ButtonShape",
                "protected static final int HEIGHT = OUT_SIZE / 2;"
            ],
            [
                "SIZE2",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Half the size of the used raster\n */\npublic static final int SIZE2 = 10;"
            ],
            [
                "SIZE",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * The size of the used raster\n */\npublic static final int SIZE = SIZE2 * 2;"
            ],
            [
                "CIRC",
                "de.neemann.digital.draw.shapes",
                "DILShape",
                "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);"
            ],
            [
                "DOWNSHIFT",
                "de.neemann.digital.draw.shapes",
                "VDDShape",
                "static final int DOWNSHIFT = 4;"
            ],
            [
                "CHARGED_GATE",
                "de.neemann.digital.draw.shapes",
                "FGFETShapeN",
                "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);"
            ],
            [
                "OUT_SIZE",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Size of the normal sized inputs and outputs\n */\npublic static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;"
            ],
            [
                "LATEX_RAD",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);"
            ],
            [
                "WIDTH2",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * half the width of the resistor\n */\npublic static final int WIDTH2 = SIZE2 - 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * height of the resistor\n */\npublic static final int HEIGHT = SIZE + SIZE / 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static final int HEIGHT = 7;"
            ],
            [
                "FRAME",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "/**\n * the Frame of the display\n */\npublic static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.elements",
                "Tunnel",
                "/**\n * The TunnelElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();"
            ],
            [
                "HIGH_CONTRAST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);"
            ],
            [
                "MONOCHROME",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);"
            ],
            [
                "SMALL_IO",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);"
            ],
            [
                "NO_PIN_MARKER",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);"
            ],
            [
                "THINNER_LINES",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);"
            ],
            [
                "HIDE_TEST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);"
            ],
            [
                "NO_SHAPE_FILLING",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);"
            ],
            [
                "LATEX",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);"
            ],
            [
                "PINS_IN_MATH_MODE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SettingsHolder",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to select the color map\n */\npublic static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();"
            ],
            [
                "CUSTOM_COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to define the custom color map\n */\npublic static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();"
            ],
            [
                "MAXLINETHICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * maximal line thickness\n */\npublic static final int MAXLINETHICK = 4;"
            ],
            [
                "NORMAL",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all lines to draw the shapes itself\n */\npublic static final Style NORMAL = new Builder().build();"
            ],
            [
                "DISABLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all disabled elements\n */\npublic static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();"
            ],
            [
                "INOUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for input and output labels\n */\npublic static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();"
            ],
            [
                "FAILED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the failed state lines in the measurement graph\n */\npublic static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();"
            ],
            [
                "PASS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the passed state lines in the measurement graph\n */\npublic static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();"
            ],
            [
                "NORMAL_TEXT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for text which is integral part of the shape.\n * Text which uses this style is always included in sizing!\n * Used for text only elements.\n */\npublic static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();"
            ],
            [
                "THIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin line used for the graphic in the clock or delay shape\n */\npublic static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();"
            ],
            [
                "THIN_FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin filled\n */\npublic static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();"
            ],
            [
                "THICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thick line used for the ground line\n */\npublic static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();"
            ],
            [
                "WIRE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in editing mode\n */\npublic static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "WIRE_LOW",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for low wires in running mode\n */\npublic static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();"
            ],
            [
                "WIRE_HIGH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for high wires in running mode\n */\npublic static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();"
            ],
            [
                "WIRE_HIGHZ",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in high Z state\n */\npublic static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();"
            ],
            [
                "WIRE_OUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the output dots\n */\npublic static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();"
            ],
            [
                "FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Filled style used to fill the splitter or the dark LEDs\n */\npublic static final Style FILLED = new Builder().setFilled(true).build();"
            ],
            [
                "DASH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the grid in the graph\n */\npublic static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();"
            ],
            [
                "SHAPE_PIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();"
            ],
            [
                "SHAPE_SPLITTER",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text for splitters\n */\npublic static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();"
            ],
            [
                "WIRE_VALUE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();"
            ],
            [
                "WIRE_BITS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the wire bit number\n */\npublic static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();"
            ],
            [
                "HIGHLIGHT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * highlight color used for the circles to mark an element\n */\npublic static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "ERROR",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * error color used for the circles to mark an element\n */\npublic static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "BLANK",
                "de.neemann.digital.draw.graphics.text.text",
                "Blank",
                "/**\n * the Blank instance\n */\npublic static final Blank BLANK = new Blank();"
            ],
            [
                "LOOK_AT_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String LOOK_AT_ALIAS = \"lookAt\";"
            ],
            [
                "REF_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String REF_ALIAS = \"ref\";"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "name",
                "java.lang",
                "String"
            ],
            [
                "expression",
                "de.neemann.digital.analyse.expression",
                "Expression"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "addCombinatorial",
                "de.neemann.digital.builder",
                "BuilderInterface",
                "public abstract T addCombinatorial(String arg0, Expression arg1) throws BuilderException"
            ],
            [
                "getOutputs",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic ArrayList<String> getOutputs() {\n    fixDoubleCellUsage();\n    return super.getOutputs();\n}"
            ],
            [
                "addSequential",
                "de.neemann.digital.builder",
                "BuilderInterface",
                "public abstract T addSequential(String arg0, Expression arg1) throws BuilderException"
            ],
            [
                "getInputs",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic ArrayList<String> getInputs() {\n    fixDoubleCellUsage();\n    return super.getInputs();\n}"
            ],
            [
                "addCombinatorial",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException {\n    checkOpen();\n    return super.addCombinatorial(name, expression);\n}"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "addSequential",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic BuilderCollector addSequential(String name, Expression expression) throws BuilderException {\n    checkOpen();\n    sequentialVars.add(name);\n    return super.addSequential(name, expression);\n}"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getRegistered",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic Map<String, Expression> getRegistered() {\n    fixDoubleCellUsage();\n    return super.getRegistered();\n}"
            ],
            [
                "getCombinatorial",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic Map<String, Expression> getCombinatorial() {\n    fixDoubleCellUsage();\n    return super.getCombinatorial();\n}"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ],
            [
                "getOrderString",
                "de.neemann.digital.analyse.expression",
                "Expression",
                "public abstract String getOrderString()"
            ],
            [
                "traverse",
                "de.neemann.digital.analyse.expression",
                "Expression",
                "public abstract <V> V traverse(V arg0)"
            ],
            [
                "calculate",
                "de.neemann.digital.analyse.expression",
                "Expression",
                "public abstract boolean calculate(Context arg0) throws ExpressionException"
            ],
            [
                "copy",
                "de.neemann.digital.analyse.expression",
                "Expression",
                "public abstract Expression copy()"
            ],
            [
                "addCombinatorial",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public BuilderCollector addCombinatorial(String arg0, Expression arg1) throws BuilderException"
            ],
            [
                "getCombinatorial",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public Map<String, Expression> getCombinatorial()"
            ],
            [
                "getOutputs",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public ArrayList<String> getOutputs()"
            ],
            [
                "getRegistered",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public Map<String, Expression> getRegistered()"
            ],
            [
                "getInputs",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public ArrayList<String> getInputs()"
            ],
            [
                "addSequential",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public BuilderCollector addSequential(String arg0, Expression arg1) throws BuilderException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 26713,
        "oracle": "name != null;",
        "oracleType": "PRE",
        "projectName": "Digital",
        "packageName": "de.neemann.digital.builder.Gal16v8",
        "className": "BuilderCollectorGAL",
        "javadocTag": "",
        "methodJavadoc": "",
        "methodSourceCode": "public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException{\n    checkOpen();\n    return super.addCombinatorial(name, expression);\n}",
        "classJavadoc": "/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */",
        "classSourceCode": "/*\n * Copyright (c) 2019 Helmut Neemann.\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.builder.Gal16v8;\n\nimport de.neemann.digital.analyse.expression.Expression;\nimport de.neemann.digital.builder.BuilderCollector;\nimport de.neemann.digital.builder.BuilderException;\nimport de.neemann.digital.builder.PinMap;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Map;\n\n/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */\npublic class BuilderCollectorGAL extends BuilderCollector {\n    private final PinMap pinMap;\n    private HashSet<String> sequentialVars;\n    private boolean doubleCellUsageFixed = false;\n\n    /**\n     * Creates a new instance\n     *\n     * @param pinMap the used pinMap. Is required to handle aliases correctly\n     */\n    public BuilderCollectorGAL(PinMap pinMap) {\n        this.pinMap = pinMap;\n        sequentialVars = new HashSet<>();\n    }\n\n    @Override\n    public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        return super.addCombinatorial(name, expression);\n    }\n\n    @Override\n    public BuilderCollector addSequential(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        sequentialVars.add(name);\n        return super.addSequential(name, expression);\n    }\n\n    private void checkOpen() {\n        if (doubleCellUsageFixed)\n            throw new RuntimeException(\"wrong BuilderCollectorGAL usage!\");\n    }\n\n    private void fixDoubleCellUsage() {\n        if (!doubleCellUsageFixed) {\n\n            super.getCombinatorial().entrySet().removeIf(c -> {\n                if (pinMap.isSimpleAlias(c.getKey(), c.getValue(), sequentialVars)) {\n                    removeOutput(c.getKey());\n                    return true;\n                }\n                return false;\n            });\n\n            doubleCellUsageFixed = true;\n        }\n    }\n\n    @Override\n    public ArrayList<String> getOutputs() {\n        fixDoubleCellUsage();\n        return super.getOutputs();\n    }\n\n    @Override\n    public ArrayList<String> getInputs() {\n        fixDoubleCellUsage();\n        return super.getInputs();\n    }\n\n    @Override\n    public Map<String, Expression> getCombinatorial() {\n        fixDoubleCellUsage();\n        return super.getCombinatorial();\n    }\n\n    @Override\n    public Map<String, Expression> getRegistered() {\n        fixDoubleCellUsage();\n        return super.getRegistered();\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "CLI",
                "de.neemann"
            ],
            [
                "Mouse",
                "de.neemann.gui"
            ],
            [
                "LineBreaker",
                "de.neemann.gui"
            ],
            [
                "IconCreator",
                "de.neemann.gui"
            ],
            [
                "ConfirmDialogBuilder",
                "de.neemann.gui"
            ],
            [
                "Resources",
                "de.neemann.gui.language"
            ],
            [
                "Bundle",
                "de.neemann.gui.language"
            ],
            [
                "Language",
                "de.neemann.gui.language"
            ],
            [
                "ToolTipAction",
                "de.neemann.gui"
            ],
            [
                "MyFileChooser",
                "de.neemann.gui"
            ],
            [
                "ClosingWindowListener",
                "de.neemann.gui"
            ],
            [
                "ErrorMessage",
                "de.neemann.gui"
            ],
            [
                "WindowSizeStorage",
                "de.neemann.gui"
            ],
            [
                "Screen",
                "de.neemann.gui"
            ],
            [
                "ToolTipProvider",
                "de.neemann.gui"
            ],
            [
                "InfoDialog",
                "de.neemann.gui"
            ],
            [
                "ValueFormatter",
                "de.neemann.digital.core"
            ],
            [
                "ModelStateObserver",
                "de.neemann.digital.core"
            ],
            [
                "PullDown",
                "de.neemann.digital.core.pld"
            ],
            [
                "Diode",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeBackward",
                "de.neemann.digital.core.pld"
            ],
            [
                "PullUp",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeForward",
                "de.neemann.digital.core.pld"
            ],
            [
                "Node",
                "de.neemann.digital.core"
            ],
            [
                "RAMSinglePort",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualAccess",
                "de.neemann.digital.core.memory"
            ],
            [
                "ByteArrayFromValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "Importer",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "LogisimReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "DataFieldValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "IntelHexReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "BinReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "MultiValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "CounterPreset",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Register",
                "de.neemann.digital.core.memory"
            ],
            [
                "LookUpTable",
                "de.neemann.digital.core.memory"
            ],
            [
                "BlockRAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Counter",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMMangerBase",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManagerFile",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManager",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMInterface",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "EEPROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramCounter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMAsync",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataField",
                "de.neemann.digital.core.memory"
            ],
            [
                "EEPROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMInterface",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataFieldConverter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMSinglePortSel",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramMemory",
                "de.neemann.digital.core.memory"
            ],
            [
                "RegisterFile",
                "de.neemann.digital.core.memory"
            ],
            [
                "ModelStateObserverTyped",
                "de.neemann.digital.core"
            ],
            [
                "Observable",
                "de.neemann.digital.core"
            ],
            [
                "NodeWithoutDelay",
                "de.neemann.digital.core"
            ],
            [
                "ExceptionWithOrigin",
                "de.neemann.digital.core"
            ],
            [
                "ObservableValue",
                "de.neemann.digital.core"
            ],
            [
                "SpeedTest",
                "de.neemann.digital.core"
            ],
            [
                "BurnException",
                "de.neemann.digital.core"
            ],
            [
                "GlobalValues",
                "de.neemann.digital.core"
            ],
            [
                "MIDI",
                "de.neemann.digital.core.io"
            ],
            [
                "RGBLED",
                "de.neemann.digital.core.io"
            ],
            [
                "Out",
                "de.neemann.digital.core.io"
            ],
            [
                "RotEncoder",
                "de.neemann.digital.core.io"
            ],
            [
                "PinControl",
                "de.neemann.digital.core.io"
            ],
            [
                "DipSwitch",
                "de.neemann.digital.core.io"
            ],
            [
                "CommonConnectionType",
                "de.neemann.digital.core.io"
            ],
            [
                "LightBulb",
                "de.neemann.digital.core.io"
            ],
            [
                "Probe",
                "de.neemann.digital.core.io"
            ],
            [
                "Button",
                "de.neemann.digital.core.io"
            ],
            [
                "ButtonLED",
                "de.neemann.digital.core.io"
            ],
            [
                "In",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorUnipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "ProbeMode",
                "de.neemann.digital.core.io"
            ],
            [
                "NotConnected",
                "de.neemann.digital.core.io"
            ],
            [
                "MIDIHelper",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorBipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "Const",
                "de.neemann.digital.core.io"
            ],
            [
                "PowerSupply",
                "de.neemann.digital.core.io"
            ],
            [
                "Ground",
                "de.neemann.digital.core.io"
            ],
            [
                "InValue",
                "de.neemann.digital.core.io"
            ],
            [
                "VDD",
                "de.neemann.digital.core.io"
            ],
            [
                "ServerHolder",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Telnet",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ByteBuffer",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Server",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ElementAttributes",
                "de.neemann.digital.core.element"
            ],
            [
                "Element",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementFactory",
                "de.neemann.digital.core.element"
            ],
            [
                "PinInfo",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescriptions",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "Keys",
                "de.neemann.digital.core.element"
            ],
            [
                "Rotation",
                "de.neemann.digital.core.element"
            ],
            [
                "AttributeListener",
                "de.neemann.digital.core.element"
            ],
            [
                "Key",
                "de.neemann.digital.core.element"
            ],
            [
                "ImmutableList",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementTypeDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "FanIn",
                "de.neemann.digital.core.basic"
            ],
            [
                "NOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "And",
                "de.neemann.digital.core.basic"
            ],
            [
                "XNOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "XOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "Not",
                "de.neemann.digital.core.basic"
            ],
            [
                "NAnd",
                "de.neemann.digital.core.basic"
            ],
            [
                "Function",
                "de.neemann.digital.core.basic"
            ],
            [
                "Or",
                "de.neemann.digital.core.basic"
            ],
            [
                "ExceptionWithOriginInterface",
                "de.neemann.digital.core"
            ],
            [
                "ModelEvent",
                "de.neemann.digital.core"
            ],
            [
                "BacktrackException",
                "de.neemann.digital.core"
            ],
            [
                "PlainSwitch",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGPFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "NFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGNFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PlainSwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "TransGate",
                "de.neemann.digital.core.switching"
            ],
            [
                "SwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Relay",
                "de.neemann.digital.core.switching"
            ],
            [
                "RelayDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Switch",
                "de.neemann.digital.core.switching"
            ],
            [
                "Fuse",
                "de.neemann.digital.core.switching"
            ],
            [
                "Reset",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Stop",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Decoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Delay",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Driver",
                "de.neemann.digital.core.wiring"
            ],
            [
                "DataBus",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "SingleBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "ConnectedBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "AbstractBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "BusModelStateObserver",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "CommonBusValue",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "DriverInvSel",
                "de.neemann.digital.core.wiring"
            ],
            [
                "PriorityEncoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BusSplitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Splitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Multiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitSelector",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Break",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Clock",
                "de.neemann.digital.core.wiring"
            ],
            [
                "AsyncSeq",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Demultiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitsException",
                "de.neemann.digital.core"
            ],
            [
                "NodeInterface",
                "de.neemann.digital.core"
            ],
            [
                "NodeException",
                "de.neemann.digital.core"
            ],
            [
                "FlipflopDAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopD",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRSAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopT",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJKAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJK",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "Monoflop",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRS",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopBit",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "BarrelShifter",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Mul",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Neg",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitExtender",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Add",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Div",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "LeftRightFormat",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "PRNG",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Sub",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BarrelShifterMode",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Comparator",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitCount",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "ObservableValues",
                "de.neemann.digital.core"
            ],
            [
                "Value",
                "de.neemann.digital.core"
            ],
            [
                "IntFormat",
                "de.neemann.digital.core"
            ],
            [
                "SyncAccess",
                "de.neemann.digital.core"
            ],
            [
                "Bits",
                "de.neemann.digital.core"
            ],
            [
                "ProcessInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "StdIOInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "ApplicationVerilogStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "Application",
                "de.neemann.digital.core.extern"
            ],
            [
                "External",
                "de.neemann.digital.core.extern"
            ],
            [
                "Port",
                "de.neemann.digital.core.extern"
            ],
            [
                "PortDefinition",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGHDL",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationIVerilog",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationVHDLStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "VHDLTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGeneric",
                "de.neemann.digital.core.extern"
            ],
            [
                "Options",
                "de.neemann.digital.core.extern"
            ],
            [
                "VerilogTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ExternalFile",
                "de.neemann.digital.core.extern"
            ],
            [
                "ProcessStarter",
                "de.neemann.digital.core.extern"
            ],
            [
                "ModelEventType",
                "de.neemann.digital.core"
            ],
            [
                "Observer",
                "de.neemann.digital.core"
            ],
            [
                "ErrorDetector",
                "de.neemann.digital.core"
            ],
            [
                "Statistics",
                "de.neemann.digital.core.stats"
            ],
            [
                "Countable",
                "de.neemann.digital.core.stats"
            ],
            [
                "Model",
                "de.neemann.digital.core"
            ],
            [
                "Signal",
                "de.neemann.digital.core"
            ],
            [
                "StringList",
                "de.neemann.digital"
            ],
            [
                "XStreamValid",
                "de.neemann.digital"
            ],
            [
                "StatsExport",
                "de.neemann.digital.cli"
            ],
            [
                "SVGExport",
                "de.neemann.digital.cli"
            ],
            [
                "CommandLineTester",
                "de.neemann.digital.cli"
            ],
            [
                "CSVWriter",
                "de.neemann.digital.cli"
            ],
            [
                "BasicCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Argument",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLIException",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Muxer",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentKey",
                "de.neemann.digital.cli.cli"
            ],
            [
                "NamedCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLICommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentBase",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CircuitLoader",
                "de.neemann.digital.cli"
            ],
            [
                "Main",
                "de.neemann.digital.cli"
            ],
            [
                "Modification",
                "de.neemann.digital.undo"
            ],
            [
                "Modifications",
                "de.neemann.digital.undo"
            ],
            [
                "ModifyException",
                "de.neemann.digital.undo"
            ],
            [
                "Copyable",
                "de.neemann.digital.undo"
            ],
            [
                "UndoManager",
                "de.neemann.digital.undo"
            ],
            [
                "ChangedListener",
                "de.neemann.digital.undo"
            ],
            [
                "CircuitRepresentation",
                "de.neemann.digital.fsm"
            ],
            [
                "Transition",
                "de.neemann.digital.fsm"
            ],
            [
                "Movable",
                "de.neemann.digital.fsm"
            ],
            [
                "MouseMovable",
                "de.neemann.digital.fsm"
            ],
            [
                "Optimizer",
                "de.neemann.digital.fsm"
            ],
            [
                "Permute",
                "de.neemann.digital.fsm"
            ],
            [
                "FiniteStateMachineException",
                "de.neemann.digital.fsm"
            ],
            [
                "TransitionTableCreator",
                "de.neemann.digital.fsm"
            ],
            [
                "ValueParser",
                "de.neemann.digital.fsm"
            ],
            [
                "WaitGroup",
                "de.neemann.digital.fsm"
            ],
            [
                "FSMComponent",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMFrame",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "OptimizerDialog",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMDemos",
                "de.neemann.digital.fsm"
            ],
            [
                "FSM",
                "de.neemann.digital.fsm"
            ],
            [
                "State",
                "de.neemann.digital.fsm"
            ],
            [
                "Lang",
                "de.neemann.digital.lang"
            ],
            [
                "LineListenerResolveDontCare",
                "de.neemann.digital.testing"
            ],
            [
                "TestingDataException",
                "de.neemann.digital.testing"
            ],
            [
                "UnitTester",
                "de.neemann.digital.testing"
            ],
            [
                "FolderTestRunner",
                "de.neemann.digital.testing"
            ],
            [
                "TestExecutor",
                "de.neemann.digital.testing"
            ],
            [
                "Transitions",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseDescription",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseElement",
                "de.neemann.digital.testing"
            ],
            [
                "LineEmitterRepeat",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Parser",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppenderBits",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ParserException",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Context",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ModelInitializer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Expression",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterList",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestRow",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitter",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterWhile",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterSimple",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Random",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "SignExtend",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "IfThenElse",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "Function",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "LineListener",
                "de.neemann.digital.testing.parser"
            ],
            [
                "VirtualSignal",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppender",
                "de.neemann.digital.testing.parser"
            ],
            [
                "OperatorPrecedence",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestResultListener",
                "de.neemann.digital.testing"
            ],
            [
                "MatchedValue",
                "de.neemann.digital.testing"
            ],
            [
                "TestResult",
                "de.neemann.digital.testing"
            ],
            [
                "MinimizerInterface",
                "de.neemann.digital.analyse"
            ],
            [
                "LabelNumbering",
                "de.neemann.digital.analyse"
            ],
            [
                "ModelAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "CSVImporter",
                "de.neemann.digital.analyse"
            ],
            [
                "BoolTableExpanded",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableTableModel",
                "de.neemann.digital.analyse"
            ],
            [
                "TableReducer",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "PrimeSelector",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForce",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "LargestFirst",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForceGetAll",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "PrimeSelectorDefault",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BoolTableByteArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "IndependentChecker",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskey",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableExpression",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableBoolArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTable",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRows",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "ThreeStateValue",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskeyExam",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRow",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TruthTableConverter",
                "de.neemann.digital.analyse"
            ],
            [
                "DetermineJKStateMachine",
                "de.neemann.digital.analyse"
            ],
            [
                "Parser",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ParseException",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ModelAnalyserInfo",
                "de.neemann.digital.analyse"
            ],
            [
                "AnalyseException",
                "de.neemann.digital.analyse"
            ],
            [
                "DependencyAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "SubstituteLibrary",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableFormatterHex",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatter",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterTestCase",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterCSV",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterLaTeX",
                "de.neemann.digital.analyse.format"
            ],
            [
                "MinimizerQuineMcCluskey",
                "de.neemann.digital.analyse"
            ],
            [
                "ContextFiller",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "BitSetter",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ContextMap",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Operation",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Context",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NInputs",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NOr",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "ExpressionModifier",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NAnd",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "Constant",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Variable",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionException",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityInclNotVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Equals",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "FormatToExpression",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTable",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Formatter",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatterException",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTableLatex",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Not",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "VariableVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NamedExpression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "MinimizerQuineMcCluskeyExam",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTable",
                "de.neemann.digital.analyse"
            ],
            [
                "SplitPinString",
                "de.neemann.digital.analyse"
            ],
            [
                "CycleDetector",
                "de.neemann.digital.analyse"
            ],
            [
                "DigitalRemoteInterface",
                "de.neemann.digital.gui"
            ],
            [
                "TextSearchFilter",
                "de.neemann.digital.gui"
            ],
            [
                "ExportZipAction",
                "de.neemann.digital.gui"
            ],
            [
                "SettingsBase",
                "de.neemann.digital.gui"
            ],
            [
                "DocumentationLocator",
                "de.neemann.digital.gui"
            ],
            [
                "InitialTutorial",
                "de.neemann.digital.gui.tutorial"
            ],
            [
                "InsertAction",
                "de.neemann.digital.gui"
            ],
            [
                "StatusInterface",
                "de.neemann.digital.gui"
            ],
            [
                "SearchTextField",
                "de.neemann.digital.gui"
            ],
            [
                "SaveAsHelper",
                "de.neemann.digital.gui"
            ],
            [
                "FileHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ReleaseInfo",
                "de.neemann.digital.gui.release"
            ],
            [
                "CheckForNewRelease",
                "de.neemann.digital.gui.release"
            ],
            [
                "StateInterface",
                "de.neemann.digital.gui.state"
            ],
            [
                "StateManager",
                "de.neemann.digital.gui.state"
            ],
            [
                "State",
                "de.neemann.digital.gui.state"
            ],
            [
                "CircuitScrollPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "ItemPicker",
                "de.neemann.digital.gui.components"
            ],
            [
                "LibraryTreeModel",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "SelectTree",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "WindowPosManager",
                "de.neemann.digital.gui.components"
            ],
            [
                "CustomShapeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "TransformHolder",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "BehavioralFixtureCreator",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorFactory",
                "de.neemann.digital.gui.components"
            ],
            [
                "OrderMerger",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementOrderer",
                "de.neemann.digital.gui.components"
            ],
            [
                "ModifyMoveSelected",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteRect",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWires",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfVisualElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyCircuitAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveAndRotElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMeasurementOrdering",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttribute",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "DataEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "CircuitModifierPostClosed",
                "de.neemann.digital.gui.components"
            ],
            [
                "CharDeleter",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "ConsoleTerminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Terminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalInterface",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Keyboard",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "KeyboardDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Editor",
                "de.neemann.digital.gui.components"
            ],
            [
                "VarRectList",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMap",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapComponent",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapDialog",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "MapLayout",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughException",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "CircuitTransferable",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementHelpDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "TestCaseDescriptionDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ValueTableDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestCaseDescriptionEditor",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestAllDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ExpressionListenerOptimizeJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "LaTeXExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "HardwareDescriptionGenerator",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateFile",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateCUPL",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "ExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderOutputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AllSolutionsDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerCSVCondensed",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "BuilderExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionComponent",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "PlainTextExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableReorderManager",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ShowStringDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderInputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ProgressDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "CheckResultListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerStore",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AttributeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ProbeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ColorSchemeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "ROMEditorDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "LabelGenerator",
                "de.neemann.digital.gui.components"
            ],
            [
                "SingleValueDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ExpressionDialog",
                "de.neemann.digital.gui.components.expression"
            ],
            [
                "CircuitComponent",
                "de.neemann.digital.gui.components"
            ],
            [
                "VGA",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicCard",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrix",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "VGADialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "MoveFocusTo",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "ConstraintsBuilder",
                "de.neemann.digital.gui.components"
            ],
            [
                "ScopeTrigger",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphDialog",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphComponent",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "DummyElement",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "ValueTableObserver",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "CircuitModifier",
                "de.neemann.digital.gui.components"
            ],
            [
                "CopiedElementLabelRenamer",
                "de.neemann.digital.gui.components"
            ],
            [
                "TextLineNumber",
                "de.neemann.digital.gui.components"
            ],
            [
                "InsertHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ProgramMemoryLoader",
                "de.neemann.digital.gui"
            ],
            [
                "Main",
                "de.neemann.digital.gui"
            ],
            [
                "StatsDialog",
                "de.neemann.digital.gui"
            ],
            [
                "WindowManager",
                "de.neemann.digital.gui"
            ],
            [
                "Settings",
                "de.neemann.digital.gui"
            ],
            [
                "LibrarySelector",
                "de.neemann.digital.gui"
            ],
            [
                "DigitalUncaughtExceptionHandler",
                "de.neemann.digital.gui"
            ],
            [
                "NumberingWizard",
                "de.neemann.digital.gui"
            ],
            [
                "HandlerInterface",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteSever",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteException",
                "de.neemann.digital.gui.remote"
            ],
            [
                "DigitalHandler",
                "de.neemann.digital.gui.remote"
            ],
            [
                "ModelModifier",
                "de.neemann.digital.gui"
            ],
            [
                "VerilogCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogRenaming",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogGenerator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogTestBenchCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogElement",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogTemplate",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogLibrary",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "CodePrinter",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "CodePrinterStr",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "Statements",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Parser",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ParserException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Statement",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Context",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "FirstClassFunctionCall",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "InnerFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "JavaClass",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "FirstClassFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Func",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Function",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSEvalException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ReferenceToFunc",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToStruct",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToArray",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Reference",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToVar",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Value",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSMap",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSArray",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Separator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLLibrary",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLRenaming",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLGenerator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLEntity",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplate",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplateFunctions",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTestBenchCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "HDLModel",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNode",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNet",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "Printable",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLException",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLPort",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HasName",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "InlineManyToOne",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeAssignments",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "Optimization",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeConstants",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "ReplaceOneToMany",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NameConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "OptimizeExpressions",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "RemoveConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NodeSorterExpressionBased",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "HDLNodeSplitterManyToOne",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeCustom",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeAssignment",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLCircuit",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "ExprVar",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Visitor",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprVarRange",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExpressionOptimizer",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprNot",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprConstant",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprOperate",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprUsingNet",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "HDLNodeBuildIn",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLClockIntegrator",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockIntegratorGeneric",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockInfo",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "HDLNodeSplitterOneToMany",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "FileLocator",
                "de.neemann.digital"
            ],
            [
                "ValueTable",
                "de.neemann.digital.data"
            ],
            [
                "ValueTableModel",
                "de.neemann.digital.data"
            ],
            [
                "DataPlotter",
                "de.neemann.digital.data"
            ],
            [
                "Value",
                "de.neemann.digital.data"
            ],
            [
                "ExpressionExporter",
                "de.neemann.digital.builder"
            ],
            [
                "ExpressionToFileExporter",
                "de.neemann.digital.builder"
            ],
            [
                "RotationByteArrayOutputStream",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "TT2Exporter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "StartATF150xFitter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "OSExecute",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "CreateCHN",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDevice",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDialog",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PL",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATF150xCuplExporter",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PinMap",
                "de.neemann.digital.builder"
            ],
            [
                "PinMapException",
                "de.neemann.digital.builder"
            ],
            [
                "FragmentExpression",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisualElement",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentSameInValue",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "CircuitBuilder",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisitor",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVariable",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Fragment",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Box",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Gal16v8JEDECExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CuplExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "BuilderCollectorGAL",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CleanNameBuilder",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderCollector",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderInterface",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderException",
                "de.neemann.digital.builder"
            ],
            [
                "Gal22v10JEDECExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "Gal22v10CuplExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "FuseMap",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFillerException",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFiller",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "JedecWriter",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "GenericCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibrary",
                "de.neemann.digital.draw.library"
            ],
            [
                "GenericInitCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "Visitor",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryListener",
                "de.neemann.digital.draw.library"
            ],
            [
                "JarComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibraryFolder",
                "de.neemann.digital.draw.library"
            ],
            [
                "CustomElement",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundNotification",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundException",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentSource",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryInterface",
                "de.neemann.digital.draw.library"
            ],
            [
                "ResolveGenerics",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryNode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementTypeDescriptionCustom",
                "de.neemann.digital.draw.library"
            ],
            [
                "InvalidNodeException",
                "de.neemann.digital.draw.library"
            ],
            [
                "NumStringComparator",
                "de.neemann.digital.draw.library"
            ],
            [
                "InputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Interactor",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Drawable",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeBackwardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FuseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DILShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DipSwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LightBulbShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LayoutShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PolarityAwareLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ConstShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BreakShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TextShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegHexShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ProbeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "NotConnectedShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "StepperMotorShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BitSelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericInitCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RectShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "VDDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RAMShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ScopeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DemuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BusSplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullUpShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TestCaseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TunnelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PinControlShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FGFETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TransGateShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ResetShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeForewardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SixteenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "CustomCircuitShapeType",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "InteractorInterface",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeSpecificMatch",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RGBLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RotEncoderShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "IEEEGenericShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEENotShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEAndShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEXOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "ObservableValueReader",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SvgTemplate",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "TransformParser",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "Context",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgException",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgImporter",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "CustomShapeDescription",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "CustomShape",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "FGFETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "OutputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GroundShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "AsyncClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Shape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MissingShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeFactory",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullDownShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DriverShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DataShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DotCreator",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Wire",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Movable",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pins",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Circuit",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Tunnel",
                "de.neemann.digital.draw.elements"
            ],
            [
                "PinException",
                "de.neemann.digital.draw.elements"
            ],
            [
                "ElementOrder",
                "de.neemann.digital.draw.elements"
            ],
            [
                "VisualElement",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pin",
                "de.neemann.digital.draw.elements"
            ],
            [
                "IOState",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireMerger",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireConsistencyChecker",
                "de.neemann.digital.draw.elements"
            ],
            [
                "AsyncSequentialClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelEntry",
                "de.neemann.digital.draw.model"
            ],
            [
                "Net",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelCreator",
                "de.neemann.digital.draw.model"
            ],
            [
                "InverterConfig",
                "de.neemann.digital.draw.model"
            ],
            [
                "NetList",
                "de.neemann.digital.draw.model"
            ],
            [
                "RealTimeClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "Polygon",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Orientation",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Vector",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGSettings",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Transform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorKey",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ExportFactory",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicsImage",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorInterface",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformMatrix",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatLaTeX",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicMinMax",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicTransform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorScheme",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Style",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSkipLines",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "GraphicLineCollector",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "PolygonConverter",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorFloat",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformRotate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Graphic",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleHighContrast",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Parser",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "ParseException",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "PlainTextFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "SVGFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "GraphicsFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "LaTeXFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "Decorate",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Text",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Index",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Sentence",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Blank",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Character",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "ExpressionToText",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Simple",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Export",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleMonochrome",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformTranslate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSwing",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "PolygonParser",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGTokenizer",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GifSequenceWriter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "GifExporter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "ConfigCache",
                "de.neemann.digital.toolchain"
            ],
            [
                "Configuration",
                "de.neemann.digital.toolchain"
            ],
            [
                "Command",
                "de.neemann.digital.toolchain"
            ],
            [
                "FileToCreate",
                "de.neemann.digital.toolchain"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "getMouse",
                "de.neemann.gui",
                "Mouse",
                "/**\n * Returns a mouse event interpreter\n *\n * @return a Mouse interface implementation\n */\nstatic Mouse getMouse() {\n    if (Settings.getInstance().get(Keys.SETTINGS_MAC_MOUSE))\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && !e.isControlDown();\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && e.isControlDown();\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isShiftDown();\n            }\n        };\n    else\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1;\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON3;\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isControlDown();\n            }\n        };\n}"
            ],
            [
                "create",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an icon from a resource\n *\n * @param name name of the resource\n * @return the icon\n */\npublic static Icon create(String name) {\n    return new ImageIcon(createImage(name));\n}"
            ],
            [
                "createImage",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image from a resource\n *\n * @param name name of the resource\n * @return the image\n */\npublic static Image createImage(String name) {\n    try {\n        final float scaling = Screen.getInstance().getScaling();\n        if (scaling == 1) {\n            return getImage(name);\n        } else {\n            BufferedImage image = getImageOrNull(name.substring(0, name.length() - 4) + \"_hi.png\");\n            if (image != null) {\n                int w = (int) (image.getWidth() * scaling / 2);\n                int h = (int) (image.getHeight() * scaling / 2);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            } else {\n                LOGGER.info(\"upscaling of \" + name);\n                image = getImage(name);\n                int w = (int) (image.getWidth() * scaling);\n                int h = (int) (image.getHeight() * scaling);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            }\n        }\n    } catch (IOException e) {\n        throw new RuntimeException(\"Image \" + name + \" not found\", e);\n    }\n}"
            ],
            [
                "createImages",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image list from a resource\n *\n * @param names names of the resource\n * @return the image\n */\npublic static ArrayList<Image> createImages(String... names) {\n    try {\n        ArrayList<Image> list = new ArrayList<Image>(names.length);\n        for (String name : names) {\n            list.add(getImage(name));\n        }\n        return list;\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}"
            ],
            [
                "getCTRLMask",
                "de.neemann.gui",
                "ToolTipAction",
                "/**\n * @return the system specific CTRL mask.\n */\npublic static int getCTRLMask() {\n    int mask = InputEvent.CTRL_DOWN_MASK;\n    if (Screen.isMac())\n        mask = InputEvent.META_DOWN_MASK;\n    return mask;\n}"
            ],
            [
                "checkForSave",
                "de.neemann.gui",
                "ClosingWindowListener",
                "/**\n * Used to check for save! No Window closing is performed!\n *\n * @param parent      the Parent frame\n * @param confirmSave the confirmSafe interface\n * @return true if to proceed\n */\npublic static boolean checkForSave(JFrame parent, ConfirmSave confirmSave) {\n    if (confirmSave.isStateChanged()) {\n        int r = new ConfirmDialogBuilder(SAVE_CHANGES_MESSAGE).setTitle(STATE_CHANGED_MESSAGE).setNoOption(NO_MESSAGE).setYesOption(YES_MESSAGE).setCancleOption(CANCEL_MESSAGE).show(parent);\n        if (r == JOptionPane.YES_OPTION || r == JOptionPane.NO_OPTION) {\n            if (r == JOptionPane.YES_OPTION) {\n                confirmSave.saveChanges();\n                return !confirmSave.isStateChanged();\n            } else\n                return true;\n        } else\n            return false;\n    }\n    return true;\n}"
            ],
            [
                "getParentWindow",
                "de.neemann.gui",
                "ErrorMessage",
                "/**\n * Get the parent window of the given component.\n * If the component is a window this window is returned\n *\n * @param parent the parent component\n * @return the window instance\n */\npublic static Window getParentWindow(Component parent) {\n    if (parent == null)\n        return null;\n    else if (parent instanceof Window)\n        return (Window) parent;\n    else\n        return SwingUtilities.getWindowAncestor(parent);\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the Screen instance\n */\npublic static Screen getInstance() {\n    return InstanceHolder.instance;\n}"
            ],
            [
                "getDefaultFontScaling",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the default font scaling in percent\n */\npublic static int getDefaultFontScaling() {\n    if (// macOS has its own retina handling\n    IS_MAC)\n        return 100;\n    int dpi = getDefaultScreenResolution();\n    int s = (dpi * 100) / 96;\n    if (s > 95 && s < 105)\n        s = 100;\n    return s;\n}"
            ],
            [
                "isLinux",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a windows system\n */\npublic static boolean isLinux() {\n    return IS_LINUX;\n}"
            ],
            [
                "isMac",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a mac\n */\npublic static boolean isMac() {\n    return IS_MAC;\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * @return the singleton instance\n */\npublic static InfoDialog getInstance() {\n    if (instance == null)\n        try {\n            instance = new InfoDialog();\n        } catch (IOException e) {\n            System.out.println(\"error reading InfoDialog \" + e.getMessage());\n        }\n    return instance;\n}"
            ],
            [
                "read",
                "de.neemann.digital.core.memory.importer",
                "Importer",
                "/**\n * Reads the given file to a single data field.\n *\n * @param hexFile   the file to read\n * @param dataBits  the bits used in the data field\n * @param bigEndian uses big endian at import\n * @return the data field\n * @throws IOException IOException\n */\npublic static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException {\n    DataField df = new DataField(1024);\n    read(hexFile, new DataFieldValueArray(df, dataBits), bigEndian);\n    return df;\n}"
            ],
            [
                "getOriginOf",
                "de.neemann.digital.core",
                "ExceptionWithOrigin",
                "/**\n * Returns the file or the files that caused the given exception.\n * If no origin is found null is returned.\n *\n * @param e the exception\n * @return the origin or null;\n */\npublic static String getOriginOf(Throwable e) {\n    while (e != null) {\n        if (e instanceof ExceptionWithOriginInterface) {\n            Set<File> origins = ((ExceptionWithOriginInterface) e).getOrigin();\n            if (origins != null && origins.size() > 0) {\n                StringBuilder sb = new StringBuilder();\n                for (File o : origins) {\n                    if (o != null) {\n                        if (sb.length() > 0)\n                            sb.append(\", \");\n                        sb.append(o.getName());\n                    }\n                }\n                if (sb.length() > 0)\n                    return sb.toString();\n                else\n                    return null;\n            }\n        }\n        e = e.getCause();\n    }\n    return null;\n}"
            ],
            [
                "zMaskString",
                "de.neemann.digital.core",
                "ObservableValue",
                "static String zMaskString(long value, long highZ, int bits) {\n    StringBuilder sb = new StringBuilder();\n    long m = Bits.up(1, bits - 1);\n    for (int i = 0; i < bits; i++) {\n        if ((highZ & m) != 0) {\n            sb.append(\"z\");\n        } else {\n            if ((value & m) != 0) {\n                sb.append(\"1\");\n            } else {\n                sb.append(\"0\");\n            }\n        }\n        m >>>= 1;\n    }\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core",
                "GlobalValues",
                "/**\n * @return returns the global instance\n */\npublic static GlobalValues getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core.io",
                "MIDIHelper",
                "/**\n * @return the MIDIHelper\n */\npublic static MIDIHelper getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new input\n */\npublic static PinInfo input(String name) {\n    return new PinInfo(name, null, Direction.input);\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name        the pins name\n * @param description the pins description\n * @return the new input\n */\npublic static PinInfo input(String name, String description) {\n    return new PinInfo(name, description, Direction.input);\n}"
            ],
            [
                "output",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new output\n */\npublic static PinInfo output(String name) {\n    return new PinInfo(name, null, Direction.output);\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "PinDescription",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "Direction",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "getKeyByName",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Returns the key of the given name.\n * If key does not exist, null is returned.\n *\n * @param name the name of the key\n * @return the key or null\n */\npublic static Key getKeyByName(String name) {\n    return InstanceHolder.INSTANCE.get(name);\n}"
            ],
            [
                "getKeys",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * @return all available keys\n */\npublic static Iterable<Key> getKeys() {\n    return InstanceHolder.INSTANCE.values();\n}"
            ],
            [
                "combine",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "/**\n * Combines two lists\n *\n * @param a   first list\n * @param b   second list\n * @param <T> the Type of the elements\n * @return the new combined list\n */\npublic static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b) {\n    T[] com = Arrays.copyOf(a.items, a.size() + b.size());\n    System.arraycopy(b.items, 0, com, a.size(), b.size());\n    return new ImmutableList<>(com);\n}"
            ],
            [
                "createSwitchModel",
                "de.neemann.digital.core.switching",
                "PlainSwitch",
                "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException {\n    if (input1 instanceof CommonBusValue) {\n        if (input2 instanceof CommonBusValue) {\n            final CommonBusValue in1 = (CommonBusValue) input1;\n            final CommonBusValue in2 = (CommonBusValue) input2;\n            ObservableValue constant = in1.searchConstant();\n            if (constant != null)\n                return new UniDirectionalSwitch(constant, output2);\n            else {\n                constant = in2.searchConstant();\n                if (constant != null)\n                    return new UniDirectionalSwitch(constant, output1);\n                else\n                    return new RealSwitch(in1, output1, in2, output2);\n            }\n        } else\n            return new UniDirectionalSwitch(input1, output2);\n    } else {\n        if (input2 instanceof CommonBusValue) {\n            return new UniDirectionalSwitch(input2, output1);\n        } else {\n            throw new NodeException(Lang.get(\"err_switchHasNoNet\"), output1, output2);\n        }\n    }\n}"
            ],
            [
                "createOneToN",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a one to N splitter\n *\n * @param bits number of outputs\n * @return the splitter\n */\npublic static Splitter createOneToN(int bits) {\n    Ports in = new Ports();\n    in.add(new Port(0, bits));\n    Ports out = new Ports();\n    for (int i = 0; i < bits; i++) out.add(new Port(i, 1));\n    return new Splitter(in, out);\n}"
            ],
            [
                "createNToOne",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a N to one splitter\n *\n * @param bits number of inputs\n * @return the splitter\n */\npublic static Splitter createNToOne(int bits) {\n    Ports in = new Ports();\n    for (int i = 0; i < bits; i++) in.add(new Port(i, 1));\n    Ports out = new Ports();\n    out.add(new Port(0, bits));\n    return new Splitter(in, out);\n}"
            ],
            [
                "ovs",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * Helper to create a {@link ObservableValues} instance\n *\n * @param items the items\n * @return the created instance\n */\npublic static ObservableValues ovs(ObservableValue... items) {\n    return new ObservableValues(items);\n}"
            ],
            [
                "toShortHex",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * Creates a short hex representation of the given value.\n * Use only to represent a value.\n * If confusion is excluded, the prefix '0x' is omitted.\n * Thus 0x1A3 is converted to \"1A3\" which can not be parsed back to a long because \"0x\" is missing.\n *\n * @param value the value\n * @return the hex string\n */\npublic static String toShortHex(long value) {\n    return toShortHex(value, false);\n}"
            ],
            [
                "up",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value up\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long up(long val, int bits) {\n    if (bits < 64)\n        return val << bits;\n    else\n        return 0;\n}"
            ],
            [
                "down",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value down\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long down(long val, int bits) {\n    if (bits < 64)\n        return val >>> bits;\n    else\n        return 0;\n}"
            ],
            [
                "mask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Creates a bit mask with the lowest [bits] bits set.\n *\n * @param bits the number of 1 bits\n * @return a value with the lowest [bits] bits set.\n */\npublic static long mask(int bits) {\n    if (bits < 64)\n        return (1L << bits) - 1;\n    else\n        return -1;\n}"
            ],
            [
                "signedFlagMask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * calculates the signed flag.\n *\n * @param bits the bit count\n * @return the last used bit ( 1<<(bits-1) )\n */\npublic static long signedFlagMask(int bits) {\n    return up(1, bits - 1);\n}"
            ],
            [
                "isNegative",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Returns true if value is negative\n *\n * @param value the value\n * @param bits  the bit count\n * @return true if the last relevant bit is set\n */\npublic static boolean isNegative(long value, int bits) {\n    return (value & signedFlagMask(bits)) != 0;\n}"
            ],
            [
                "signExtend",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Sign extension of the value.\n * signExtend(3,2) returns -1.\n *\n * @param value the value\n * @param bits  number of bits\n * @return the sign extended value\n */\npublic static long signExtend(long value, int bits) {\n    if (bits >= 64)\n        return value;\n    else {\n        if ((value & signedFlagMask(bits)) == 0)\n            return value;\n        else\n            return value | ~mask(bits);\n    }\n}"
            ],
            [
                "binLn2",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Calculates the number of bits needed to store the given value b.\n *\n * @param b number\n * @return number of bits needed to store b\n */\npublic static int binLn2(long b) {\n    int outBits = 1;\n    while ((1L << outBits) <= b) outBits++;\n    return outBits;\n}"
            ],
            [
                "removeBitFromValue",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Removes a bit from a value.\n * This means it shifts the higher bits down. Behaves like removing an item from a list.\n *\n * @param value the value\n * @param bit   the bit to remove\n * @return the new value\n */\npublic static int removeBitFromValue(int value, int bit) {\n    if (bit > 0) {\n        return ((value & (~((1 << (bit + 1)) - 1))) >>> 1) | (value & ((1 << bit) - 1));\n    } else {\n        return value >>> 1;\n    }\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str the string\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str) throws NumberFormatException {\n    return decode(str, false);\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str         the string\n * @param parseFloats if true also floats are parsed\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str, boolean parseFloats) throws NumberFormatException {\n    if (str == null)\n        return 0;\n    str = str.trim();\n    if (str.length() == 0)\n        return 0;\n    if (str.indexOf(':') >= 0)\n        return decodeFixed(str);\n    if (parseFloats && str.indexOf('.') > -1) {\n        try {\n            if (str.endsWith(\"d\") || str.endsWith(\"D\"))\n                return Double.doubleToLongBits(Double.parseDouble(str.substring(0, str.length() - 1)));\n            else\n                return Float.floatToIntBits(Float.parseFloat(str));\n        } catch (java.lang.NumberFormatException e) {\n            throw new NumberFormatException(str, 0);\n        }\n    }\n    int p = 0;\n    boolean neg = false;\n    if (str.charAt(p) == '-') {\n        neg = true;\n        p++;\n    }\n    if (p >= str.length())\n        throw new NumberFormatException(str, p);\n    boolean wasZero = false;\n    while (str.length() > p && str.charAt(p) == '0') {\n        wasZero = true;\n        p++;\n    }\n    if (p >= str.length())\n        return 0;\n    int radix;\n    if (wasZero) {\n        if (neg)\n            throw new NumberFormatException(str, p);\n        switch(str.charAt(p)) {\n            case 'x':\n            case 'X':\n                radix = 16;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            case 'b':\n            case 'B':\n                radix = 2;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            default:\n                radix = 8;\n        }\n    } else {\n        if (str.charAt(p) == '\\'') {\n            if (neg)\n                throw new NumberFormatException(str, p);\n            p++;\n            if (p == str.length())\n                throw new NumberFormatException(str, p);\n            return str.charAt(p);\n        } else\n            radix = 10;\n    }\n    long val = decode(str, p, radix);\n    if (neg)\n        val = -val;\n    return val;\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes the given string starting at position p\n *\n * @param str   the string to decode\n * @param p     the starting position\n * @param radix the radix\n * @return the value\n * @throws NumberFormatException NumberFormatException\n */\npublic static long decode(String str, int p, int radix) throws NumberFormatException {\n    long val = 0;\n    while (p < str.length()) {\n        int d = Character.digit(str.charAt(p), radix);\n        if (d < 0)\n            throw new NumberFormatException(str, p);\n        val = val * radix + d;\n        p++;\n    }\n    return val;\n}"
            ],
            [
                "getCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Extract the code from the attributes.\n * The code is either stored directly or there is a file given.\n *\n * @param attr the attributes\n * @param root the projects main folder\n * @return the code\n * @throws IOException IOException\n */\nstatic String getCode(ElementAttributes attr, File root) throws IOException {\n    if (attr.contains(Keys.EXTERNAL_CODE))\n        return attr.get(Keys.EXTERNAL_CODE);\n    if (attr.contains(Keys.EXTERNAL_CODE_FILE))\n        return readCode(attr.getFile(Keys.EXTERNAL_CODE_FILE, root));\n    return \"\";\n}"
            ],
            [
                "readCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Reads the code from a file\n *\n * @param file the file\n * @return the code\n * @throws IOException IOException\n */\nstatic String readCode(File file) throws IOException {\n    byte[] data = Files.readAllBytes(file.toPath());\n    return new String(data, StandardCharsets.UTF_8);\n}"
            ],
            [
                "create",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Creates a new application instance\n *\n * @param type the type of the process\n * @param attr the elements attributes\n * @return the created process handler\n */\nstatic Application create(Type type, ElementAttributes attr) {\n    switch(type) {\n        case Generic:\n            return new ApplicationGeneric();\n        case GHDL:\n            return new ApplicationGHDL(attr);\n        case IVERILOG:\n            return new ApplicationIVerilog(attr);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "start",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Helper to start a process.\n * If result value is not null an exception is thrown.\n *\n * @param dir  the folder in which the process is started\n * @param args the argument\n * @return the console output\n * @throws IOException IOException\n */\npublic static String start(File dir, String... args) throws IOException {\n    ProcessBuilder pb = new ProcessBuilder(args).redirectErrorStream(true);\n    if (dir != null)\n        pb.directory(dir);\n    Process p;\n    try {\n        p = pb.start();\n    } catch (IOException e) {\n        throw new CouldNotStartProcessException(Lang.get(\"err_couldNotStartProcess_N\", Arrays.toString(args)), e);\n    }\n    ReaderThread rt = new ReaderThread(p.getInputStream());\n    rt.start();\n    try {\n        int exitValue = p.waitFor();\n        rt.join();\n        String output = rt.toString();\n        if (exitValue != 0)\n            throw new IOException(Lang.get(\"err_exitValueNotNull_N_O\", exitValue, output));\n        return output;\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n}"
            ],
            [
                "joinStrings",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Merges the given string.\n * If all strings are null or empty, null is returned\n *\n * @param strings the strings to join\n * @return the joined string or null\n */\npublic static String joinStrings(String... strings) {\n    StringBuilder sb = new StringBuilder();\n    for (String s : strings) {\n        if (s != null) {\n            String str = s.trim();\n            if (str.length() > 0) {\n                if (sb.length() > 0)\n                    sb.append(\"\\n\");\n                sb.append(str);\n            }\n        }\n    }\n    if (sb.length() > 0)\n        return sb.toString();\n    else\n        return null;\n}"
            ],
            [
                "fromString",
                "de.neemann.digital.cli.cli",
                "Argument",
                "/**\n * Creates a value from a string\n *\n * @param val      the value as a string\n * @param defValue the default value\n * @return the value converted to the type of the default value\n * @throws CLIException CLIException\n */\npublic static Object fromString(String val, Object defValue) throws CLIException {\n    if (defValue instanceof String)\n        return val;\n    else if (defValue instanceof Boolean)\n        switch(val.toLowerCase()) {\n            case \"yes\":\n            case \"1\":\n            case \"true\":\n                return true;\n            case \"no\":\n            case \"0\":\n            case \"false\":\n                return false;\n            default:\n                throw new CLIException(Lang.get(\"cli_notABool_N\", val), 106);\n        }\n    else if (defValue instanceof Integer) {\n        try {\n            return Integer.parseInt(val);\n        } catch (NumberFormatException e) {\n            throw new CLIException(Lang.get(\"cli_notANumber_N\", val), e);\n        }\n    } else\n        throw new CLIException(Lang.get(\"cli_invalidType_N\", defValue.getClass().getSimpleName()), 203);\n}"
            ],
            [
                "fac",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the factorial of a number.\n * If the result is greater as the max long value, the max value is returned.\n *\n * @param n integer\n * @return the factorial of the given number\n */\npublic static long fac(int n) {\n    if (n > 20)\n        return Long.MAX_VALUE;\n    return FAC_TABLE[n];\n}"
            ],
            [
                "getTimeComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the time complexity of optimizing the given fsm\n *\n * @param fsm the fsm\n * @return the time complexity\n */\npublic static long getTimeComplexity(FSM fsm) {\n    List<State> states = fsm.getStates();\n    int size = states.size();\n    int sizeInclDC = 1 << Bits.binLn2(size - 1);\n    if (sizeInclDC > 20)\n        return Long.MAX_VALUE;\n    return fac(sizeInclDC) / fac(sizeInclDC - size);\n}"
            ],
            [
                "calcComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException {\n    TruthTable tt = fsm.createTruthTable(null);\n    MinimizerInterface mi = new MinimizerQuineMcCluskey();\n    ComplexityListener listener = new ComplexityListener(out);\n    for (int i = 0; i < tt.getResultCount(); i++) mi.minimize(tt.getVars(), tt.getResult(i), tt.getResultName(i), listener);\n    return listener.complexity;\n}"
            ],
            [
                "blink",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Blink\n *\n * @return the fsm\n */\npublic static FSM blink() {\n    State off = new State(\"off\");\n    State on = new State(\"on\");\n    return new FSM(off, on).transition(on, off, null).transition(off, on, null);\n}"
            ],
            [
                "rotDecoder",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a debounced rotary switch decoder\n *\n * @return the fsm\n */\npublic static FSM rotDecoder() {\n    State init = new State(\"init\");\n    State top = new State(\"top\");\n    State topSetLeft = new State(\"topSetLeft\").setValues(\"L=1\");\n    State topSetRight = new State(\"topSetRight\").setValues(\"R=1\");\n    State leftTop = new State(\"leftTop\");\n    State leftBottom = new State(\"leftBottom\");\n    State bottom = new State(\"bottom\");\n    State bottomSetLeft = new State(\"bottomSetRight\").setValues(\"R=1\");\n    State bottomSetRight = new State(\"bottomSetLeft\").setValues(\"L=1\");\n    State rightTop = new State(\"rightTop\");\n    State rightBottom = new State(\"rightBottom\");\n    return new FSM(init, top, topSetLeft, leftTop, leftBottom, bottomSetLeft, bottom, bottomSetRight, rightBottom, rightTop, topSetRight).transition(init, top, \"A=0 & B=0\").transition(init, bottom, \"A=1 & B=1\").transition(top, leftTop, \"A=1 & B=0\").transition(top, rightTop, \"A=0 & B=1\").transition(topSetLeft, top, null).transition(topSetRight, top, null).transition(rightTop, top, \"A=0 & B=0\").transition(rightBottom, topSetRight, \"A=0 & B=0\").transition(leftTop, top, \"A=0 & B=0\").transition(leftBottom, topSetLeft, \"A=0 & B=0\").transition(bottom, leftBottom, \"A=1 & B=0\").transition(bottom, rightBottom, \"A=0 & B=1\").transition(bottomSetLeft, bottom, null).transition(bottomSetRight, bottom, null).transition(rightBottom, bottom, \"A=1 & B=1\").transition(rightTop, bottomSetRight, \"A=1 & B=1\").transition(leftBottom, bottom, \"A=1 & B=1\").transition(leftTop, bottomSetLeft, \"A=1 & B=1\");\n}"
            ],
            [
                "counter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a counter\n *\n * @param n the number of states\n * @return the fsm\n */\npublic static FSM counter(int n) {\n    FSM fsm = new FSM();\n    State last = null;\n    for (int i = 0; i < n; i++) {\n        State s = new State(\"\").setNumber(i);\n        fsm.add(s);\n        if (last != null)\n            fsm.transition(last, s, null);\n        last = s;\n    }\n    fsm.transition(last, fsm.getStates().get(0), null);\n    return fsm;\n}"
            ],
            [
                "trafficLight",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLight() {\n    State red = new State(\"red\").setNumber(0).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(1).setValues(\"R=1,Y=1\");\n    State green = new State(\"green\").setNumber(2).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(3).setValues(\"Y=1\");\n    return new FSM(red, redYellow, green, yellow).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "trafficLightMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLightMedwedew() {\n    State init = new State(\"init\").setNumber(0);\n    State red = new State(\"red\").setNumber(1).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(3).setValues(\"R=1, Y=1\");\n    State green = new State(\"green\").setNumber(4).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(2).setValues(\"Y=1\");\n    return new FSM(init, red, redYellow, green, yellow).transition(init, red, null).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "selCounter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM selCounter() {\n    State s0 = new State(\"s0\").setNumber(0);\n    State s1 = new State(\"s1\").setNumber(1);\n    State s2 = new State(\"s2\").setNumber(2);\n    State s3 = new State(\"s3\").setNumber(3);\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, null).transition(s0, s0, \"!T0  !T1\").transition(s1, s2, null).transition(s1, s0, \"T0 !T1\").transition(s2, s3, null).transition(s2, s0, \"!T0 T1\").transition(s3, s0, null);\n}"
            ],
            [
                "stepper",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepper() {\n    State s0 = new State(\"s0\").setNumber(0).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(1).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(2).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(3).setValues(\"P3=1,P0=1\");\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "stepperMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepperMedwedew() {\n    State init = new State(\"init\").setNumber(0).setValues(\"P0=2,P1=2,P2=2,P3=2\");\n    State s0 = new State(\"s0\").setNumber(3).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(6).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(12).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(9).setValues(\"P3=1,P0=1\");\n    return new FSM(init, s0, s1, s2, s3).transition(init, s0, null).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"fsm\", FSM.class);\n    xStream.alias(\"state\", State.class);\n    xStream.alias(\"transition\", Transition.class);\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"vectorf\", VectorFloat.class);\n    xStream.aliasAttribute(VectorFloat.class, \"x\", \"x\");\n    xStream.aliasAttribute(VectorFloat.class, \"y\", \"y\");\n    return xStream;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename filename\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(File filename) throws IOException {\n    final FSM fsm = loadFSM(new FileInputStream(filename));\n    fsm.file = filename;\n    return fsm;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new fsm instance from a stored file\n *\n * @param in the input stream\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        final FSM fsm = (FSM) xStream.fromXML(in);\n        for (Transition t : fsm.transitions) t.setFSM(fsm);\n        for (State s : fsm.states) s.setFSM(fsm);\n        fsm.modified = false;\n        fsm.activeStateTransition = -1;\n        return fsm;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "get",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string of key if no translation present\n */\npublic static String get(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKey(key, params);\n}"
            ],
            [
                "getNull",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string or null if no translation present\n */\npublic static String getNull(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKeyNull(key, params);\n}"
            ],
            [
                "getBundle",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the resource bundle\n */\npublic static Bundle getBundle() {\n    return InstanceHolder.INSTANCE.bundle;\n}"
            ],
            [
                "currentLanguage",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the current language\n */\npublic static Language currentLanguage() {\n    return InstanceHolder.INSTANCE.currentLanguage;\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * Resolves a multilingual user defined string.\n * Allows the user to define multilingual content by using a simple syntax:\n * You can enter strings like \"Word! {{de Welt!}} {{fr Monde!}}\". This method extracts\n * the appropriate string for the current language.\n *\n * @param text the complete text description\n * @return the evaluated text.\n */\npublic static String evalMultilingualContent(String text) {\n    return evalMultilingualContent(text, currentLanguage());\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "static String evalMultilingualContent(String text, Language currentLanguage) {\n    int pos = text.indexOf(\"{{\");\n    if (pos < 0)\n        return text;\n    String def = text.substring(0, pos).trim();\n    do {\n        int p2 = pos + 1;\n        int count = 1;\n        while (count > 0) {\n            char c = text.charAt(p2);\n            if (c == '{')\n                count++;\n            else if (c == '}')\n                count--;\n            p2++;\n            if (p2 == text.length() && count > 0) {\n                p2 = 1;\n                break;\n            }\n        }\n        p2 -= 2;\n        if (p2 > pos + 3) {\n            String l = text.substring(pos + 2, pos + 4);\n            if (l.equalsIgnoreCase(currentLanguage.getName()))\n                return text.substring(pos + 4, p2).trim();\n            if (l.equalsIgnoreCase(\"en\") && def.isEmpty())\n                def = text.substring(pos + 4, p2).trim();\n            pos = text.indexOf(\"{{\", p2);\n        } else\n            return def;\n    } while (pos > 0);\n    return def;\n}"
            ],
            [
                "lowest",
                "de.neemann.digital.testing.parser",
                "OperatorPrecedence",
                "/**\n * @return the lowest operator precedence to start evaluation with\n */\npublic static OperatorPrecedence lowest() {\n    return OR;\n}"
            ],
            [
                "addOne",
                "de.neemann.digital.analyse",
                "ModelAnalyser",
                "/**\n * Adds the \"+1\" to the variables name\n *\n * @param name the vars name\n * @return the modified name\n */\npublic static String addOne(String name) {\n    if (name.endsWith(\"^n\"))\n        return name.substring(0, name.length() - 1) + \"{n+1}\";\n    else\n        return name + \"+1\";\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param file the file\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(File file) throws IOException {\n    return readCSV(new FileReader(file));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the string to read\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(String csv) throws IOException {\n    return readCSV(new StringReader(csv));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the reader\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(Reader csv) throws IOException {\n    BufferedReader r = new BufferedReader(csv);\n    TruthTable tt = readHeader(r);\n    while (true) {\n        String line = r.readLine();\n        if (line == null)\n            return tt;\n        line = line.trim();\n        if (!line.isEmpty())\n            parseLine(tt, line);\n    }\n}"
            ],
            [
                "createDoubledValues",
                "de.neemann.digital.analyse.quinemc",
                "BoolTableByteArray",
                "/**\n * Creates a table where all values added twive\n *\n * @param values the original values\n * @return the new values\n */\npublic static BoolTableByteArray createDoubledValues(BoolTable values) {\n    BoolTableByteArray t = new BoolTableByteArray(values.size() * 2);\n    for (int i = 0; i < values.size(); i++) {\n        int v = values.get(i).asInt();\n        t.set(i * 2, v);\n        t.set(i * 2 + 1, v);\n    }\n    return t;\n}"
            ],
            [
                "simplify",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Simplifies the given expression.\n * If no simplification was found, the original expression is returned unchanged.\n *\n * @param expression the expression to simplify\n * @return the simplified expression\n * @throws ExpressionException ExpressionException\n */\npublic static Expression simplify(Expression expression) throws ExpressionException {\n    int initialCplx = expression.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    Expression newExp = new QuineMcCluskey(expression).simplify().getExpression();\n    int newCplx = newExp.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    if (newCplx < initialCplx)\n        return newExp;\n    else\n        return expression;\n}"
            ],
            [
                "addAnd",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Creates the final expression\n *\n * @param e         the expression to complete\n * @param rows      the rows to add\n * @param variables the variables to use to build the expression\n * @return the expression\n */\npublic static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables) {\n    for (TableRow r : rows) {\n        Expression n = r.getExpression(variables);\n        if (e == null)\n            e = n;\n        else\n            e = or(e, n);\n    }\n    return e;\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from a bool\n *\n * @param bool the bool\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(boolean bool) {\n    if (bool) {\n        return one;\n    } else {\n        return zero;\n    }\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from an int\n * 0 and 1 work as expected, any other value means \"dont care\"\n *\n * @param value the value\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(int value) {\n    switch(value) {\n        case 0:\n            return ThreeStateValue.zero;\n        case 1:\n            return ThreeStateValue.one;\n        default:\n            return ThreeStateValue.dontCare;\n    }\n}"
            ],
            [
                "doImplicitTypeCasts",
                "de.neemann.digital.analyse",
                "SubstituteLibrary",
                "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val) {\n    if (expectedClass == Integer.class && val instanceof Long) {\n        long l = (Long) val;\n        if (l <= Integer.MAX_VALUE && l >= Integer.MIN_VALUE)\n            return (int) l;\n    } else if (expectedClass == Long.class && val instanceof Number) {\n        return ((Number) val).longValue();\n    } else if (expectedClass == Color.class && val instanceof Number) {\n        return new Color(((Number) val).intValue());\n    } else if (expectedClass == Boolean.class && val instanceof Number) {\n        long b = ((Number) val).longValue();\n        return b != 0;\n    } else if (expectedClass == InValue.class) {\n        if (val instanceof Number)\n            return new InValue(((Number) val).longValue());\n        else {\n            try {\n                return new InValue(val.toString());\n            } catch (Bits.NumberFormatException e) {\n                return val;\n            }\n        }\n    } else if (expectedClass == InverterConfig.class && val instanceof java.util.List) {\n        InverterConfig.Builder b = new InverterConfig.Builder();\n        for (Object i : (java.util.List) val) b.add(i.toString());\n        return b.build();\n    } else if (expectedClass == DataField.class && val instanceof java.util.List) {\n        java.util.List list = (java.util.List) val;\n        long[] longs = new long[list.size()];\n        for (int i = 0; i < list.size(); i++) if (list.get(i) instanceof Number)\n            longs[i] = ((Number) list.get(i)).longValue();\n        else\n            return val;\n        return new DataField(longs);\n    } else if (expectedClass == Rotation.class && val instanceof Number) {\n        int r = ((Number) val).intValue();\n        return new Rotation(r % 4);\n    } else if (expectedClass == File.class && val instanceof String) {\n        return new File(val.toString());\n    } else if (expectedClass == TestCaseDescription.class && val instanceof String) {\n        try {\n            return new TestCaseDescription(val.toString());\n        } catch (Exception e) {\n            return val;\n        }\n    } else if (expectedClass.isEnum() && val instanceof Number) {\n        Class<Enum<?>> e = (Class<Enum<?>>) expectedClass;\n        Object[] values = e.getEnumConstants();\n        int index = ((Number) val).intValue();\n        if (index < 0 || index >= values.length)\n            return values[0];\n        else\n            return values[index];\n    }\n    return val;\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Iterable<Expression> exp) {\n    return simplify(new Or(exp, true));\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), true));\n}"
            ],
            [
                "xor",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new XOR expression\n *\n * @param a the expression to XOR\n * @param b the expression to XOR\n * @return the created expression\n */\npublic static Expression xor(Expression a, Expression b) {\n    if (b == Constant.ONE) {\n        return Not.not(a);\n    } else if (b == Constant.ZERO) {\n        return a;\n    } else if (a == Constant.ONE) {\n        return Not.not(b);\n    } else if (a == Constant.ZERO) {\n        return b;\n    } else\n        return simplify(new XOr(a, b));\n}"
            ],
            [
                "orNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression orNoMerge(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), false));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Iterable<Expression> exp) {\n    return simplify(new And(exp, true));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), true));\n}"
            ],
            [
                "andNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression andNoMerge(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), false));\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifier\n *\n * @param expression the expression to modify\n * @param modifier   the modifier to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier modifier) {\n    expression.modify(modifier);\n    return modifier.modify(expression);\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifiers\n *\n * @param expression the expression to modify\n * @param modifiers  the modifiers to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier... modifiers) {\n    for (ExpressionModifier m : modifiers) expression = modifyExpression(expression, m);\n    return expression;\n}"
            ],
            [
                "v",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates a new Variable\n *\n * @param name the variables name\n * @return the new Variable\n */\npublic static Variable v(String name) {\n    return new Variable(name);\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates an array of variables\n *\n * @param n the number of varfiables to create.\n * @return variables named \"A0\", \"A1\", \"A2\" and so on\n */\npublic static ArrayList<Variable> vars(int n) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (int i = 0; i < n; i++) v.add(new Variable(\"\" + (char) ('A' + i)));\n    return v;\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Create a list of variables using the given names\n *\n * @param names the names used to create the variables\n * @return the list of variables\n */\npublic static ArrayList<Variable> vars(String... names) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (String n : names) v.add(new Variable(n));\n    return v;\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable.\n */\npublic static boolean isVar(Expression e) {\n    return e instanceof Variable;\n}"
            ],
            [
                "isVarOrNotVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable or a inverted variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable or a inverted variable.\n */\npublic static boolean isVarOrNotVar(Expression e) {\n    return isVar(e) || (e instanceof Not && isVar(((Not) e).getExpression()));\n}"
            ],
            [
                "getDefaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * @return the default format\n */\npublic static FormatToExpression getDefaultFormat() {\n    return Settings.getInstance().get(Keys.SETTINGS_EXPRESSION_FORMAT);\n}"
            ],
            [
                "defaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * Formats a expression to a string.\n * Uses the default format for presentation on the screen.\n *\n * @param exp the expression to format\n * @return the string representation\n */\npublic static String defaultFormat(Expression exp) {\n    return getDefaultFormat().format(exp);\n}"
            ],
            [
                "not",
                "de.neemann.digital.analyse.expression",
                "Not",
                "/**\n * Creates a not expression.\n * Simplifies the expression if possible.\n *\n * @param a the child expression to invert\n * @return the inverted expression\n */\npublic static Expression not(Expression a) {\n    if (a == Constant.ONE)\n        return Constant.ZERO;\n    if (a == Constant.ZERO)\n        return Constant.ONE;\n    if (a instanceof Not && !((Not) a).protect) {\n        return ((Not) a).expression;\n    } else\n        return new Not(a);\n}"
            ],
            [
                "readFromFile",
                "de.neemann.digital.analyse",
                "TruthTable",
                "/**\n * Load the given file and returns a truth table instance\n *\n * @param filename filename\n * @return the {@link TruthTable}\n * @throws IOException IOException\n */\npublic static TruthTable readFromFile(File filename) throws IOException {\n    if (filename.getName().toLowerCase().endsWith(\".csv\"))\n        return CSVImporter.readCSV(filename);\n    else {\n        XStream xStream = getxStream();\n        try (InputStream in = new FileInputStream(filename)) {\n            return (TruthTable) xStream.fromXML(in);\n        }\n    }\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param s the signal\n * @return the port pins used\n */\npublic static SplitPinString create(Signal s) {\n    if (s.missingPinNumber())\n        return EMPTY;\n    return create(s.getPinNumber());\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param pinStr the pins definition;\n * @return the port pins used\n */\npublic static SplitPinString create(String pinStr) {\n    if (pinStr == null || pinStr.trim().length() == 0)\n        return EMPTY;\n    StringTokenizer st = new StringTokenizer(pinStr, \",;\");\n    ArrayList<String> pins = new ArrayList<>();\n    while (st.hasMoreTokens()) pins.add(st.nextToken().trim());\n    return new PinsArray(pins);\n}"
            ],
            [
                "checkSuffix",
                "de.neemann.digital.gui",
                "SaveAsHelper",
                "/**\n * Adds the given suffix to the file\n *\n * @param filename filename\n * @param suffix   suffix\n * @return the file name with the given suffix\n */\npublic static File checkSuffix(File filename, String suffix) {\n    if (suffix == null || filename == null)\n        return filename;\n    String name = filename.getName();\n    int p = name.lastIndexOf('.');\n    if (p >= 0) {\n        String suf = name.substring(p + 1).toLowerCase();\n        if (KNOWN.contains(suf))\n            name = name.substring(0, p);\n        while (name.length() > 0 && name.charAt(name.length() - 1) == '.') name = name.substring(0, name.length() - 1);\n    }\n    return new File(filename.getParentFile(), name + \".\" + suffix);\n}"
            ],
            [
                "addF1Traversal",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Adds F1 as a focus traversal key to a text components.\n *\n * @param text The text component\n * @param <TC> the concrete type of the text component\n * @return the given text component\n */\npublic static <TC extends JTextComponent> TC addF1Traversal(TC text) {\n    HashSet<AWTKeyStroke> set = new HashSet<>(text.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n    set.add(KeyStroke.getKeyStroke(\"F1\"));\n    text.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, set);\n    return text;\n}"
            ],
            [
                "createUndoManager",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Enables undo in the given text component.\n *\n * @param text the text component\n * @return the undo manager\n */\npublic static UndoManager createUndoManager(JTextComponent text) {\n    final UndoManager undoManager;\n    undoManager = new UndoManager();\n    text.getDocument().addUndoableEditListener(undoManager);\n    text.addKeyListener(new KeyAdapter() {\n\n        @Override\n        public void keyPressed(KeyEvent e) {\n            if (e.getKeyCode() == KeyEvent.VK_Z && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canUndo())\n                    undoManager.undo();\n            } else if (e.getKeyCode() == KeyEvent.VK_Y && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canRedo())\n                    undoManager.redo();\n            }\n        }\n    });\n    return undoManager;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components.modification",
                "ModifyInsertWires",
                "/**\n * Creates a simplified modification.\n *\n * @param newWires the wires to insert\n * @return the modification\n */\npublic static Modification<Circuit> create(List<Wire> newWires) {\n    switch(newWires.size()) {\n        case 0:\n            return null;\n        case 1:\n            return new ModifyInsertWire(newWires.get(0));\n        default:\n            return new ModifyInsertWires(newWires);\n    }\n}"
            ],
            [
                "getToolTipName",
                "de.neemann.digital.gui.components.modification",
                "ModificationOfVisualElement",
                "/**\n * Creates a translated name of the given element\n *\n * @param ve the element\n * @return translated name\n */\npublic static String getToolTipName(VisualElement ve) {\n    String s = Lang.getNull(\"elem_\" + ve.getElementName());\n    if (s == null) {\n        s = ve.getElementName();\n        if (s.endsWith(\".dig\"))\n            s = s.substring(0, s.length() - 4);\n    }\n    String l = ve.getElementAttributes().get(Keys.LABEL);\n    if (l.length() > 0)\n        s += \" (\" + l + \")\";\n    return s;\n}"
            ],
            [
                "getTerminal",
                "de.neemann.digital.gui.components.terminal",
                "TerminalDialog",
                "/**\n * Creates a new GUI terminal\n *\n * @param model the model\n * @param attr  the terminals attributes\n * @return the terminal interface\n */\nstatic TerminalInterface getTerminal(Model model, ElementAttributes attr) {\n    return new MyTerminal(model, attr);\n}"
            ],
            [
                "createList",
                "de.neemann.digital.gui.components",
                "CircuitTransferable",
                "/**\n * Creates a list of objects from inserted data\n * Can also throw a {@link ClassCastException}!\n *\n * @param data         the inserted data\n * @param shapeFactory the shapeFactory to set to the elements\n * @return the elements or null\n * @throws IOException IOException\n */\npublic static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException {\n    if (!(data instanceof String))\n        return null;\n    XStream xStream = Circuit.getxStream();\n    try (Reader in = new StringReader(data.toString())) {\n        ArrayList<Movable> elements = (ArrayList<Movable>) xStream.fromXML(in);\n        if (elements == null)\n            return null;\n        for (Movable m : elements) if (m instanceof VisualElement)\n            ((VisualElement) m).setShapeFactory(shapeFactory);\n        return elements;\n    }\n}"
            ],
            [
                "createURLStreamHandlerFactory",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "/**\n * @return factory which catches 'image' protocol requests to deliver images via an URL.\n */\npublic static URLStreamHandlerFactory createURLStreamHandlerFactory() {\n    return new MyURLStreamHandlerFactory();\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "MyURLStreamHandlerFactory",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "isSequentialVar",
                "de.neemann.digital.gui.components.table",
                "ExpressionListenerJK",
                "/**\n * If the name belongs to a sequential state var, the state vars name is returned.\n * Otherwise a null is returned\n *\n * @param name the name of the variable\n * @return the state variable or null\n */\npublic static String isSequentialVar(String name) {\n    String detName = null;\n    if (name.endsWith(\"n+1\")) {\n        detName = name.substring(0, name.length() - 2);\n    } else if (name.endsWith(\"{n+1}\")) {\n        detName = name.substring(0, name.length() - 5) + \"n\";\n    }\n    return detName;\n}"
            ],
            [
                "getAttrList",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * @return returns the list of circuit attributes\n */\npublic static ArrayList<Key> getAttrList() {\n    return ATTR_LIST;\n}"
            ],
            [
                "raster",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * rounds the given vector to the raster\n *\n * @param pos the vector\n * @return pos round to raster\n */\npublic static Vector raster(Vector pos) {\n    return new Vector((int) Math.round((double) pos.x / SIZE) * SIZE, (int) Math.round((double) pos.y / SIZE) * SIZE);\n}"
            ],
            [
                "createLiveDialog",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "/**\n * Creates a instance prepared for \"live logging\"\n *\n * @param owner      the parent frame\n * @param model      the model\n * @param microStep  stepping mode\n * @param ordering   the ordering to use\n * @param sampleSize the number of samples\n * @return the created instance\n */\npublic static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize) {\n    String title;\n    if (microStep)\n        title = Lang.get(\"win_measures_microstep\");\n    else\n        title = Lang.get(\"win_measures_fullstep\");\n    ArrayList<Signal> signals = model.getSignalsCopy();\n    signals.removeIf(signal -> !signal.isShowInGraph());\n    new OrderMerger<String, Signal>(ordering) {\n\n        @Override\n        public boolean equals(Signal a, String b) {\n            return a.getName().equals(b);\n        }\n    }.order(signals);\n    ValueTableObserver valueTableObserver = new ValueTableObserver(microStep, signals, sampleSize);\n    GraphDialog graphDialog = new GraphDialog(owner, title, valueTableObserver.getLogData(), model, true).setColumnInfo(createColumnsInfo(signals));\n    graphDialog.addWindowListener(new WindowAdapter() {\n\n        @Override\n        public void windowOpened(WindowEvent e) {\n            model.addObserver(valueTableObserver);\n        }\n\n        @Override\n        public void windowClosed(WindowEvent e) {\n            model.removeObserver(valueTableObserver);\n        }\n    });\n    return graphDialog;\n}"
            ],
            [
                "createColumnsInfo",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals) {\n    ValueTable.ColumnInfo[] info = new ValueTable.ColumnInfo[signals.size()];\n    for (int i = 0; i < signals.size(); i++) {\n        Signal s = signals.get(i);\n        info[i] = new ValueTable.ColumnInfo(s.getFormat(), s.getValue().getBits());\n    }\n    return info;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "isExperimentalMode",
                "de.neemann.digital.gui",
                "Main",
                "/**\n * @return true if experimental features are enabled\n */\npublic static boolean isExperimentalMode() {\n    return experimental;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "WindowManager",
                "/**\n * @return the WindowManager\n */\npublic static WindowManager getInstance() {\n    return InstanceHolderClass.INSTANCE;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "Settings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static Settings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "getRange",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog bit range\n *\n * @param bits the number of bits\n * @return the bit range\n */\npublic static String getRange(int bits) {\n    if (bits == 1)\n        return \"\";\n    else\n        return \"[\" + (bits - 1) + \":0]\";\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog type for a signal\n *\n * @param def  the signal type (input or output) used if dir is not \"inout\"\n * @param dir  used to check if direction is \"inout\"\n * @param bits the number of bits\n * @return the verilog signal type\n */\npublic static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits) {\n    String result;\n    if (dir == HDLPort.Direction.INOUT)\n        result = \"inout\";\n    else\n        result = (def == HDLPort.Direction.IN) ? \"input\" : \"output\";\n    if (bits > 1) {\n        result += \" [\" + (bits - 1) + \":0]\";\n    }\n    return result;\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    return (bits + \"'b\" + s);\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.verilog2.lib",
                "VerilogTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given\n * element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(MODULE_PREFIX + elementName);\n}"
            ],
            [
                "createFromJar",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n *\n * @param path the path of the file to load\n * @param cl   the classloader used to load the template. If set to null, the SystemClassLoader is used\n * @return the statement\n * @throws IOException     IOException\n * @throws ParserException ParserException\n */\npublic static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException {\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    InputStream in = cl.getResourceAsStream(path);\n    if (in == null)\n        throw new FileNotFoundException(\"file not found: \" + path);\n    try (Reader r = new InputStreamReader(in, StandardCharsets.UTF_8)) {\n        Parser p = new Parser(r, path);\n        return p.parse();\n    }\n}"
            ],
            [
                "createFromJarStatic",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n * Throws only a RuntimeException so use with care!\n *\n * @param path the path of the file to load\n * @return the statement\n */\npublic static Statement createFromJarStatic(String path) {\n    try {\n        return createFromJar(path, null);\n    } catch (IOException | ParserException e) {\n        throw new RuntimeException(\"could not parse: \" + path, e);\n    }\n}"
            ],
            [
                "isWhiteSpace",
                "de.neemann.digital.hdl.hgs",
                "Tokenizer",
                "/**\n * Returns true if the given character is a white space.\n *\n * @param c the character to test\n * @return true in c is a white space\n */\npublic static boolean isWhiteSpace(int c) {\n    return c == ' ' || c == '\\t' || c == '\\n' || c == '\\r';\n}"
            ],
            [
                "toLong",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a long\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static long toLong(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toDouble",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a double\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static double toDouble(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).doubleValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toInt",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an int\n *\n * @param value the value to convert\n * @return the int value\n * @throws HGSEvalException HGSEvalException\n */\npublic static int toInt(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).intValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toBool",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a bool\n *\n * @param value the value to convert\n * @return the bool value\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean toBool(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue() != 0;\n    if (value instanceof Boolean)\n        return ((Boolean) value);\n    throw new HGSEvalException(\"Must be an integer or a bool, is: \" + value.getClass().getSimpleName() + \"=\" + value);\n}"
            ],
            [
                "toString",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a string\n *\n * @param value the value to convert\n * @return the string\n * @throws HGSEvalException HGSEvalException\n */\npublic static String toString(Object value) throws HGSEvalException {\n    if (value instanceof String)\n        return value.toString();\n    throw new HGSEvalException(\"must be a string, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toArray",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an array\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSArray toArray(Object value) throws HGSEvalException {\n    if (value instanceof HGSArray)\n        return (HGSArray) value;\n    if (value instanceof List)\n        return new HGSArrayList((List) value);\n    throw new HGSEvalException(\"must be an array, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toMap",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a map\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSMap toMap(Object value) throws HGSEvalException {\n    if (value instanceof HGSMap)\n        return (HGSMap) value;\n    if (value instanceof Map)\n        return new HGSMapMap((Map) value);\n    throw new HGSEvalException(\"must be a map, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "equals",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Compares two values\n *\n * @param a a value\n * @param b a value\n * @return true if both values are equal\n */\npublic static boolean equals(Object a, Object b) {\n    if (a instanceof Double || b instanceof Double)\n        return a.equals(b);\n    else if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() == ((Number) b).longValue();\n    else if (a instanceof String || b instanceof String)\n        return a.toString().equals(b.toString());\n    else\n        return a.equals(b);\n}"
            ],
            [
                "add",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Adds two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object add(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) + toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() + ((Number) b).longValue();\n    if (a instanceof String || b instanceof String)\n        return a.toString() + b.toString();\n    throw new HGSEvalException(\"arguments must be int or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "sub",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Subtracts two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object sub(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) - toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() - ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "mul",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Multiplies two values\n *\n * @param a a value\n * @param b a value\n * @return the product\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object mul(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) * toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() * ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "div",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Divides two numbers\n *\n * @param a a value\n * @param b a value\n * @return the quotient\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object div(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) / toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() / ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "or",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an or operation\n *\n * @param a a value\n * @param b a value\n * @return the or'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object or(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() | ((Number) b).longValue();\n    return toBool(a) || toBool(b);\n}"
            ],
            [
                "xor",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an xor operation\n *\n * @param a a value\n * @param b a value\n * @return the xor'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object xor(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() ^ ((Number) b).longValue();\n    return toBool(a) ^ toBool(b);\n}"
            ],
            [
                "and",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an and operation\n *\n * @param a a value\n * @param b a value\n * @return the and'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object and(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() & ((Number) b).longValue();\n    return toBool(a) && toBool(b);\n}"
            ],
            [
                "not",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs a not operation\n *\n * @param value a value\n * @return the inverted value\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object not(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ~((Number) value).longValue();\n    return !toBool(value);\n}"
            ],
            [
                "neg",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Changes the sign of the given value\n *\n * @param value the value\n * @return value with changed sign\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object neg(Object value) throws HGSEvalException {\n    if (value instanceof Double)\n        return -(Double) value;\n    return -toLong(value);\n}"
            ],
            [
                "less",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a&lt;b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean less(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) < toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) < toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) < 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "lessEqual",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a<=b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean lessEqual(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) <= toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) <= toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) <= 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "trimRight",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the right side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimRight(String str) {\n    int initial = str.length() - 1;\n    int pos = initial;\n    while (pos >= 0 && isWhiteSpace(str.charAt(pos))) pos--;\n    if (pos == initial)\n        return str;\n    else\n        return str.substring(0, pos + 1);\n}"
            ],
            [
                "trimLeft",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the left side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimLeft(String str) {\n    int pos = 0;\n    while (pos < str.length() && isWhiteSpace(str.charAt(pos))) pos++;\n    if (pos == 0)\n        return str;\n    else\n        return str.substring(pos);\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Returns the vhdl type name\n *\n * @param bits the number of bits\n * @return the types name\n */\npublic static String getType(int bits) {\n    if (bits == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector(\" + (bits - 1) + \" downto 0)\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    int missing = bits - s.length();\n    if (missing > 0)\n        s = ZEROS.substring(0, missing) + s;\n    if (bits > 1)\n        s = \"\\\"\" + s + \"\\\"\";\n    else\n        s = \"'\" + s + \"'\";\n    return s;\n}"
            ],
            [
                "isTemplate",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Returns true, if a hdl template is available.\n *\n * @param etd the {@link ElementTypeDescription}\n * @return true if VHDL template is available\n */\npublic static boolean isTemplate(ElementTypeDescription etd) {\n    ClassLoader cl = etd.getClassLoader();\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    URL url = cl.getResource(createFileName(ENTITY_PREFIX + etd.getName()));\n    return url != null;\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(ENTITY_PREFIX + elementName);\n}"
            ],
            [
                "zero",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Create a vhdl zero with the given bit number\n *\n * @param bits the bit number\n * @return '0' or (others => '0')\n */\npublic static String zero(long bits) {\n    if (bits == 1)\n        return \"'0'\";\n    else\n        return \"(others => '0')\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, long bits) {\n    return VHDLCreator.value(val, (int) bits);\n}"
            ],
            [
                "genericType",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates the code for a generic type\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String genericType(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector ((Bits-1) downto 0)\";\n}"
            ],
            [
                "type",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a type of given width\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String type(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector (\" + (n - 1) + \" downto 0)\";\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.hdl.model2.expression",
                "Expression",
                "/**\n * Helper to check if an expression is a net reference\n *\n * @param expr the expression to check\n * @param net  the net\n * @return true if the expression is a reference to the given net\n */\nstatic boolean isVar(Expression expr, HDLNet net) {\n    return expr instanceof ExprVar && ((ExprVar) expr).getNet() == net;\n}"
            ],
            [
                "isConstant",
                "de.neemann.digital.hdl.model2.expression",
                "ExprConstant",
                "/**\n * Returns the constant if th given node represents a constant\n *\n * @param node the node\n * @return the constant of null if node is not a constant\n */\npublic static ExprConstant isConstant(HDLNode node) {\n    if (node instanceof HDLNodeAssignment) {\n        HDLNodeAssignment expr = (HDLNodeAssignment) node;\n        if (expr.getExpression() instanceof ExprConstant) {\n            return (ExprConstant) expr.getExpression();\n        }\n    }\n    return null;\n}"
            ],
            [
                "getHighZ",
                "de.neemann.digital.data",
                "Value",
                "/**\n * @return returns a high z value\n */\npublic static Value getHighZ() {\n    return new Value(0, Type.HIGHZ);\n}"
            ],
            [
                "calcBackOffset",
                "de.neemann.digital.builder.circuit",
                "FragmentExpression",
                "static int calcBackOffset(int size, int i) {\n    if ((size & 1) != 0 && i == (size - 1) / 2)\n        return 0;\n    if (i >= size / 2)\n        return size - i;\n    else\n        return i + 1;\n}"
            ],
            [
                "isXNor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXNor(long[] data) {\n    for (int i = 0; i < data.length; i++) if ((Integer.bitCount(i) & 1) == data[i])\n        return false;\n    return true;\n}"
            ],
            [
                "isXor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXor(long[] data) {\n    for (int i = 0; i < data.length; i++) if (!((Integer.bitCount(i) & 1) == data[i]))\n        return false;\n    return true;\n}"
            ],
            [
                "getLibPath",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * @return the additional library path\n */\npublic static File getLibPath() {\n    String path;\n    try {\n        path = ElementLibrary.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath().replace('\\\\', '/');\n    } catch (URISyntaxException e) {\n        return new File(\"noLibFound\");\n    }\n    if (path.endsWith(\"/target/classes/\"))\n        return toCanonical(new File(path.substring(0, path.length() - 16) + \"/src/main/dig/lib\"));\n    if (path.endsWith(\"/target/Digital.jar\"))\n        return new File(path.substring(0, path.length() - 19) + \"/src/main/dig/lib\");\n    if (path.endsWith(\"Digital.jar\"))\n        return new File(path.substring(0, path.length() - 12) + \"/lib\");\n    return new File(\"noLibFound\");\n}"
            ],
            [
                "createCustomDescription",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * Creates a custom element description.\n *\n * @param file    the file\n * @param circuit the circuit\n * @param library the library\n * @return the type description\n * @throws PinException PinException\n */\npublic static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException {\n    ElementTypeDescriptionCustom d = new ElementTypeDescriptionCustom(file, circuit, library);\n    d.setElementFactory(attributes -> new CustomElement(d));\n    return d;\n}"
            ],
            [
                "createDeclarationDefault",
                "de.neemann.digital.draw.library",
                "ElementTypeDescriptionCustom",
                "/**\n * Creates the default for custom element declarations\n *\n * @param circuit the circuit\n * @return the default code template\n * @throws NodeException NodeException\n */\npublic static String createDeclarationDefault(Circuit circuit) throws NodeException {\n    TreeSet<String> nameSet = new TreeSet<>();\n    for (VisualElement ve : circuit.getElements()) {\n        String gen = ve.getElementAttributes().get(Keys.GENERIC).trim();\n        if (!gen.isEmpty()) {\n            try {\n                Parser p = new Parser(gen);\n                p.enableRefReadCollection();\n                p.parse(false);\n                for (Reference r : p.getRefsRead()) {\n                    if (r instanceof ReferenceToStruct) {\n                        ReferenceToStruct st = (ReferenceToStruct) r;\n                        if (st.getParent() instanceof ReferenceToVar) {\n                            ReferenceToVar var = (ReferenceToVar) st.getParent();\n                            if (var.getName().equals(\"args\")) {\n                                nameSet.add(st.getName());\n                            }\n                        }\n                    }\n                }\n            } catch (ParserException | IOException e) {\n                final NodeException ex = new NodeException(Lang.get(\"err_evaluatingGenericsCode_N_N\", ve, gen), e);\n                ex.setOrigin(circuit.getOrigin());\n                throw ex;\n            }\n        }\n    }\n    StringBuilder sb = new StringBuilder();\n    for (String name : nameSet) sb.append(name).append(\" := ;\\n\");\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Returns a comparator instance\n *\n * @return the singleton instance\n */\npublic static NumStringComparator getInstance() {\n    return InstanceHolder.INSTANCE;\n}"
            ],
            [
                "compareStr",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Compare two strings\n *\n * @param a a string\n * @param b a string\n * @return the comparison result\n */\npublic static int compareStr(String a, String b) {\n    int pa = 0;\n    int pb = 0;\n    while (true) {\n        final boolean ae = pa == a.length();\n        final boolean be = pb == b.length();\n        if (ae && be)\n            return 0;\n        else if (ae)\n            return -1;\n        else if (be)\n            return 1;\n        char ca = Character.toLowerCase(a.charAt(pa));\n        char cb = Character.toLowerCase(b.charAt(pb));\n        if (isDigit(ca) && isDigit(cb)) {\n            ParseNumber da = new ParseNumber(a, pa);\n            ParseNumber db = new ParseNumber(b, pb);\n            int c = Integer.compare(da.num, db.num);\n            if (c != 0)\n                return c;\n            else {\n                pa = da.p;\n                pb = db.p;\n            }\n        } else {\n            int c = Character.compare(ca, cb);\n            if (c != 0) {\n                return c;\n            } else {\n                pa++;\n                pb++;\n            }\n        }\n    }\n}"
            ],
            [
                "createPins",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Creates pins\n *\n * @param inputs    the inputs\n * @param outputs   the outputs\n * @param invert    true if invert output\n * @param ic        input inverter configuration\n * @param wideShape true if a wide shape is selected\n * @return the pins\n */\npublic static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape) {\n    return createPins(inputs, outputs, invert, wideShape ? 4 : 3, true, ic);\n}"
            ],
            [
                "readStyle",
                "de.neemann.digital.draw.shapes.custom.svg",
                "Context",
                "static Context readStyle(Context context, String style) throws SvgException {\n    SVGTokenizer t = new SVGTokenizer(style);\n    while (true) {\n        final String command = t.readTo(':');\n        if (command.length() == 0)\n            break;\n        final String value = t.readTo(';');\n        AttrParser p = PARSER.get(command);\n        if (p != null)\n            p.parse(context, value);\n    }\n    return context;\n}"
            ],
            [
                "getOutSize",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static int getOutSize(boolean small) {\n    if (small)\n        return SIZE2;\n    else\n        return OUT_SIZE;\n}"
            ],
            [
                "getOutStyle",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static Style getOutStyle(boolean small) {\n    if (small)\n        return Style.THIN;\n    else\n        return Style.NORMAL;\n}"
            ],
            [
                "getOutRad",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Inner circle size used for inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the output circle radius as a vector\n */\npublic static Vector getOutRad(boolean small) {\n    int s = getOutSize(small);\n    return new Vector(s - 6, s - 6);\n}"
            ],
            [
                "createTransform",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static Transform createTransform(int size) {\n    if (size == 2)\n        return Transform.IDENTITY;\n    else {\n        final TransformTranslate tr1 = new TransformTranslate(-70, -139);\n        final TransformTranslate tr2 = new TransformTranslate(70, 139);\n        float s = (2 + size) / 4f;\n        final TransformMatrix trm = new TransformMatrix(s, 0, 0, s, 0, 0);\n        return Transform.mul(tr1, Transform.mul(trm, tr2));\n    }\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"attributes\", ElementAttributes.class);\n    xStream.alias(\"visualElement\", VisualElement.class);\n    xStream.alias(\"wire\", Wire.class);\n    xStream.alias(\"circuit\", Circuit.class);\n    xStream.alias(\"intFormat\", IntFormat.class);\n    xStream.alias(\"exprFormat\", FormatToExpression.class);\n    xStream.alias(\"barrelShifterMode\", BarrelShifterMode.class);\n    xStream.alias(\"direction\", LeftRightFormat.class);\n    xStream.alias(\"rotation\", Rotation.class);\n    xStream.aliasAttribute(Rotation.class, \"rotation\", \"rotation\");\n    xStream.alias(\"language\", Language.class);\n    xStream.aliasAttribute(Language.class, \"name\", \"name\");\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"value\", InValue.class);\n    xStream.aliasAttribute(InValue.class, \"value\", \"v\");\n    xStream.aliasAttribute(InValue.class, \"highZ\", \"z\");\n    xStream.addImplicitCollection(ElementAttributes.class, \"attributes\");\n    xStream.alias(\"data\", DataField.class);\n    xStream.registerConverter(new DataFieldConverter());\n    xStream.alias(\"testData\", TestCaseDescription.class);\n    xStream.alias(\"inverterConfig\", InverterConfig.class);\n    xStream.addImplicitCollection(InverterConfig.class, \"inputs\");\n    xStream.alias(\"storedRoms\", ROMManager.class);\n    xStream.addImplicitCollection(ROMManager.class, \"roms\");\n    xStream.alias(\"romList\", ROMManagerFile.class);\n    xStream.alias(\"romFile\", ROMManagerFile.RomContainerFile.class);\n    xStream.alias(\"romData\", ROMManagerFile.RomContainerDataField.class);\n    xStream.alias(\"appType\", Application.Type.class);\n    xStream.ignoreUnknownElements();\n    xStream.alias(\"shape\", CustomShapeDescription.class);\n    xStream.alias(\"pin\", CustomShapeDescription.Pin.class);\n    xStream.alias(\"circle\", CustomShapeDescription.CircleHolder.class);\n    xStream.alias(\"line\", CustomShapeDescription.LineHolder.class);\n    xStream.alias(\"poly\", CustomShapeDescription.PolygonHolder.class);\n    xStream.alias(\"text\", CustomShapeDescription.TextHolder.class);\n    xStream.alias(\"polygon\", Polygon.class);\n    xStream.alias(\"shapeType\", CustomCircuitShapeType.class);\n    xStream.alias(\"transform\", TransformHolder.class);\n    xStream.registerConverter(new PolygonConverter());\n    return xStream;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename     filename\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load \" + filename);\n    final Circuit circuit = loadCircuit(new FileInputStream(filename), shapeFactory);\n    circuit.origin = filename;\n    return circuit;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param in           the input stream\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load stream\");\n    try {\n        XStream xStream = getxStream();\n        Circuit circuit = (Circuit) xStream.fromXML(in);\n        for (VisualElement ve : circuit.getElements()) ve.setShapeFactory(shapeFactory);\n        if (circuit.version == 0) {\n            // convert to version 1\n            for (Wire w : circuit.getWires()) {\n                w.p1 = w.p1.mul(2);\n                w.p2 = w.p2.mul(2);\n            }\n            for (VisualElement e : circuit.getElements()) e.setPos(e.getPos().mul(2));\n            circuit.version = 1;\n        }\n        if (circuit.version < 2) {\n            Object rm = circuit.getAttributes().get(Keys.ROMMANAGER);\n            if (rm instanceof ROMManager) {\n                circuit.getAttributes().set(Keys.ROMMANAGER, new ROMManagerFile((ROMManager) rm));\n            }\n            circuit.version = 2;\n        }\n        return circuit;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "fixGenerics",
                "de.neemann.digital.draw.model",
                "ModelCreator",
                "/**\n * Creates a concrete circuit from a generic on.\n * Uses the included generic init code.\n *\n * @param circuit the generic circuit\n * @param library the element library\n * @return the concrete circuit\n * @throws NodeException            NodeException\n * @throws ElementNotFoundException ElementNotFoundException\n */\npublic static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException {\n    if (circuit.getAttributes().get(Keys.IS_GENERIC))\n        return new ResolveGenerics(circuit, library).resolveCircuit(null).getCircuit();\n    else\n        return circuit;\n}"
            ],
            [
                "createFromPath",
                "de.neemann.digital.draw.graphics",
                "Polygon",
                "/**\n * Creates a polygon from a SVG path\n *\n * @param path the svg path\n * @return the polygon or null if there was an error\n */\npublic static Polygon createFromPath(String path) {\n    try {\n        return new PolygonParser(path).create();\n    } catch (PolygonParser.ParserException e) {\n        return null;\n    }\n}"
            ],
            [
                "vec",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Returns a new vector\n * shorthand for new Vector(x,y)\n *\n * @param x x\n * @param y y\n * @return the vector\n */\npublic static Vector vec(int x, int y) {\n    return new Vector(x, y);\n}"
            ],
            [
                "min",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the minimum vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the minimum\n */\npublic static Vector min(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x)\n            x = p[i].getX();\n        if (p[i].getY() < y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "max",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the maximim vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the maximum\n */\npublic static Vector max(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() > x)\n            x = p[i].getX();\n        if (p[i].getY() > y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "width",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the width of the given vectors.\n *\n * @param p the vectors\n * @return max(p)-min(p)\n */\npublic static Vector width(VectorInterface... p) {\n    int x1 = p[0].getX();\n    int y1 = p[0].getY();\n    int x2 = x1;\n    int y2 = y1;\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x1)\n            x1 = p[i].getX();\n        if (p[i].getY() < y1)\n            y1 = p[i].getY();\n        if (p[i].getX() > x2)\n            x2 = p[i].getX();\n        if (p[i].getY() > y2)\n            y2 = p[i].getY();\n    }\n    return new Vector(x2 - x1, y2 - y1);\n}"
            ],
            [
                "add",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Adds an offset to every vector in the given list\n *\n * @param vectors the original vectors\n * @param offs    the offset\n * @return the new list\n */\npublic static List<Vector> add(List<Vector> vectors, Vector offs) {\n    ArrayList<Vector> newVec = new ArrayList<>();\n    for (Vector v : vectors) newVec.add(v.add(offs));\n    return newVec;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static SVGSettings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "createKeyList",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * @return a list of available SVG export keys\n */\npublic static List<Key> createKeyList() {\n    ArrayList<Key> list = new ArrayList<>();\n    list.add(LATEX);\n    list.add(PINS_IN_MATH_MODE);\n    list.add(HIDE_TEST);\n    list.add(NO_SHAPE_FILLING);\n    list.add(SMALL_IO);\n    list.add(NO_PIN_MARKER);\n    list.add(THINNER_LINES);\n    list.add(HIGH_CONTRAST);\n    list.add(MONOCHROME);\n    return list;\n}"
            ],
            [
                "mul",
                "de.neemann.digital.draw.graphics",
                "Transform",
                "/**\n * Combines the two given transformations to a common transformation\n *\n * @param t1 first transformation\n * @param t2 second transformation\n * @return the resulting transformation\n */\nstatic Transform mul(Transform t1, Transform t2) {\n    TransformMatrix m1 = t1.getMatrix();\n    TransformMatrix m2 = t2.getMatrix();\n    return new TransformMatrix(m1.a * m2.a + m1.c * m2.b, m1.b * m2.a + m1.d * m2.b, m1.a * m2.c + m1.c * m2.d, m1.b * m2.c + m1.d * m2.d, m2.a * m1.x + m2.b * m1.y + m2.x, m2.c * m1.x + m2.d * m1.y + m2.y);\n}"
            ],
            [
                "rotate",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a rotation.\n * Rotates in mathematically positive direction. Takes into account that\n * in Digital the y-axis goes downwards.\n *\n * @param w the angle in 360 grad units\n * @return the transformation\n */\npublic static TransformMatrix rotate(double w) {\n    final double phi = w / 180 * Math.PI;\n    float cos = (float) Math.cos(phi);\n    float sin = (float) Math.sin(phi);\n    return new TransformMatrix(cos, -sin, sin, cos, 0, 0);\n}"
            ],
            [
                "scale",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a scaling transformation\n *\n * @param sx scaling in x direction\n * @param sy scaling in y direction\n * @return the transformation\n */\npublic static TransformMatrix scale(float sx, float sy) {\n    return new TransformMatrix(sx, 0, 0, sy, 0, 0);\n}"
            ],
            [
                "getTextWidth",
                "de.neemann.digital.draw.graphics",
                "GraphicMinMax",
                "/**\n * Returns a approximation of the width of the given text in the given style\n *\n * @param text  the text\n * @param style the style\n * @return the approximated text width\n */\npublic static int getTextWidth(String text, Style style) {\n    final FontRenderContext fontRenderContext = new FontRenderContext(null, true, false);\n    GraphicsFormatter.Fragment f = GraphicsFormatter.createFragment((fragment, font, str) -> {\n        Rectangle2D rec = style.getFont().getStringBounds(str, fontRenderContext);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), 0);\n    }, style.getFont(), text);\n    return f.getWidth();\n}"
            ],
            [
                "getSelected",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * @return the selected color map\n */\npublic static ColorScheme getSelected() {\n    if (instance == null) {\n        updateInstance();\n        Settings.getInstance().getAttributes().addListener(ColorScheme::updateInstance);\n    }\n    return instance;\n}"
            ],
            [
                "getWireStyle",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Returns the wire style depending on the given value\n *\n * @param value the value to represent\n * @return the style\n */\npublic static Style getWireStyle(Value value) {\n    if (value == null || value.getBits() > 1)\n        return WIRE;\n    if (value.isHighZ())\n        return WIRE_HIGHZ;\n    if (value.getValue() == 1)\n        return WIRE_HIGH;\n    else\n        return WIRE_LOW;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text the text\n * @return the string representation\n */\npublic static String format(Text text) {\n    return format(text, FormatToExpression.getDefaultFormat());\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text   the text\n * @param format the format to use\n * @return the string representation\n */\npublic static String format(Text text, FormatToExpression format) {\n    if (text instanceof Simple) {\n        return ((Simple) text).getText();\n    } else if (text instanceof Blank) {\n        return \" \";\n    } else if (text instanceof Character) {\n        return \"\" + ((Character) text).getChar();\n    } else if (text instanceof Decorate) {\n        Decorate d = (Decorate) text;\n        if (d.getStyle() == Decorate.Style.OVERLINE) {\n            final Text content = d.getContent();\n            if (content instanceof Simple || content instanceof Index)\n                return format.getNot() + format(content, format);\n            else\n                return format.getNot() + \"(\" + format(content, format) + \")\";\n        } else\n            return format(d.getContent(), format);\n    } else if (text instanceof Index) {\n        Index i = (Index) text;\n        String str = format(i.getVar(), format);\n        if (i.getSubScript() != null)\n            str += format(i.getSubScript(), format);\n        if (i.getSuperScript() != null)\n            str += format(i.getSuperScript(), format);\n        return str;\n    } else if (text instanceof Sentence) {\n        Sentence s = (Sentence) text;\n        StringBuilder sb = new StringBuilder();\n        for (Text t : s) sb.append(format(t, format));\n        return sb.toString();\n    } else\n        return \"\";\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "SVGFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr   the {@link Graphics2D} instance\n * @param text the text\n * @return the text fragment\n */\npublic static Fragment createFragment(Graphics2D gr, String text) {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), text);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr         the {@link Graphics2D} instance\n * @param expression the expression\n * @return the text fragment\n * @throws FormatterException FormatterException\n */\npublic static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), new ExpressionToText().createText(expression));\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param sizer the sizer instance\n * @param font  the font\n * @param text  the text\n * @return the fragment\n */\npublic static Fragment createFragment(FontSizer sizer, Font font, String text) {\n    Fragment fragment;\n    try {\n        Text t = new Parser(text).parse();\n        fragment = createFragment(sizer, font, t);\n    } catch (ParseException | FormatterException e) {\n        // if there was an exception, return the complete raw text as a fragment\n        fragment = new TextFragment(sizer, font, text);\n    }\n    return fragment;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param exp the expression to format\n * @return the formatted string\n */\npublic static String format(Expression exp) {\n    return format(new ExpressionToText().createText(exp, FormatToExpression.LATEX), true);\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "math",
                "de.neemann.digital.draw.graphics.text.text",
                "Decorate",
                "/**\n * Adds a MATH decoration to the given text.\n * If the text is already decorated the text is returned directly.\n *\n * @param t the text to decorate\n * @return the decorated text\n */\npublic static Text math(Text t) {\n    if (t instanceof Decorate) {\n        Decorate d = (Decorate) t;\n        if (d.getStyle() == Style.MATH)\n            return t;\n    }\n    return new Decorate(t, Style.MATH);\n}"
            ],
            [
                "escapeXML",
                "de.neemann.digital.draw.graphics",
                "GraphicSVG",
                "/**\n * Escapes a given string to XML\n *\n * @param text the text to escape\n * @return the escaped text.\n */\npublic static String escapeXML(String text) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        switch(c) {\n            case '&':\n                sb.append(\"&amp;\");\n                break;\n            case '<':\n                sb.append(\"&lt;\");\n                break;\n            case '>':\n                sb.append(\"&gt;\");\n                break;\n            case '\"':\n                sb.append(\"&quot;\");\n                break;\n            default:\n                sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
            ],
            [
                "getMirrorYOrientation",
                "de.neemann.digital.draw.graphics",
                "GraphicSwing",
                "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3) {\n    int oy = orientation.getY();\n    VectorInterface d0 = p2.sub(p1).getOrthogonal();\n    VectorInterface d1 = p3.sub(p1);\n    if (d0.scalar(d1) < 0)\n        oy = 2 - oy;\n    return oy;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param file the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(File file) throws IOException {\n    final Configuration configuration = load(new FileInputStream(file));\n    configuration.origin = file;\n    return configuration;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param in the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        return (Configuration) xStream.fromXML(in);\n    } catch (RuntimeException e) {\n        throw new IOException(\"error reading XML\", e);\n    }\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "UNKNOWN",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * Unknown release\n */\npublic static final String UNKNOWN = \"unknown\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullDown",
                "/**\n * The pull down description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "Diode",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeBackward",
                "/**\n * The description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullUp",
                "/**\n * The pull up description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeForward",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROMDualPort",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualAccess",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "CounterPreset",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Register",
                "/**\n * The registers {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "LookUpTable",
                "/**\n * The LUTs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "BlockRAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Counter",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROM",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMAsync",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROM",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROMDualPort",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePortSel",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RegisterFile",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "MIDI",
                "/**\n * The Speakers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RGBLED",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The Input description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "LEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);"
            ],
            [
                "POLARITYAWARELEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The polarity aware LED description\n */\npublic static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "SEVENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment display description\n */\npublic static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();"
            ],
            [
                "SEVENHEXDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment hex display description\n */\npublic static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "SIXTEENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * Sixteen Segment Display\n */\npublic static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RotEncoder",
                "/**\n * The rotary encoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PinControl",
                "/**\n * The description of the pin control logic\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "DipSwitch",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "LightBulb",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Probe",
                "/**\n * The Probe description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Button",
                "/**\n * The Button description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "ButtonLED",
                "/**\n * The ButtonLED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "In",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "STEPS",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * Steps for a full revolution\n */\npublic static final int STEPS = 72;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * The stepper motors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "NotConnected",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorBipolar",
                "/**\n * The bipolar motor description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Const",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PowerSupply",
                "/**\n * Enforces a power supply\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Ground",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "VDD",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.core.io.telnet",
                "ServerHolder",
                "/**\n * The singleton instance\n */\npublic static final ServerHolder INSTANCE = new ServerHolder();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io.telnet",
                "Telnet",
                "/**\n * The telnet server description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);"
            ],
            [
                "BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of bits in simple gates like And and Or\n */\npublic static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);"
            ],
            [
                "INPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * input bits of sign extender\n */\npublic static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);"
            ],
            [
                "OUTPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output bits of sign extender\n */\npublic static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);"
            ],
            [
                "INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in simple gates like And and Or\n */\npublic static final // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nKey.KeyInteger // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nINPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);"
            ],
            [
                "LUT_INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in the LUT\n */\npublic static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);"
            ],
            [
                "MAX_VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The counter max value\n */\npublic static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);"
            ],
            [
                "DELAY_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the delay time used by the delay component\n */\npublic static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);"
            ],
            [
                "MONOFLOP_DELAY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the timer delay time\n */\npublic static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);"
            ],
            [
                "LABEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The elements label\n */\npublic static final Key<String> LABEL = new Key<>(\"Label\", \"\");"
            ],
            [
                "FONT_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The font size\n */\npublic static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);"
            ],
            [
                "TEXT_ORIENTATION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * text orientation\n */\npublic static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();"
            ],
            [
                "LED_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a LED\n */\npublic static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();"
            ],
            [
                "SEVEN_SEG_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a seven seg display\n */\npublic static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);"
            ],
            [
                "VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The value of constants\n */\npublic static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();"
            ],
            [
                "DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of elements\n */\npublic static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();"
            ],
            [
                "INPUT_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of inputs\n */\npublic static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();"
            ],
            [
                "DIP_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of the dip switch\n */\npublic static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Color of LEDs\n */\npublic static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();"
            ],
            [
                "INPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The input splitting of a splitter\n */\npublic static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");"
            ],
            [
                "OUTPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The output splitting of a splitter\n */\npublic static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");"
            ],
            [
                "SPLITTER_SPREADING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The splitter spreading\n */\npublic static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();"
            ],
            [
                "IN_OUT_SMALL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to select small inputs and outputs\n */\npublic static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "RUN_AT_REAL_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable realtime mode at a clock\n */\npublic static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);"
            ],
            [
                "INVERT_OUTPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * inverts the output of a gate\n */\npublic static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);"
            ],
            [
                "FREQUENCY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The real time frequency of the clock\n */\npublic static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);"
            ],
            [
                "SELECTOR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the bit count of a muxer or decoder\n */\npublic static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);"
            ],
            [
                "ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of address bits of memory\n */\npublic static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);"
            ],
            [
                "BLOWN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a diode as blown fuse or as programmed\n */\npublic static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a switch as closed or not\n */\npublic static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();"
            ],
            [
                "SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * signed flag for comparator element\n */\npublic static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();"
            ],
            [
                "REMAINDER_POSITIVE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects if the reminder of the division is always positive\n */\npublic static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);"
            ],
            [
                "DATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the data key for memory\n */\npublic static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);"
            ],
            [
                "FLIP_SEL_POSITON",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag for flipping selector pos in muxers, decoders and drivers\n */\npublic static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();"
            ],
            [
                "ROTATE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the rotation of the elements\n */\npublic static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();"
            ],
            [
                "WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);"
            ],
            [
                "SHAPE_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * defines the shape type of the custom circuit\n */\npublic static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();"
            ],
            [
                "LAYOUT_SHAPE_DELTA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Defines the distance to the previous pin. Used by the layout shape type\n */\npublic static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));"
            ],
            [
                "TERM_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);"
            ],
            [
                "TERM_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);"
            ],
            [
                "CYCLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break timeout cycles\n */\npublic static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);"
            ],
            [
                "ENABLED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break enabled\n */\npublic static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();"
            ],
            [
                "VALUE_IS_PROBE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to make a value a probe\n */\npublic static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "IS_PROGRAM_MEMORY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();"
            ],
            [
                "IS_PROGRAM_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();"
            ],
            [
                "AUTO_RELOAD_ROM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the ROMs auto load function\n */\npublic static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();"
            ],
            [
                "LAST_DATA_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The last used ROM data file\n */\npublic static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();"
            ],
            [
                "SHOW_DATA_TABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data table window\n */\npublic static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH_MICRO",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window in single gate mode\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();"
            ],
            [
                "ADD_VALUE_TO_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to add the value to the measurement graph\n */\npublic static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();"
            ],
            [
                "MICRO_STEP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the single gate mode in the embedded data view\n */\npublic static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);"
            ],
            [
                "MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the embedded data view\n */\npublic static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);"
            ],
            [
                "SETTINGS_MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the default data view\n */\npublic static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);"
            ],
            [
                "IS_HIGH_Z",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable high z mode at an input\n */\npublic static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "AVOID_ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to avoid active low at an input\n */\npublic static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the description of an element\n */\npublic static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");"
            ],
            [
                "NETNAME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A net name\n */\npublic static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");"
            ],
            [
                "SETTINGS_IEEE_SHAPES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * shape setting\n */\npublic static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();"
            ],
            [
                "SETTINGS_LANGUAGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI Language\n */\npublic static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();"
            ],
            [
                "SETTINGS_DEFAULT_TREESELECT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Default state of the tree view\n */\npublic static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);"
            ],
            [
                "SETTINGS_EXPRESSION_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI expression string representation\n */\npublic static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);"
            ],
            [
                "SETTINGS_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the grid\n */\npublic static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();"
            ],
            [
                "SETTINGS_SHOW_WIRE_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the wire bits view\n */\npublic static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);"
            ],
            [
                "SETTINGS_MAC_MOUSE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the MAC mouse mode\n */\npublic static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables tunnel rename dialog\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);"
            ],
            [
                "SETTINGS_RENAME_LABELS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables renaming of labels ending with numbers while copying\n */\npublic static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);"
            ],
            [
                "SETTINGS_OPEN_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables remote port\n */\npublic static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();"
            ],
            [
                "SETTINGS_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * remote port\n */\npublic static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);"
            ],
            [
                "OSCILLATION_DETECTION_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Counter used to detect oscillations\n */\npublic static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);"
            ],
            [
                "INT_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();"
            ],
            [
                "PROBE_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());"
            ],
            [
                "FIXED_POINT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * fixed point fractional binary digits\n */\npublic static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();"
            ],
            [
                "GRAPHIC_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);"
            ],
            [
                "GRAPHIC_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);"
            ],
            [
                "RELAY_NORMALLY_CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a relay to indicate if it is normally open or normally closed.\n */\npublic static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();"
            ],
            [
                "POLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Number of poles in the double throw relay\n */\npublic static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();"
            ],
            [
                "BARREL_SHIFTER_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to select the shift mode\n */\npublic static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());"
            ],
            [
                "DIRECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate shift direction\n */\npublic static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());"
            ],
            [
                "BARREL_SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate if shift value is signed\n */\npublic static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);"
            ],
            [
                "COMMON_CONNECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to indicate if the 7-seg display has a common cathode output\n */\npublic static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();"
            ],
            [
                "COMMON_CONNECTION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to define the common connection type\n */\npublic static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();"
            ],
            [
                "LED_PERSISTENCE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);"
            ],
            [
                "LED_PERSIST_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();"
            ],
            [
                "SETTINGS_ATF1502_FITTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_ATMISP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Flash software for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();"
            ],
            [
                "ROW_DATA_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * row bits in led matrix\n */\npublic static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);"
            ],
            [
                "COL_ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * column address bits in led matrix\n */\npublic static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);"
            ],
            [
                "LOCKED_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * In locked mode the circuit can not be modified\n */\npublic static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);"
            ],
            [
                "PINNUMBER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin number\n */\npublic static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();"
            ],
            [
                "PINCOUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin count\n */\npublic static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));"
            ],
            [
                "INVERTER_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * contains the input inverter config\n */\npublic static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());"
            ],
            [
                "BACKGROUND_COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Background Color of nested circuits\n */\npublic static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));"
            ],
            [
                "SETTINGS_FONT_SCALING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the screen resolution\n */\npublic static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_USE_EQUALS_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses the equals key instead of the plus key.\n */\npublic static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;"
            ],
            [
                "WITH_ENABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if a enable input is needed\n */\npublic static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);"
            ],
            [
                "FET_UNIDIRECTIONAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true to simulate a unidirectional FET\n */\npublic static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);"
            ],
            [
                "ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if component is active low\n */\npublic static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();"
            ],
            [
                "MAP_TO_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if button is mapped to the keyboard\n */\npublic static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();"
            ],
            [
                "SETTINGS_LIBRARY_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf1502\n */\npublic static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_JAR_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A jar containing custom java components\n */\npublic static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "ROMMANAGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The manager which contains all the roms data\n */\npublic static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();"
            ],
            [
                "APPLICATION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The type of the external process\n */\npublic static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());"
            ],
            [
                "EXTERNAL_INPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The inputs used by the external process\n */\npublic static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");"
            ],
            [
                "EXTERNAL_OUTPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The outputs used by the external process\n */\npublic static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");"
            ],
            [
                "EXTERNAL_CODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);"
            ],
            [
                "EXTERNAL_CODE_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));"
            ],
            [
                "SETTINGS_GHDL_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to ghdl\n */\npublic static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();"
            ],
            [
                "GHDL_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The ghdl options\n */\npublic static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "IVERILOG_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The iverilog options\n */\npublic static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "SETTINGS_IVERILOG_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to iverilog installation directory\n */\npublic static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();"
            ],
            [
                "CUSTOM_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Shape used to represent a visual element\n */\npublic static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));"
            ],
            [
                "PRELOAD_PROGRAM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * True if a program is loaded to the simulator at startup\n */\npublic static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();"
            ],
            [
                "BIG_ENDIAN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);"
            ],
            [
                "PROGRAM_TO_PRELOAD",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The file to preload as a program at startup\n */\npublic static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "BIG_ENDIAN_SETTING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "WIDE_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects a wide shape\n */\npublic static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();"
            ],
            [
                "RECT_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of the rectangle\n */\npublic static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);"
            ],
            [
                "RECT_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the height of the rectangle\n */\npublic static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);"
            ],
            [
                "RECT_INSIDE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();"
            ],
            [
                "RECT_BOTTOM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();"
            ],
            [
                "RECT_RIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();"
            ],
            [
                "MIDI_CHANNEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);"
            ],
            [
                "MIDI_INSTRUMENT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");"
            ],
            [
                "MIDI_PROG_CHANGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables Program change\n */\npublic static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);"
            ],
            [
                "SETTINGS_TOOLCHAIN_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Stores the IDE settings file\n */\npublic static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();"
            ],
            [
                "GENERICLARGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();"
            ],
            [
                "IS_GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Circuit is generic\n */\npublic static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUTORIAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the tutorial\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();"
            ],
            [
                "SETTINGS_WIRETOOLTIP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the wire tool tips\n */\npublic static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);"
            ],
            [
                "SWITCH_ACTS_AS_INPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The switch acts as input\n */\npublic static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();"
            ],
            [
                "SNAP_TO_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Snaps the element to the grid\n */\npublic static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();"
            ],
            [
                "MIRROR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Mirrors the component\n */\npublic static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "TESTDATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The test data\n */\npublic static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);"
            ],
            [
                "TRIGGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The scope trigger mode\n */\npublic static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());"
            ],
            [
                "PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the telnet port\n */\npublic static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);"
            ],
            [
                "TELNET_ESCAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Telnet escape\n */\npublic static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();"
            ],
            [
                "SKIP_HDL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Skips HDL output for this circuit\n */\npublic static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();"
            ],
            [
                "PREFIX",
                "de.neemann.digital.core.basic",
                "FanIn",
                "/**\n * The inputs name prefix\n */\npublic static final String PREFIX = \"In_\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NOr",
                "/**\n * The NOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "And",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XNOr",
                "/**\n * The XNOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XOr",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Not",
                "/**\n * The Not description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NAnd",
                "/**\n * The NAnd description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Or",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "STARTED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STARTED event\n */\npublic static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CLOSED event\n */\npublic static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);"
            ],
            [
                "POSTCLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.POSTCLOSED event\n */\npublic static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);"
            ],
            [
                "STEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STEP event\n */\npublic static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);"
            ],
            [
                "CHECKBURN",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CHECKBURN event\n */\npublic static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);"
            ],
            [
                "MICROSTEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.MICROSTEP event\n */\npublic static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);"
            ],
            [
                "RUN_TO_BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK event\n */\npublic static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);"
            ],
            [
                "RUN_TO_BREAK_TIMEOUT",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK_TIMEOUT event\n */\npublic static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);"
            ],
            [
                "BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.BREAK event\n */\npublic static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGPFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "NFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGNFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "PFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "TransGate",
                "/**\n * The transmission gate description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "SwitchDT",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Relay",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "RelayDT",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Switch",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Fuse",
                "/**\n * The fuse description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Reset",
                "/**\n * The Reset description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Stop",
                "/**\n * The Stop element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Decoder",
                "/**\n * The Decoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Delay",
                "/**\n * The Delay description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Driver",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "DriverInvSel",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "PriorityEncoder",
                "/**\n * The PriorityEncoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BusSplitter",
                "/**\n * The bus splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * The splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Multiplexer",
                "/**\n * The Multiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BitSelector",
                "/**\n * The Bit Selector description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * The Break description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Clock",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "AsyncSeq",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Demultiplexer",
                "/**\n * The Demultiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopDAsync",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopD",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRSAsync",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopT",
                "/**\n * The T-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJKAsync",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJK",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "Monoflop",
                "/**\n * The Monoflop's description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRS",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BarrelShifter",
                "/**\n * The barrel shifter description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Mul",
                "/**\n * The multiplier description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Neg",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitExtender",
                "/**\n * Description of the sign extend component.\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Add",
                "/**\n * The adders description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Div",
                "/**\n * The dividers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "PRNG",
                "/**\n * The element type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Sub",
                "/**\n * The subtractors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Comparator",
                "/**\n * The comparators description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitCount",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "EMPTY_LIST",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * An empty list\n */\npublic static final ObservableValues EMPTY_LIST = new ObservableValues();"
            ],
            [
                "DEFAULT_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The default formatter\n */\npublic static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;"
            ],
            [
                "HEX_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The hexadecimal formatter\n */\npublic static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "External",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "ExternalFile",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DEFAULT_RAD",
                "de.neemann.digital.fsm",
                "State",
                "/**\n * The default state radius\n */\nstatic final int DEFAULT_RAD = 70;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "Lang",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "InstanceHolder",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.testing",
                "TestCaseElement",
                "/**\n * The TestCaseElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();"
            ],
            [
                "STATENAMES",
                "de.neemann.digital.analyse",
                "TruthTableTableModel",
                "/**\n * String representation of the states\n */\npublic static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };"
            ],
            [
                "ONE",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant true or one\n */\npublic static final Constant ONE = new Constant(true);"
            ],
            [
                "ZERO",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant false or zero\n */\npublic static final Constant ZERO = new Constant(false);"
            ],
            [
                "PRIMARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the primary panel\n */\npublic static final String PRIMARY = \"primary\";"
            ],
            [
                "SECONDARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the secondary panel\n */\npublic static final String SECONDARY = \"secondary\";"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * The single EditorFactory instance.\n */\nstatic final EditorFactory INSTANCE = new EditorFactory();"
            ],
            [
                "MAX_TERMINAL_STORED",
                "de.neemann.digital.gui.components.terminal",
                "ConsoleTerminal",
                "/**\n * Max amount of characters stored\n */\npublic static final int MAX_TERMINAL_STORED = 2048;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Terminal",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Keyboard",
                "/**\n * The keyboard description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "FAILED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for failed tests\n */\nstatic final Color FAILED_COLOR = new Color(255, 200, 200);"
            ],
            [
                "PASSED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for passed tests\n */\nstatic final Color PASSED_COLOR = new Color(200, 255, 200);"
            ],
            [
                "ICON_DELETE",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The delete icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");"
            ],
            [
                "ICON_COPY",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The copy icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "VGA",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "GraphicCard",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "LedMatrix",
                "/**\n * the LED-Matrix description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "ScopeTrigger",
                "/**\n * The ScopeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);"
            ],
            [
                "DATADESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The DataElement description\n */\npublic static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "TEXTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The TextElement description\n */\npublic static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "RECTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The shape for the rectangle\n */\npublic static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "LEFT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to left align the digits\n */\npublic final static float LEFT = 0.0f;"
            ],
            [
                "CENTER",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to center the digits\n */\npublic final static float CENTER = 0.5f;"
            ],
            [
                "RIGHT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to right align the digits\n */\npublic final static float RIGHT = 1.0f;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "Settings",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "SettingsHolder",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "BASE_FILE_KEY",
                "de.neemann.digital.hdl.hgs",
                "Context",
                "/**\n * Key used to store the base file name in the context\n */\npublic static final String BASE_FILE_KEY = \"baseFile\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericInitCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();"
            ],
            [
                "GEN_ARGS_KEY",
                "de.neemann.digital.draw.library",
                "ResolveGenerics",
                "/**\n * Key uses to store the args for the generic circuits\n */\npublic static final String GEN_ARGS_KEY = \"genArgs\";"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "ButtonShape",
                "protected static final int HEIGHT = OUT_SIZE / 2;"
            ],
            [
                "SIZE2",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Half the size of the used raster\n */\npublic static final int SIZE2 = 10;"
            ],
            [
                "SIZE",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * The size of the used raster\n */\npublic static final int SIZE = SIZE2 * 2;"
            ],
            [
                "CIRC",
                "de.neemann.digital.draw.shapes",
                "DILShape",
                "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);"
            ],
            [
                "DOWNSHIFT",
                "de.neemann.digital.draw.shapes",
                "VDDShape",
                "static final int DOWNSHIFT = 4;"
            ],
            [
                "CHARGED_GATE",
                "de.neemann.digital.draw.shapes",
                "FGFETShapeN",
                "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);"
            ],
            [
                "OUT_SIZE",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Size of the normal sized inputs and outputs\n */\npublic static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;"
            ],
            [
                "LATEX_RAD",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);"
            ],
            [
                "WIDTH2",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * half the width of the resistor\n */\npublic static final int WIDTH2 = SIZE2 - 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * height of the resistor\n */\npublic static final int HEIGHT = SIZE + SIZE / 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static final int HEIGHT = 7;"
            ],
            [
                "FRAME",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "/**\n * the Frame of the display\n */\npublic static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.elements",
                "Tunnel",
                "/**\n * The TunnelElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();"
            ],
            [
                "HIGH_CONTRAST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);"
            ],
            [
                "MONOCHROME",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);"
            ],
            [
                "SMALL_IO",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);"
            ],
            [
                "NO_PIN_MARKER",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);"
            ],
            [
                "THINNER_LINES",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);"
            ],
            [
                "HIDE_TEST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);"
            ],
            [
                "NO_SHAPE_FILLING",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);"
            ],
            [
                "LATEX",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);"
            ],
            [
                "PINS_IN_MATH_MODE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SettingsHolder",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to select the color map\n */\npublic static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();"
            ],
            [
                "CUSTOM_COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to define the custom color map\n */\npublic static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();"
            ],
            [
                "MAXLINETHICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * maximal line thickness\n */\npublic static final int MAXLINETHICK = 4;"
            ],
            [
                "NORMAL",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all lines to draw the shapes itself\n */\npublic static final Style NORMAL = new Builder().build();"
            ],
            [
                "DISABLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all disabled elements\n */\npublic static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();"
            ],
            [
                "INOUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for input and output labels\n */\npublic static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();"
            ],
            [
                "FAILED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the failed state lines in the measurement graph\n */\npublic static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();"
            ],
            [
                "PASS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the passed state lines in the measurement graph\n */\npublic static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();"
            ],
            [
                "NORMAL_TEXT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for text which is integral part of the shape.\n * Text which uses this style is always included in sizing!\n * Used for text only elements.\n */\npublic static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();"
            ],
            [
                "THIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin line used for the graphic in the clock or delay shape\n */\npublic static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();"
            ],
            [
                "THIN_FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin filled\n */\npublic static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();"
            ],
            [
                "THICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thick line used for the ground line\n */\npublic static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();"
            ],
            [
                "WIRE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in editing mode\n */\npublic static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "WIRE_LOW",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for low wires in running mode\n */\npublic static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();"
            ],
            [
                "WIRE_HIGH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for high wires in running mode\n */\npublic static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();"
            ],
            [
                "WIRE_HIGHZ",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in high Z state\n */\npublic static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();"
            ],
            [
                "WIRE_OUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the output dots\n */\npublic static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();"
            ],
            [
                "FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Filled style used to fill the splitter or the dark LEDs\n */\npublic static final Style FILLED = new Builder().setFilled(true).build();"
            ],
            [
                "DASH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the grid in the graph\n */\npublic static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();"
            ],
            [
                "SHAPE_PIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();"
            ],
            [
                "SHAPE_SPLITTER",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text for splitters\n */\npublic static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();"
            ],
            [
                "WIRE_VALUE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();"
            ],
            [
                "WIRE_BITS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the wire bit number\n */\npublic static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();"
            ],
            [
                "HIGHLIGHT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * highlight color used for the circles to mark an element\n */\npublic static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "ERROR",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * error color used for the circles to mark an element\n */\npublic static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "BLANK",
                "de.neemann.digital.draw.graphics.text.text",
                "Blank",
                "/**\n * the Blank instance\n */\npublic static final Blank BLANK = new Blank();"
            ],
            [
                "LOOK_AT_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String LOOK_AT_ALIAS = \"lookAt\";"
            ],
            [
                "REF_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String REF_ALIAS = \"ref\";"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "name",
                "java.lang",
                "String"
            ],
            [
                "expression",
                "de.neemann.digital.analyse.expression",
                "Expression"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "addSequential",
                "de.neemann.digital.builder",
                "BuilderInterface",
                "public abstract T addSequential(String arg0, Expression arg1) throws BuilderException"
            ],
            [
                "getOutputs",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic ArrayList<String> getOutputs() {\n    fixDoubleCellUsage();\n    return super.getOutputs();\n}"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getInputs",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic ArrayList<String> getInputs() {\n    fixDoubleCellUsage();\n    return super.getInputs();\n}"
            ],
            [
                "getRegistered",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic Map<String, Expression> getRegistered() {\n    fixDoubleCellUsage();\n    return super.getRegistered();\n}"
            ],
            [
                "getCombinatorial",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic Map<String, Expression> getCombinatorial() {\n    fixDoubleCellUsage();\n    return super.getCombinatorial();\n}"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "addCombinatorial",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException {\n    checkOpen();\n    return super.addCombinatorial(name, expression);\n}"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "addSequential",
                "de.neemann.digital.builder.Gal16v8",
                "BuilderCollectorGAL",
                "@Override\npublic BuilderCollector addSequential(String name, Expression expression) throws BuilderException {\n    checkOpen();\n    sequentialVars.add(name);\n    return super.addSequential(name, expression);\n}"
            ],
            [
                "addCombinatorial",
                "de.neemann.digital.builder",
                "BuilderInterface",
                "public abstract T addCombinatorial(String arg0, Expression arg1) throws BuilderException"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ],
            [
                "getOrderString",
                "de.neemann.digital.analyse.expression",
                "Expression",
                "public abstract String getOrderString()"
            ],
            [
                "calculate",
                "de.neemann.digital.analyse.expression",
                "Expression",
                "public abstract boolean calculate(Context arg0) throws ExpressionException"
            ],
            [
                "copy",
                "de.neemann.digital.analyse.expression",
                "Expression",
                "public abstract Expression copy()"
            ],
            [
                "traverse",
                "de.neemann.digital.analyse.expression",
                "Expression",
                "public abstract <V> V traverse(V arg0)"
            ],
            [
                "getRegistered",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public Map<String, Expression> getRegistered()"
            ],
            [
                "addSequential",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public BuilderCollector addSequential(String arg0, Expression arg1) throws BuilderException"
            ],
            [
                "getInputs",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public ArrayList<String> getInputs()"
            ],
            [
                "addCombinatorial",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public BuilderCollector addCombinatorial(String arg0, Expression arg1) throws BuilderException"
            ],
            [
                "getOutputs",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public ArrayList<String> getOutputs()"
            ],
            [
                "getCombinatorial",
                "de.neemann.digital.builder",
                "BuilderCollector",
                "public Map<String, Expression> getCombinatorial()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 26714,
        "oracle": "circuit != null;",
        "oracleType": "PRE",
        "projectName": "Digital",
        "packageName": "de.neemann.digital.gui.components.modification",
        "className": "ModifyMeasurementOrdering",
        "javadocTag": "",
        "methodJavadoc": "",
        "methodSourceCode": "public void modify(Circuit circuit){\n    circuit.setMeasurementOrdering(names);\n}",
        "classJavadoc": "/**\n * Modifies the measurement ordering\n */",
        "classSourceCode": "/*\n * Copyright (c) 2017 Helmut Neemann\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.gui.components.modification;\n\nimport de.neemann.digital.draw.elements.Circuit;\nimport de.neemann.digital.lang.Lang;\nimport de.neemann.digital.undo.Modification;\n\nimport java.util.ArrayList;\n\n/**\n * Modifies the measurement ordering\n */\npublic class ModifyMeasurementOrdering implements Modification<Circuit> {\n    private final ArrayList<String> names;\n\n    /**\n     * Creates a new instance\n     *\n     * @param names the new ordering\n     */\n    public ModifyMeasurementOrdering(ArrayList<String> names) {\n        this.names = names;\n    }\n\n    @Override\n    public void modify(Circuit circuit) {\n        circuit.setMeasurementOrdering(names);\n    }\n\n    @Override\n    public String toString() {\n        return Lang.get(\"mod_modifiedMeasurementOrdering\");\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "CLI",
                "de.neemann"
            ],
            [
                "Mouse",
                "de.neemann.gui"
            ],
            [
                "LineBreaker",
                "de.neemann.gui"
            ],
            [
                "IconCreator",
                "de.neemann.gui"
            ],
            [
                "ConfirmDialogBuilder",
                "de.neemann.gui"
            ],
            [
                "Resources",
                "de.neemann.gui.language"
            ],
            [
                "Bundle",
                "de.neemann.gui.language"
            ],
            [
                "Language",
                "de.neemann.gui.language"
            ],
            [
                "ToolTipAction",
                "de.neemann.gui"
            ],
            [
                "MyFileChooser",
                "de.neemann.gui"
            ],
            [
                "ClosingWindowListener",
                "de.neemann.gui"
            ],
            [
                "ErrorMessage",
                "de.neemann.gui"
            ],
            [
                "WindowSizeStorage",
                "de.neemann.gui"
            ],
            [
                "Screen",
                "de.neemann.gui"
            ],
            [
                "ToolTipProvider",
                "de.neemann.gui"
            ],
            [
                "InfoDialog",
                "de.neemann.gui"
            ],
            [
                "ValueFormatter",
                "de.neemann.digital.core"
            ],
            [
                "ModelStateObserver",
                "de.neemann.digital.core"
            ],
            [
                "PullDown",
                "de.neemann.digital.core.pld"
            ],
            [
                "Diode",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeBackward",
                "de.neemann.digital.core.pld"
            ],
            [
                "PullUp",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeForward",
                "de.neemann.digital.core.pld"
            ],
            [
                "Node",
                "de.neemann.digital.core"
            ],
            [
                "RAMSinglePort",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualAccess",
                "de.neemann.digital.core.memory"
            ],
            [
                "ByteArrayFromValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "Importer",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "LogisimReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "DataFieldValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "IntelHexReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "BinReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "MultiValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "CounterPreset",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Register",
                "de.neemann.digital.core.memory"
            ],
            [
                "LookUpTable",
                "de.neemann.digital.core.memory"
            ],
            [
                "BlockRAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Counter",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMMangerBase",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManagerFile",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManager",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMInterface",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "EEPROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramCounter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMAsync",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataField",
                "de.neemann.digital.core.memory"
            ],
            [
                "EEPROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMInterface",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataFieldConverter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMSinglePortSel",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramMemory",
                "de.neemann.digital.core.memory"
            ],
            [
                "RegisterFile",
                "de.neemann.digital.core.memory"
            ],
            [
                "ModelStateObserverTyped",
                "de.neemann.digital.core"
            ],
            [
                "Observable",
                "de.neemann.digital.core"
            ],
            [
                "NodeWithoutDelay",
                "de.neemann.digital.core"
            ],
            [
                "ExceptionWithOrigin",
                "de.neemann.digital.core"
            ],
            [
                "ObservableValue",
                "de.neemann.digital.core"
            ],
            [
                "SpeedTest",
                "de.neemann.digital.core"
            ],
            [
                "BurnException",
                "de.neemann.digital.core"
            ],
            [
                "GlobalValues",
                "de.neemann.digital.core"
            ],
            [
                "MIDI",
                "de.neemann.digital.core.io"
            ],
            [
                "RGBLED",
                "de.neemann.digital.core.io"
            ],
            [
                "Out",
                "de.neemann.digital.core.io"
            ],
            [
                "RotEncoder",
                "de.neemann.digital.core.io"
            ],
            [
                "PinControl",
                "de.neemann.digital.core.io"
            ],
            [
                "DipSwitch",
                "de.neemann.digital.core.io"
            ],
            [
                "CommonConnectionType",
                "de.neemann.digital.core.io"
            ],
            [
                "LightBulb",
                "de.neemann.digital.core.io"
            ],
            [
                "Probe",
                "de.neemann.digital.core.io"
            ],
            [
                "Button",
                "de.neemann.digital.core.io"
            ],
            [
                "ButtonLED",
                "de.neemann.digital.core.io"
            ],
            [
                "In",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorUnipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "ProbeMode",
                "de.neemann.digital.core.io"
            ],
            [
                "NotConnected",
                "de.neemann.digital.core.io"
            ],
            [
                "MIDIHelper",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorBipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "Const",
                "de.neemann.digital.core.io"
            ],
            [
                "PowerSupply",
                "de.neemann.digital.core.io"
            ],
            [
                "Ground",
                "de.neemann.digital.core.io"
            ],
            [
                "InValue",
                "de.neemann.digital.core.io"
            ],
            [
                "VDD",
                "de.neemann.digital.core.io"
            ],
            [
                "ServerHolder",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Telnet",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ByteBuffer",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Server",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ElementAttributes",
                "de.neemann.digital.core.element"
            ],
            [
                "Element",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementFactory",
                "de.neemann.digital.core.element"
            ],
            [
                "PinInfo",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescriptions",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "Keys",
                "de.neemann.digital.core.element"
            ],
            [
                "Rotation",
                "de.neemann.digital.core.element"
            ],
            [
                "AttributeListener",
                "de.neemann.digital.core.element"
            ],
            [
                "Key",
                "de.neemann.digital.core.element"
            ],
            [
                "ImmutableList",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementTypeDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "FanIn",
                "de.neemann.digital.core.basic"
            ],
            [
                "NOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "And",
                "de.neemann.digital.core.basic"
            ],
            [
                "XNOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "XOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "Not",
                "de.neemann.digital.core.basic"
            ],
            [
                "NAnd",
                "de.neemann.digital.core.basic"
            ],
            [
                "Function",
                "de.neemann.digital.core.basic"
            ],
            [
                "Or",
                "de.neemann.digital.core.basic"
            ],
            [
                "ExceptionWithOriginInterface",
                "de.neemann.digital.core"
            ],
            [
                "ModelEvent",
                "de.neemann.digital.core"
            ],
            [
                "BacktrackException",
                "de.neemann.digital.core"
            ],
            [
                "PlainSwitch",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGPFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "NFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGNFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PlainSwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "TransGate",
                "de.neemann.digital.core.switching"
            ],
            [
                "SwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Relay",
                "de.neemann.digital.core.switching"
            ],
            [
                "RelayDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Switch",
                "de.neemann.digital.core.switching"
            ],
            [
                "Fuse",
                "de.neemann.digital.core.switching"
            ],
            [
                "Reset",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Stop",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Decoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Delay",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Driver",
                "de.neemann.digital.core.wiring"
            ],
            [
                "DataBus",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "SingleBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "ConnectedBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "AbstractBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "BusModelStateObserver",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "CommonBusValue",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "DriverInvSel",
                "de.neemann.digital.core.wiring"
            ],
            [
                "PriorityEncoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BusSplitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Splitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Multiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitSelector",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Break",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Clock",
                "de.neemann.digital.core.wiring"
            ],
            [
                "AsyncSeq",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Demultiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitsException",
                "de.neemann.digital.core"
            ],
            [
                "NodeInterface",
                "de.neemann.digital.core"
            ],
            [
                "NodeException",
                "de.neemann.digital.core"
            ],
            [
                "FlipflopDAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopD",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRSAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopT",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJKAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJK",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "Monoflop",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRS",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopBit",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "BarrelShifter",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Mul",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Neg",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitExtender",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Add",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Div",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "LeftRightFormat",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "PRNG",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Sub",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BarrelShifterMode",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Comparator",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitCount",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "ObservableValues",
                "de.neemann.digital.core"
            ],
            [
                "Value",
                "de.neemann.digital.core"
            ],
            [
                "IntFormat",
                "de.neemann.digital.core"
            ],
            [
                "SyncAccess",
                "de.neemann.digital.core"
            ],
            [
                "Bits",
                "de.neemann.digital.core"
            ],
            [
                "ProcessInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "StdIOInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "ApplicationVerilogStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "Application",
                "de.neemann.digital.core.extern"
            ],
            [
                "External",
                "de.neemann.digital.core.extern"
            ],
            [
                "Port",
                "de.neemann.digital.core.extern"
            ],
            [
                "PortDefinition",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGHDL",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationIVerilog",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationVHDLStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "VHDLTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGeneric",
                "de.neemann.digital.core.extern"
            ],
            [
                "Options",
                "de.neemann.digital.core.extern"
            ],
            [
                "VerilogTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ExternalFile",
                "de.neemann.digital.core.extern"
            ],
            [
                "ProcessStarter",
                "de.neemann.digital.core.extern"
            ],
            [
                "ModelEventType",
                "de.neemann.digital.core"
            ],
            [
                "Observer",
                "de.neemann.digital.core"
            ],
            [
                "ErrorDetector",
                "de.neemann.digital.core"
            ],
            [
                "Statistics",
                "de.neemann.digital.core.stats"
            ],
            [
                "Countable",
                "de.neemann.digital.core.stats"
            ],
            [
                "Model",
                "de.neemann.digital.core"
            ],
            [
                "Signal",
                "de.neemann.digital.core"
            ],
            [
                "StringList",
                "de.neemann.digital"
            ],
            [
                "XStreamValid",
                "de.neemann.digital"
            ],
            [
                "StatsExport",
                "de.neemann.digital.cli"
            ],
            [
                "SVGExport",
                "de.neemann.digital.cli"
            ],
            [
                "CommandLineTester",
                "de.neemann.digital.cli"
            ],
            [
                "CSVWriter",
                "de.neemann.digital.cli"
            ],
            [
                "BasicCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Argument",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLIException",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Muxer",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentKey",
                "de.neemann.digital.cli.cli"
            ],
            [
                "NamedCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLICommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentBase",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CircuitLoader",
                "de.neemann.digital.cli"
            ],
            [
                "Main",
                "de.neemann.digital.cli"
            ],
            [
                "Modification",
                "de.neemann.digital.undo"
            ],
            [
                "Modifications",
                "de.neemann.digital.undo"
            ],
            [
                "ModifyException",
                "de.neemann.digital.undo"
            ],
            [
                "Copyable",
                "de.neemann.digital.undo"
            ],
            [
                "UndoManager",
                "de.neemann.digital.undo"
            ],
            [
                "ChangedListener",
                "de.neemann.digital.undo"
            ],
            [
                "CircuitRepresentation",
                "de.neemann.digital.fsm"
            ],
            [
                "Transition",
                "de.neemann.digital.fsm"
            ],
            [
                "Movable",
                "de.neemann.digital.fsm"
            ],
            [
                "MouseMovable",
                "de.neemann.digital.fsm"
            ],
            [
                "Optimizer",
                "de.neemann.digital.fsm"
            ],
            [
                "Permute",
                "de.neemann.digital.fsm"
            ],
            [
                "FiniteStateMachineException",
                "de.neemann.digital.fsm"
            ],
            [
                "TransitionTableCreator",
                "de.neemann.digital.fsm"
            ],
            [
                "ValueParser",
                "de.neemann.digital.fsm"
            ],
            [
                "WaitGroup",
                "de.neemann.digital.fsm"
            ],
            [
                "FSMComponent",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMFrame",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "OptimizerDialog",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMDemos",
                "de.neemann.digital.fsm"
            ],
            [
                "FSM",
                "de.neemann.digital.fsm"
            ],
            [
                "State",
                "de.neemann.digital.fsm"
            ],
            [
                "Lang",
                "de.neemann.digital.lang"
            ],
            [
                "LineListenerResolveDontCare",
                "de.neemann.digital.testing"
            ],
            [
                "TestingDataException",
                "de.neemann.digital.testing"
            ],
            [
                "UnitTester",
                "de.neemann.digital.testing"
            ],
            [
                "FolderTestRunner",
                "de.neemann.digital.testing"
            ],
            [
                "TestExecutor",
                "de.neemann.digital.testing"
            ],
            [
                "Transitions",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseDescription",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseElement",
                "de.neemann.digital.testing"
            ],
            [
                "LineEmitterRepeat",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Parser",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppenderBits",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ParserException",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Context",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ModelInitializer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Expression",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterList",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestRow",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitter",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterWhile",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterSimple",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Random",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "SignExtend",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "IfThenElse",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "Function",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "LineListener",
                "de.neemann.digital.testing.parser"
            ],
            [
                "VirtualSignal",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppender",
                "de.neemann.digital.testing.parser"
            ],
            [
                "OperatorPrecedence",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestResultListener",
                "de.neemann.digital.testing"
            ],
            [
                "MatchedValue",
                "de.neemann.digital.testing"
            ],
            [
                "TestResult",
                "de.neemann.digital.testing"
            ],
            [
                "MinimizerInterface",
                "de.neemann.digital.analyse"
            ],
            [
                "LabelNumbering",
                "de.neemann.digital.analyse"
            ],
            [
                "ModelAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "CSVImporter",
                "de.neemann.digital.analyse"
            ],
            [
                "BoolTableExpanded",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableTableModel",
                "de.neemann.digital.analyse"
            ],
            [
                "TableReducer",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "PrimeSelector",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForce",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "LargestFirst",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForceGetAll",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "PrimeSelectorDefault",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BoolTableByteArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "IndependentChecker",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskey",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableExpression",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableBoolArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTable",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRows",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "ThreeStateValue",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskeyExam",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRow",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TruthTableConverter",
                "de.neemann.digital.analyse"
            ],
            [
                "DetermineJKStateMachine",
                "de.neemann.digital.analyse"
            ],
            [
                "Parser",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ParseException",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ModelAnalyserInfo",
                "de.neemann.digital.analyse"
            ],
            [
                "AnalyseException",
                "de.neemann.digital.analyse"
            ],
            [
                "DependencyAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "SubstituteLibrary",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableFormatterHex",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatter",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterTestCase",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterCSV",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterLaTeX",
                "de.neemann.digital.analyse.format"
            ],
            [
                "MinimizerQuineMcCluskey",
                "de.neemann.digital.analyse"
            ],
            [
                "ContextFiller",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "BitSetter",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ContextMap",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Operation",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Context",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NInputs",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NOr",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "ExpressionModifier",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NAnd",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "Constant",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Variable",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionException",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityInclNotVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Equals",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "FormatToExpression",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTable",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Formatter",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatterException",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTableLatex",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Not",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "VariableVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NamedExpression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "MinimizerQuineMcCluskeyExam",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTable",
                "de.neemann.digital.analyse"
            ],
            [
                "SplitPinString",
                "de.neemann.digital.analyse"
            ],
            [
                "CycleDetector",
                "de.neemann.digital.analyse"
            ],
            [
                "DigitalRemoteInterface",
                "de.neemann.digital.gui"
            ],
            [
                "TextSearchFilter",
                "de.neemann.digital.gui"
            ],
            [
                "ExportZipAction",
                "de.neemann.digital.gui"
            ],
            [
                "SettingsBase",
                "de.neemann.digital.gui"
            ],
            [
                "DocumentationLocator",
                "de.neemann.digital.gui"
            ],
            [
                "InitialTutorial",
                "de.neemann.digital.gui.tutorial"
            ],
            [
                "InsertAction",
                "de.neemann.digital.gui"
            ],
            [
                "StatusInterface",
                "de.neemann.digital.gui"
            ],
            [
                "SearchTextField",
                "de.neemann.digital.gui"
            ],
            [
                "SaveAsHelper",
                "de.neemann.digital.gui"
            ],
            [
                "FileHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ReleaseInfo",
                "de.neemann.digital.gui.release"
            ],
            [
                "CheckForNewRelease",
                "de.neemann.digital.gui.release"
            ],
            [
                "StateInterface",
                "de.neemann.digital.gui.state"
            ],
            [
                "StateManager",
                "de.neemann.digital.gui.state"
            ],
            [
                "State",
                "de.neemann.digital.gui.state"
            ],
            [
                "CircuitScrollPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "ItemPicker",
                "de.neemann.digital.gui.components"
            ],
            [
                "LibraryTreeModel",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "SelectTree",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "WindowPosManager",
                "de.neemann.digital.gui.components"
            ],
            [
                "CustomShapeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "TransformHolder",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "BehavioralFixtureCreator",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorFactory",
                "de.neemann.digital.gui.components"
            ],
            [
                "OrderMerger",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementOrderer",
                "de.neemann.digital.gui.components"
            ],
            [
                "ModifyMoveSelected",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteRect",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWires",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfVisualElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyCircuitAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveAndRotElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMeasurementOrdering",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttribute",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "DataEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "CircuitModifierPostClosed",
                "de.neemann.digital.gui.components"
            ],
            [
                "CharDeleter",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "ConsoleTerminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Terminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalInterface",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Keyboard",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "KeyboardDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Editor",
                "de.neemann.digital.gui.components"
            ],
            [
                "VarRectList",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMap",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapComponent",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapDialog",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "MapLayout",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughException",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "CircuitTransferable",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementHelpDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "TestCaseDescriptionDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ValueTableDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestCaseDescriptionEditor",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestAllDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ExpressionListenerOptimizeJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "LaTeXExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "HardwareDescriptionGenerator",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateFile",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateCUPL",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "ExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderOutputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AllSolutionsDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerCSVCondensed",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "BuilderExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionComponent",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "PlainTextExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableReorderManager",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ShowStringDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderInputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ProgressDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "CheckResultListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerStore",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AttributeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ProbeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ColorSchemeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "ROMEditorDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "LabelGenerator",
                "de.neemann.digital.gui.components"
            ],
            [
                "SingleValueDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ExpressionDialog",
                "de.neemann.digital.gui.components.expression"
            ],
            [
                "CircuitComponent",
                "de.neemann.digital.gui.components"
            ],
            [
                "VGA",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicCard",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrix",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "VGADialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "MoveFocusTo",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "ConstraintsBuilder",
                "de.neemann.digital.gui.components"
            ],
            [
                "ScopeTrigger",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphDialog",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphComponent",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "DummyElement",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "ValueTableObserver",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "CircuitModifier",
                "de.neemann.digital.gui.components"
            ],
            [
                "CopiedElementLabelRenamer",
                "de.neemann.digital.gui.components"
            ],
            [
                "TextLineNumber",
                "de.neemann.digital.gui.components"
            ],
            [
                "InsertHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ProgramMemoryLoader",
                "de.neemann.digital.gui"
            ],
            [
                "Main",
                "de.neemann.digital.gui"
            ],
            [
                "StatsDialog",
                "de.neemann.digital.gui"
            ],
            [
                "WindowManager",
                "de.neemann.digital.gui"
            ],
            [
                "Settings",
                "de.neemann.digital.gui"
            ],
            [
                "LibrarySelector",
                "de.neemann.digital.gui"
            ],
            [
                "DigitalUncaughtExceptionHandler",
                "de.neemann.digital.gui"
            ],
            [
                "NumberingWizard",
                "de.neemann.digital.gui"
            ],
            [
                "HandlerInterface",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteSever",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteException",
                "de.neemann.digital.gui.remote"
            ],
            [
                "DigitalHandler",
                "de.neemann.digital.gui.remote"
            ],
            [
                "ModelModifier",
                "de.neemann.digital.gui"
            ],
            [
                "VerilogCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogRenaming",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogGenerator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogTestBenchCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogElement",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogTemplate",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogLibrary",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "CodePrinter",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "CodePrinterStr",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "Statements",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Parser",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ParserException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Statement",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Context",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "FirstClassFunctionCall",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "InnerFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "JavaClass",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "FirstClassFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Func",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Function",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSEvalException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ReferenceToFunc",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToStruct",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToArray",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Reference",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToVar",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Value",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSMap",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSArray",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Separator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLLibrary",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLRenaming",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLGenerator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLEntity",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplate",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplateFunctions",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTestBenchCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "HDLModel",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNode",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNet",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "Printable",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLException",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLPort",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HasName",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "InlineManyToOne",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeAssignments",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "Optimization",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeConstants",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "ReplaceOneToMany",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NameConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "OptimizeExpressions",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "RemoveConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NodeSorterExpressionBased",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "HDLNodeSplitterManyToOne",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeCustom",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeAssignment",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLCircuit",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "ExprVar",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Visitor",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprVarRange",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExpressionOptimizer",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprNot",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprConstant",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprOperate",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprUsingNet",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "HDLNodeBuildIn",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLClockIntegrator",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockIntegratorGeneric",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockInfo",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "HDLNodeSplitterOneToMany",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "FileLocator",
                "de.neemann.digital"
            ],
            [
                "ValueTable",
                "de.neemann.digital.data"
            ],
            [
                "ValueTableModel",
                "de.neemann.digital.data"
            ],
            [
                "DataPlotter",
                "de.neemann.digital.data"
            ],
            [
                "Value",
                "de.neemann.digital.data"
            ],
            [
                "ExpressionExporter",
                "de.neemann.digital.builder"
            ],
            [
                "ExpressionToFileExporter",
                "de.neemann.digital.builder"
            ],
            [
                "RotationByteArrayOutputStream",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "TT2Exporter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "StartATF150xFitter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "OSExecute",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "CreateCHN",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDevice",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDialog",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PL",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATF150xCuplExporter",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PinMap",
                "de.neemann.digital.builder"
            ],
            [
                "PinMapException",
                "de.neemann.digital.builder"
            ],
            [
                "FragmentExpression",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisualElement",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentSameInValue",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "CircuitBuilder",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisitor",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVariable",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Fragment",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Box",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Gal16v8JEDECExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CuplExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "BuilderCollectorGAL",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CleanNameBuilder",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderCollector",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderInterface",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderException",
                "de.neemann.digital.builder"
            ],
            [
                "Gal22v10JEDECExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "Gal22v10CuplExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "FuseMap",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFillerException",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFiller",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "JedecWriter",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "GenericCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibrary",
                "de.neemann.digital.draw.library"
            ],
            [
                "GenericInitCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "Visitor",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryListener",
                "de.neemann.digital.draw.library"
            ],
            [
                "JarComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibraryFolder",
                "de.neemann.digital.draw.library"
            ],
            [
                "CustomElement",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundNotification",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundException",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentSource",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryInterface",
                "de.neemann.digital.draw.library"
            ],
            [
                "ResolveGenerics",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryNode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementTypeDescriptionCustom",
                "de.neemann.digital.draw.library"
            ],
            [
                "InvalidNodeException",
                "de.neemann.digital.draw.library"
            ],
            [
                "NumStringComparator",
                "de.neemann.digital.draw.library"
            ],
            [
                "InputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Interactor",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Drawable",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeBackwardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FuseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DILShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DipSwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LightBulbShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LayoutShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PolarityAwareLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ConstShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BreakShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TextShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegHexShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ProbeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "NotConnectedShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "StepperMotorShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BitSelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericInitCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RectShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "VDDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RAMShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ScopeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DemuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BusSplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullUpShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TestCaseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TunnelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PinControlShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FGFETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TransGateShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ResetShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeForewardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SixteenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "CustomCircuitShapeType",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "InteractorInterface",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeSpecificMatch",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RGBLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RotEncoderShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "IEEEGenericShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEENotShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEAndShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEXOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "ObservableValueReader",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SvgTemplate",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "TransformParser",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "Context",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgException",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgImporter",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "CustomShapeDescription",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "CustomShape",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "FGFETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "OutputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GroundShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "AsyncClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Shape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MissingShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeFactory",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullDownShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DriverShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DataShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DotCreator",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Wire",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Movable",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pins",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Circuit",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Tunnel",
                "de.neemann.digital.draw.elements"
            ],
            [
                "PinException",
                "de.neemann.digital.draw.elements"
            ],
            [
                "ElementOrder",
                "de.neemann.digital.draw.elements"
            ],
            [
                "VisualElement",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pin",
                "de.neemann.digital.draw.elements"
            ],
            [
                "IOState",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireMerger",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireConsistencyChecker",
                "de.neemann.digital.draw.elements"
            ],
            [
                "AsyncSequentialClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelEntry",
                "de.neemann.digital.draw.model"
            ],
            [
                "Net",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelCreator",
                "de.neemann.digital.draw.model"
            ],
            [
                "InverterConfig",
                "de.neemann.digital.draw.model"
            ],
            [
                "NetList",
                "de.neemann.digital.draw.model"
            ],
            [
                "RealTimeClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "Polygon",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Orientation",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Vector",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGSettings",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Transform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorKey",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ExportFactory",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicsImage",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorInterface",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformMatrix",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatLaTeX",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicMinMax",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicTransform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorScheme",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Style",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSkipLines",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "GraphicLineCollector",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "PolygonConverter",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorFloat",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformRotate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Graphic",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleHighContrast",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Parser",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "ParseException",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "PlainTextFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "SVGFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "GraphicsFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "LaTeXFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "Decorate",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Text",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Index",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Sentence",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Blank",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Character",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "ExpressionToText",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Simple",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Export",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleMonochrome",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformTranslate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSwing",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "PolygonParser",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGTokenizer",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GifSequenceWriter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "GifExporter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "ConfigCache",
                "de.neemann.digital.toolchain"
            ],
            [
                "Configuration",
                "de.neemann.digital.toolchain"
            ],
            [
                "Command",
                "de.neemann.digital.toolchain"
            ],
            [
                "FileToCreate",
                "de.neemann.digital.toolchain"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "getMouse",
                "de.neemann.gui",
                "Mouse",
                "/**\n * Returns a mouse event interpreter\n *\n * @return a Mouse interface implementation\n */\nstatic Mouse getMouse() {\n    if (Settings.getInstance().get(Keys.SETTINGS_MAC_MOUSE))\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && !e.isControlDown();\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && e.isControlDown();\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isShiftDown();\n            }\n        };\n    else\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1;\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON3;\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isControlDown();\n            }\n        };\n}"
            ],
            [
                "create",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an icon from a resource\n *\n * @param name name of the resource\n * @return the icon\n */\npublic static Icon create(String name) {\n    return new ImageIcon(createImage(name));\n}"
            ],
            [
                "createImage",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image from a resource\n *\n * @param name name of the resource\n * @return the image\n */\npublic static Image createImage(String name) {\n    try {\n        final float scaling = Screen.getInstance().getScaling();\n        if (scaling == 1) {\n            return getImage(name);\n        } else {\n            BufferedImage image = getImageOrNull(name.substring(0, name.length() - 4) + \"_hi.png\");\n            if (image != null) {\n                int w = (int) (image.getWidth() * scaling / 2);\n                int h = (int) (image.getHeight() * scaling / 2);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            } else {\n                LOGGER.info(\"upscaling of \" + name);\n                image = getImage(name);\n                int w = (int) (image.getWidth() * scaling);\n                int h = (int) (image.getHeight() * scaling);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            }\n        }\n    } catch (IOException e) {\n        throw new RuntimeException(\"Image \" + name + \" not found\", e);\n    }\n}"
            ],
            [
                "createImages",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image list from a resource\n *\n * @param names names of the resource\n * @return the image\n */\npublic static ArrayList<Image> createImages(String... names) {\n    try {\n        ArrayList<Image> list = new ArrayList<Image>(names.length);\n        for (String name : names) {\n            list.add(getImage(name));\n        }\n        return list;\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}"
            ],
            [
                "getCTRLMask",
                "de.neemann.gui",
                "ToolTipAction",
                "/**\n * @return the system specific CTRL mask.\n */\npublic static int getCTRLMask() {\n    int mask = InputEvent.CTRL_DOWN_MASK;\n    if (Screen.isMac())\n        mask = InputEvent.META_DOWN_MASK;\n    return mask;\n}"
            ],
            [
                "checkForSave",
                "de.neemann.gui",
                "ClosingWindowListener",
                "/**\n * Used to check for save! No Window closing is performed!\n *\n * @param parent      the Parent frame\n * @param confirmSave the confirmSafe interface\n * @return true if to proceed\n */\npublic static boolean checkForSave(JFrame parent, ConfirmSave confirmSave) {\n    if (confirmSave.isStateChanged()) {\n        int r = new ConfirmDialogBuilder(SAVE_CHANGES_MESSAGE).setTitle(STATE_CHANGED_MESSAGE).setNoOption(NO_MESSAGE).setYesOption(YES_MESSAGE).setCancleOption(CANCEL_MESSAGE).show(parent);\n        if (r == JOptionPane.YES_OPTION || r == JOptionPane.NO_OPTION) {\n            if (r == JOptionPane.YES_OPTION) {\n                confirmSave.saveChanges();\n                return !confirmSave.isStateChanged();\n            } else\n                return true;\n        } else\n            return false;\n    }\n    return true;\n}"
            ],
            [
                "getParentWindow",
                "de.neemann.gui",
                "ErrorMessage",
                "/**\n * Get the parent window of the given component.\n * If the component is a window this window is returned\n *\n * @param parent the parent component\n * @return the window instance\n */\npublic static Window getParentWindow(Component parent) {\n    if (parent == null)\n        return null;\n    else if (parent instanceof Window)\n        return (Window) parent;\n    else\n        return SwingUtilities.getWindowAncestor(parent);\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the Screen instance\n */\npublic static Screen getInstance() {\n    return InstanceHolder.instance;\n}"
            ],
            [
                "getDefaultFontScaling",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the default font scaling in percent\n */\npublic static int getDefaultFontScaling() {\n    if (// macOS has its own retina handling\n    IS_MAC)\n        return 100;\n    int dpi = getDefaultScreenResolution();\n    int s = (dpi * 100) / 96;\n    if (s > 95 && s < 105)\n        s = 100;\n    return s;\n}"
            ],
            [
                "isLinux",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a windows system\n */\npublic static boolean isLinux() {\n    return IS_LINUX;\n}"
            ],
            [
                "isMac",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a mac\n */\npublic static boolean isMac() {\n    return IS_MAC;\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * @return the singleton instance\n */\npublic static InfoDialog getInstance() {\n    if (instance == null)\n        try {\n            instance = new InfoDialog();\n        } catch (IOException e) {\n            System.out.println(\"error reading InfoDialog \" + e.getMessage());\n        }\n    return instance;\n}"
            ],
            [
                "read",
                "de.neemann.digital.core.memory.importer",
                "Importer",
                "/**\n * Reads the given file to a single data field.\n *\n * @param hexFile   the file to read\n * @param dataBits  the bits used in the data field\n * @param bigEndian uses big endian at import\n * @return the data field\n * @throws IOException IOException\n */\npublic static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException {\n    DataField df = new DataField(1024);\n    read(hexFile, new DataFieldValueArray(df, dataBits), bigEndian);\n    return df;\n}"
            ],
            [
                "getOriginOf",
                "de.neemann.digital.core",
                "ExceptionWithOrigin",
                "/**\n * Returns the file or the files that caused the given exception.\n * If no origin is found null is returned.\n *\n * @param e the exception\n * @return the origin or null;\n */\npublic static String getOriginOf(Throwable e) {\n    while (e != null) {\n        if (e instanceof ExceptionWithOriginInterface) {\n            Set<File> origins = ((ExceptionWithOriginInterface) e).getOrigin();\n            if (origins != null && origins.size() > 0) {\n                StringBuilder sb = new StringBuilder();\n                for (File o : origins) {\n                    if (o != null) {\n                        if (sb.length() > 0)\n                            sb.append(\", \");\n                        sb.append(o.getName());\n                    }\n                }\n                if (sb.length() > 0)\n                    return sb.toString();\n                else\n                    return null;\n            }\n        }\n        e = e.getCause();\n    }\n    return null;\n}"
            ],
            [
                "zMaskString",
                "de.neemann.digital.core",
                "ObservableValue",
                "static String zMaskString(long value, long highZ, int bits) {\n    StringBuilder sb = new StringBuilder();\n    long m = Bits.up(1, bits - 1);\n    for (int i = 0; i < bits; i++) {\n        if ((highZ & m) != 0) {\n            sb.append(\"z\");\n        } else {\n            if ((value & m) != 0) {\n                sb.append(\"1\");\n            } else {\n                sb.append(\"0\");\n            }\n        }\n        m >>>= 1;\n    }\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core",
                "GlobalValues",
                "/**\n * @return returns the global instance\n */\npublic static GlobalValues getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core.io",
                "MIDIHelper",
                "/**\n * @return the MIDIHelper\n */\npublic static MIDIHelper getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new input\n */\npublic static PinInfo input(String name) {\n    return new PinInfo(name, null, Direction.input);\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name        the pins name\n * @param description the pins description\n * @return the new input\n */\npublic static PinInfo input(String name, String description) {\n    return new PinInfo(name, description, Direction.input);\n}"
            ],
            [
                "output",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new output\n */\npublic static PinInfo output(String name) {\n    return new PinInfo(name, null, Direction.output);\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "PinDescription",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "Direction",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "getKeyByName",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Returns the key of the given name.\n * If key does not exist, null is returned.\n *\n * @param name the name of the key\n * @return the key or null\n */\npublic static Key getKeyByName(String name) {\n    return InstanceHolder.INSTANCE.get(name);\n}"
            ],
            [
                "getKeys",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * @return all available keys\n */\npublic static Iterable<Key> getKeys() {\n    return InstanceHolder.INSTANCE.values();\n}"
            ],
            [
                "combine",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "/**\n * Combines two lists\n *\n * @param a   first list\n * @param b   second list\n * @param <T> the Type of the elements\n * @return the new combined list\n */\npublic static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b) {\n    T[] com = Arrays.copyOf(a.items, a.size() + b.size());\n    System.arraycopy(b.items, 0, com, a.size(), b.size());\n    return new ImmutableList<>(com);\n}"
            ],
            [
                "createSwitchModel",
                "de.neemann.digital.core.switching",
                "PlainSwitch",
                "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException {\n    if (input1 instanceof CommonBusValue) {\n        if (input2 instanceof CommonBusValue) {\n            final CommonBusValue in1 = (CommonBusValue) input1;\n            final CommonBusValue in2 = (CommonBusValue) input2;\n            ObservableValue constant = in1.searchConstant();\n            if (constant != null)\n                return new UniDirectionalSwitch(constant, output2);\n            else {\n                constant = in2.searchConstant();\n                if (constant != null)\n                    return new UniDirectionalSwitch(constant, output1);\n                else\n                    return new RealSwitch(in1, output1, in2, output2);\n            }\n        } else\n            return new UniDirectionalSwitch(input1, output2);\n    } else {\n        if (input2 instanceof CommonBusValue) {\n            return new UniDirectionalSwitch(input2, output1);\n        } else {\n            throw new NodeException(Lang.get(\"err_switchHasNoNet\"), output1, output2);\n        }\n    }\n}"
            ],
            [
                "createOneToN",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a one to N splitter\n *\n * @param bits number of outputs\n * @return the splitter\n */\npublic static Splitter createOneToN(int bits) {\n    Ports in = new Ports();\n    in.add(new Port(0, bits));\n    Ports out = new Ports();\n    for (int i = 0; i < bits; i++) out.add(new Port(i, 1));\n    return new Splitter(in, out);\n}"
            ],
            [
                "createNToOne",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a N to one splitter\n *\n * @param bits number of inputs\n * @return the splitter\n */\npublic static Splitter createNToOne(int bits) {\n    Ports in = new Ports();\n    for (int i = 0; i < bits; i++) in.add(new Port(i, 1));\n    Ports out = new Ports();\n    out.add(new Port(0, bits));\n    return new Splitter(in, out);\n}"
            ],
            [
                "ovs",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * Helper to create a {@link ObservableValues} instance\n *\n * @param items the items\n * @return the created instance\n */\npublic static ObservableValues ovs(ObservableValue... items) {\n    return new ObservableValues(items);\n}"
            ],
            [
                "toShortHex",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * Creates a short hex representation of the given value.\n * Use only to represent a value.\n * If confusion is excluded, the prefix '0x' is omitted.\n * Thus 0x1A3 is converted to \"1A3\" which can not be parsed back to a long because \"0x\" is missing.\n *\n * @param value the value\n * @return the hex string\n */\npublic static String toShortHex(long value) {\n    return toShortHex(value, false);\n}"
            ],
            [
                "up",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value up\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long up(long val, int bits) {\n    if (bits < 64)\n        return val << bits;\n    else\n        return 0;\n}"
            ],
            [
                "down",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value down\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long down(long val, int bits) {\n    if (bits < 64)\n        return val >>> bits;\n    else\n        return 0;\n}"
            ],
            [
                "mask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Creates a bit mask with the lowest [bits] bits set.\n *\n * @param bits the number of 1 bits\n * @return a value with the lowest [bits] bits set.\n */\npublic static long mask(int bits) {\n    if (bits < 64)\n        return (1L << bits) - 1;\n    else\n        return -1;\n}"
            ],
            [
                "signedFlagMask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * calculates the signed flag.\n *\n * @param bits the bit count\n * @return the last used bit ( 1<<(bits-1) )\n */\npublic static long signedFlagMask(int bits) {\n    return up(1, bits - 1);\n}"
            ],
            [
                "isNegative",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Returns true if value is negative\n *\n * @param value the value\n * @param bits  the bit count\n * @return true if the last relevant bit is set\n */\npublic static boolean isNegative(long value, int bits) {\n    return (value & signedFlagMask(bits)) != 0;\n}"
            ],
            [
                "signExtend",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Sign extension of the value.\n * signExtend(3,2) returns -1.\n *\n * @param value the value\n * @param bits  number of bits\n * @return the sign extended value\n */\npublic static long signExtend(long value, int bits) {\n    if (bits >= 64)\n        return value;\n    else {\n        if ((value & signedFlagMask(bits)) == 0)\n            return value;\n        else\n            return value | ~mask(bits);\n    }\n}"
            ],
            [
                "binLn2",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Calculates the number of bits needed to store the given value b.\n *\n * @param b number\n * @return number of bits needed to store b\n */\npublic static int binLn2(long b) {\n    int outBits = 1;\n    while ((1L << outBits) <= b) outBits++;\n    return outBits;\n}"
            ],
            [
                "removeBitFromValue",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Removes a bit from a value.\n * This means it shifts the higher bits down. Behaves like removing an item from a list.\n *\n * @param value the value\n * @param bit   the bit to remove\n * @return the new value\n */\npublic static int removeBitFromValue(int value, int bit) {\n    if (bit > 0) {\n        return ((value & (~((1 << (bit + 1)) - 1))) >>> 1) | (value & ((1 << bit) - 1));\n    } else {\n        return value >>> 1;\n    }\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str the string\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str) throws NumberFormatException {\n    return decode(str, false);\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str         the string\n * @param parseFloats if true also floats are parsed\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str, boolean parseFloats) throws NumberFormatException {\n    if (str == null)\n        return 0;\n    str = str.trim();\n    if (str.length() == 0)\n        return 0;\n    if (str.indexOf(':') >= 0)\n        return decodeFixed(str);\n    if (parseFloats && str.indexOf('.') > -1) {\n        try {\n            if (str.endsWith(\"d\") || str.endsWith(\"D\"))\n                return Double.doubleToLongBits(Double.parseDouble(str.substring(0, str.length() - 1)));\n            else\n                return Float.floatToIntBits(Float.parseFloat(str));\n        } catch (java.lang.NumberFormatException e) {\n            throw new NumberFormatException(str, 0);\n        }\n    }\n    int p = 0;\n    boolean neg = false;\n    if (str.charAt(p) == '-') {\n        neg = true;\n        p++;\n    }\n    if (p >= str.length())\n        throw new NumberFormatException(str, p);\n    boolean wasZero = false;\n    while (str.length() > p && str.charAt(p) == '0') {\n        wasZero = true;\n        p++;\n    }\n    if (p >= str.length())\n        return 0;\n    int radix;\n    if (wasZero) {\n        if (neg)\n            throw new NumberFormatException(str, p);\n        switch(str.charAt(p)) {\n            case 'x':\n            case 'X':\n                radix = 16;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            case 'b':\n            case 'B':\n                radix = 2;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            default:\n                radix = 8;\n        }\n    } else {\n        if (str.charAt(p) == '\\'') {\n            if (neg)\n                throw new NumberFormatException(str, p);\n            p++;\n            if (p == str.length())\n                throw new NumberFormatException(str, p);\n            return str.charAt(p);\n        } else\n            radix = 10;\n    }\n    long val = decode(str, p, radix);\n    if (neg)\n        val = -val;\n    return val;\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes the given string starting at position p\n *\n * @param str   the string to decode\n * @param p     the starting position\n * @param radix the radix\n * @return the value\n * @throws NumberFormatException NumberFormatException\n */\npublic static long decode(String str, int p, int radix) throws NumberFormatException {\n    long val = 0;\n    while (p < str.length()) {\n        int d = Character.digit(str.charAt(p), radix);\n        if (d < 0)\n            throw new NumberFormatException(str, p);\n        val = val * radix + d;\n        p++;\n    }\n    return val;\n}"
            ],
            [
                "getCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Extract the code from the attributes.\n * The code is either stored directly or there is a file given.\n *\n * @param attr the attributes\n * @param root the projects main folder\n * @return the code\n * @throws IOException IOException\n */\nstatic String getCode(ElementAttributes attr, File root) throws IOException {\n    if (attr.contains(Keys.EXTERNAL_CODE))\n        return attr.get(Keys.EXTERNAL_CODE);\n    if (attr.contains(Keys.EXTERNAL_CODE_FILE))\n        return readCode(attr.getFile(Keys.EXTERNAL_CODE_FILE, root));\n    return \"\";\n}"
            ],
            [
                "readCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Reads the code from a file\n *\n * @param file the file\n * @return the code\n * @throws IOException IOException\n */\nstatic String readCode(File file) throws IOException {\n    byte[] data = Files.readAllBytes(file.toPath());\n    return new String(data, StandardCharsets.UTF_8);\n}"
            ],
            [
                "create",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Creates a new application instance\n *\n * @param type the type of the process\n * @param attr the elements attributes\n * @return the created process handler\n */\nstatic Application create(Type type, ElementAttributes attr) {\n    switch(type) {\n        case Generic:\n            return new ApplicationGeneric();\n        case GHDL:\n            return new ApplicationGHDL(attr);\n        case IVERILOG:\n            return new ApplicationIVerilog(attr);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "start",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Helper to start a process.\n * If result value is not null an exception is thrown.\n *\n * @param dir  the folder in which the process is started\n * @param args the argument\n * @return the console output\n * @throws IOException IOException\n */\npublic static String start(File dir, String... args) throws IOException {\n    ProcessBuilder pb = new ProcessBuilder(args).redirectErrorStream(true);\n    if (dir != null)\n        pb.directory(dir);\n    Process p;\n    try {\n        p = pb.start();\n    } catch (IOException e) {\n        throw new CouldNotStartProcessException(Lang.get(\"err_couldNotStartProcess_N\", Arrays.toString(args)), e);\n    }\n    ReaderThread rt = new ReaderThread(p.getInputStream());\n    rt.start();\n    try {\n        int exitValue = p.waitFor();\n        rt.join();\n        String output = rt.toString();\n        if (exitValue != 0)\n            throw new IOException(Lang.get(\"err_exitValueNotNull_N_O\", exitValue, output));\n        return output;\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n}"
            ],
            [
                "joinStrings",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Merges the given string.\n * If all strings are null or empty, null is returned\n *\n * @param strings the strings to join\n * @return the joined string or null\n */\npublic static String joinStrings(String... strings) {\n    StringBuilder sb = new StringBuilder();\n    for (String s : strings) {\n        if (s != null) {\n            String str = s.trim();\n            if (str.length() > 0) {\n                if (sb.length() > 0)\n                    sb.append(\"\\n\");\n                sb.append(str);\n            }\n        }\n    }\n    if (sb.length() > 0)\n        return sb.toString();\n    else\n        return null;\n}"
            ],
            [
                "fromString",
                "de.neemann.digital.cli.cli",
                "Argument",
                "/**\n * Creates a value from a string\n *\n * @param val      the value as a string\n * @param defValue the default value\n * @return the value converted to the type of the default value\n * @throws CLIException CLIException\n */\npublic static Object fromString(String val, Object defValue) throws CLIException {\n    if (defValue instanceof String)\n        return val;\n    else if (defValue instanceof Boolean)\n        switch(val.toLowerCase()) {\n            case \"yes\":\n            case \"1\":\n            case \"true\":\n                return true;\n            case \"no\":\n            case \"0\":\n            case \"false\":\n                return false;\n            default:\n                throw new CLIException(Lang.get(\"cli_notABool_N\", val), 106);\n        }\n    else if (defValue instanceof Integer) {\n        try {\n            return Integer.parseInt(val);\n        } catch (NumberFormatException e) {\n            throw new CLIException(Lang.get(\"cli_notANumber_N\", val), e);\n        }\n    } else\n        throw new CLIException(Lang.get(\"cli_invalidType_N\", defValue.getClass().getSimpleName()), 203);\n}"
            ],
            [
                "fac",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the factorial of a number.\n * If the result is greater as the max long value, the max value is returned.\n *\n * @param n integer\n * @return the factorial of the given number\n */\npublic static long fac(int n) {\n    if (n > 20)\n        return Long.MAX_VALUE;\n    return FAC_TABLE[n];\n}"
            ],
            [
                "getTimeComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the time complexity of optimizing the given fsm\n *\n * @param fsm the fsm\n * @return the time complexity\n */\npublic static long getTimeComplexity(FSM fsm) {\n    List<State> states = fsm.getStates();\n    int size = states.size();\n    int sizeInclDC = 1 << Bits.binLn2(size - 1);\n    if (sizeInclDC > 20)\n        return Long.MAX_VALUE;\n    return fac(sizeInclDC) / fac(sizeInclDC - size);\n}"
            ],
            [
                "calcComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException {\n    TruthTable tt = fsm.createTruthTable(null);\n    MinimizerInterface mi = new MinimizerQuineMcCluskey();\n    ComplexityListener listener = new ComplexityListener(out);\n    for (int i = 0; i < tt.getResultCount(); i++) mi.minimize(tt.getVars(), tt.getResult(i), tt.getResultName(i), listener);\n    return listener.complexity;\n}"
            ],
            [
                "blink",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Blink\n *\n * @return the fsm\n */\npublic static FSM blink() {\n    State off = new State(\"off\");\n    State on = new State(\"on\");\n    return new FSM(off, on).transition(on, off, null).transition(off, on, null);\n}"
            ],
            [
                "rotDecoder",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a debounced rotary switch decoder\n *\n * @return the fsm\n */\npublic static FSM rotDecoder() {\n    State init = new State(\"init\");\n    State top = new State(\"top\");\n    State topSetLeft = new State(\"topSetLeft\").setValues(\"L=1\");\n    State topSetRight = new State(\"topSetRight\").setValues(\"R=1\");\n    State leftTop = new State(\"leftTop\");\n    State leftBottom = new State(\"leftBottom\");\n    State bottom = new State(\"bottom\");\n    State bottomSetLeft = new State(\"bottomSetRight\").setValues(\"R=1\");\n    State bottomSetRight = new State(\"bottomSetLeft\").setValues(\"L=1\");\n    State rightTop = new State(\"rightTop\");\n    State rightBottom = new State(\"rightBottom\");\n    return new FSM(init, top, topSetLeft, leftTop, leftBottom, bottomSetLeft, bottom, bottomSetRight, rightBottom, rightTop, topSetRight).transition(init, top, \"A=0 & B=0\").transition(init, bottom, \"A=1 & B=1\").transition(top, leftTop, \"A=1 & B=0\").transition(top, rightTop, \"A=0 & B=1\").transition(topSetLeft, top, null).transition(topSetRight, top, null).transition(rightTop, top, \"A=0 & B=0\").transition(rightBottom, topSetRight, \"A=0 & B=0\").transition(leftTop, top, \"A=0 & B=0\").transition(leftBottom, topSetLeft, \"A=0 & B=0\").transition(bottom, leftBottom, \"A=1 & B=0\").transition(bottom, rightBottom, \"A=0 & B=1\").transition(bottomSetLeft, bottom, null).transition(bottomSetRight, bottom, null).transition(rightBottom, bottom, \"A=1 & B=1\").transition(rightTop, bottomSetRight, \"A=1 & B=1\").transition(leftBottom, bottom, \"A=1 & B=1\").transition(leftTop, bottomSetLeft, \"A=1 & B=1\");\n}"
            ],
            [
                "counter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a counter\n *\n * @param n the number of states\n * @return the fsm\n */\npublic static FSM counter(int n) {\n    FSM fsm = new FSM();\n    State last = null;\n    for (int i = 0; i < n; i++) {\n        State s = new State(\"\").setNumber(i);\n        fsm.add(s);\n        if (last != null)\n            fsm.transition(last, s, null);\n        last = s;\n    }\n    fsm.transition(last, fsm.getStates().get(0), null);\n    return fsm;\n}"
            ],
            [
                "trafficLight",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLight() {\n    State red = new State(\"red\").setNumber(0).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(1).setValues(\"R=1,Y=1\");\n    State green = new State(\"green\").setNumber(2).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(3).setValues(\"Y=1\");\n    return new FSM(red, redYellow, green, yellow).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "trafficLightMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLightMedwedew() {\n    State init = new State(\"init\").setNumber(0);\n    State red = new State(\"red\").setNumber(1).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(3).setValues(\"R=1, Y=1\");\n    State green = new State(\"green\").setNumber(4).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(2).setValues(\"Y=1\");\n    return new FSM(init, red, redYellow, green, yellow).transition(init, red, null).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "selCounter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM selCounter() {\n    State s0 = new State(\"s0\").setNumber(0);\n    State s1 = new State(\"s1\").setNumber(1);\n    State s2 = new State(\"s2\").setNumber(2);\n    State s3 = new State(\"s3\").setNumber(3);\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, null).transition(s0, s0, \"!T0  !T1\").transition(s1, s2, null).transition(s1, s0, \"T0 !T1\").transition(s2, s3, null).transition(s2, s0, \"!T0 T1\").transition(s3, s0, null);\n}"
            ],
            [
                "stepper",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepper() {\n    State s0 = new State(\"s0\").setNumber(0).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(1).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(2).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(3).setValues(\"P3=1,P0=1\");\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "stepperMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepperMedwedew() {\n    State init = new State(\"init\").setNumber(0).setValues(\"P0=2,P1=2,P2=2,P3=2\");\n    State s0 = new State(\"s0\").setNumber(3).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(6).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(12).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(9).setValues(\"P3=1,P0=1\");\n    return new FSM(init, s0, s1, s2, s3).transition(init, s0, null).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"fsm\", FSM.class);\n    xStream.alias(\"state\", State.class);\n    xStream.alias(\"transition\", Transition.class);\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"vectorf\", VectorFloat.class);\n    xStream.aliasAttribute(VectorFloat.class, \"x\", \"x\");\n    xStream.aliasAttribute(VectorFloat.class, \"y\", \"y\");\n    return xStream;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename filename\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(File filename) throws IOException {\n    final FSM fsm = loadFSM(new FileInputStream(filename));\n    fsm.file = filename;\n    return fsm;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new fsm instance from a stored file\n *\n * @param in the input stream\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        final FSM fsm = (FSM) xStream.fromXML(in);\n        for (Transition t : fsm.transitions) t.setFSM(fsm);\n        for (State s : fsm.states) s.setFSM(fsm);\n        fsm.modified = false;\n        fsm.activeStateTransition = -1;\n        return fsm;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "get",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string of key if no translation present\n */\npublic static String get(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKey(key, params);\n}"
            ],
            [
                "getNull",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string or null if no translation present\n */\npublic static String getNull(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKeyNull(key, params);\n}"
            ],
            [
                "getBundle",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the resource bundle\n */\npublic static Bundle getBundle() {\n    return InstanceHolder.INSTANCE.bundle;\n}"
            ],
            [
                "currentLanguage",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the current language\n */\npublic static Language currentLanguage() {\n    return InstanceHolder.INSTANCE.currentLanguage;\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * Resolves a multilingual user defined string.\n * Allows the user to define multilingual content by using a simple syntax:\n * You can enter strings like \"Word! {{de Welt!}} {{fr Monde!}}\". This method extracts\n * the appropriate string for the current language.\n *\n * @param text the complete text description\n * @return the evaluated text.\n */\npublic static String evalMultilingualContent(String text) {\n    return evalMultilingualContent(text, currentLanguage());\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "static String evalMultilingualContent(String text, Language currentLanguage) {\n    int pos = text.indexOf(\"{{\");\n    if (pos < 0)\n        return text;\n    String def = text.substring(0, pos).trim();\n    do {\n        int p2 = pos + 1;\n        int count = 1;\n        while (count > 0) {\n            char c = text.charAt(p2);\n            if (c == '{')\n                count++;\n            else if (c == '}')\n                count--;\n            p2++;\n            if (p2 == text.length() && count > 0) {\n                p2 = 1;\n                break;\n            }\n        }\n        p2 -= 2;\n        if (p2 > pos + 3) {\n            String l = text.substring(pos + 2, pos + 4);\n            if (l.equalsIgnoreCase(currentLanguage.getName()))\n                return text.substring(pos + 4, p2).trim();\n            if (l.equalsIgnoreCase(\"en\") && def.isEmpty())\n                def = text.substring(pos + 4, p2).trim();\n            pos = text.indexOf(\"{{\", p2);\n        } else\n            return def;\n    } while (pos > 0);\n    return def;\n}"
            ],
            [
                "lowest",
                "de.neemann.digital.testing.parser",
                "OperatorPrecedence",
                "/**\n * @return the lowest operator precedence to start evaluation with\n */\npublic static OperatorPrecedence lowest() {\n    return OR;\n}"
            ],
            [
                "addOne",
                "de.neemann.digital.analyse",
                "ModelAnalyser",
                "/**\n * Adds the \"+1\" to the variables name\n *\n * @param name the vars name\n * @return the modified name\n */\npublic static String addOne(String name) {\n    if (name.endsWith(\"^n\"))\n        return name.substring(0, name.length() - 1) + \"{n+1}\";\n    else\n        return name + \"+1\";\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param file the file\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(File file) throws IOException {\n    return readCSV(new FileReader(file));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the string to read\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(String csv) throws IOException {\n    return readCSV(new StringReader(csv));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the reader\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(Reader csv) throws IOException {\n    BufferedReader r = new BufferedReader(csv);\n    TruthTable tt = readHeader(r);\n    while (true) {\n        String line = r.readLine();\n        if (line == null)\n            return tt;\n        line = line.trim();\n        if (!line.isEmpty())\n            parseLine(tt, line);\n    }\n}"
            ],
            [
                "createDoubledValues",
                "de.neemann.digital.analyse.quinemc",
                "BoolTableByteArray",
                "/**\n * Creates a table where all values added twive\n *\n * @param values the original values\n * @return the new values\n */\npublic static BoolTableByteArray createDoubledValues(BoolTable values) {\n    BoolTableByteArray t = new BoolTableByteArray(values.size() * 2);\n    for (int i = 0; i < values.size(); i++) {\n        int v = values.get(i).asInt();\n        t.set(i * 2, v);\n        t.set(i * 2 + 1, v);\n    }\n    return t;\n}"
            ],
            [
                "simplify",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Simplifies the given expression.\n * If no simplification was found, the original expression is returned unchanged.\n *\n * @param expression the expression to simplify\n * @return the simplified expression\n * @throws ExpressionException ExpressionException\n */\npublic static Expression simplify(Expression expression) throws ExpressionException {\n    int initialCplx = expression.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    Expression newExp = new QuineMcCluskey(expression).simplify().getExpression();\n    int newCplx = newExp.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    if (newCplx < initialCplx)\n        return newExp;\n    else\n        return expression;\n}"
            ],
            [
                "addAnd",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Creates the final expression\n *\n * @param e         the expression to complete\n * @param rows      the rows to add\n * @param variables the variables to use to build the expression\n * @return the expression\n */\npublic static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables) {\n    for (TableRow r : rows) {\n        Expression n = r.getExpression(variables);\n        if (e == null)\n            e = n;\n        else\n            e = or(e, n);\n    }\n    return e;\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from a bool\n *\n * @param bool the bool\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(boolean bool) {\n    if (bool) {\n        return one;\n    } else {\n        return zero;\n    }\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from an int\n * 0 and 1 work as expected, any other value means \"dont care\"\n *\n * @param value the value\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(int value) {\n    switch(value) {\n        case 0:\n            return ThreeStateValue.zero;\n        case 1:\n            return ThreeStateValue.one;\n        default:\n            return ThreeStateValue.dontCare;\n    }\n}"
            ],
            [
                "doImplicitTypeCasts",
                "de.neemann.digital.analyse",
                "SubstituteLibrary",
                "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val) {\n    if (expectedClass == Integer.class && val instanceof Long) {\n        long l = (Long) val;\n        if (l <= Integer.MAX_VALUE && l >= Integer.MIN_VALUE)\n            return (int) l;\n    } else if (expectedClass == Long.class && val instanceof Number) {\n        return ((Number) val).longValue();\n    } else if (expectedClass == Color.class && val instanceof Number) {\n        return new Color(((Number) val).intValue());\n    } else if (expectedClass == Boolean.class && val instanceof Number) {\n        long b = ((Number) val).longValue();\n        return b != 0;\n    } else if (expectedClass == InValue.class) {\n        if (val instanceof Number)\n            return new InValue(((Number) val).longValue());\n        else {\n            try {\n                return new InValue(val.toString());\n            } catch (Bits.NumberFormatException e) {\n                return val;\n            }\n        }\n    } else if (expectedClass == InverterConfig.class && val instanceof java.util.List) {\n        InverterConfig.Builder b = new InverterConfig.Builder();\n        for (Object i : (java.util.List) val) b.add(i.toString());\n        return b.build();\n    } else if (expectedClass == DataField.class && val instanceof java.util.List) {\n        java.util.List list = (java.util.List) val;\n        long[] longs = new long[list.size()];\n        for (int i = 0; i < list.size(); i++) if (list.get(i) instanceof Number)\n            longs[i] = ((Number) list.get(i)).longValue();\n        else\n            return val;\n        return new DataField(longs);\n    } else if (expectedClass == Rotation.class && val instanceof Number) {\n        int r = ((Number) val).intValue();\n        return new Rotation(r % 4);\n    } else if (expectedClass == File.class && val instanceof String) {\n        return new File(val.toString());\n    } else if (expectedClass == TestCaseDescription.class && val instanceof String) {\n        try {\n            return new TestCaseDescription(val.toString());\n        } catch (Exception e) {\n            return val;\n        }\n    } else if (expectedClass.isEnum() && val instanceof Number) {\n        Class<Enum<?>> e = (Class<Enum<?>>) expectedClass;\n        Object[] values = e.getEnumConstants();\n        int index = ((Number) val).intValue();\n        if (index < 0 || index >= values.length)\n            return values[0];\n        else\n            return values[index];\n    }\n    return val;\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Iterable<Expression> exp) {\n    return simplify(new Or(exp, true));\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), true));\n}"
            ],
            [
                "xor",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new XOR expression\n *\n * @param a the expression to XOR\n * @param b the expression to XOR\n * @return the created expression\n */\npublic static Expression xor(Expression a, Expression b) {\n    if (b == Constant.ONE) {\n        return Not.not(a);\n    } else if (b == Constant.ZERO) {\n        return a;\n    } else if (a == Constant.ONE) {\n        return Not.not(b);\n    } else if (a == Constant.ZERO) {\n        return b;\n    } else\n        return simplify(new XOr(a, b));\n}"
            ],
            [
                "orNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression orNoMerge(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), false));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Iterable<Expression> exp) {\n    return simplify(new And(exp, true));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), true));\n}"
            ],
            [
                "andNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression andNoMerge(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), false));\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifier\n *\n * @param expression the expression to modify\n * @param modifier   the modifier to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier modifier) {\n    expression.modify(modifier);\n    return modifier.modify(expression);\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifiers\n *\n * @param expression the expression to modify\n * @param modifiers  the modifiers to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier... modifiers) {\n    for (ExpressionModifier m : modifiers) expression = modifyExpression(expression, m);\n    return expression;\n}"
            ],
            [
                "v",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates a new Variable\n *\n * @param name the variables name\n * @return the new Variable\n */\npublic static Variable v(String name) {\n    return new Variable(name);\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates an array of variables\n *\n * @param n the number of varfiables to create.\n * @return variables named \"A0\", \"A1\", \"A2\" and so on\n */\npublic static ArrayList<Variable> vars(int n) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (int i = 0; i < n; i++) v.add(new Variable(\"\" + (char) ('A' + i)));\n    return v;\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Create a list of variables using the given names\n *\n * @param names the names used to create the variables\n * @return the list of variables\n */\npublic static ArrayList<Variable> vars(String... names) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (String n : names) v.add(new Variable(n));\n    return v;\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable.\n */\npublic static boolean isVar(Expression e) {\n    return e instanceof Variable;\n}"
            ],
            [
                "isVarOrNotVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable or a inverted variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable or a inverted variable.\n */\npublic static boolean isVarOrNotVar(Expression e) {\n    return isVar(e) || (e instanceof Not && isVar(((Not) e).getExpression()));\n}"
            ],
            [
                "getDefaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * @return the default format\n */\npublic static FormatToExpression getDefaultFormat() {\n    return Settings.getInstance().get(Keys.SETTINGS_EXPRESSION_FORMAT);\n}"
            ],
            [
                "defaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * Formats a expression to a string.\n * Uses the default format for presentation on the screen.\n *\n * @param exp the expression to format\n * @return the string representation\n */\npublic static String defaultFormat(Expression exp) {\n    return getDefaultFormat().format(exp);\n}"
            ],
            [
                "not",
                "de.neemann.digital.analyse.expression",
                "Not",
                "/**\n * Creates a not expression.\n * Simplifies the expression if possible.\n *\n * @param a the child expression to invert\n * @return the inverted expression\n */\npublic static Expression not(Expression a) {\n    if (a == Constant.ONE)\n        return Constant.ZERO;\n    if (a == Constant.ZERO)\n        return Constant.ONE;\n    if (a instanceof Not && !((Not) a).protect) {\n        return ((Not) a).expression;\n    } else\n        return new Not(a);\n}"
            ],
            [
                "readFromFile",
                "de.neemann.digital.analyse",
                "TruthTable",
                "/**\n * Load the given file and returns a truth table instance\n *\n * @param filename filename\n * @return the {@link TruthTable}\n * @throws IOException IOException\n */\npublic static TruthTable readFromFile(File filename) throws IOException {\n    if (filename.getName().toLowerCase().endsWith(\".csv\"))\n        return CSVImporter.readCSV(filename);\n    else {\n        XStream xStream = getxStream();\n        try (InputStream in = new FileInputStream(filename)) {\n            return (TruthTable) xStream.fromXML(in);\n        }\n    }\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param s the signal\n * @return the port pins used\n */\npublic static SplitPinString create(Signal s) {\n    if (s.missingPinNumber())\n        return EMPTY;\n    return create(s.getPinNumber());\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param pinStr the pins definition;\n * @return the port pins used\n */\npublic static SplitPinString create(String pinStr) {\n    if (pinStr == null || pinStr.trim().length() == 0)\n        return EMPTY;\n    StringTokenizer st = new StringTokenizer(pinStr, \",;\");\n    ArrayList<String> pins = new ArrayList<>();\n    while (st.hasMoreTokens()) pins.add(st.nextToken().trim());\n    return new PinsArray(pins);\n}"
            ],
            [
                "checkSuffix",
                "de.neemann.digital.gui",
                "SaveAsHelper",
                "/**\n * Adds the given suffix to the file\n *\n * @param filename filename\n * @param suffix   suffix\n * @return the file name with the given suffix\n */\npublic static File checkSuffix(File filename, String suffix) {\n    if (suffix == null || filename == null)\n        return filename;\n    String name = filename.getName();\n    int p = name.lastIndexOf('.');\n    if (p >= 0) {\n        String suf = name.substring(p + 1).toLowerCase();\n        if (KNOWN.contains(suf))\n            name = name.substring(0, p);\n        while (name.length() > 0 && name.charAt(name.length() - 1) == '.') name = name.substring(0, name.length() - 1);\n    }\n    return new File(filename.getParentFile(), name + \".\" + suffix);\n}"
            ],
            [
                "addF1Traversal",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Adds F1 as a focus traversal key to a text components.\n *\n * @param text The text component\n * @param <TC> the concrete type of the text component\n * @return the given text component\n */\npublic static <TC extends JTextComponent> TC addF1Traversal(TC text) {\n    HashSet<AWTKeyStroke> set = new HashSet<>(text.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n    set.add(KeyStroke.getKeyStroke(\"F1\"));\n    text.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, set);\n    return text;\n}"
            ],
            [
                "createUndoManager",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Enables undo in the given text component.\n *\n * @param text the text component\n * @return the undo manager\n */\npublic static UndoManager createUndoManager(JTextComponent text) {\n    final UndoManager undoManager;\n    undoManager = new UndoManager();\n    text.getDocument().addUndoableEditListener(undoManager);\n    text.addKeyListener(new KeyAdapter() {\n\n        @Override\n        public void keyPressed(KeyEvent e) {\n            if (e.getKeyCode() == KeyEvent.VK_Z && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canUndo())\n                    undoManager.undo();\n            } else if (e.getKeyCode() == KeyEvent.VK_Y && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canRedo())\n                    undoManager.redo();\n            }\n        }\n    });\n    return undoManager;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components.modification",
                "ModifyInsertWires",
                "/**\n * Creates a simplified modification.\n *\n * @param newWires the wires to insert\n * @return the modification\n */\npublic static Modification<Circuit> create(List<Wire> newWires) {\n    switch(newWires.size()) {\n        case 0:\n            return null;\n        case 1:\n            return new ModifyInsertWire(newWires.get(0));\n        default:\n            return new ModifyInsertWires(newWires);\n    }\n}"
            ],
            [
                "getToolTipName",
                "de.neemann.digital.gui.components.modification",
                "ModificationOfVisualElement",
                "/**\n * Creates a translated name of the given element\n *\n * @param ve the element\n * @return translated name\n */\npublic static String getToolTipName(VisualElement ve) {\n    String s = Lang.getNull(\"elem_\" + ve.getElementName());\n    if (s == null) {\n        s = ve.getElementName();\n        if (s.endsWith(\".dig\"))\n            s = s.substring(0, s.length() - 4);\n    }\n    String l = ve.getElementAttributes().get(Keys.LABEL);\n    if (l.length() > 0)\n        s += \" (\" + l + \")\";\n    return s;\n}"
            ],
            [
                "getTerminal",
                "de.neemann.digital.gui.components.terminal",
                "TerminalDialog",
                "/**\n * Creates a new GUI terminal\n *\n * @param model the model\n * @param attr  the terminals attributes\n * @return the terminal interface\n */\nstatic TerminalInterface getTerminal(Model model, ElementAttributes attr) {\n    return new MyTerminal(model, attr);\n}"
            ],
            [
                "createList",
                "de.neemann.digital.gui.components",
                "CircuitTransferable",
                "/**\n * Creates a list of objects from inserted data\n * Can also throw a {@link ClassCastException}!\n *\n * @param data         the inserted data\n * @param shapeFactory the shapeFactory to set to the elements\n * @return the elements or null\n * @throws IOException IOException\n */\npublic static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException {\n    if (!(data instanceof String))\n        return null;\n    XStream xStream = Circuit.getxStream();\n    try (Reader in = new StringReader(data.toString())) {\n        ArrayList<Movable> elements = (ArrayList<Movable>) xStream.fromXML(in);\n        if (elements == null)\n            return null;\n        for (Movable m : elements) if (m instanceof VisualElement)\n            ((VisualElement) m).setShapeFactory(shapeFactory);\n        return elements;\n    }\n}"
            ],
            [
                "createURLStreamHandlerFactory",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "/**\n * @return factory which catches 'image' protocol requests to deliver images via an URL.\n */\npublic static URLStreamHandlerFactory createURLStreamHandlerFactory() {\n    return new MyURLStreamHandlerFactory();\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "MyURLStreamHandlerFactory",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "isSequentialVar",
                "de.neemann.digital.gui.components.table",
                "ExpressionListenerJK",
                "/**\n * If the name belongs to a sequential state var, the state vars name is returned.\n * Otherwise a null is returned\n *\n * @param name the name of the variable\n * @return the state variable or null\n */\npublic static String isSequentialVar(String name) {\n    String detName = null;\n    if (name.endsWith(\"n+1\")) {\n        detName = name.substring(0, name.length() - 2);\n    } else if (name.endsWith(\"{n+1}\")) {\n        detName = name.substring(0, name.length() - 5) + \"n\";\n    }\n    return detName;\n}"
            ],
            [
                "getAttrList",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * @return returns the list of circuit attributes\n */\npublic static ArrayList<Key> getAttrList() {\n    return ATTR_LIST;\n}"
            ],
            [
                "raster",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * rounds the given vector to the raster\n *\n * @param pos the vector\n * @return pos round to raster\n */\npublic static Vector raster(Vector pos) {\n    return new Vector((int) Math.round((double) pos.x / SIZE) * SIZE, (int) Math.round((double) pos.y / SIZE) * SIZE);\n}"
            ],
            [
                "createLiveDialog",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "/**\n * Creates a instance prepared for \"live logging\"\n *\n * @param owner      the parent frame\n * @param model      the model\n * @param microStep  stepping mode\n * @param ordering   the ordering to use\n * @param sampleSize the number of samples\n * @return the created instance\n */\npublic static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize) {\n    String title;\n    if (microStep)\n        title = Lang.get(\"win_measures_microstep\");\n    else\n        title = Lang.get(\"win_measures_fullstep\");\n    ArrayList<Signal> signals = model.getSignalsCopy();\n    signals.removeIf(signal -> !signal.isShowInGraph());\n    new OrderMerger<String, Signal>(ordering) {\n\n        @Override\n        public boolean equals(Signal a, String b) {\n            return a.getName().equals(b);\n        }\n    }.order(signals);\n    ValueTableObserver valueTableObserver = new ValueTableObserver(microStep, signals, sampleSize);\n    GraphDialog graphDialog = new GraphDialog(owner, title, valueTableObserver.getLogData(), model, true).setColumnInfo(createColumnsInfo(signals));\n    graphDialog.addWindowListener(new WindowAdapter() {\n\n        @Override\n        public void windowOpened(WindowEvent e) {\n            model.addObserver(valueTableObserver);\n        }\n\n        @Override\n        public void windowClosed(WindowEvent e) {\n            model.removeObserver(valueTableObserver);\n        }\n    });\n    return graphDialog;\n}"
            ],
            [
                "createColumnsInfo",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals) {\n    ValueTable.ColumnInfo[] info = new ValueTable.ColumnInfo[signals.size()];\n    for (int i = 0; i < signals.size(); i++) {\n        Signal s = signals.get(i);\n        info[i] = new ValueTable.ColumnInfo(s.getFormat(), s.getValue().getBits());\n    }\n    return info;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "isExperimentalMode",
                "de.neemann.digital.gui",
                "Main",
                "/**\n * @return true if experimental features are enabled\n */\npublic static boolean isExperimentalMode() {\n    return experimental;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "WindowManager",
                "/**\n * @return the WindowManager\n */\npublic static WindowManager getInstance() {\n    return InstanceHolderClass.INSTANCE;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "Settings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static Settings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "getRange",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog bit range\n *\n * @param bits the number of bits\n * @return the bit range\n */\npublic static String getRange(int bits) {\n    if (bits == 1)\n        return \"\";\n    else\n        return \"[\" + (bits - 1) + \":0]\";\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog type for a signal\n *\n * @param def  the signal type (input or output) used if dir is not \"inout\"\n * @param dir  used to check if direction is \"inout\"\n * @param bits the number of bits\n * @return the verilog signal type\n */\npublic static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits) {\n    String result;\n    if (dir == HDLPort.Direction.INOUT)\n        result = \"inout\";\n    else\n        result = (def == HDLPort.Direction.IN) ? \"input\" : \"output\";\n    if (bits > 1) {\n        result += \" [\" + (bits - 1) + \":0]\";\n    }\n    return result;\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    return (bits + \"'b\" + s);\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.verilog2.lib",
                "VerilogTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given\n * element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(MODULE_PREFIX + elementName);\n}"
            ],
            [
                "createFromJar",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n *\n * @param path the path of the file to load\n * @param cl   the classloader used to load the template. If set to null, the SystemClassLoader is used\n * @return the statement\n * @throws IOException     IOException\n * @throws ParserException ParserException\n */\npublic static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException {\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    InputStream in = cl.getResourceAsStream(path);\n    if (in == null)\n        throw new FileNotFoundException(\"file not found: \" + path);\n    try (Reader r = new InputStreamReader(in, StandardCharsets.UTF_8)) {\n        Parser p = new Parser(r, path);\n        return p.parse();\n    }\n}"
            ],
            [
                "createFromJarStatic",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n * Throws only a RuntimeException so use with care!\n *\n * @param path the path of the file to load\n * @return the statement\n */\npublic static Statement createFromJarStatic(String path) {\n    try {\n        return createFromJar(path, null);\n    } catch (IOException | ParserException e) {\n        throw new RuntimeException(\"could not parse: \" + path, e);\n    }\n}"
            ],
            [
                "isWhiteSpace",
                "de.neemann.digital.hdl.hgs",
                "Tokenizer",
                "/**\n * Returns true if the given character is a white space.\n *\n * @param c the character to test\n * @return true in c is a white space\n */\npublic static boolean isWhiteSpace(int c) {\n    return c == ' ' || c == '\\t' || c == '\\n' || c == '\\r';\n}"
            ],
            [
                "toLong",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a long\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static long toLong(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toDouble",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a double\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static double toDouble(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).doubleValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toInt",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an int\n *\n * @param value the value to convert\n * @return the int value\n * @throws HGSEvalException HGSEvalException\n */\npublic static int toInt(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).intValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toBool",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a bool\n *\n * @param value the value to convert\n * @return the bool value\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean toBool(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue() != 0;\n    if (value instanceof Boolean)\n        return ((Boolean) value);\n    throw new HGSEvalException(\"Must be an integer or a bool, is: \" + value.getClass().getSimpleName() + \"=\" + value);\n}"
            ],
            [
                "toString",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a string\n *\n * @param value the value to convert\n * @return the string\n * @throws HGSEvalException HGSEvalException\n */\npublic static String toString(Object value) throws HGSEvalException {\n    if (value instanceof String)\n        return value.toString();\n    throw new HGSEvalException(\"must be a string, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toArray",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an array\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSArray toArray(Object value) throws HGSEvalException {\n    if (value instanceof HGSArray)\n        return (HGSArray) value;\n    if (value instanceof List)\n        return new HGSArrayList((List) value);\n    throw new HGSEvalException(\"must be an array, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toMap",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a map\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSMap toMap(Object value) throws HGSEvalException {\n    if (value instanceof HGSMap)\n        return (HGSMap) value;\n    if (value instanceof Map)\n        return new HGSMapMap((Map) value);\n    throw new HGSEvalException(\"must be a map, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "equals",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Compares two values\n *\n * @param a a value\n * @param b a value\n * @return true if both values are equal\n */\npublic static boolean equals(Object a, Object b) {\n    if (a instanceof Double || b instanceof Double)\n        return a.equals(b);\n    else if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() == ((Number) b).longValue();\n    else if (a instanceof String || b instanceof String)\n        return a.toString().equals(b.toString());\n    else\n        return a.equals(b);\n}"
            ],
            [
                "add",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Adds two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object add(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) + toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() + ((Number) b).longValue();\n    if (a instanceof String || b instanceof String)\n        return a.toString() + b.toString();\n    throw new HGSEvalException(\"arguments must be int or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "sub",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Subtracts two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object sub(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) - toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() - ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "mul",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Multiplies two values\n *\n * @param a a value\n * @param b a value\n * @return the product\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object mul(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) * toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() * ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "div",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Divides two numbers\n *\n * @param a a value\n * @param b a value\n * @return the quotient\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object div(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) / toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() / ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "or",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an or operation\n *\n * @param a a value\n * @param b a value\n * @return the or'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object or(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() | ((Number) b).longValue();\n    return toBool(a) || toBool(b);\n}"
            ],
            [
                "xor",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an xor operation\n *\n * @param a a value\n * @param b a value\n * @return the xor'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object xor(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() ^ ((Number) b).longValue();\n    return toBool(a) ^ toBool(b);\n}"
            ],
            [
                "and",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an and operation\n *\n * @param a a value\n * @param b a value\n * @return the and'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object and(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() & ((Number) b).longValue();\n    return toBool(a) && toBool(b);\n}"
            ],
            [
                "not",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs a not operation\n *\n * @param value a value\n * @return the inverted value\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object not(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ~((Number) value).longValue();\n    return !toBool(value);\n}"
            ],
            [
                "neg",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Changes the sign of the given value\n *\n * @param value the value\n * @return value with changed sign\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object neg(Object value) throws HGSEvalException {\n    if (value instanceof Double)\n        return -(Double) value;\n    return -toLong(value);\n}"
            ],
            [
                "less",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a&lt;b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean less(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) < toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) < toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) < 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "lessEqual",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a<=b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean lessEqual(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) <= toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) <= toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) <= 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "trimRight",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the right side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimRight(String str) {\n    int initial = str.length() - 1;\n    int pos = initial;\n    while (pos >= 0 && isWhiteSpace(str.charAt(pos))) pos--;\n    if (pos == initial)\n        return str;\n    else\n        return str.substring(0, pos + 1);\n}"
            ],
            [
                "trimLeft",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the left side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimLeft(String str) {\n    int pos = 0;\n    while (pos < str.length() && isWhiteSpace(str.charAt(pos))) pos++;\n    if (pos == 0)\n        return str;\n    else\n        return str.substring(pos);\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Returns the vhdl type name\n *\n * @param bits the number of bits\n * @return the types name\n */\npublic static String getType(int bits) {\n    if (bits == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector(\" + (bits - 1) + \" downto 0)\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    int missing = bits - s.length();\n    if (missing > 0)\n        s = ZEROS.substring(0, missing) + s;\n    if (bits > 1)\n        s = \"\\\"\" + s + \"\\\"\";\n    else\n        s = \"'\" + s + \"'\";\n    return s;\n}"
            ],
            [
                "isTemplate",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Returns true, if a hdl template is available.\n *\n * @param etd the {@link ElementTypeDescription}\n * @return true if VHDL template is available\n */\npublic static boolean isTemplate(ElementTypeDescription etd) {\n    ClassLoader cl = etd.getClassLoader();\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    URL url = cl.getResource(createFileName(ENTITY_PREFIX + etd.getName()));\n    return url != null;\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(ENTITY_PREFIX + elementName);\n}"
            ],
            [
                "zero",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Create a vhdl zero with the given bit number\n *\n * @param bits the bit number\n * @return '0' or (others => '0')\n */\npublic static String zero(long bits) {\n    if (bits == 1)\n        return \"'0'\";\n    else\n        return \"(others => '0')\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, long bits) {\n    return VHDLCreator.value(val, (int) bits);\n}"
            ],
            [
                "genericType",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates the code for a generic type\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String genericType(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector ((Bits-1) downto 0)\";\n}"
            ],
            [
                "type",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a type of given width\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String type(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector (\" + (n - 1) + \" downto 0)\";\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.hdl.model2.expression",
                "Expression",
                "/**\n * Helper to check if an expression is a net reference\n *\n * @param expr the expression to check\n * @param net  the net\n * @return true if the expression is a reference to the given net\n */\nstatic boolean isVar(Expression expr, HDLNet net) {\n    return expr instanceof ExprVar && ((ExprVar) expr).getNet() == net;\n}"
            ],
            [
                "isConstant",
                "de.neemann.digital.hdl.model2.expression",
                "ExprConstant",
                "/**\n * Returns the constant if th given node represents a constant\n *\n * @param node the node\n * @return the constant of null if node is not a constant\n */\npublic static ExprConstant isConstant(HDLNode node) {\n    if (node instanceof HDLNodeAssignment) {\n        HDLNodeAssignment expr = (HDLNodeAssignment) node;\n        if (expr.getExpression() instanceof ExprConstant) {\n            return (ExprConstant) expr.getExpression();\n        }\n    }\n    return null;\n}"
            ],
            [
                "getHighZ",
                "de.neemann.digital.data",
                "Value",
                "/**\n * @return returns a high z value\n */\npublic static Value getHighZ() {\n    return new Value(0, Type.HIGHZ);\n}"
            ],
            [
                "calcBackOffset",
                "de.neemann.digital.builder.circuit",
                "FragmentExpression",
                "static int calcBackOffset(int size, int i) {\n    if ((size & 1) != 0 && i == (size - 1) / 2)\n        return 0;\n    if (i >= size / 2)\n        return size - i;\n    else\n        return i + 1;\n}"
            ],
            [
                "isXNor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXNor(long[] data) {\n    for (int i = 0; i < data.length; i++) if ((Integer.bitCount(i) & 1) == data[i])\n        return false;\n    return true;\n}"
            ],
            [
                "isXor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXor(long[] data) {\n    for (int i = 0; i < data.length; i++) if (!((Integer.bitCount(i) & 1) == data[i]))\n        return false;\n    return true;\n}"
            ],
            [
                "getLibPath",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * @return the additional library path\n */\npublic static File getLibPath() {\n    String path;\n    try {\n        path = ElementLibrary.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath().replace('\\\\', '/');\n    } catch (URISyntaxException e) {\n        return new File(\"noLibFound\");\n    }\n    if (path.endsWith(\"/target/classes/\"))\n        return toCanonical(new File(path.substring(0, path.length() - 16) + \"/src/main/dig/lib\"));\n    if (path.endsWith(\"/target/Digital.jar\"))\n        return new File(path.substring(0, path.length() - 19) + \"/src/main/dig/lib\");\n    if (path.endsWith(\"Digital.jar\"))\n        return new File(path.substring(0, path.length() - 12) + \"/lib\");\n    return new File(\"noLibFound\");\n}"
            ],
            [
                "createCustomDescription",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * Creates a custom element description.\n *\n * @param file    the file\n * @param circuit the circuit\n * @param library the library\n * @return the type description\n * @throws PinException PinException\n */\npublic static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException {\n    ElementTypeDescriptionCustom d = new ElementTypeDescriptionCustom(file, circuit, library);\n    d.setElementFactory(attributes -> new CustomElement(d));\n    return d;\n}"
            ],
            [
                "createDeclarationDefault",
                "de.neemann.digital.draw.library",
                "ElementTypeDescriptionCustom",
                "/**\n * Creates the default for custom element declarations\n *\n * @param circuit the circuit\n * @return the default code template\n * @throws NodeException NodeException\n */\npublic static String createDeclarationDefault(Circuit circuit) throws NodeException {\n    TreeSet<String> nameSet = new TreeSet<>();\n    for (VisualElement ve : circuit.getElements()) {\n        String gen = ve.getElementAttributes().get(Keys.GENERIC).trim();\n        if (!gen.isEmpty()) {\n            try {\n                Parser p = new Parser(gen);\n                p.enableRefReadCollection();\n                p.parse(false);\n                for (Reference r : p.getRefsRead()) {\n                    if (r instanceof ReferenceToStruct) {\n                        ReferenceToStruct st = (ReferenceToStruct) r;\n                        if (st.getParent() instanceof ReferenceToVar) {\n                            ReferenceToVar var = (ReferenceToVar) st.getParent();\n                            if (var.getName().equals(\"args\")) {\n                                nameSet.add(st.getName());\n                            }\n                        }\n                    }\n                }\n            } catch (ParserException | IOException e) {\n                final NodeException ex = new NodeException(Lang.get(\"err_evaluatingGenericsCode_N_N\", ve, gen), e);\n                ex.setOrigin(circuit.getOrigin());\n                throw ex;\n            }\n        }\n    }\n    StringBuilder sb = new StringBuilder();\n    for (String name : nameSet) sb.append(name).append(\" := ;\\n\");\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Returns a comparator instance\n *\n * @return the singleton instance\n */\npublic static NumStringComparator getInstance() {\n    return InstanceHolder.INSTANCE;\n}"
            ],
            [
                "compareStr",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Compare two strings\n *\n * @param a a string\n * @param b a string\n * @return the comparison result\n */\npublic static int compareStr(String a, String b) {\n    int pa = 0;\n    int pb = 0;\n    while (true) {\n        final boolean ae = pa == a.length();\n        final boolean be = pb == b.length();\n        if (ae && be)\n            return 0;\n        else if (ae)\n            return -1;\n        else if (be)\n            return 1;\n        char ca = Character.toLowerCase(a.charAt(pa));\n        char cb = Character.toLowerCase(b.charAt(pb));\n        if (isDigit(ca) && isDigit(cb)) {\n            ParseNumber da = new ParseNumber(a, pa);\n            ParseNumber db = new ParseNumber(b, pb);\n            int c = Integer.compare(da.num, db.num);\n            if (c != 0)\n                return c;\n            else {\n                pa = da.p;\n                pb = db.p;\n            }\n        } else {\n            int c = Character.compare(ca, cb);\n            if (c != 0) {\n                return c;\n            } else {\n                pa++;\n                pb++;\n            }\n        }\n    }\n}"
            ],
            [
                "createPins",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Creates pins\n *\n * @param inputs    the inputs\n * @param outputs   the outputs\n * @param invert    true if invert output\n * @param ic        input inverter configuration\n * @param wideShape true if a wide shape is selected\n * @return the pins\n */\npublic static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape) {\n    return createPins(inputs, outputs, invert, wideShape ? 4 : 3, true, ic);\n}"
            ],
            [
                "readStyle",
                "de.neemann.digital.draw.shapes.custom.svg",
                "Context",
                "static Context readStyle(Context context, String style) throws SvgException {\n    SVGTokenizer t = new SVGTokenizer(style);\n    while (true) {\n        final String command = t.readTo(':');\n        if (command.length() == 0)\n            break;\n        final String value = t.readTo(';');\n        AttrParser p = PARSER.get(command);\n        if (p != null)\n            p.parse(context, value);\n    }\n    return context;\n}"
            ],
            [
                "getOutSize",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static int getOutSize(boolean small) {\n    if (small)\n        return SIZE2;\n    else\n        return OUT_SIZE;\n}"
            ],
            [
                "getOutStyle",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static Style getOutStyle(boolean small) {\n    if (small)\n        return Style.THIN;\n    else\n        return Style.NORMAL;\n}"
            ],
            [
                "getOutRad",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Inner circle size used for inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the output circle radius as a vector\n */\npublic static Vector getOutRad(boolean small) {\n    int s = getOutSize(small);\n    return new Vector(s - 6, s - 6);\n}"
            ],
            [
                "createTransform",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static Transform createTransform(int size) {\n    if (size == 2)\n        return Transform.IDENTITY;\n    else {\n        final TransformTranslate tr1 = new TransformTranslate(-70, -139);\n        final TransformTranslate tr2 = new TransformTranslate(70, 139);\n        float s = (2 + size) / 4f;\n        final TransformMatrix trm = new TransformMatrix(s, 0, 0, s, 0, 0);\n        return Transform.mul(tr1, Transform.mul(trm, tr2));\n    }\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"attributes\", ElementAttributes.class);\n    xStream.alias(\"visualElement\", VisualElement.class);\n    xStream.alias(\"wire\", Wire.class);\n    xStream.alias(\"circuit\", Circuit.class);\n    xStream.alias(\"intFormat\", IntFormat.class);\n    xStream.alias(\"exprFormat\", FormatToExpression.class);\n    xStream.alias(\"barrelShifterMode\", BarrelShifterMode.class);\n    xStream.alias(\"direction\", LeftRightFormat.class);\n    xStream.alias(\"rotation\", Rotation.class);\n    xStream.aliasAttribute(Rotation.class, \"rotation\", \"rotation\");\n    xStream.alias(\"language\", Language.class);\n    xStream.aliasAttribute(Language.class, \"name\", \"name\");\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"value\", InValue.class);\n    xStream.aliasAttribute(InValue.class, \"value\", \"v\");\n    xStream.aliasAttribute(InValue.class, \"highZ\", \"z\");\n    xStream.addImplicitCollection(ElementAttributes.class, \"attributes\");\n    xStream.alias(\"data\", DataField.class);\n    xStream.registerConverter(new DataFieldConverter());\n    xStream.alias(\"testData\", TestCaseDescription.class);\n    xStream.alias(\"inverterConfig\", InverterConfig.class);\n    xStream.addImplicitCollection(InverterConfig.class, \"inputs\");\n    xStream.alias(\"storedRoms\", ROMManager.class);\n    xStream.addImplicitCollection(ROMManager.class, \"roms\");\n    xStream.alias(\"romList\", ROMManagerFile.class);\n    xStream.alias(\"romFile\", ROMManagerFile.RomContainerFile.class);\n    xStream.alias(\"romData\", ROMManagerFile.RomContainerDataField.class);\n    xStream.alias(\"appType\", Application.Type.class);\n    xStream.ignoreUnknownElements();\n    xStream.alias(\"shape\", CustomShapeDescription.class);\n    xStream.alias(\"pin\", CustomShapeDescription.Pin.class);\n    xStream.alias(\"circle\", CustomShapeDescription.CircleHolder.class);\n    xStream.alias(\"line\", CustomShapeDescription.LineHolder.class);\n    xStream.alias(\"poly\", CustomShapeDescription.PolygonHolder.class);\n    xStream.alias(\"text\", CustomShapeDescription.TextHolder.class);\n    xStream.alias(\"polygon\", Polygon.class);\n    xStream.alias(\"shapeType\", CustomCircuitShapeType.class);\n    xStream.alias(\"transform\", TransformHolder.class);\n    xStream.registerConverter(new PolygonConverter());\n    return xStream;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename     filename\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load \" + filename);\n    final Circuit circuit = loadCircuit(new FileInputStream(filename), shapeFactory);\n    circuit.origin = filename;\n    return circuit;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param in           the input stream\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load stream\");\n    try {\n        XStream xStream = getxStream();\n        Circuit circuit = (Circuit) xStream.fromXML(in);\n        for (VisualElement ve : circuit.getElements()) ve.setShapeFactory(shapeFactory);\n        if (circuit.version == 0) {\n            // convert to version 1\n            for (Wire w : circuit.getWires()) {\n                w.p1 = w.p1.mul(2);\n                w.p2 = w.p2.mul(2);\n            }\n            for (VisualElement e : circuit.getElements()) e.setPos(e.getPos().mul(2));\n            circuit.version = 1;\n        }\n        if (circuit.version < 2) {\n            Object rm = circuit.getAttributes().get(Keys.ROMMANAGER);\n            if (rm instanceof ROMManager) {\n                circuit.getAttributes().set(Keys.ROMMANAGER, new ROMManagerFile((ROMManager) rm));\n            }\n            circuit.version = 2;\n        }\n        return circuit;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "fixGenerics",
                "de.neemann.digital.draw.model",
                "ModelCreator",
                "/**\n * Creates a concrete circuit from a generic on.\n * Uses the included generic init code.\n *\n * @param circuit the generic circuit\n * @param library the element library\n * @return the concrete circuit\n * @throws NodeException            NodeException\n * @throws ElementNotFoundException ElementNotFoundException\n */\npublic static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException {\n    if (circuit.getAttributes().get(Keys.IS_GENERIC))\n        return new ResolveGenerics(circuit, library).resolveCircuit(null).getCircuit();\n    else\n        return circuit;\n}"
            ],
            [
                "createFromPath",
                "de.neemann.digital.draw.graphics",
                "Polygon",
                "/**\n * Creates a polygon from a SVG path\n *\n * @param path the svg path\n * @return the polygon or null if there was an error\n */\npublic static Polygon createFromPath(String path) {\n    try {\n        return new PolygonParser(path).create();\n    } catch (PolygonParser.ParserException e) {\n        return null;\n    }\n}"
            ],
            [
                "vec",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Returns a new vector\n * shorthand for new Vector(x,y)\n *\n * @param x x\n * @param y y\n * @return the vector\n */\npublic static Vector vec(int x, int y) {\n    return new Vector(x, y);\n}"
            ],
            [
                "min",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the minimum vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the minimum\n */\npublic static Vector min(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x)\n            x = p[i].getX();\n        if (p[i].getY() < y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "max",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the maximim vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the maximum\n */\npublic static Vector max(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() > x)\n            x = p[i].getX();\n        if (p[i].getY() > y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "width",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the width of the given vectors.\n *\n * @param p the vectors\n * @return max(p)-min(p)\n */\npublic static Vector width(VectorInterface... p) {\n    int x1 = p[0].getX();\n    int y1 = p[0].getY();\n    int x2 = x1;\n    int y2 = y1;\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x1)\n            x1 = p[i].getX();\n        if (p[i].getY() < y1)\n            y1 = p[i].getY();\n        if (p[i].getX() > x2)\n            x2 = p[i].getX();\n        if (p[i].getY() > y2)\n            y2 = p[i].getY();\n    }\n    return new Vector(x2 - x1, y2 - y1);\n}"
            ],
            [
                "add",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Adds an offset to every vector in the given list\n *\n * @param vectors the original vectors\n * @param offs    the offset\n * @return the new list\n */\npublic static List<Vector> add(List<Vector> vectors, Vector offs) {\n    ArrayList<Vector> newVec = new ArrayList<>();\n    for (Vector v : vectors) newVec.add(v.add(offs));\n    return newVec;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static SVGSettings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "createKeyList",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * @return a list of available SVG export keys\n */\npublic static List<Key> createKeyList() {\n    ArrayList<Key> list = new ArrayList<>();\n    list.add(LATEX);\n    list.add(PINS_IN_MATH_MODE);\n    list.add(HIDE_TEST);\n    list.add(NO_SHAPE_FILLING);\n    list.add(SMALL_IO);\n    list.add(NO_PIN_MARKER);\n    list.add(THINNER_LINES);\n    list.add(HIGH_CONTRAST);\n    list.add(MONOCHROME);\n    return list;\n}"
            ],
            [
                "mul",
                "de.neemann.digital.draw.graphics",
                "Transform",
                "/**\n * Combines the two given transformations to a common transformation\n *\n * @param t1 first transformation\n * @param t2 second transformation\n * @return the resulting transformation\n */\nstatic Transform mul(Transform t1, Transform t2) {\n    TransformMatrix m1 = t1.getMatrix();\n    TransformMatrix m2 = t2.getMatrix();\n    return new TransformMatrix(m1.a * m2.a + m1.c * m2.b, m1.b * m2.a + m1.d * m2.b, m1.a * m2.c + m1.c * m2.d, m1.b * m2.c + m1.d * m2.d, m2.a * m1.x + m2.b * m1.y + m2.x, m2.c * m1.x + m2.d * m1.y + m2.y);\n}"
            ],
            [
                "rotate",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a rotation.\n * Rotates in mathematically positive direction. Takes into account that\n * in Digital the y-axis goes downwards.\n *\n * @param w the angle in 360 grad units\n * @return the transformation\n */\npublic static TransformMatrix rotate(double w) {\n    final double phi = w / 180 * Math.PI;\n    float cos = (float) Math.cos(phi);\n    float sin = (float) Math.sin(phi);\n    return new TransformMatrix(cos, -sin, sin, cos, 0, 0);\n}"
            ],
            [
                "scale",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a scaling transformation\n *\n * @param sx scaling in x direction\n * @param sy scaling in y direction\n * @return the transformation\n */\npublic static TransformMatrix scale(float sx, float sy) {\n    return new TransformMatrix(sx, 0, 0, sy, 0, 0);\n}"
            ],
            [
                "getTextWidth",
                "de.neemann.digital.draw.graphics",
                "GraphicMinMax",
                "/**\n * Returns a approximation of the width of the given text in the given style\n *\n * @param text  the text\n * @param style the style\n * @return the approximated text width\n */\npublic static int getTextWidth(String text, Style style) {\n    final FontRenderContext fontRenderContext = new FontRenderContext(null, true, false);\n    GraphicsFormatter.Fragment f = GraphicsFormatter.createFragment((fragment, font, str) -> {\n        Rectangle2D rec = style.getFont().getStringBounds(str, fontRenderContext);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), 0);\n    }, style.getFont(), text);\n    return f.getWidth();\n}"
            ],
            [
                "getSelected",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * @return the selected color map\n */\npublic static ColorScheme getSelected() {\n    if (instance == null) {\n        updateInstance();\n        Settings.getInstance().getAttributes().addListener(ColorScheme::updateInstance);\n    }\n    return instance;\n}"
            ],
            [
                "getWireStyle",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Returns the wire style depending on the given value\n *\n * @param value the value to represent\n * @return the style\n */\npublic static Style getWireStyle(Value value) {\n    if (value == null || value.getBits() > 1)\n        return WIRE;\n    if (value.isHighZ())\n        return WIRE_HIGHZ;\n    if (value.getValue() == 1)\n        return WIRE_HIGH;\n    else\n        return WIRE_LOW;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text the text\n * @return the string representation\n */\npublic static String format(Text text) {\n    return format(text, FormatToExpression.getDefaultFormat());\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text   the text\n * @param format the format to use\n * @return the string representation\n */\npublic static String format(Text text, FormatToExpression format) {\n    if (text instanceof Simple) {\n        return ((Simple) text).getText();\n    } else if (text instanceof Blank) {\n        return \" \";\n    } else if (text instanceof Character) {\n        return \"\" + ((Character) text).getChar();\n    } else if (text instanceof Decorate) {\n        Decorate d = (Decorate) text;\n        if (d.getStyle() == Decorate.Style.OVERLINE) {\n            final Text content = d.getContent();\n            if (content instanceof Simple || content instanceof Index)\n                return format.getNot() + format(content, format);\n            else\n                return format.getNot() + \"(\" + format(content, format) + \")\";\n        } else\n            return format(d.getContent(), format);\n    } else if (text instanceof Index) {\n        Index i = (Index) text;\n        String str = format(i.getVar(), format);\n        if (i.getSubScript() != null)\n            str += format(i.getSubScript(), format);\n        if (i.getSuperScript() != null)\n            str += format(i.getSuperScript(), format);\n        return str;\n    } else if (text instanceof Sentence) {\n        Sentence s = (Sentence) text;\n        StringBuilder sb = new StringBuilder();\n        for (Text t : s) sb.append(format(t, format));\n        return sb.toString();\n    } else\n        return \"\";\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "SVGFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr   the {@link Graphics2D} instance\n * @param text the text\n * @return the text fragment\n */\npublic static Fragment createFragment(Graphics2D gr, String text) {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), text);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr         the {@link Graphics2D} instance\n * @param expression the expression\n * @return the text fragment\n * @throws FormatterException FormatterException\n */\npublic static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), new ExpressionToText().createText(expression));\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param sizer the sizer instance\n * @param font  the font\n * @param text  the text\n * @return the fragment\n */\npublic static Fragment createFragment(FontSizer sizer, Font font, String text) {\n    Fragment fragment;\n    try {\n        Text t = new Parser(text).parse();\n        fragment = createFragment(sizer, font, t);\n    } catch (ParseException | FormatterException e) {\n        // if there was an exception, return the complete raw text as a fragment\n        fragment = new TextFragment(sizer, font, text);\n    }\n    return fragment;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param exp the expression to format\n * @return the formatted string\n */\npublic static String format(Expression exp) {\n    return format(new ExpressionToText().createText(exp, FormatToExpression.LATEX), true);\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "math",
                "de.neemann.digital.draw.graphics.text.text",
                "Decorate",
                "/**\n * Adds a MATH decoration to the given text.\n * If the text is already decorated the text is returned directly.\n *\n * @param t the text to decorate\n * @return the decorated text\n */\npublic static Text math(Text t) {\n    if (t instanceof Decorate) {\n        Decorate d = (Decorate) t;\n        if (d.getStyle() == Style.MATH)\n            return t;\n    }\n    return new Decorate(t, Style.MATH);\n}"
            ],
            [
                "escapeXML",
                "de.neemann.digital.draw.graphics",
                "GraphicSVG",
                "/**\n * Escapes a given string to XML\n *\n * @param text the text to escape\n * @return the escaped text.\n */\npublic static String escapeXML(String text) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        switch(c) {\n            case '&':\n                sb.append(\"&amp;\");\n                break;\n            case '<':\n                sb.append(\"&lt;\");\n                break;\n            case '>':\n                sb.append(\"&gt;\");\n                break;\n            case '\"':\n                sb.append(\"&quot;\");\n                break;\n            default:\n                sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
            ],
            [
                "getMirrorYOrientation",
                "de.neemann.digital.draw.graphics",
                "GraphicSwing",
                "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3) {\n    int oy = orientation.getY();\n    VectorInterface d0 = p2.sub(p1).getOrthogonal();\n    VectorInterface d1 = p3.sub(p1);\n    if (d0.scalar(d1) < 0)\n        oy = 2 - oy;\n    return oy;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param file the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(File file) throws IOException {\n    final Configuration configuration = load(new FileInputStream(file));\n    configuration.origin = file;\n    return configuration;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param in the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        return (Configuration) xStream.fromXML(in);\n    } catch (RuntimeException e) {\n        throw new IOException(\"error reading XML\", e);\n    }\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "UNKNOWN",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * Unknown release\n */\npublic static final String UNKNOWN = \"unknown\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullDown",
                "/**\n * The pull down description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "Diode",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeBackward",
                "/**\n * The description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullUp",
                "/**\n * The pull up description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeForward",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROMDualPort",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualAccess",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "CounterPreset",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Register",
                "/**\n * The registers {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "LookUpTable",
                "/**\n * The LUTs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "BlockRAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Counter",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROM",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMAsync",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROM",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROMDualPort",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePortSel",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RegisterFile",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "MIDI",
                "/**\n * The Speakers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RGBLED",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The Input description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "LEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);"
            ],
            [
                "POLARITYAWARELEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The polarity aware LED description\n */\npublic static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "SEVENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment display description\n */\npublic static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();"
            ],
            [
                "SEVENHEXDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment hex display description\n */\npublic static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "SIXTEENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * Sixteen Segment Display\n */\npublic static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RotEncoder",
                "/**\n * The rotary encoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PinControl",
                "/**\n * The description of the pin control logic\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "DipSwitch",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "LightBulb",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Probe",
                "/**\n * The Probe description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Button",
                "/**\n * The Button description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "ButtonLED",
                "/**\n * The ButtonLED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "In",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "STEPS",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * Steps for a full revolution\n */\npublic static final int STEPS = 72;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * The stepper motors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "NotConnected",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorBipolar",
                "/**\n * The bipolar motor description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Const",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PowerSupply",
                "/**\n * Enforces a power supply\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Ground",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "VDD",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.core.io.telnet",
                "ServerHolder",
                "/**\n * The singleton instance\n */\npublic static final ServerHolder INSTANCE = new ServerHolder();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io.telnet",
                "Telnet",
                "/**\n * The telnet server description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);"
            ],
            [
                "BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of bits in simple gates like And and Or\n */\npublic static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);"
            ],
            [
                "INPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * input bits of sign extender\n */\npublic static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);"
            ],
            [
                "OUTPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output bits of sign extender\n */\npublic static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);"
            ],
            [
                "INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in simple gates like And and Or\n */\npublic static final // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nKey.KeyInteger // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nINPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);"
            ],
            [
                "LUT_INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in the LUT\n */\npublic static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);"
            ],
            [
                "MAX_VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The counter max value\n */\npublic static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);"
            ],
            [
                "DELAY_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the delay time used by the delay component\n */\npublic static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);"
            ],
            [
                "MONOFLOP_DELAY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the timer delay time\n */\npublic static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);"
            ],
            [
                "LABEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The elements label\n */\npublic static final Key<String> LABEL = new Key<>(\"Label\", \"\");"
            ],
            [
                "FONT_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The font size\n */\npublic static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);"
            ],
            [
                "TEXT_ORIENTATION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * text orientation\n */\npublic static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();"
            ],
            [
                "LED_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a LED\n */\npublic static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();"
            ],
            [
                "SEVEN_SEG_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a seven seg display\n */\npublic static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);"
            ],
            [
                "VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The value of constants\n */\npublic static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();"
            ],
            [
                "DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of elements\n */\npublic static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();"
            ],
            [
                "INPUT_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of inputs\n */\npublic static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();"
            ],
            [
                "DIP_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of the dip switch\n */\npublic static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Color of LEDs\n */\npublic static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();"
            ],
            [
                "INPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The input splitting of a splitter\n */\npublic static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");"
            ],
            [
                "OUTPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The output splitting of a splitter\n */\npublic static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");"
            ],
            [
                "SPLITTER_SPREADING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The splitter spreading\n */\npublic static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();"
            ],
            [
                "IN_OUT_SMALL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to select small inputs and outputs\n */\npublic static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "RUN_AT_REAL_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable realtime mode at a clock\n */\npublic static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);"
            ],
            [
                "INVERT_OUTPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * inverts the output of a gate\n */\npublic static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);"
            ],
            [
                "FREQUENCY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The real time frequency of the clock\n */\npublic static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);"
            ],
            [
                "SELECTOR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the bit count of a muxer or decoder\n */\npublic static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);"
            ],
            [
                "ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of address bits of memory\n */\npublic static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);"
            ],
            [
                "BLOWN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a diode as blown fuse or as programmed\n */\npublic static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a switch as closed or not\n */\npublic static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();"
            ],
            [
                "SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * signed flag for comparator element\n */\npublic static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();"
            ],
            [
                "REMAINDER_POSITIVE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects if the reminder of the division is always positive\n */\npublic static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);"
            ],
            [
                "DATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the data key for memory\n */\npublic static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);"
            ],
            [
                "FLIP_SEL_POSITON",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag for flipping selector pos in muxers, decoders and drivers\n */\npublic static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();"
            ],
            [
                "ROTATE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the rotation of the elements\n */\npublic static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();"
            ],
            [
                "WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);"
            ],
            [
                "SHAPE_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * defines the shape type of the custom circuit\n */\npublic static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();"
            ],
            [
                "LAYOUT_SHAPE_DELTA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Defines the distance to the previous pin. Used by the layout shape type\n */\npublic static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));"
            ],
            [
                "TERM_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);"
            ],
            [
                "TERM_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);"
            ],
            [
                "CYCLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break timeout cycles\n */\npublic static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);"
            ],
            [
                "ENABLED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break enabled\n */\npublic static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();"
            ],
            [
                "VALUE_IS_PROBE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to make a value a probe\n */\npublic static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "IS_PROGRAM_MEMORY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();"
            ],
            [
                "IS_PROGRAM_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();"
            ],
            [
                "AUTO_RELOAD_ROM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the ROMs auto load function\n */\npublic static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();"
            ],
            [
                "LAST_DATA_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The last used ROM data file\n */\npublic static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();"
            ],
            [
                "SHOW_DATA_TABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data table window\n */\npublic static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH_MICRO",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window in single gate mode\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();"
            ],
            [
                "ADD_VALUE_TO_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to add the value to the measurement graph\n */\npublic static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();"
            ],
            [
                "MICRO_STEP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the single gate mode in the embedded data view\n */\npublic static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);"
            ],
            [
                "MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the embedded data view\n */\npublic static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);"
            ],
            [
                "SETTINGS_MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the default data view\n */\npublic static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);"
            ],
            [
                "IS_HIGH_Z",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable high z mode at an input\n */\npublic static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "AVOID_ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to avoid active low at an input\n */\npublic static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the description of an element\n */\npublic static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");"
            ],
            [
                "NETNAME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A net name\n */\npublic static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");"
            ],
            [
                "SETTINGS_IEEE_SHAPES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * shape setting\n */\npublic static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();"
            ],
            [
                "SETTINGS_LANGUAGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI Language\n */\npublic static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();"
            ],
            [
                "SETTINGS_DEFAULT_TREESELECT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Default state of the tree view\n */\npublic static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);"
            ],
            [
                "SETTINGS_EXPRESSION_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI expression string representation\n */\npublic static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);"
            ],
            [
                "SETTINGS_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the grid\n */\npublic static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();"
            ],
            [
                "SETTINGS_SHOW_WIRE_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the wire bits view\n */\npublic static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);"
            ],
            [
                "SETTINGS_MAC_MOUSE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the MAC mouse mode\n */\npublic static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables tunnel rename dialog\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);"
            ],
            [
                "SETTINGS_RENAME_LABELS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables renaming of labels ending with numbers while copying\n */\npublic static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);"
            ],
            [
                "SETTINGS_OPEN_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables remote port\n */\npublic static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();"
            ],
            [
                "SETTINGS_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * remote port\n */\npublic static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);"
            ],
            [
                "OSCILLATION_DETECTION_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Counter used to detect oscillations\n */\npublic static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);"
            ],
            [
                "INT_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();"
            ],
            [
                "PROBE_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());"
            ],
            [
                "FIXED_POINT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * fixed point fractional binary digits\n */\npublic static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();"
            ],
            [
                "GRAPHIC_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);"
            ],
            [
                "GRAPHIC_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);"
            ],
            [
                "RELAY_NORMALLY_CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a relay to indicate if it is normally open or normally closed.\n */\npublic static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();"
            ],
            [
                "POLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Number of poles in the double throw relay\n */\npublic static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();"
            ],
            [
                "BARREL_SHIFTER_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to select the shift mode\n */\npublic static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());"
            ],
            [
                "DIRECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate shift direction\n */\npublic static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());"
            ],
            [
                "BARREL_SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate if shift value is signed\n */\npublic static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);"
            ],
            [
                "COMMON_CONNECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to indicate if the 7-seg display has a common cathode output\n */\npublic static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();"
            ],
            [
                "COMMON_CONNECTION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to define the common connection type\n */\npublic static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();"
            ],
            [
                "LED_PERSISTENCE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);"
            ],
            [
                "LED_PERSIST_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();"
            ],
            [
                "SETTINGS_ATF1502_FITTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_ATMISP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Flash software for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();"
            ],
            [
                "ROW_DATA_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * row bits in led matrix\n */\npublic static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);"
            ],
            [
                "COL_ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * column address bits in led matrix\n */\npublic static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);"
            ],
            [
                "LOCKED_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * In locked mode the circuit can not be modified\n */\npublic static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);"
            ],
            [
                "PINNUMBER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin number\n */\npublic static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();"
            ],
            [
                "PINCOUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin count\n */\npublic static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));"
            ],
            [
                "INVERTER_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * contains the input inverter config\n */\npublic static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());"
            ],
            [
                "BACKGROUND_COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Background Color of nested circuits\n */\npublic static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));"
            ],
            [
                "SETTINGS_FONT_SCALING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the screen resolution\n */\npublic static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_USE_EQUALS_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses the equals key instead of the plus key.\n */\npublic static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;"
            ],
            [
                "WITH_ENABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if a enable input is needed\n */\npublic static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);"
            ],
            [
                "FET_UNIDIRECTIONAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true to simulate a unidirectional FET\n */\npublic static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);"
            ],
            [
                "ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if component is active low\n */\npublic static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();"
            ],
            [
                "MAP_TO_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if button is mapped to the keyboard\n */\npublic static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();"
            ],
            [
                "SETTINGS_LIBRARY_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf1502\n */\npublic static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_JAR_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A jar containing custom java components\n */\npublic static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "ROMMANAGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The manager which contains all the roms data\n */\npublic static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();"
            ],
            [
                "APPLICATION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The type of the external process\n */\npublic static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());"
            ],
            [
                "EXTERNAL_INPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The inputs used by the external process\n */\npublic static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");"
            ],
            [
                "EXTERNAL_OUTPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The outputs used by the external process\n */\npublic static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");"
            ],
            [
                "EXTERNAL_CODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);"
            ],
            [
                "EXTERNAL_CODE_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));"
            ],
            [
                "SETTINGS_GHDL_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to ghdl\n */\npublic static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();"
            ],
            [
                "GHDL_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The ghdl options\n */\npublic static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "IVERILOG_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The iverilog options\n */\npublic static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "SETTINGS_IVERILOG_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to iverilog installation directory\n */\npublic static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();"
            ],
            [
                "CUSTOM_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Shape used to represent a visual element\n */\npublic static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));"
            ],
            [
                "PRELOAD_PROGRAM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * True if a program is loaded to the simulator at startup\n */\npublic static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();"
            ],
            [
                "BIG_ENDIAN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);"
            ],
            [
                "PROGRAM_TO_PRELOAD",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The file to preload as a program at startup\n */\npublic static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "BIG_ENDIAN_SETTING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "WIDE_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects a wide shape\n */\npublic static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();"
            ],
            [
                "RECT_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of the rectangle\n */\npublic static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);"
            ],
            [
                "RECT_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the height of the rectangle\n */\npublic static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);"
            ],
            [
                "RECT_INSIDE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();"
            ],
            [
                "RECT_BOTTOM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();"
            ],
            [
                "RECT_RIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();"
            ],
            [
                "MIDI_CHANNEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);"
            ],
            [
                "MIDI_INSTRUMENT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");"
            ],
            [
                "MIDI_PROG_CHANGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables Program change\n */\npublic static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);"
            ],
            [
                "SETTINGS_TOOLCHAIN_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Stores the IDE settings file\n */\npublic static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();"
            ],
            [
                "GENERICLARGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();"
            ],
            [
                "IS_GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Circuit is generic\n */\npublic static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUTORIAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the tutorial\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();"
            ],
            [
                "SETTINGS_WIRETOOLTIP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the wire tool tips\n */\npublic static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);"
            ],
            [
                "SWITCH_ACTS_AS_INPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The switch acts as input\n */\npublic static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();"
            ],
            [
                "SNAP_TO_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Snaps the element to the grid\n */\npublic static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();"
            ],
            [
                "MIRROR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Mirrors the component\n */\npublic static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "TESTDATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The test data\n */\npublic static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);"
            ],
            [
                "TRIGGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The scope trigger mode\n */\npublic static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());"
            ],
            [
                "PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the telnet port\n */\npublic static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);"
            ],
            [
                "TELNET_ESCAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Telnet escape\n */\npublic static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();"
            ],
            [
                "SKIP_HDL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Skips HDL output for this circuit\n */\npublic static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();"
            ],
            [
                "PREFIX",
                "de.neemann.digital.core.basic",
                "FanIn",
                "/**\n * The inputs name prefix\n */\npublic static final String PREFIX = \"In_\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NOr",
                "/**\n * The NOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "And",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XNOr",
                "/**\n * The XNOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XOr",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Not",
                "/**\n * The Not description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NAnd",
                "/**\n * The NAnd description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Or",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "STARTED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STARTED event\n */\npublic static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CLOSED event\n */\npublic static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);"
            ],
            [
                "POSTCLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.POSTCLOSED event\n */\npublic static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);"
            ],
            [
                "STEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STEP event\n */\npublic static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);"
            ],
            [
                "CHECKBURN",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CHECKBURN event\n */\npublic static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);"
            ],
            [
                "MICROSTEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.MICROSTEP event\n */\npublic static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);"
            ],
            [
                "RUN_TO_BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK event\n */\npublic static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);"
            ],
            [
                "RUN_TO_BREAK_TIMEOUT",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK_TIMEOUT event\n */\npublic static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);"
            ],
            [
                "BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.BREAK event\n */\npublic static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGPFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "NFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGNFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "PFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "TransGate",
                "/**\n * The transmission gate description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "SwitchDT",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Relay",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "RelayDT",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Switch",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Fuse",
                "/**\n * The fuse description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Reset",
                "/**\n * The Reset description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Stop",
                "/**\n * The Stop element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Decoder",
                "/**\n * The Decoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Delay",
                "/**\n * The Delay description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Driver",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "DriverInvSel",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "PriorityEncoder",
                "/**\n * The PriorityEncoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BusSplitter",
                "/**\n * The bus splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * The splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Multiplexer",
                "/**\n * The Multiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BitSelector",
                "/**\n * The Bit Selector description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * The Break description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Clock",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "AsyncSeq",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Demultiplexer",
                "/**\n * The Demultiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopDAsync",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopD",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRSAsync",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopT",
                "/**\n * The T-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJKAsync",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJK",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "Monoflop",
                "/**\n * The Monoflop's description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRS",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BarrelShifter",
                "/**\n * The barrel shifter description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Mul",
                "/**\n * The multiplier description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Neg",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitExtender",
                "/**\n * Description of the sign extend component.\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Add",
                "/**\n * The adders description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Div",
                "/**\n * The dividers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "PRNG",
                "/**\n * The element type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Sub",
                "/**\n * The subtractors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Comparator",
                "/**\n * The comparators description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitCount",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "EMPTY_LIST",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * An empty list\n */\npublic static final ObservableValues EMPTY_LIST = new ObservableValues();"
            ],
            [
                "DEFAULT_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The default formatter\n */\npublic static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;"
            ],
            [
                "HEX_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The hexadecimal formatter\n */\npublic static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "External",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "ExternalFile",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DEFAULT_RAD",
                "de.neemann.digital.fsm",
                "State",
                "/**\n * The default state radius\n */\nstatic final int DEFAULT_RAD = 70;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "Lang",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "InstanceHolder",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.testing",
                "TestCaseElement",
                "/**\n * The TestCaseElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();"
            ],
            [
                "STATENAMES",
                "de.neemann.digital.analyse",
                "TruthTableTableModel",
                "/**\n * String representation of the states\n */\npublic static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };"
            ],
            [
                "ONE",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant true or one\n */\npublic static final Constant ONE = new Constant(true);"
            ],
            [
                "ZERO",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant false or zero\n */\npublic static final Constant ZERO = new Constant(false);"
            ],
            [
                "PRIMARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the primary panel\n */\npublic static final String PRIMARY = \"primary\";"
            ],
            [
                "SECONDARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the secondary panel\n */\npublic static final String SECONDARY = \"secondary\";"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * The single EditorFactory instance.\n */\nstatic final EditorFactory INSTANCE = new EditorFactory();"
            ],
            [
                "MAX_TERMINAL_STORED",
                "de.neemann.digital.gui.components.terminal",
                "ConsoleTerminal",
                "/**\n * Max amount of characters stored\n */\npublic static final int MAX_TERMINAL_STORED = 2048;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Terminal",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Keyboard",
                "/**\n * The keyboard description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "FAILED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for failed tests\n */\nstatic final Color FAILED_COLOR = new Color(255, 200, 200);"
            ],
            [
                "PASSED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for passed tests\n */\nstatic final Color PASSED_COLOR = new Color(200, 255, 200);"
            ],
            [
                "ICON_DELETE",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The delete icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");"
            ],
            [
                "ICON_COPY",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The copy icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "VGA",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "GraphicCard",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "LedMatrix",
                "/**\n * the LED-Matrix description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "ScopeTrigger",
                "/**\n * The ScopeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);"
            ],
            [
                "DATADESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The DataElement description\n */\npublic static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "TEXTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The TextElement description\n */\npublic static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "RECTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The shape for the rectangle\n */\npublic static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "LEFT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to left align the digits\n */\npublic final static float LEFT = 0.0f;"
            ],
            [
                "CENTER",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to center the digits\n */\npublic final static float CENTER = 0.5f;"
            ],
            [
                "RIGHT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to right align the digits\n */\npublic final static float RIGHT = 1.0f;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "Settings",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "SettingsHolder",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "BASE_FILE_KEY",
                "de.neemann.digital.hdl.hgs",
                "Context",
                "/**\n * Key used to store the base file name in the context\n */\npublic static final String BASE_FILE_KEY = \"baseFile\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericInitCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();"
            ],
            [
                "GEN_ARGS_KEY",
                "de.neemann.digital.draw.library",
                "ResolveGenerics",
                "/**\n * Key uses to store the args for the generic circuits\n */\npublic static final String GEN_ARGS_KEY = \"genArgs\";"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "ButtonShape",
                "protected static final int HEIGHT = OUT_SIZE / 2;"
            ],
            [
                "SIZE2",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Half the size of the used raster\n */\npublic static final int SIZE2 = 10;"
            ],
            [
                "SIZE",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * The size of the used raster\n */\npublic static final int SIZE = SIZE2 * 2;"
            ],
            [
                "CIRC",
                "de.neemann.digital.draw.shapes",
                "DILShape",
                "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);"
            ],
            [
                "DOWNSHIFT",
                "de.neemann.digital.draw.shapes",
                "VDDShape",
                "static final int DOWNSHIFT = 4;"
            ],
            [
                "CHARGED_GATE",
                "de.neemann.digital.draw.shapes",
                "FGFETShapeN",
                "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);"
            ],
            [
                "OUT_SIZE",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Size of the normal sized inputs and outputs\n */\npublic static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;"
            ],
            [
                "LATEX_RAD",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);"
            ],
            [
                "WIDTH2",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * half the width of the resistor\n */\npublic static final int WIDTH2 = SIZE2 - 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * height of the resistor\n */\npublic static final int HEIGHT = SIZE + SIZE / 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static final int HEIGHT = 7;"
            ],
            [
                "FRAME",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "/**\n * the Frame of the display\n */\npublic static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.elements",
                "Tunnel",
                "/**\n * The TunnelElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();"
            ],
            [
                "HIGH_CONTRAST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);"
            ],
            [
                "MONOCHROME",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);"
            ],
            [
                "SMALL_IO",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);"
            ],
            [
                "NO_PIN_MARKER",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);"
            ],
            [
                "THINNER_LINES",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);"
            ],
            [
                "HIDE_TEST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);"
            ],
            [
                "NO_SHAPE_FILLING",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);"
            ],
            [
                "LATEX",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);"
            ],
            [
                "PINS_IN_MATH_MODE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SettingsHolder",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to select the color map\n */\npublic static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();"
            ],
            [
                "CUSTOM_COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to define the custom color map\n */\npublic static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();"
            ],
            [
                "MAXLINETHICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * maximal line thickness\n */\npublic static final int MAXLINETHICK = 4;"
            ],
            [
                "NORMAL",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all lines to draw the shapes itself\n */\npublic static final Style NORMAL = new Builder().build();"
            ],
            [
                "DISABLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all disabled elements\n */\npublic static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();"
            ],
            [
                "INOUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for input and output labels\n */\npublic static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();"
            ],
            [
                "FAILED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the failed state lines in the measurement graph\n */\npublic static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();"
            ],
            [
                "PASS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the passed state lines in the measurement graph\n */\npublic static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();"
            ],
            [
                "NORMAL_TEXT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for text which is integral part of the shape.\n * Text which uses this style is always included in sizing!\n * Used for text only elements.\n */\npublic static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();"
            ],
            [
                "THIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin line used for the graphic in the clock or delay shape\n */\npublic static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();"
            ],
            [
                "THIN_FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin filled\n */\npublic static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();"
            ],
            [
                "THICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thick line used for the ground line\n */\npublic static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();"
            ],
            [
                "WIRE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in editing mode\n */\npublic static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "WIRE_LOW",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for low wires in running mode\n */\npublic static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();"
            ],
            [
                "WIRE_HIGH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for high wires in running mode\n */\npublic static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();"
            ],
            [
                "WIRE_HIGHZ",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in high Z state\n */\npublic static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();"
            ],
            [
                "WIRE_OUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the output dots\n */\npublic static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();"
            ],
            [
                "FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Filled style used to fill the splitter or the dark LEDs\n */\npublic static final Style FILLED = new Builder().setFilled(true).build();"
            ],
            [
                "DASH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the grid in the graph\n */\npublic static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();"
            ],
            [
                "SHAPE_PIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();"
            ],
            [
                "SHAPE_SPLITTER",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text for splitters\n */\npublic static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();"
            ],
            [
                "WIRE_VALUE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();"
            ],
            [
                "WIRE_BITS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the wire bit number\n */\npublic static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();"
            ],
            [
                "HIGHLIGHT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * highlight color used for the circles to mark an element\n */\npublic static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "ERROR",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * error color used for the circles to mark an element\n */\npublic static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "BLANK",
                "de.neemann.digital.draw.graphics.text.text",
                "Blank",
                "/**\n * the Blank instance\n */\npublic static final Blank BLANK = new Blank();"
            ],
            [
                "LOOK_AT_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String LOOK_AT_ALIAS = \"lookAt\";"
            ],
            [
                "REF_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String REF_ALIAS = \"ref\";"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "circuit",
                "de.neemann.digital.draw.elements",
                "Circuit"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "toString",
                "de.neemann.digital.gui.components.modification",
                "ModifyMeasurementOrdering",
                "@Override\npublic String toString() {\n    return Lang.get(\"mod_modifiedMeasurementOrdering\");\n}"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "isPinPos",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public boolean isPinPos(Vector arg0)"
            ],
            [
                "isWireAt",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public boolean isWireAt(Vector arg0)"
            ],
            [
                "getOutputNames",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public ObservableValues getOutputNames() throws PinException"
            ],
            [
                "getMeasurementOrdering",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public List<String> getMeasurementOrdering()"
            ],
            [
                "copyElementsInRect",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public Circuit.RectContainer copyElementsInRect(Vector arg0, Vector arg1, ShapeFactory arg2)"
            ],
            [
                "getElementsToHighlight",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public ArrayList<Drawable> getElementsToHighlight(Vector arg0, Vector arg1)"
            ],
            [
                "getTestCases",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public List<Circuit.TestCase> getTestCases()"
            ],
            [
                "getInputNames",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public PinDescription[] getInputNames() throws PinException"
            ],
            [
                "findElements",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public ArrayList<VisualElement> findElements(String arg0)"
            ],
            [
                "getElementAt",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public VisualElement getElementAt(Vector arg0, boolean arg1)"
            ],
            [
                "add",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public Circuit add(VisualElement arg0)"
            ],
            [
                "getAttributes",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public ElementAttributes getAttributes()"
            ],
            [
                "getOrigin",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public File getOrigin()"
            ],
            [
                "copyElementsToMove",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public ArrayList<Movable> copyElementsToMove(Vector arg0, Vector arg1, ShapeFactory arg2)"
            ],
            [
                "createDeepCopy",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public Circuit createDeepCopy()"
            ],
            [
                "add",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public Circuit add(Wire arg0)"
            ],
            [
                "getWireAt",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public Wire getWireAt(Vector arg0, int arg1)"
            ],
            [
                "add",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public Circuit add(ArrayList<Wire> arg0)"
            ],
            [
                "getElementListAt",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public List<VisualElement> getElementListAt(Vector arg0, boolean arg1)"
            ],
            [
                "getElementAt",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public VisualElement getElementAt(Vector arg0)"
            ],
            [
                "createShallowCopy",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public Circuit createShallowCopy()"
            ],
            [
                "getElements",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public List<VisualElement> getElements(Circuit.ElementFilter arg0)"
            ],
            [
                "getWires",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public ArrayList<Wire> getWires()"
            ],
            [
                "getElementsToMove",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public ArrayList<Movable> getElementsToMove(Vector arg0, Vector arg1)"
            ],
            [
                "getElements",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "public ArrayList<VisualElement> getElements()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "createDeepCopy",
                "de.neemann.digital.undo",
                "Copyable",
                "public abstract A createDeepCopy()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 26715,
        "oracle": "v == null;",
        "oracleType": "EXCEPT_POST",
        "projectName": "Digital",
        "packageName": "de.neemann.digital.draw.graphics",
        "className": "TransformMatrix",
        "javadocTag": "",
        "methodJavadoc": "    /**\n     * Transforms a direction vector.\n     * Ignores the translation part of the transformation.\n     *\n     * @param v the vector to transform\n     * @return the transformed vector\n     */",
        "methodSourceCode": "public VectorFloat transformDirection(VectorInterface v){\n    return new VectorFloat(v.getXFloat() * a + v.getYFloat() * b, v.getXFloat() * c + v.getYFloat() * d);\n}",
        "classJavadoc": "/**\n * A Matrix transformation\n */",
        "classSourceCode": "/*\n * Copyright (c) 2018 Helmut Neemann.\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.draw.graphics;\n\n/**\n * A Matrix transformation\n */\npublic class TransformMatrix implements Transform {\n\n\n    /**\n     * Creates a rotation.\n     * Rotates in mathematically positive direction. Takes into account that\n     * in Digital the y-axis goes downwards.\n     *\n     * @param w the angle in 360 grad units\n     * @return the transformation\n     */\n    public static TransformMatrix rotate(double w) {\n        final double phi = w / 180 * Math.PI;\n        float cos = (float) Math.cos(phi);\n        float sin = (float) Math.sin(phi);\n        return new TransformMatrix(cos, -sin, sin, cos, 0, 0);\n    }\n\n    /**\n     * Creates a scaling transformation\n     *\n     * @param sx scaling in x direction\n     * @param sy scaling in y direction\n     * @return the transformation\n     */\n    public static TransformMatrix scale(float sx, float sy) {\n        return new TransformMatrix(sx, 0, 0, sy, 0, 0);\n    }\n\n    final float a;\n    final float b;\n    final float c;\n    final float d;\n    final float x;\n    final float y;\n\n    /**\n     * Creates a new instance\n     *\n     * @param a A_00\n     * @param b A_10\n     * @param c A_01\n     * @param d A_11\n     * @param x x offset\n     * @param y y offset\n     */\n    public TransformMatrix(float a, float b, float c, float d, float x, float y) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.x = x;\n        this.y = y;\n    }\n\n    @Override\n    public Vector transform(Vector v) {\n        return new Vector(\n                (int) (v.getXFloat() * a + v.getYFloat() * b + x),\n                (int) (v.getXFloat() * c + v.getYFloat() * d + y));\n    }\n\n    @Override\n    public VectorFloat transform(VectorFloat v) {\n        return new VectorFloat(\n                v.getXFloat() * a + v.getYFloat() * b + x,\n                v.getXFloat() * c + v.getYFloat() * d + y);\n    }\n\n\n    /**\n     * Transforms a direction vector.\n     * Ignores the translation part of the transformation.\n     *\n     * @param v the vector to transform\n     * @return the transformed vector\n     */\n    public VectorFloat transformDirection(VectorInterface v) {\n        return new VectorFloat(\n                v.getXFloat() * a + v.getYFloat() * b,\n                v.getXFloat() * c + v.getYFloat() * d);\n    }\n\n    @Override\n    public TransformMatrix getMatrix() {\n        return this;\n    }\n\n    /**\n     * Returns the inverse transformation.\n     *\n     * @return the inverse transformation.\n     */\n    public TransformMatrix invert() {\n        float q = a * d - b * c;\n\n        return new TransformMatrix(d / q, -b / q, -c / q, a / q,\n                (b * y - d * x) / q, (c * x - a * y) / q);\n    }\n\n    /**\n     * @return true if this transformation does no asymmetric scaling.\n     */\n    public boolean isUniform() {\n        return equal(a, d) && equal(b, -c);\n    }\n\n    /**\n     * @return true if this transformation does no rotation\n     */\n    public boolean noRotation() {\n        return equal(b, 0) && equal(c, 0);\n    }\n\n    private static boolean equal(float a, float b) {\n        return Math.abs(a - b) < 1e-7;\n    }\n\n    /**\n     * @return the matrix values\n     */\n    public float[] getValues() {\n        return new float[]{a, b, c, d, x, y};\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "CLI",
                "de.neemann"
            ],
            [
                "Mouse",
                "de.neemann.gui"
            ],
            [
                "LineBreaker",
                "de.neemann.gui"
            ],
            [
                "IconCreator",
                "de.neemann.gui"
            ],
            [
                "ConfirmDialogBuilder",
                "de.neemann.gui"
            ],
            [
                "Resources",
                "de.neemann.gui.language"
            ],
            [
                "Bundle",
                "de.neemann.gui.language"
            ],
            [
                "Language",
                "de.neemann.gui.language"
            ],
            [
                "ToolTipAction",
                "de.neemann.gui"
            ],
            [
                "MyFileChooser",
                "de.neemann.gui"
            ],
            [
                "ClosingWindowListener",
                "de.neemann.gui"
            ],
            [
                "ErrorMessage",
                "de.neemann.gui"
            ],
            [
                "WindowSizeStorage",
                "de.neemann.gui"
            ],
            [
                "Screen",
                "de.neemann.gui"
            ],
            [
                "ToolTipProvider",
                "de.neemann.gui"
            ],
            [
                "InfoDialog",
                "de.neemann.gui"
            ],
            [
                "ValueFormatter",
                "de.neemann.digital.core"
            ],
            [
                "ModelStateObserver",
                "de.neemann.digital.core"
            ],
            [
                "PullDown",
                "de.neemann.digital.core.pld"
            ],
            [
                "Diode",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeBackward",
                "de.neemann.digital.core.pld"
            ],
            [
                "PullUp",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeForward",
                "de.neemann.digital.core.pld"
            ],
            [
                "Node",
                "de.neemann.digital.core"
            ],
            [
                "RAMSinglePort",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualAccess",
                "de.neemann.digital.core.memory"
            ],
            [
                "ByteArrayFromValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "Importer",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "LogisimReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "DataFieldValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "IntelHexReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "BinReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "MultiValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "CounterPreset",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Register",
                "de.neemann.digital.core.memory"
            ],
            [
                "LookUpTable",
                "de.neemann.digital.core.memory"
            ],
            [
                "BlockRAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Counter",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMMangerBase",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManagerFile",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManager",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMInterface",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "EEPROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramCounter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMAsync",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataField",
                "de.neemann.digital.core.memory"
            ],
            [
                "EEPROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMInterface",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataFieldConverter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMSinglePortSel",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramMemory",
                "de.neemann.digital.core.memory"
            ],
            [
                "RegisterFile",
                "de.neemann.digital.core.memory"
            ],
            [
                "ModelStateObserverTyped",
                "de.neemann.digital.core"
            ],
            [
                "Observable",
                "de.neemann.digital.core"
            ],
            [
                "NodeWithoutDelay",
                "de.neemann.digital.core"
            ],
            [
                "ExceptionWithOrigin",
                "de.neemann.digital.core"
            ],
            [
                "ObservableValue",
                "de.neemann.digital.core"
            ],
            [
                "SpeedTest",
                "de.neemann.digital.core"
            ],
            [
                "BurnException",
                "de.neemann.digital.core"
            ],
            [
                "GlobalValues",
                "de.neemann.digital.core"
            ],
            [
                "MIDI",
                "de.neemann.digital.core.io"
            ],
            [
                "RGBLED",
                "de.neemann.digital.core.io"
            ],
            [
                "Out",
                "de.neemann.digital.core.io"
            ],
            [
                "RotEncoder",
                "de.neemann.digital.core.io"
            ],
            [
                "PinControl",
                "de.neemann.digital.core.io"
            ],
            [
                "DipSwitch",
                "de.neemann.digital.core.io"
            ],
            [
                "CommonConnectionType",
                "de.neemann.digital.core.io"
            ],
            [
                "LightBulb",
                "de.neemann.digital.core.io"
            ],
            [
                "Probe",
                "de.neemann.digital.core.io"
            ],
            [
                "Button",
                "de.neemann.digital.core.io"
            ],
            [
                "ButtonLED",
                "de.neemann.digital.core.io"
            ],
            [
                "In",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorUnipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "ProbeMode",
                "de.neemann.digital.core.io"
            ],
            [
                "NotConnected",
                "de.neemann.digital.core.io"
            ],
            [
                "MIDIHelper",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorBipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "Const",
                "de.neemann.digital.core.io"
            ],
            [
                "PowerSupply",
                "de.neemann.digital.core.io"
            ],
            [
                "Ground",
                "de.neemann.digital.core.io"
            ],
            [
                "InValue",
                "de.neemann.digital.core.io"
            ],
            [
                "VDD",
                "de.neemann.digital.core.io"
            ],
            [
                "ServerHolder",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Telnet",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ByteBuffer",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Server",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ElementAttributes",
                "de.neemann.digital.core.element"
            ],
            [
                "Element",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementFactory",
                "de.neemann.digital.core.element"
            ],
            [
                "PinInfo",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescriptions",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "Keys",
                "de.neemann.digital.core.element"
            ],
            [
                "Rotation",
                "de.neemann.digital.core.element"
            ],
            [
                "AttributeListener",
                "de.neemann.digital.core.element"
            ],
            [
                "Key",
                "de.neemann.digital.core.element"
            ],
            [
                "ImmutableList",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementTypeDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "FanIn",
                "de.neemann.digital.core.basic"
            ],
            [
                "NOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "And",
                "de.neemann.digital.core.basic"
            ],
            [
                "XNOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "XOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "Not",
                "de.neemann.digital.core.basic"
            ],
            [
                "NAnd",
                "de.neemann.digital.core.basic"
            ],
            [
                "Function",
                "de.neemann.digital.core.basic"
            ],
            [
                "Or",
                "de.neemann.digital.core.basic"
            ],
            [
                "ExceptionWithOriginInterface",
                "de.neemann.digital.core"
            ],
            [
                "ModelEvent",
                "de.neemann.digital.core"
            ],
            [
                "BacktrackException",
                "de.neemann.digital.core"
            ],
            [
                "PlainSwitch",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGPFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "NFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGNFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PlainSwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "TransGate",
                "de.neemann.digital.core.switching"
            ],
            [
                "SwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Relay",
                "de.neemann.digital.core.switching"
            ],
            [
                "RelayDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Switch",
                "de.neemann.digital.core.switching"
            ],
            [
                "Fuse",
                "de.neemann.digital.core.switching"
            ],
            [
                "Reset",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Stop",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Decoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Delay",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Driver",
                "de.neemann.digital.core.wiring"
            ],
            [
                "DataBus",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "SingleBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "ConnectedBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "AbstractBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "BusModelStateObserver",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "CommonBusValue",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "DriverInvSel",
                "de.neemann.digital.core.wiring"
            ],
            [
                "PriorityEncoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BusSplitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Splitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Multiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitSelector",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Break",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Clock",
                "de.neemann.digital.core.wiring"
            ],
            [
                "AsyncSeq",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Demultiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitsException",
                "de.neemann.digital.core"
            ],
            [
                "NodeInterface",
                "de.neemann.digital.core"
            ],
            [
                "NodeException",
                "de.neemann.digital.core"
            ],
            [
                "FlipflopDAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopD",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRSAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopT",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJKAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJK",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "Monoflop",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRS",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopBit",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "BarrelShifter",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Mul",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Neg",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitExtender",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Add",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Div",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "LeftRightFormat",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "PRNG",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Sub",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BarrelShifterMode",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Comparator",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitCount",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "ObservableValues",
                "de.neemann.digital.core"
            ],
            [
                "Value",
                "de.neemann.digital.core"
            ],
            [
                "IntFormat",
                "de.neemann.digital.core"
            ],
            [
                "SyncAccess",
                "de.neemann.digital.core"
            ],
            [
                "Bits",
                "de.neemann.digital.core"
            ],
            [
                "ProcessInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "StdIOInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "ApplicationVerilogStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "Application",
                "de.neemann.digital.core.extern"
            ],
            [
                "External",
                "de.neemann.digital.core.extern"
            ],
            [
                "Port",
                "de.neemann.digital.core.extern"
            ],
            [
                "PortDefinition",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGHDL",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationIVerilog",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationVHDLStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "VHDLTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGeneric",
                "de.neemann.digital.core.extern"
            ],
            [
                "Options",
                "de.neemann.digital.core.extern"
            ],
            [
                "VerilogTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ExternalFile",
                "de.neemann.digital.core.extern"
            ],
            [
                "ProcessStarter",
                "de.neemann.digital.core.extern"
            ],
            [
                "ModelEventType",
                "de.neemann.digital.core"
            ],
            [
                "Observer",
                "de.neemann.digital.core"
            ],
            [
                "ErrorDetector",
                "de.neemann.digital.core"
            ],
            [
                "Statistics",
                "de.neemann.digital.core.stats"
            ],
            [
                "Countable",
                "de.neemann.digital.core.stats"
            ],
            [
                "Model",
                "de.neemann.digital.core"
            ],
            [
                "Signal",
                "de.neemann.digital.core"
            ],
            [
                "StringList",
                "de.neemann.digital"
            ],
            [
                "XStreamValid",
                "de.neemann.digital"
            ],
            [
                "StatsExport",
                "de.neemann.digital.cli"
            ],
            [
                "SVGExport",
                "de.neemann.digital.cli"
            ],
            [
                "CommandLineTester",
                "de.neemann.digital.cli"
            ],
            [
                "CSVWriter",
                "de.neemann.digital.cli"
            ],
            [
                "BasicCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Argument",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLIException",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Muxer",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentKey",
                "de.neemann.digital.cli.cli"
            ],
            [
                "NamedCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLICommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentBase",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CircuitLoader",
                "de.neemann.digital.cli"
            ],
            [
                "Main",
                "de.neemann.digital.cli"
            ],
            [
                "Modification",
                "de.neemann.digital.undo"
            ],
            [
                "Modifications",
                "de.neemann.digital.undo"
            ],
            [
                "ModifyException",
                "de.neemann.digital.undo"
            ],
            [
                "Copyable",
                "de.neemann.digital.undo"
            ],
            [
                "UndoManager",
                "de.neemann.digital.undo"
            ],
            [
                "ChangedListener",
                "de.neemann.digital.undo"
            ],
            [
                "CircuitRepresentation",
                "de.neemann.digital.fsm"
            ],
            [
                "Transition",
                "de.neemann.digital.fsm"
            ],
            [
                "Movable",
                "de.neemann.digital.fsm"
            ],
            [
                "MouseMovable",
                "de.neemann.digital.fsm"
            ],
            [
                "Optimizer",
                "de.neemann.digital.fsm"
            ],
            [
                "Permute",
                "de.neemann.digital.fsm"
            ],
            [
                "FiniteStateMachineException",
                "de.neemann.digital.fsm"
            ],
            [
                "TransitionTableCreator",
                "de.neemann.digital.fsm"
            ],
            [
                "ValueParser",
                "de.neemann.digital.fsm"
            ],
            [
                "WaitGroup",
                "de.neemann.digital.fsm"
            ],
            [
                "FSMComponent",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMFrame",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "OptimizerDialog",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMDemos",
                "de.neemann.digital.fsm"
            ],
            [
                "FSM",
                "de.neemann.digital.fsm"
            ],
            [
                "State",
                "de.neemann.digital.fsm"
            ],
            [
                "Lang",
                "de.neemann.digital.lang"
            ],
            [
                "LineListenerResolveDontCare",
                "de.neemann.digital.testing"
            ],
            [
                "TestingDataException",
                "de.neemann.digital.testing"
            ],
            [
                "UnitTester",
                "de.neemann.digital.testing"
            ],
            [
                "FolderTestRunner",
                "de.neemann.digital.testing"
            ],
            [
                "TestExecutor",
                "de.neemann.digital.testing"
            ],
            [
                "Transitions",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseDescription",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseElement",
                "de.neemann.digital.testing"
            ],
            [
                "LineEmitterRepeat",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Parser",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppenderBits",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ParserException",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Context",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ModelInitializer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Expression",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterList",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestRow",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitter",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterWhile",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterSimple",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Random",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "SignExtend",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "IfThenElse",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "Function",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "LineListener",
                "de.neemann.digital.testing.parser"
            ],
            [
                "VirtualSignal",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppender",
                "de.neemann.digital.testing.parser"
            ],
            [
                "OperatorPrecedence",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestResultListener",
                "de.neemann.digital.testing"
            ],
            [
                "MatchedValue",
                "de.neemann.digital.testing"
            ],
            [
                "TestResult",
                "de.neemann.digital.testing"
            ],
            [
                "MinimizerInterface",
                "de.neemann.digital.analyse"
            ],
            [
                "LabelNumbering",
                "de.neemann.digital.analyse"
            ],
            [
                "ModelAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "CSVImporter",
                "de.neemann.digital.analyse"
            ],
            [
                "BoolTableExpanded",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableTableModel",
                "de.neemann.digital.analyse"
            ],
            [
                "TableReducer",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "PrimeSelector",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForce",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "LargestFirst",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForceGetAll",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "PrimeSelectorDefault",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BoolTableByteArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "IndependentChecker",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskey",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableExpression",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableBoolArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTable",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRows",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "ThreeStateValue",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskeyExam",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRow",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TruthTableConverter",
                "de.neemann.digital.analyse"
            ],
            [
                "DetermineJKStateMachine",
                "de.neemann.digital.analyse"
            ],
            [
                "Parser",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ParseException",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ModelAnalyserInfo",
                "de.neemann.digital.analyse"
            ],
            [
                "AnalyseException",
                "de.neemann.digital.analyse"
            ],
            [
                "DependencyAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "SubstituteLibrary",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableFormatterHex",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatter",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterTestCase",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterCSV",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterLaTeX",
                "de.neemann.digital.analyse.format"
            ],
            [
                "MinimizerQuineMcCluskey",
                "de.neemann.digital.analyse"
            ],
            [
                "ContextFiller",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "BitSetter",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ContextMap",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Operation",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Context",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NInputs",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NOr",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "ExpressionModifier",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NAnd",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "Constant",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Variable",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionException",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityInclNotVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Equals",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "FormatToExpression",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTable",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Formatter",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatterException",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTableLatex",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Not",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "VariableVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NamedExpression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "MinimizerQuineMcCluskeyExam",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTable",
                "de.neemann.digital.analyse"
            ],
            [
                "SplitPinString",
                "de.neemann.digital.analyse"
            ],
            [
                "CycleDetector",
                "de.neemann.digital.analyse"
            ],
            [
                "DigitalRemoteInterface",
                "de.neemann.digital.gui"
            ],
            [
                "TextSearchFilter",
                "de.neemann.digital.gui"
            ],
            [
                "ExportZipAction",
                "de.neemann.digital.gui"
            ],
            [
                "SettingsBase",
                "de.neemann.digital.gui"
            ],
            [
                "DocumentationLocator",
                "de.neemann.digital.gui"
            ],
            [
                "InitialTutorial",
                "de.neemann.digital.gui.tutorial"
            ],
            [
                "InsertAction",
                "de.neemann.digital.gui"
            ],
            [
                "StatusInterface",
                "de.neemann.digital.gui"
            ],
            [
                "SearchTextField",
                "de.neemann.digital.gui"
            ],
            [
                "SaveAsHelper",
                "de.neemann.digital.gui"
            ],
            [
                "FileHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ReleaseInfo",
                "de.neemann.digital.gui.release"
            ],
            [
                "CheckForNewRelease",
                "de.neemann.digital.gui.release"
            ],
            [
                "StateInterface",
                "de.neemann.digital.gui.state"
            ],
            [
                "StateManager",
                "de.neemann.digital.gui.state"
            ],
            [
                "State",
                "de.neemann.digital.gui.state"
            ],
            [
                "CircuitScrollPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "ItemPicker",
                "de.neemann.digital.gui.components"
            ],
            [
                "LibraryTreeModel",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "SelectTree",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "WindowPosManager",
                "de.neemann.digital.gui.components"
            ],
            [
                "CustomShapeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "TransformHolder",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "BehavioralFixtureCreator",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorFactory",
                "de.neemann.digital.gui.components"
            ],
            [
                "OrderMerger",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementOrderer",
                "de.neemann.digital.gui.components"
            ],
            [
                "ModifyMoveSelected",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteRect",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWires",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfVisualElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyCircuitAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveAndRotElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMeasurementOrdering",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttribute",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "DataEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "CircuitModifierPostClosed",
                "de.neemann.digital.gui.components"
            ],
            [
                "CharDeleter",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "ConsoleTerminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Terminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalInterface",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Keyboard",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "KeyboardDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Editor",
                "de.neemann.digital.gui.components"
            ],
            [
                "VarRectList",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMap",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapComponent",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapDialog",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "MapLayout",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughException",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "CircuitTransferable",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementHelpDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "TestCaseDescriptionDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ValueTableDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestCaseDescriptionEditor",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestAllDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ExpressionListenerOptimizeJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "LaTeXExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "HardwareDescriptionGenerator",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateFile",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateCUPL",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "ExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderOutputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AllSolutionsDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerCSVCondensed",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "BuilderExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionComponent",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "PlainTextExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableReorderManager",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ShowStringDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderInputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ProgressDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "CheckResultListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerStore",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AttributeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ProbeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ColorSchemeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "ROMEditorDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "LabelGenerator",
                "de.neemann.digital.gui.components"
            ],
            [
                "SingleValueDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ExpressionDialog",
                "de.neemann.digital.gui.components.expression"
            ],
            [
                "CircuitComponent",
                "de.neemann.digital.gui.components"
            ],
            [
                "VGA",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicCard",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrix",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "VGADialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "MoveFocusTo",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "ConstraintsBuilder",
                "de.neemann.digital.gui.components"
            ],
            [
                "ScopeTrigger",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphDialog",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphComponent",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "DummyElement",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "ValueTableObserver",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "CircuitModifier",
                "de.neemann.digital.gui.components"
            ],
            [
                "CopiedElementLabelRenamer",
                "de.neemann.digital.gui.components"
            ],
            [
                "TextLineNumber",
                "de.neemann.digital.gui.components"
            ],
            [
                "InsertHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ProgramMemoryLoader",
                "de.neemann.digital.gui"
            ],
            [
                "Main",
                "de.neemann.digital.gui"
            ],
            [
                "StatsDialog",
                "de.neemann.digital.gui"
            ],
            [
                "WindowManager",
                "de.neemann.digital.gui"
            ],
            [
                "Settings",
                "de.neemann.digital.gui"
            ],
            [
                "LibrarySelector",
                "de.neemann.digital.gui"
            ],
            [
                "DigitalUncaughtExceptionHandler",
                "de.neemann.digital.gui"
            ],
            [
                "NumberingWizard",
                "de.neemann.digital.gui"
            ],
            [
                "HandlerInterface",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteSever",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteException",
                "de.neemann.digital.gui.remote"
            ],
            [
                "DigitalHandler",
                "de.neemann.digital.gui.remote"
            ],
            [
                "ModelModifier",
                "de.neemann.digital.gui"
            ],
            [
                "VerilogCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogRenaming",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogGenerator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogTestBenchCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogElement",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogTemplate",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogLibrary",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "CodePrinter",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "CodePrinterStr",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "Statements",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Parser",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ParserException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Statement",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Context",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "FirstClassFunctionCall",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "InnerFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "JavaClass",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "FirstClassFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Func",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Function",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSEvalException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ReferenceToFunc",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToStruct",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToArray",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Reference",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToVar",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Value",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSMap",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSArray",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Separator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLLibrary",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLRenaming",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLGenerator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLEntity",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplate",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplateFunctions",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTestBenchCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "HDLModel",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNode",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNet",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "Printable",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLException",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLPort",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HasName",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "InlineManyToOne",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeAssignments",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "Optimization",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeConstants",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "ReplaceOneToMany",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NameConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "OptimizeExpressions",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "RemoveConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NodeSorterExpressionBased",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "HDLNodeSplitterManyToOne",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeCustom",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeAssignment",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLCircuit",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "ExprVar",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Visitor",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprVarRange",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExpressionOptimizer",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprNot",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprConstant",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprOperate",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprUsingNet",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "HDLNodeBuildIn",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLClockIntegrator",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockIntegratorGeneric",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockInfo",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "HDLNodeSplitterOneToMany",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "FileLocator",
                "de.neemann.digital"
            ],
            [
                "ValueTable",
                "de.neemann.digital.data"
            ],
            [
                "ValueTableModel",
                "de.neemann.digital.data"
            ],
            [
                "DataPlotter",
                "de.neemann.digital.data"
            ],
            [
                "Value",
                "de.neemann.digital.data"
            ],
            [
                "ExpressionExporter",
                "de.neemann.digital.builder"
            ],
            [
                "ExpressionToFileExporter",
                "de.neemann.digital.builder"
            ],
            [
                "RotationByteArrayOutputStream",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "TT2Exporter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "StartATF150xFitter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "OSExecute",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "CreateCHN",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDevice",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDialog",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PL",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATF150xCuplExporter",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PinMap",
                "de.neemann.digital.builder"
            ],
            [
                "PinMapException",
                "de.neemann.digital.builder"
            ],
            [
                "FragmentExpression",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisualElement",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentSameInValue",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "CircuitBuilder",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisitor",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVariable",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Fragment",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Box",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Gal16v8JEDECExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CuplExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "BuilderCollectorGAL",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CleanNameBuilder",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderCollector",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderInterface",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderException",
                "de.neemann.digital.builder"
            ],
            [
                "Gal22v10JEDECExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "Gal22v10CuplExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "FuseMap",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFillerException",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFiller",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "JedecWriter",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "GenericCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibrary",
                "de.neemann.digital.draw.library"
            ],
            [
                "GenericInitCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "Visitor",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryListener",
                "de.neemann.digital.draw.library"
            ],
            [
                "JarComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibraryFolder",
                "de.neemann.digital.draw.library"
            ],
            [
                "CustomElement",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundNotification",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundException",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentSource",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryInterface",
                "de.neemann.digital.draw.library"
            ],
            [
                "ResolveGenerics",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryNode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementTypeDescriptionCustom",
                "de.neemann.digital.draw.library"
            ],
            [
                "InvalidNodeException",
                "de.neemann.digital.draw.library"
            ],
            [
                "NumStringComparator",
                "de.neemann.digital.draw.library"
            ],
            [
                "InputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Interactor",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Drawable",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeBackwardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FuseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DILShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DipSwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LightBulbShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LayoutShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PolarityAwareLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ConstShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BreakShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TextShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegHexShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ProbeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "NotConnectedShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "StepperMotorShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BitSelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericInitCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RectShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "VDDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RAMShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ScopeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DemuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BusSplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullUpShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TestCaseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TunnelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PinControlShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FGFETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TransGateShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ResetShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeForewardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SixteenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "CustomCircuitShapeType",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "InteractorInterface",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeSpecificMatch",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RGBLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RotEncoderShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "IEEEGenericShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEENotShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEAndShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEXOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "ObservableValueReader",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SvgTemplate",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "TransformParser",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "Context",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgException",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgImporter",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "CustomShapeDescription",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "CustomShape",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "FGFETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "OutputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GroundShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "AsyncClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Shape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MissingShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeFactory",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullDownShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DriverShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DataShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DotCreator",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Wire",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Movable",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pins",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Circuit",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Tunnel",
                "de.neemann.digital.draw.elements"
            ],
            [
                "PinException",
                "de.neemann.digital.draw.elements"
            ],
            [
                "ElementOrder",
                "de.neemann.digital.draw.elements"
            ],
            [
                "VisualElement",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pin",
                "de.neemann.digital.draw.elements"
            ],
            [
                "IOState",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireMerger",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireConsistencyChecker",
                "de.neemann.digital.draw.elements"
            ],
            [
                "AsyncSequentialClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelEntry",
                "de.neemann.digital.draw.model"
            ],
            [
                "Net",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelCreator",
                "de.neemann.digital.draw.model"
            ],
            [
                "InverterConfig",
                "de.neemann.digital.draw.model"
            ],
            [
                "NetList",
                "de.neemann.digital.draw.model"
            ],
            [
                "RealTimeClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "Polygon",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Orientation",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Vector",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGSettings",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Transform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorKey",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ExportFactory",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicsImage",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorInterface",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformMatrix",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatLaTeX",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicMinMax",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicTransform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorScheme",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Style",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSkipLines",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "GraphicLineCollector",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "PolygonConverter",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorFloat",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformRotate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Graphic",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleHighContrast",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Parser",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "ParseException",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "PlainTextFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "SVGFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "GraphicsFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "LaTeXFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "Decorate",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Text",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Index",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Sentence",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Blank",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Character",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "ExpressionToText",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Simple",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Export",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleMonochrome",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformTranslate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSwing",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "PolygonParser",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGTokenizer",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GifSequenceWriter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "GifExporter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "ConfigCache",
                "de.neemann.digital.toolchain"
            ],
            [
                "Configuration",
                "de.neemann.digital.toolchain"
            ],
            [
                "Command",
                "de.neemann.digital.toolchain"
            ],
            [
                "FileToCreate",
                "de.neemann.digital.toolchain"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "getMouse",
                "de.neemann.gui",
                "Mouse",
                "/**\n * Returns a mouse event interpreter\n *\n * @return a Mouse interface implementation\n */\nstatic Mouse getMouse() {\n    if (Settings.getInstance().get(Keys.SETTINGS_MAC_MOUSE))\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && !e.isControlDown();\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && e.isControlDown();\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isShiftDown();\n            }\n        };\n    else\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1;\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON3;\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isControlDown();\n            }\n        };\n}"
            ],
            [
                "create",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an icon from a resource\n *\n * @param name name of the resource\n * @return the icon\n */\npublic static Icon create(String name) {\n    return new ImageIcon(createImage(name));\n}"
            ],
            [
                "createImage",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image from a resource\n *\n * @param name name of the resource\n * @return the image\n */\npublic static Image createImage(String name) {\n    try {\n        final float scaling = Screen.getInstance().getScaling();\n        if (scaling == 1) {\n            return getImage(name);\n        } else {\n            BufferedImage image = getImageOrNull(name.substring(0, name.length() - 4) + \"_hi.png\");\n            if (image != null) {\n                int w = (int) (image.getWidth() * scaling / 2);\n                int h = (int) (image.getHeight() * scaling / 2);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            } else {\n                LOGGER.info(\"upscaling of \" + name);\n                image = getImage(name);\n                int w = (int) (image.getWidth() * scaling);\n                int h = (int) (image.getHeight() * scaling);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            }\n        }\n    } catch (IOException e) {\n        throw new RuntimeException(\"Image \" + name + \" not found\", e);\n    }\n}"
            ],
            [
                "createImages",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image list from a resource\n *\n * @param names names of the resource\n * @return the image\n */\npublic static ArrayList<Image> createImages(String... names) {\n    try {\n        ArrayList<Image> list = new ArrayList<Image>(names.length);\n        for (String name : names) {\n            list.add(getImage(name));\n        }\n        return list;\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}"
            ],
            [
                "getCTRLMask",
                "de.neemann.gui",
                "ToolTipAction",
                "/**\n * @return the system specific CTRL mask.\n */\npublic static int getCTRLMask() {\n    int mask = InputEvent.CTRL_DOWN_MASK;\n    if (Screen.isMac())\n        mask = InputEvent.META_DOWN_MASK;\n    return mask;\n}"
            ],
            [
                "checkForSave",
                "de.neemann.gui",
                "ClosingWindowListener",
                "/**\n * Used to check for save! No Window closing is performed!\n *\n * @param parent      the Parent frame\n * @param confirmSave the confirmSafe interface\n * @return true if to proceed\n */\npublic static boolean checkForSave(JFrame parent, ConfirmSave confirmSave) {\n    if (confirmSave.isStateChanged()) {\n        int r = new ConfirmDialogBuilder(SAVE_CHANGES_MESSAGE).setTitle(STATE_CHANGED_MESSAGE).setNoOption(NO_MESSAGE).setYesOption(YES_MESSAGE).setCancleOption(CANCEL_MESSAGE).show(parent);\n        if (r == JOptionPane.YES_OPTION || r == JOptionPane.NO_OPTION) {\n            if (r == JOptionPane.YES_OPTION) {\n                confirmSave.saveChanges();\n                return !confirmSave.isStateChanged();\n            } else\n                return true;\n        } else\n            return false;\n    }\n    return true;\n}"
            ],
            [
                "getParentWindow",
                "de.neemann.gui",
                "ErrorMessage",
                "/**\n * Get the parent window of the given component.\n * If the component is a window this window is returned\n *\n * @param parent the parent component\n * @return the window instance\n */\npublic static Window getParentWindow(Component parent) {\n    if (parent == null)\n        return null;\n    else if (parent instanceof Window)\n        return (Window) parent;\n    else\n        return SwingUtilities.getWindowAncestor(parent);\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the Screen instance\n */\npublic static Screen getInstance() {\n    return InstanceHolder.instance;\n}"
            ],
            [
                "getDefaultFontScaling",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the default font scaling in percent\n */\npublic static int getDefaultFontScaling() {\n    if (// macOS has its own retina handling\n    IS_MAC)\n        return 100;\n    int dpi = getDefaultScreenResolution();\n    int s = (dpi * 100) / 96;\n    if (s > 95 && s < 105)\n        s = 100;\n    return s;\n}"
            ],
            [
                "isLinux",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a windows system\n */\npublic static boolean isLinux() {\n    return IS_LINUX;\n}"
            ],
            [
                "isMac",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a mac\n */\npublic static boolean isMac() {\n    return IS_MAC;\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * @return the singleton instance\n */\npublic static InfoDialog getInstance() {\n    if (instance == null)\n        try {\n            instance = new InfoDialog();\n        } catch (IOException e) {\n            System.out.println(\"error reading InfoDialog \" + e.getMessage());\n        }\n    return instance;\n}"
            ],
            [
                "read",
                "de.neemann.digital.core.memory.importer",
                "Importer",
                "/**\n * Reads the given file to a single data field.\n *\n * @param hexFile   the file to read\n * @param dataBits  the bits used in the data field\n * @param bigEndian uses big endian at import\n * @return the data field\n * @throws IOException IOException\n */\npublic static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException {\n    DataField df = new DataField(1024);\n    read(hexFile, new DataFieldValueArray(df, dataBits), bigEndian);\n    return df;\n}"
            ],
            [
                "getOriginOf",
                "de.neemann.digital.core",
                "ExceptionWithOrigin",
                "/**\n * Returns the file or the files that caused the given exception.\n * If no origin is found null is returned.\n *\n * @param e the exception\n * @return the origin or null;\n */\npublic static String getOriginOf(Throwable e) {\n    while (e != null) {\n        if (e instanceof ExceptionWithOriginInterface) {\n            Set<File> origins = ((ExceptionWithOriginInterface) e).getOrigin();\n            if (origins != null && origins.size() > 0) {\n                StringBuilder sb = new StringBuilder();\n                for (File o : origins) {\n                    if (o != null) {\n                        if (sb.length() > 0)\n                            sb.append(\", \");\n                        sb.append(o.getName());\n                    }\n                }\n                if (sb.length() > 0)\n                    return sb.toString();\n                else\n                    return null;\n            }\n        }\n        e = e.getCause();\n    }\n    return null;\n}"
            ],
            [
                "zMaskString",
                "de.neemann.digital.core",
                "ObservableValue",
                "static String zMaskString(long value, long highZ, int bits) {\n    StringBuilder sb = new StringBuilder();\n    long m = Bits.up(1, bits - 1);\n    for (int i = 0; i < bits; i++) {\n        if ((highZ & m) != 0) {\n            sb.append(\"z\");\n        } else {\n            if ((value & m) != 0) {\n                sb.append(\"1\");\n            } else {\n                sb.append(\"0\");\n            }\n        }\n        m >>>= 1;\n    }\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core",
                "GlobalValues",
                "/**\n * @return returns the global instance\n */\npublic static GlobalValues getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core.io",
                "MIDIHelper",
                "/**\n * @return the MIDIHelper\n */\npublic static MIDIHelper getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new input\n */\npublic static PinInfo input(String name) {\n    return new PinInfo(name, null, Direction.input);\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name        the pins name\n * @param description the pins description\n * @return the new input\n */\npublic static PinInfo input(String name, String description) {\n    return new PinInfo(name, description, Direction.input);\n}"
            ],
            [
                "output",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new output\n */\npublic static PinInfo output(String name) {\n    return new PinInfo(name, null, Direction.output);\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "PinDescription",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "Direction",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "getKeyByName",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Returns the key of the given name.\n * If key does not exist, null is returned.\n *\n * @param name the name of the key\n * @return the key or null\n */\npublic static Key getKeyByName(String name) {\n    return InstanceHolder.INSTANCE.get(name);\n}"
            ],
            [
                "getKeys",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * @return all available keys\n */\npublic static Iterable<Key> getKeys() {\n    return InstanceHolder.INSTANCE.values();\n}"
            ],
            [
                "combine",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "/**\n * Combines two lists\n *\n * @param a   first list\n * @param b   second list\n * @param <T> the Type of the elements\n * @return the new combined list\n */\npublic static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b) {\n    T[] com = Arrays.copyOf(a.items, a.size() + b.size());\n    System.arraycopy(b.items, 0, com, a.size(), b.size());\n    return new ImmutableList<>(com);\n}"
            ],
            [
                "createSwitchModel",
                "de.neemann.digital.core.switching",
                "PlainSwitch",
                "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException {\n    if (input1 instanceof CommonBusValue) {\n        if (input2 instanceof CommonBusValue) {\n            final CommonBusValue in1 = (CommonBusValue) input1;\n            final CommonBusValue in2 = (CommonBusValue) input2;\n            ObservableValue constant = in1.searchConstant();\n            if (constant != null)\n                return new UniDirectionalSwitch(constant, output2);\n            else {\n                constant = in2.searchConstant();\n                if (constant != null)\n                    return new UniDirectionalSwitch(constant, output1);\n                else\n                    return new RealSwitch(in1, output1, in2, output2);\n            }\n        } else\n            return new UniDirectionalSwitch(input1, output2);\n    } else {\n        if (input2 instanceof CommonBusValue) {\n            return new UniDirectionalSwitch(input2, output1);\n        } else {\n            throw new NodeException(Lang.get(\"err_switchHasNoNet\"), output1, output2);\n        }\n    }\n}"
            ],
            [
                "createOneToN",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a one to N splitter\n *\n * @param bits number of outputs\n * @return the splitter\n */\npublic static Splitter createOneToN(int bits) {\n    Ports in = new Ports();\n    in.add(new Port(0, bits));\n    Ports out = new Ports();\n    for (int i = 0; i < bits; i++) out.add(new Port(i, 1));\n    return new Splitter(in, out);\n}"
            ],
            [
                "createNToOne",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a N to one splitter\n *\n * @param bits number of inputs\n * @return the splitter\n */\npublic static Splitter createNToOne(int bits) {\n    Ports in = new Ports();\n    for (int i = 0; i < bits; i++) in.add(new Port(i, 1));\n    Ports out = new Ports();\n    out.add(new Port(0, bits));\n    return new Splitter(in, out);\n}"
            ],
            [
                "ovs",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * Helper to create a {@link ObservableValues} instance\n *\n * @param items the items\n * @return the created instance\n */\npublic static ObservableValues ovs(ObservableValue... items) {\n    return new ObservableValues(items);\n}"
            ],
            [
                "toShortHex",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * Creates a short hex representation of the given value.\n * Use only to represent a value.\n * If confusion is excluded, the prefix '0x' is omitted.\n * Thus 0x1A3 is converted to \"1A3\" which can not be parsed back to a long because \"0x\" is missing.\n *\n * @param value the value\n * @return the hex string\n */\npublic static String toShortHex(long value) {\n    return toShortHex(value, false);\n}"
            ],
            [
                "up",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value up\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long up(long val, int bits) {\n    if (bits < 64)\n        return val << bits;\n    else\n        return 0;\n}"
            ],
            [
                "down",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value down\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long down(long val, int bits) {\n    if (bits < 64)\n        return val >>> bits;\n    else\n        return 0;\n}"
            ],
            [
                "mask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Creates a bit mask with the lowest [bits] bits set.\n *\n * @param bits the number of 1 bits\n * @return a value with the lowest [bits] bits set.\n */\npublic static long mask(int bits) {\n    if (bits < 64)\n        return (1L << bits) - 1;\n    else\n        return -1;\n}"
            ],
            [
                "signedFlagMask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * calculates the signed flag.\n *\n * @param bits the bit count\n * @return the last used bit ( 1<<(bits-1) )\n */\npublic static long signedFlagMask(int bits) {\n    return up(1, bits - 1);\n}"
            ],
            [
                "isNegative",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Returns true if value is negative\n *\n * @param value the value\n * @param bits  the bit count\n * @return true if the last relevant bit is set\n */\npublic static boolean isNegative(long value, int bits) {\n    return (value & signedFlagMask(bits)) != 0;\n}"
            ],
            [
                "signExtend",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Sign extension of the value.\n * signExtend(3,2) returns -1.\n *\n * @param value the value\n * @param bits  number of bits\n * @return the sign extended value\n */\npublic static long signExtend(long value, int bits) {\n    if (bits >= 64)\n        return value;\n    else {\n        if ((value & signedFlagMask(bits)) == 0)\n            return value;\n        else\n            return value | ~mask(bits);\n    }\n}"
            ],
            [
                "binLn2",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Calculates the number of bits needed to store the given value b.\n *\n * @param b number\n * @return number of bits needed to store b\n */\npublic static int binLn2(long b) {\n    int outBits = 1;\n    while ((1L << outBits) <= b) outBits++;\n    return outBits;\n}"
            ],
            [
                "removeBitFromValue",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Removes a bit from a value.\n * This means it shifts the higher bits down. Behaves like removing an item from a list.\n *\n * @param value the value\n * @param bit   the bit to remove\n * @return the new value\n */\npublic static int removeBitFromValue(int value, int bit) {\n    if (bit > 0) {\n        return ((value & (~((1 << (bit + 1)) - 1))) >>> 1) | (value & ((1 << bit) - 1));\n    } else {\n        return value >>> 1;\n    }\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str the string\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str) throws NumberFormatException {\n    return decode(str, false);\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str         the string\n * @param parseFloats if true also floats are parsed\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str, boolean parseFloats) throws NumberFormatException {\n    if (str == null)\n        return 0;\n    str = str.trim();\n    if (str.length() == 0)\n        return 0;\n    if (str.indexOf(':') >= 0)\n        return decodeFixed(str);\n    if (parseFloats && str.indexOf('.') > -1) {\n        try {\n            if (str.endsWith(\"d\") || str.endsWith(\"D\"))\n                return Double.doubleToLongBits(Double.parseDouble(str.substring(0, str.length() - 1)));\n            else\n                return Float.floatToIntBits(Float.parseFloat(str));\n        } catch (java.lang.NumberFormatException e) {\n            throw new NumberFormatException(str, 0);\n        }\n    }\n    int p = 0;\n    boolean neg = false;\n    if (str.charAt(p) == '-') {\n        neg = true;\n        p++;\n    }\n    if (p >= str.length())\n        throw new NumberFormatException(str, p);\n    boolean wasZero = false;\n    while (str.length() > p && str.charAt(p) == '0') {\n        wasZero = true;\n        p++;\n    }\n    if (p >= str.length())\n        return 0;\n    int radix;\n    if (wasZero) {\n        if (neg)\n            throw new NumberFormatException(str, p);\n        switch(str.charAt(p)) {\n            case 'x':\n            case 'X':\n                radix = 16;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            case 'b':\n            case 'B':\n                radix = 2;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            default:\n                radix = 8;\n        }\n    } else {\n        if (str.charAt(p) == '\\'') {\n            if (neg)\n                throw new NumberFormatException(str, p);\n            p++;\n            if (p == str.length())\n                throw new NumberFormatException(str, p);\n            return str.charAt(p);\n        } else\n            radix = 10;\n    }\n    long val = decode(str, p, radix);\n    if (neg)\n        val = -val;\n    return val;\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes the given string starting at position p\n *\n * @param str   the string to decode\n * @param p     the starting position\n * @param radix the radix\n * @return the value\n * @throws NumberFormatException NumberFormatException\n */\npublic static long decode(String str, int p, int radix) throws NumberFormatException {\n    long val = 0;\n    while (p < str.length()) {\n        int d = Character.digit(str.charAt(p), radix);\n        if (d < 0)\n            throw new NumberFormatException(str, p);\n        val = val * radix + d;\n        p++;\n    }\n    return val;\n}"
            ],
            [
                "getCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Extract the code from the attributes.\n * The code is either stored directly or there is a file given.\n *\n * @param attr the attributes\n * @param root the projects main folder\n * @return the code\n * @throws IOException IOException\n */\nstatic String getCode(ElementAttributes attr, File root) throws IOException {\n    if (attr.contains(Keys.EXTERNAL_CODE))\n        return attr.get(Keys.EXTERNAL_CODE);\n    if (attr.contains(Keys.EXTERNAL_CODE_FILE))\n        return readCode(attr.getFile(Keys.EXTERNAL_CODE_FILE, root));\n    return \"\";\n}"
            ],
            [
                "readCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Reads the code from a file\n *\n * @param file the file\n * @return the code\n * @throws IOException IOException\n */\nstatic String readCode(File file) throws IOException {\n    byte[] data = Files.readAllBytes(file.toPath());\n    return new String(data, StandardCharsets.UTF_8);\n}"
            ],
            [
                "create",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Creates a new application instance\n *\n * @param type the type of the process\n * @param attr the elements attributes\n * @return the created process handler\n */\nstatic Application create(Type type, ElementAttributes attr) {\n    switch(type) {\n        case Generic:\n            return new ApplicationGeneric();\n        case GHDL:\n            return new ApplicationGHDL(attr);\n        case IVERILOG:\n            return new ApplicationIVerilog(attr);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "start",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Helper to start a process.\n * If result value is not null an exception is thrown.\n *\n * @param dir  the folder in which the process is started\n * @param args the argument\n * @return the console output\n * @throws IOException IOException\n */\npublic static String start(File dir, String... args) throws IOException {\n    ProcessBuilder pb = new ProcessBuilder(args).redirectErrorStream(true);\n    if (dir != null)\n        pb.directory(dir);\n    Process p;\n    try {\n        p = pb.start();\n    } catch (IOException e) {\n        throw new CouldNotStartProcessException(Lang.get(\"err_couldNotStartProcess_N\", Arrays.toString(args)), e);\n    }\n    ReaderThread rt = new ReaderThread(p.getInputStream());\n    rt.start();\n    try {\n        int exitValue = p.waitFor();\n        rt.join();\n        String output = rt.toString();\n        if (exitValue != 0)\n            throw new IOException(Lang.get(\"err_exitValueNotNull_N_O\", exitValue, output));\n        return output;\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n}"
            ],
            [
                "joinStrings",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Merges the given string.\n * If all strings are null or empty, null is returned\n *\n * @param strings the strings to join\n * @return the joined string or null\n */\npublic static String joinStrings(String... strings) {\n    StringBuilder sb = new StringBuilder();\n    for (String s : strings) {\n        if (s != null) {\n            String str = s.trim();\n            if (str.length() > 0) {\n                if (sb.length() > 0)\n                    sb.append(\"\\n\");\n                sb.append(str);\n            }\n        }\n    }\n    if (sb.length() > 0)\n        return sb.toString();\n    else\n        return null;\n}"
            ],
            [
                "fromString",
                "de.neemann.digital.cli.cli",
                "Argument",
                "/**\n * Creates a value from a string\n *\n * @param val      the value as a string\n * @param defValue the default value\n * @return the value converted to the type of the default value\n * @throws CLIException CLIException\n */\npublic static Object fromString(String val, Object defValue) throws CLIException {\n    if (defValue instanceof String)\n        return val;\n    else if (defValue instanceof Boolean)\n        switch(val.toLowerCase()) {\n            case \"yes\":\n            case \"1\":\n            case \"true\":\n                return true;\n            case \"no\":\n            case \"0\":\n            case \"false\":\n                return false;\n            default:\n                throw new CLIException(Lang.get(\"cli_notABool_N\", val), 106);\n        }\n    else if (defValue instanceof Integer) {\n        try {\n            return Integer.parseInt(val);\n        } catch (NumberFormatException e) {\n            throw new CLIException(Lang.get(\"cli_notANumber_N\", val), e);\n        }\n    } else\n        throw new CLIException(Lang.get(\"cli_invalidType_N\", defValue.getClass().getSimpleName()), 203);\n}"
            ],
            [
                "fac",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the factorial of a number.\n * If the result is greater as the max long value, the max value is returned.\n *\n * @param n integer\n * @return the factorial of the given number\n */\npublic static long fac(int n) {\n    if (n > 20)\n        return Long.MAX_VALUE;\n    return FAC_TABLE[n];\n}"
            ],
            [
                "getTimeComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the time complexity of optimizing the given fsm\n *\n * @param fsm the fsm\n * @return the time complexity\n */\npublic static long getTimeComplexity(FSM fsm) {\n    List<State> states = fsm.getStates();\n    int size = states.size();\n    int sizeInclDC = 1 << Bits.binLn2(size - 1);\n    if (sizeInclDC > 20)\n        return Long.MAX_VALUE;\n    return fac(sizeInclDC) / fac(sizeInclDC - size);\n}"
            ],
            [
                "calcComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException {\n    TruthTable tt = fsm.createTruthTable(null);\n    MinimizerInterface mi = new MinimizerQuineMcCluskey();\n    ComplexityListener listener = new ComplexityListener(out);\n    for (int i = 0; i < tt.getResultCount(); i++) mi.minimize(tt.getVars(), tt.getResult(i), tt.getResultName(i), listener);\n    return listener.complexity;\n}"
            ],
            [
                "blink",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Blink\n *\n * @return the fsm\n */\npublic static FSM blink() {\n    State off = new State(\"off\");\n    State on = new State(\"on\");\n    return new FSM(off, on).transition(on, off, null).transition(off, on, null);\n}"
            ],
            [
                "rotDecoder",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a debounced rotary switch decoder\n *\n * @return the fsm\n */\npublic static FSM rotDecoder() {\n    State init = new State(\"init\");\n    State top = new State(\"top\");\n    State topSetLeft = new State(\"topSetLeft\").setValues(\"L=1\");\n    State topSetRight = new State(\"topSetRight\").setValues(\"R=1\");\n    State leftTop = new State(\"leftTop\");\n    State leftBottom = new State(\"leftBottom\");\n    State bottom = new State(\"bottom\");\n    State bottomSetLeft = new State(\"bottomSetRight\").setValues(\"R=1\");\n    State bottomSetRight = new State(\"bottomSetLeft\").setValues(\"L=1\");\n    State rightTop = new State(\"rightTop\");\n    State rightBottom = new State(\"rightBottom\");\n    return new FSM(init, top, topSetLeft, leftTop, leftBottom, bottomSetLeft, bottom, bottomSetRight, rightBottom, rightTop, topSetRight).transition(init, top, \"A=0 & B=0\").transition(init, bottom, \"A=1 & B=1\").transition(top, leftTop, \"A=1 & B=0\").transition(top, rightTop, \"A=0 & B=1\").transition(topSetLeft, top, null).transition(topSetRight, top, null).transition(rightTop, top, \"A=0 & B=0\").transition(rightBottom, topSetRight, \"A=0 & B=0\").transition(leftTop, top, \"A=0 & B=0\").transition(leftBottom, topSetLeft, \"A=0 & B=0\").transition(bottom, leftBottom, \"A=1 & B=0\").transition(bottom, rightBottom, \"A=0 & B=1\").transition(bottomSetLeft, bottom, null).transition(bottomSetRight, bottom, null).transition(rightBottom, bottom, \"A=1 & B=1\").transition(rightTop, bottomSetRight, \"A=1 & B=1\").transition(leftBottom, bottom, \"A=1 & B=1\").transition(leftTop, bottomSetLeft, \"A=1 & B=1\");\n}"
            ],
            [
                "counter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a counter\n *\n * @param n the number of states\n * @return the fsm\n */\npublic static FSM counter(int n) {\n    FSM fsm = new FSM();\n    State last = null;\n    for (int i = 0; i < n; i++) {\n        State s = new State(\"\").setNumber(i);\n        fsm.add(s);\n        if (last != null)\n            fsm.transition(last, s, null);\n        last = s;\n    }\n    fsm.transition(last, fsm.getStates().get(0), null);\n    return fsm;\n}"
            ],
            [
                "trafficLight",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLight() {\n    State red = new State(\"red\").setNumber(0).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(1).setValues(\"R=1,Y=1\");\n    State green = new State(\"green\").setNumber(2).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(3).setValues(\"Y=1\");\n    return new FSM(red, redYellow, green, yellow).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "trafficLightMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLightMedwedew() {\n    State init = new State(\"init\").setNumber(0);\n    State red = new State(\"red\").setNumber(1).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(3).setValues(\"R=1, Y=1\");\n    State green = new State(\"green\").setNumber(4).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(2).setValues(\"Y=1\");\n    return new FSM(init, red, redYellow, green, yellow).transition(init, red, null).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "selCounter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM selCounter() {\n    State s0 = new State(\"s0\").setNumber(0);\n    State s1 = new State(\"s1\").setNumber(1);\n    State s2 = new State(\"s2\").setNumber(2);\n    State s3 = new State(\"s3\").setNumber(3);\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, null).transition(s0, s0, \"!T0  !T1\").transition(s1, s2, null).transition(s1, s0, \"T0 !T1\").transition(s2, s3, null).transition(s2, s0, \"!T0 T1\").transition(s3, s0, null);\n}"
            ],
            [
                "stepper",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepper() {\n    State s0 = new State(\"s0\").setNumber(0).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(1).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(2).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(3).setValues(\"P3=1,P0=1\");\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "stepperMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepperMedwedew() {\n    State init = new State(\"init\").setNumber(0).setValues(\"P0=2,P1=2,P2=2,P3=2\");\n    State s0 = new State(\"s0\").setNumber(3).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(6).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(12).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(9).setValues(\"P3=1,P0=1\");\n    return new FSM(init, s0, s1, s2, s3).transition(init, s0, null).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"fsm\", FSM.class);\n    xStream.alias(\"state\", State.class);\n    xStream.alias(\"transition\", Transition.class);\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"vectorf\", VectorFloat.class);\n    xStream.aliasAttribute(VectorFloat.class, \"x\", \"x\");\n    xStream.aliasAttribute(VectorFloat.class, \"y\", \"y\");\n    return xStream;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename filename\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(File filename) throws IOException {\n    final FSM fsm = loadFSM(new FileInputStream(filename));\n    fsm.file = filename;\n    return fsm;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new fsm instance from a stored file\n *\n * @param in the input stream\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        final FSM fsm = (FSM) xStream.fromXML(in);\n        for (Transition t : fsm.transitions) t.setFSM(fsm);\n        for (State s : fsm.states) s.setFSM(fsm);\n        fsm.modified = false;\n        fsm.activeStateTransition = -1;\n        return fsm;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "get",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string of key if no translation present\n */\npublic static String get(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKey(key, params);\n}"
            ],
            [
                "getNull",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string or null if no translation present\n */\npublic static String getNull(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKeyNull(key, params);\n}"
            ],
            [
                "getBundle",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the resource bundle\n */\npublic static Bundle getBundle() {\n    return InstanceHolder.INSTANCE.bundle;\n}"
            ],
            [
                "currentLanguage",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the current language\n */\npublic static Language currentLanguage() {\n    return InstanceHolder.INSTANCE.currentLanguage;\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * Resolves a multilingual user defined string.\n * Allows the user to define multilingual content by using a simple syntax:\n * You can enter strings like \"Word! {{de Welt!}} {{fr Monde!}}\". This method extracts\n * the appropriate string for the current language.\n *\n * @param text the complete text description\n * @return the evaluated text.\n */\npublic static String evalMultilingualContent(String text) {\n    return evalMultilingualContent(text, currentLanguage());\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "static String evalMultilingualContent(String text, Language currentLanguage) {\n    int pos = text.indexOf(\"{{\");\n    if (pos < 0)\n        return text;\n    String def = text.substring(0, pos).trim();\n    do {\n        int p2 = pos + 1;\n        int count = 1;\n        while (count > 0) {\n            char c = text.charAt(p2);\n            if (c == '{')\n                count++;\n            else if (c == '}')\n                count--;\n            p2++;\n            if (p2 == text.length() && count > 0) {\n                p2 = 1;\n                break;\n            }\n        }\n        p2 -= 2;\n        if (p2 > pos + 3) {\n            String l = text.substring(pos + 2, pos + 4);\n            if (l.equalsIgnoreCase(currentLanguage.getName()))\n                return text.substring(pos + 4, p2).trim();\n            if (l.equalsIgnoreCase(\"en\") && def.isEmpty())\n                def = text.substring(pos + 4, p2).trim();\n            pos = text.indexOf(\"{{\", p2);\n        } else\n            return def;\n    } while (pos > 0);\n    return def;\n}"
            ],
            [
                "lowest",
                "de.neemann.digital.testing.parser",
                "OperatorPrecedence",
                "/**\n * @return the lowest operator precedence to start evaluation with\n */\npublic static OperatorPrecedence lowest() {\n    return OR;\n}"
            ],
            [
                "addOne",
                "de.neemann.digital.analyse",
                "ModelAnalyser",
                "/**\n * Adds the \"+1\" to the variables name\n *\n * @param name the vars name\n * @return the modified name\n */\npublic static String addOne(String name) {\n    if (name.endsWith(\"^n\"))\n        return name.substring(0, name.length() - 1) + \"{n+1}\";\n    else\n        return name + \"+1\";\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param file the file\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(File file) throws IOException {\n    return readCSV(new FileReader(file));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the string to read\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(String csv) throws IOException {\n    return readCSV(new StringReader(csv));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the reader\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(Reader csv) throws IOException {\n    BufferedReader r = new BufferedReader(csv);\n    TruthTable tt = readHeader(r);\n    while (true) {\n        String line = r.readLine();\n        if (line == null)\n            return tt;\n        line = line.trim();\n        if (!line.isEmpty())\n            parseLine(tt, line);\n    }\n}"
            ],
            [
                "createDoubledValues",
                "de.neemann.digital.analyse.quinemc",
                "BoolTableByteArray",
                "/**\n * Creates a table where all values added twive\n *\n * @param values the original values\n * @return the new values\n */\npublic static BoolTableByteArray createDoubledValues(BoolTable values) {\n    BoolTableByteArray t = new BoolTableByteArray(values.size() * 2);\n    for (int i = 0; i < values.size(); i++) {\n        int v = values.get(i).asInt();\n        t.set(i * 2, v);\n        t.set(i * 2 + 1, v);\n    }\n    return t;\n}"
            ],
            [
                "simplify",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Simplifies the given expression.\n * If no simplification was found, the original expression is returned unchanged.\n *\n * @param expression the expression to simplify\n * @return the simplified expression\n * @throws ExpressionException ExpressionException\n */\npublic static Expression simplify(Expression expression) throws ExpressionException {\n    int initialCplx = expression.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    Expression newExp = new QuineMcCluskey(expression).simplify().getExpression();\n    int newCplx = newExp.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    if (newCplx < initialCplx)\n        return newExp;\n    else\n        return expression;\n}"
            ],
            [
                "addAnd",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Creates the final expression\n *\n * @param e         the expression to complete\n * @param rows      the rows to add\n * @param variables the variables to use to build the expression\n * @return the expression\n */\npublic static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables) {\n    for (TableRow r : rows) {\n        Expression n = r.getExpression(variables);\n        if (e == null)\n            e = n;\n        else\n            e = or(e, n);\n    }\n    return e;\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from a bool\n *\n * @param bool the bool\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(boolean bool) {\n    if (bool) {\n        return one;\n    } else {\n        return zero;\n    }\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from an int\n * 0 and 1 work as expected, any other value means \"dont care\"\n *\n * @param value the value\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(int value) {\n    switch(value) {\n        case 0:\n            return ThreeStateValue.zero;\n        case 1:\n            return ThreeStateValue.one;\n        default:\n            return ThreeStateValue.dontCare;\n    }\n}"
            ],
            [
                "doImplicitTypeCasts",
                "de.neemann.digital.analyse",
                "SubstituteLibrary",
                "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val) {\n    if (expectedClass == Integer.class && val instanceof Long) {\n        long l = (Long) val;\n        if (l <= Integer.MAX_VALUE && l >= Integer.MIN_VALUE)\n            return (int) l;\n    } else if (expectedClass == Long.class && val instanceof Number) {\n        return ((Number) val).longValue();\n    } else if (expectedClass == Color.class && val instanceof Number) {\n        return new Color(((Number) val).intValue());\n    } else if (expectedClass == Boolean.class && val instanceof Number) {\n        long b = ((Number) val).longValue();\n        return b != 0;\n    } else if (expectedClass == InValue.class) {\n        if (val instanceof Number)\n            return new InValue(((Number) val).longValue());\n        else {\n            try {\n                return new InValue(val.toString());\n            } catch (Bits.NumberFormatException e) {\n                return val;\n            }\n        }\n    } else if (expectedClass == InverterConfig.class && val instanceof java.util.List) {\n        InverterConfig.Builder b = new InverterConfig.Builder();\n        for (Object i : (java.util.List) val) b.add(i.toString());\n        return b.build();\n    } else if (expectedClass == DataField.class && val instanceof java.util.List) {\n        java.util.List list = (java.util.List) val;\n        long[] longs = new long[list.size()];\n        for (int i = 0; i < list.size(); i++) if (list.get(i) instanceof Number)\n            longs[i] = ((Number) list.get(i)).longValue();\n        else\n            return val;\n        return new DataField(longs);\n    } else if (expectedClass == Rotation.class && val instanceof Number) {\n        int r = ((Number) val).intValue();\n        return new Rotation(r % 4);\n    } else if (expectedClass == File.class && val instanceof String) {\n        return new File(val.toString());\n    } else if (expectedClass == TestCaseDescription.class && val instanceof String) {\n        try {\n            return new TestCaseDescription(val.toString());\n        } catch (Exception e) {\n            return val;\n        }\n    } else if (expectedClass.isEnum() && val instanceof Number) {\n        Class<Enum<?>> e = (Class<Enum<?>>) expectedClass;\n        Object[] values = e.getEnumConstants();\n        int index = ((Number) val).intValue();\n        if (index < 0 || index >= values.length)\n            return values[0];\n        else\n            return values[index];\n    }\n    return val;\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Iterable<Expression> exp) {\n    return simplify(new Or(exp, true));\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), true));\n}"
            ],
            [
                "xor",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new XOR expression\n *\n * @param a the expression to XOR\n * @param b the expression to XOR\n * @return the created expression\n */\npublic static Expression xor(Expression a, Expression b) {\n    if (b == Constant.ONE) {\n        return Not.not(a);\n    } else if (b == Constant.ZERO) {\n        return a;\n    } else if (a == Constant.ONE) {\n        return Not.not(b);\n    } else if (a == Constant.ZERO) {\n        return b;\n    } else\n        return simplify(new XOr(a, b));\n}"
            ],
            [
                "orNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression orNoMerge(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), false));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Iterable<Expression> exp) {\n    return simplify(new And(exp, true));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), true));\n}"
            ],
            [
                "andNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression andNoMerge(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), false));\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifier\n *\n * @param expression the expression to modify\n * @param modifier   the modifier to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier modifier) {\n    expression.modify(modifier);\n    return modifier.modify(expression);\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifiers\n *\n * @param expression the expression to modify\n * @param modifiers  the modifiers to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier... modifiers) {\n    for (ExpressionModifier m : modifiers) expression = modifyExpression(expression, m);\n    return expression;\n}"
            ],
            [
                "v",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates a new Variable\n *\n * @param name the variables name\n * @return the new Variable\n */\npublic static Variable v(String name) {\n    return new Variable(name);\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates an array of variables\n *\n * @param n the number of varfiables to create.\n * @return variables named \"A0\", \"A1\", \"A2\" and so on\n */\npublic static ArrayList<Variable> vars(int n) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (int i = 0; i < n; i++) v.add(new Variable(\"\" + (char) ('A' + i)));\n    return v;\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Create a list of variables using the given names\n *\n * @param names the names used to create the variables\n * @return the list of variables\n */\npublic static ArrayList<Variable> vars(String... names) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (String n : names) v.add(new Variable(n));\n    return v;\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable.\n */\npublic static boolean isVar(Expression e) {\n    return e instanceof Variable;\n}"
            ],
            [
                "isVarOrNotVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable or a inverted variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable or a inverted variable.\n */\npublic static boolean isVarOrNotVar(Expression e) {\n    return isVar(e) || (e instanceof Not && isVar(((Not) e).getExpression()));\n}"
            ],
            [
                "getDefaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * @return the default format\n */\npublic static FormatToExpression getDefaultFormat() {\n    return Settings.getInstance().get(Keys.SETTINGS_EXPRESSION_FORMAT);\n}"
            ],
            [
                "defaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * Formats a expression to a string.\n * Uses the default format for presentation on the screen.\n *\n * @param exp the expression to format\n * @return the string representation\n */\npublic static String defaultFormat(Expression exp) {\n    return getDefaultFormat().format(exp);\n}"
            ],
            [
                "not",
                "de.neemann.digital.analyse.expression",
                "Not",
                "/**\n * Creates a not expression.\n * Simplifies the expression if possible.\n *\n * @param a the child expression to invert\n * @return the inverted expression\n */\npublic static Expression not(Expression a) {\n    if (a == Constant.ONE)\n        return Constant.ZERO;\n    if (a == Constant.ZERO)\n        return Constant.ONE;\n    if (a instanceof Not && !((Not) a).protect) {\n        return ((Not) a).expression;\n    } else\n        return new Not(a);\n}"
            ],
            [
                "readFromFile",
                "de.neemann.digital.analyse",
                "TruthTable",
                "/**\n * Load the given file and returns a truth table instance\n *\n * @param filename filename\n * @return the {@link TruthTable}\n * @throws IOException IOException\n */\npublic static TruthTable readFromFile(File filename) throws IOException {\n    if (filename.getName().toLowerCase().endsWith(\".csv\"))\n        return CSVImporter.readCSV(filename);\n    else {\n        XStream xStream = getxStream();\n        try (InputStream in = new FileInputStream(filename)) {\n            return (TruthTable) xStream.fromXML(in);\n        }\n    }\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param s the signal\n * @return the port pins used\n */\npublic static SplitPinString create(Signal s) {\n    if (s.missingPinNumber())\n        return EMPTY;\n    return create(s.getPinNumber());\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param pinStr the pins definition;\n * @return the port pins used\n */\npublic static SplitPinString create(String pinStr) {\n    if (pinStr == null || pinStr.trim().length() == 0)\n        return EMPTY;\n    StringTokenizer st = new StringTokenizer(pinStr, \",;\");\n    ArrayList<String> pins = new ArrayList<>();\n    while (st.hasMoreTokens()) pins.add(st.nextToken().trim());\n    return new PinsArray(pins);\n}"
            ],
            [
                "checkSuffix",
                "de.neemann.digital.gui",
                "SaveAsHelper",
                "/**\n * Adds the given suffix to the file\n *\n * @param filename filename\n * @param suffix   suffix\n * @return the file name with the given suffix\n */\npublic static File checkSuffix(File filename, String suffix) {\n    if (suffix == null || filename == null)\n        return filename;\n    String name = filename.getName();\n    int p = name.lastIndexOf('.');\n    if (p >= 0) {\n        String suf = name.substring(p + 1).toLowerCase();\n        if (KNOWN.contains(suf))\n            name = name.substring(0, p);\n        while (name.length() > 0 && name.charAt(name.length() - 1) == '.') name = name.substring(0, name.length() - 1);\n    }\n    return new File(filename.getParentFile(), name + \".\" + suffix);\n}"
            ],
            [
                "addF1Traversal",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Adds F1 as a focus traversal key to a text components.\n *\n * @param text The text component\n * @param <TC> the concrete type of the text component\n * @return the given text component\n */\npublic static <TC extends JTextComponent> TC addF1Traversal(TC text) {\n    HashSet<AWTKeyStroke> set = new HashSet<>(text.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n    set.add(KeyStroke.getKeyStroke(\"F1\"));\n    text.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, set);\n    return text;\n}"
            ],
            [
                "createUndoManager",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Enables undo in the given text component.\n *\n * @param text the text component\n * @return the undo manager\n */\npublic static UndoManager createUndoManager(JTextComponent text) {\n    final UndoManager undoManager;\n    undoManager = new UndoManager();\n    text.getDocument().addUndoableEditListener(undoManager);\n    text.addKeyListener(new KeyAdapter() {\n\n        @Override\n        public void keyPressed(KeyEvent e) {\n            if (e.getKeyCode() == KeyEvent.VK_Z && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canUndo())\n                    undoManager.undo();\n            } else if (e.getKeyCode() == KeyEvent.VK_Y && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canRedo())\n                    undoManager.redo();\n            }\n        }\n    });\n    return undoManager;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components.modification",
                "ModifyInsertWires",
                "/**\n * Creates a simplified modification.\n *\n * @param newWires the wires to insert\n * @return the modification\n */\npublic static Modification<Circuit> create(List<Wire> newWires) {\n    switch(newWires.size()) {\n        case 0:\n            return null;\n        case 1:\n            return new ModifyInsertWire(newWires.get(0));\n        default:\n            return new ModifyInsertWires(newWires);\n    }\n}"
            ],
            [
                "getToolTipName",
                "de.neemann.digital.gui.components.modification",
                "ModificationOfVisualElement",
                "/**\n * Creates a translated name of the given element\n *\n * @param ve the element\n * @return translated name\n */\npublic static String getToolTipName(VisualElement ve) {\n    String s = Lang.getNull(\"elem_\" + ve.getElementName());\n    if (s == null) {\n        s = ve.getElementName();\n        if (s.endsWith(\".dig\"))\n            s = s.substring(0, s.length() - 4);\n    }\n    String l = ve.getElementAttributes().get(Keys.LABEL);\n    if (l.length() > 0)\n        s += \" (\" + l + \")\";\n    return s;\n}"
            ],
            [
                "getTerminal",
                "de.neemann.digital.gui.components.terminal",
                "TerminalDialog",
                "/**\n * Creates a new GUI terminal\n *\n * @param model the model\n * @param attr  the terminals attributes\n * @return the terminal interface\n */\nstatic TerminalInterface getTerminal(Model model, ElementAttributes attr) {\n    return new MyTerminal(model, attr);\n}"
            ],
            [
                "createList",
                "de.neemann.digital.gui.components",
                "CircuitTransferable",
                "/**\n * Creates a list of objects from inserted data\n * Can also throw a {@link ClassCastException}!\n *\n * @param data         the inserted data\n * @param shapeFactory the shapeFactory to set to the elements\n * @return the elements or null\n * @throws IOException IOException\n */\npublic static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException {\n    if (!(data instanceof String))\n        return null;\n    XStream xStream = Circuit.getxStream();\n    try (Reader in = new StringReader(data.toString())) {\n        ArrayList<Movable> elements = (ArrayList<Movable>) xStream.fromXML(in);\n        if (elements == null)\n            return null;\n        for (Movable m : elements) if (m instanceof VisualElement)\n            ((VisualElement) m).setShapeFactory(shapeFactory);\n        return elements;\n    }\n}"
            ],
            [
                "createURLStreamHandlerFactory",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "/**\n * @return factory which catches 'image' protocol requests to deliver images via an URL.\n */\npublic static URLStreamHandlerFactory createURLStreamHandlerFactory() {\n    return new MyURLStreamHandlerFactory();\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "MyURLStreamHandlerFactory",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "isSequentialVar",
                "de.neemann.digital.gui.components.table",
                "ExpressionListenerJK",
                "/**\n * If the name belongs to a sequential state var, the state vars name is returned.\n * Otherwise a null is returned\n *\n * @param name the name of the variable\n * @return the state variable or null\n */\npublic static String isSequentialVar(String name) {\n    String detName = null;\n    if (name.endsWith(\"n+1\")) {\n        detName = name.substring(0, name.length() - 2);\n    } else if (name.endsWith(\"{n+1}\")) {\n        detName = name.substring(0, name.length() - 5) + \"n\";\n    }\n    return detName;\n}"
            ],
            [
                "getAttrList",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * @return returns the list of circuit attributes\n */\npublic static ArrayList<Key> getAttrList() {\n    return ATTR_LIST;\n}"
            ],
            [
                "raster",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * rounds the given vector to the raster\n *\n * @param pos the vector\n * @return pos round to raster\n */\npublic static Vector raster(Vector pos) {\n    return new Vector((int) Math.round((double) pos.x / SIZE) * SIZE, (int) Math.round((double) pos.y / SIZE) * SIZE);\n}"
            ],
            [
                "createLiveDialog",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "/**\n * Creates a instance prepared for \"live logging\"\n *\n * @param owner      the parent frame\n * @param model      the model\n * @param microStep  stepping mode\n * @param ordering   the ordering to use\n * @param sampleSize the number of samples\n * @return the created instance\n */\npublic static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize) {\n    String title;\n    if (microStep)\n        title = Lang.get(\"win_measures_microstep\");\n    else\n        title = Lang.get(\"win_measures_fullstep\");\n    ArrayList<Signal> signals = model.getSignalsCopy();\n    signals.removeIf(signal -> !signal.isShowInGraph());\n    new OrderMerger<String, Signal>(ordering) {\n\n        @Override\n        public boolean equals(Signal a, String b) {\n            return a.getName().equals(b);\n        }\n    }.order(signals);\n    ValueTableObserver valueTableObserver = new ValueTableObserver(microStep, signals, sampleSize);\n    GraphDialog graphDialog = new GraphDialog(owner, title, valueTableObserver.getLogData(), model, true).setColumnInfo(createColumnsInfo(signals));\n    graphDialog.addWindowListener(new WindowAdapter() {\n\n        @Override\n        public void windowOpened(WindowEvent e) {\n            model.addObserver(valueTableObserver);\n        }\n\n        @Override\n        public void windowClosed(WindowEvent e) {\n            model.removeObserver(valueTableObserver);\n        }\n    });\n    return graphDialog;\n}"
            ],
            [
                "createColumnsInfo",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals) {\n    ValueTable.ColumnInfo[] info = new ValueTable.ColumnInfo[signals.size()];\n    for (int i = 0; i < signals.size(); i++) {\n        Signal s = signals.get(i);\n        info[i] = new ValueTable.ColumnInfo(s.getFormat(), s.getValue().getBits());\n    }\n    return info;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "isExperimentalMode",
                "de.neemann.digital.gui",
                "Main",
                "/**\n * @return true if experimental features are enabled\n */\npublic static boolean isExperimentalMode() {\n    return experimental;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "WindowManager",
                "/**\n * @return the WindowManager\n */\npublic static WindowManager getInstance() {\n    return InstanceHolderClass.INSTANCE;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "Settings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static Settings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "getRange",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog bit range\n *\n * @param bits the number of bits\n * @return the bit range\n */\npublic static String getRange(int bits) {\n    if (bits == 1)\n        return \"\";\n    else\n        return \"[\" + (bits - 1) + \":0]\";\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog type for a signal\n *\n * @param def  the signal type (input or output) used if dir is not \"inout\"\n * @param dir  used to check if direction is \"inout\"\n * @param bits the number of bits\n * @return the verilog signal type\n */\npublic static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits) {\n    String result;\n    if (dir == HDLPort.Direction.INOUT)\n        result = \"inout\";\n    else\n        result = (def == HDLPort.Direction.IN) ? \"input\" : \"output\";\n    if (bits > 1) {\n        result += \" [\" + (bits - 1) + \":0]\";\n    }\n    return result;\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    return (bits + \"'b\" + s);\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.verilog2.lib",
                "VerilogTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given\n * element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(MODULE_PREFIX + elementName);\n}"
            ],
            [
                "createFromJar",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n *\n * @param path the path of the file to load\n * @param cl   the classloader used to load the template. If set to null, the SystemClassLoader is used\n * @return the statement\n * @throws IOException     IOException\n * @throws ParserException ParserException\n */\npublic static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException {\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    InputStream in = cl.getResourceAsStream(path);\n    if (in == null)\n        throw new FileNotFoundException(\"file not found: \" + path);\n    try (Reader r = new InputStreamReader(in, StandardCharsets.UTF_8)) {\n        Parser p = new Parser(r, path);\n        return p.parse();\n    }\n}"
            ],
            [
                "createFromJarStatic",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n * Throws only a RuntimeException so use with care!\n *\n * @param path the path of the file to load\n * @return the statement\n */\npublic static Statement createFromJarStatic(String path) {\n    try {\n        return createFromJar(path, null);\n    } catch (IOException | ParserException e) {\n        throw new RuntimeException(\"could not parse: \" + path, e);\n    }\n}"
            ],
            [
                "isWhiteSpace",
                "de.neemann.digital.hdl.hgs",
                "Tokenizer",
                "/**\n * Returns true if the given character is a white space.\n *\n * @param c the character to test\n * @return true in c is a white space\n */\npublic static boolean isWhiteSpace(int c) {\n    return c == ' ' || c == '\\t' || c == '\\n' || c == '\\r';\n}"
            ],
            [
                "toLong",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a long\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static long toLong(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toDouble",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a double\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static double toDouble(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).doubleValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toInt",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an int\n *\n * @param value the value to convert\n * @return the int value\n * @throws HGSEvalException HGSEvalException\n */\npublic static int toInt(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).intValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toBool",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a bool\n *\n * @param value the value to convert\n * @return the bool value\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean toBool(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue() != 0;\n    if (value instanceof Boolean)\n        return ((Boolean) value);\n    throw new HGSEvalException(\"Must be an integer or a bool, is: \" + value.getClass().getSimpleName() + \"=\" + value);\n}"
            ],
            [
                "toString",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a string\n *\n * @param value the value to convert\n * @return the string\n * @throws HGSEvalException HGSEvalException\n */\npublic static String toString(Object value) throws HGSEvalException {\n    if (value instanceof String)\n        return value.toString();\n    throw new HGSEvalException(\"must be a string, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toArray",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an array\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSArray toArray(Object value) throws HGSEvalException {\n    if (value instanceof HGSArray)\n        return (HGSArray) value;\n    if (value instanceof List)\n        return new HGSArrayList((List) value);\n    throw new HGSEvalException(\"must be an array, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toMap",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a map\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSMap toMap(Object value) throws HGSEvalException {\n    if (value instanceof HGSMap)\n        return (HGSMap) value;\n    if (value instanceof Map)\n        return new HGSMapMap((Map) value);\n    throw new HGSEvalException(\"must be a map, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "equals",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Compares two values\n *\n * @param a a value\n * @param b a value\n * @return true if both values are equal\n */\npublic static boolean equals(Object a, Object b) {\n    if (a instanceof Double || b instanceof Double)\n        return a.equals(b);\n    else if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() == ((Number) b).longValue();\n    else if (a instanceof String || b instanceof String)\n        return a.toString().equals(b.toString());\n    else\n        return a.equals(b);\n}"
            ],
            [
                "add",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Adds two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object add(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) + toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() + ((Number) b).longValue();\n    if (a instanceof String || b instanceof String)\n        return a.toString() + b.toString();\n    throw new HGSEvalException(\"arguments must be int or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "sub",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Subtracts two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object sub(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) - toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() - ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "mul",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Multiplies two values\n *\n * @param a a value\n * @param b a value\n * @return the product\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object mul(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) * toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() * ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "div",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Divides two numbers\n *\n * @param a a value\n * @param b a value\n * @return the quotient\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object div(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) / toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() / ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "or",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an or operation\n *\n * @param a a value\n * @param b a value\n * @return the or'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object or(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() | ((Number) b).longValue();\n    return toBool(a) || toBool(b);\n}"
            ],
            [
                "xor",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an xor operation\n *\n * @param a a value\n * @param b a value\n * @return the xor'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object xor(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() ^ ((Number) b).longValue();\n    return toBool(a) ^ toBool(b);\n}"
            ],
            [
                "and",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an and operation\n *\n * @param a a value\n * @param b a value\n * @return the and'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object and(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() & ((Number) b).longValue();\n    return toBool(a) && toBool(b);\n}"
            ],
            [
                "not",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs a not operation\n *\n * @param value a value\n * @return the inverted value\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object not(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ~((Number) value).longValue();\n    return !toBool(value);\n}"
            ],
            [
                "neg",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Changes the sign of the given value\n *\n * @param value the value\n * @return value with changed sign\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object neg(Object value) throws HGSEvalException {\n    if (value instanceof Double)\n        return -(Double) value;\n    return -toLong(value);\n}"
            ],
            [
                "less",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a&lt;b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean less(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) < toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) < toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) < 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "lessEqual",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a<=b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean lessEqual(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) <= toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) <= toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) <= 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "trimRight",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the right side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimRight(String str) {\n    int initial = str.length() - 1;\n    int pos = initial;\n    while (pos >= 0 && isWhiteSpace(str.charAt(pos))) pos--;\n    if (pos == initial)\n        return str;\n    else\n        return str.substring(0, pos + 1);\n}"
            ],
            [
                "trimLeft",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the left side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimLeft(String str) {\n    int pos = 0;\n    while (pos < str.length() && isWhiteSpace(str.charAt(pos))) pos++;\n    if (pos == 0)\n        return str;\n    else\n        return str.substring(pos);\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Returns the vhdl type name\n *\n * @param bits the number of bits\n * @return the types name\n */\npublic static String getType(int bits) {\n    if (bits == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector(\" + (bits - 1) + \" downto 0)\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    int missing = bits - s.length();\n    if (missing > 0)\n        s = ZEROS.substring(0, missing) + s;\n    if (bits > 1)\n        s = \"\\\"\" + s + \"\\\"\";\n    else\n        s = \"'\" + s + \"'\";\n    return s;\n}"
            ],
            [
                "isTemplate",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Returns true, if a hdl template is available.\n *\n * @param etd the {@link ElementTypeDescription}\n * @return true if VHDL template is available\n */\npublic static boolean isTemplate(ElementTypeDescription etd) {\n    ClassLoader cl = etd.getClassLoader();\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    URL url = cl.getResource(createFileName(ENTITY_PREFIX + etd.getName()));\n    return url != null;\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(ENTITY_PREFIX + elementName);\n}"
            ],
            [
                "zero",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Create a vhdl zero with the given bit number\n *\n * @param bits the bit number\n * @return '0' or (others => '0')\n */\npublic static String zero(long bits) {\n    if (bits == 1)\n        return \"'0'\";\n    else\n        return \"(others => '0')\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, long bits) {\n    return VHDLCreator.value(val, (int) bits);\n}"
            ],
            [
                "genericType",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates the code for a generic type\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String genericType(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector ((Bits-1) downto 0)\";\n}"
            ],
            [
                "type",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a type of given width\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String type(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector (\" + (n - 1) + \" downto 0)\";\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.hdl.model2.expression",
                "Expression",
                "/**\n * Helper to check if an expression is a net reference\n *\n * @param expr the expression to check\n * @param net  the net\n * @return true if the expression is a reference to the given net\n */\nstatic boolean isVar(Expression expr, HDLNet net) {\n    return expr instanceof ExprVar && ((ExprVar) expr).getNet() == net;\n}"
            ],
            [
                "isConstant",
                "de.neemann.digital.hdl.model2.expression",
                "ExprConstant",
                "/**\n * Returns the constant if th given node represents a constant\n *\n * @param node the node\n * @return the constant of null if node is not a constant\n */\npublic static ExprConstant isConstant(HDLNode node) {\n    if (node instanceof HDLNodeAssignment) {\n        HDLNodeAssignment expr = (HDLNodeAssignment) node;\n        if (expr.getExpression() instanceof ExprConstant) {\n            return (ExprConstant) expr.getExpression();\n        }\n    }\n    return null;\n}"
            ],
            [
                "getHighZ",
                "de.neemann.digital.data",
                "Value",
                "/**\n * @return returns a high z value\n */\npublic static Value getHighZ() {\n    return new Value(0, Type.HIGHZ);\n}"
            ],
            [
                "calcBackOffset",
                "de.neemann.digital.builder.circuit",
                "FragmentExpression",
                "static int calcBackOffset(int size, int i) {\n    if ((size & 1) != 0 && i == (size - 1) / 2)\n        return 0;\n    if (i >= size / 2)\n        return size - i;\n    else\n        return i + 1;\n}"
            ],
            [
                "isXNor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXNor(long[] data) {\n    for (int i = 0; i < data.length; i++) if ((Integer.bitCount(i) & 1) == data[i])\n        return false;\n    return true;\n}"
            ],
            [
                "isXor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXor(long[] data) {\n    for (int i = 0; i < data.length; i++) if (!((Integer.bitCount(i) & 1) == data[i]))\n        return false;\n    return true;\n}"
            ],
            [
                "getLibPath",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * @return the additional library path\n */\npublic static File getLibPath() {\n    String path;\n    try {\n        path = ElementLibrary.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath().replace('\\\\', '/');\n    } catch (URISyntaxException e) {\n        return new File(\"noLibFound\");\n    }\n    if (path.endsWith(\"/target/classes/\"))\n        return toCanonical(new File(path.substring(0, path.length() - 16) + \"/src/main/dig/lib\"));\n    if (path.endsWith(\"/target/Digital.jar\"))\n        return new File(path.substring(0, path.length() - 19) + \"/src/main/dig/lib\");\n    if (path.endsWith(\"Digital.jar\"))\n        return new File(path.substring(0, path.length() - 12) + \"/lib\");\n    return new File(\"noLibFound\");\n}"
            ],
            [
                "createCustomDescription",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * Creates a custom element description.\n *\n * @param file    the file\n * @param circuit the circuit\n * @param library the library\n * @return the type description\n * @throws PinException PinException\n */\npublic static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException {\n    ElementTypeDescriptionCustom d = new ElementTypeDescriptionCustom(file, circuit, library);\n    d.setElementFactory(attributes -> new CustomElement(d));\n    return d;\n}"
            ],
            [
                "createDeclarationDefault",
                "de.neemann.digital.draw.library",
                "ElementTypeDescriptionCustom",
                "/**\n * Creates the default for custom element declarations\n *\n * @param circuit the circuit\n * @return the default code template\n * @throws NodeException NodeException\n */\npublic static String createDeclarationDefault(Circuit circuit) throws NodeException {\n    TreeSet<String> nameSet = new TreeSet<>();\n    for (VisualElement ve : circuit.getElements()) {\n        String gen = ve.getElementAttributes().get(Keys.GENERIC).trim();\n        if (!gen.isEmpty()) {\n            try {\n                Parser p = new Parser(gen);\n                p.enableRefReadCollection();\n                p.parse(false);\n                for (Reference r : p.getRefsRead()) {\n                    if (r instanceof ReferenceToStruct) {\n                        ReferenceToStruct st = (ReferenceToStruct) r;\n                        if (st.getParent() instanceof ReferenceToVar) {\n                            ReferenceToVar var = (ReferenceToVar) st.getParent();\n                            if (var.getName().equals(\"args\")) {\n                                nameSet.add(st.getName());\n                            }\n                        }\n                    }\n                }\n            } catch (ParserException | IOException e) {\n                final NodeException ex = new NodeException(Lang.get(\"err_evaluatingGenericsCode_N_N\", ve, gen), e);\n                ex.setOrigin(circuit.getOrigin());\n                throw ex;\n            }\n        }\n    }\n    StringBuilder sb = new StringBuilder();\n    for (String name : nameSet) sb.append(name).append(\" := ;\\n\");\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Returns a comparator instance\n *\n * @return the singleton instance\n */\npublic static NumStringComparator getInstance() {\n    return InstanceHolder.INSTANCE;\n}"
            ],
            [
                "compareStr",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Compare two strings\n *\n * @param a a string\n * @param b a string\n * @return the comparison result\n */\npublic static int compareStr(String a, String b) {\n    int pa = 0;\n    int pb = 0;\n    while (true) {\n        final boolean ae = pa == a.length();\n        final boolean be = pb == b.length();\n        if (ae && be)\n            return 0;\n        else if (ae)\n            return -1;\n        else if (be)\n            return 1;\n        char ca = Character.toLowerCase(a.charAt(pa));\n        char cb = Character.toLowerCase(b.charAt(pb));\n        if (isDigit(ca) && isDigit(cb)) {\n            ParseNumber da = new ParseNumber(a, pa);\n            ParseNumber db = new ParseNumber(b, pb);\n            int c = Integer.compare(da.num, db.num);\n            if (c != 0)\n                return c;\n            else {\n                pa = da.p;\n                pb = db.p;\n            }\n        } else {\n            int c = Character.compare(ca, cb);\n            if (c != 0) {\n                return c;\n            } else {\n                pa++;\n                pb++;\n            }\n        }\n    }\n}"
            ],
            [
                "createPins",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Creates pins\n *\n * @param inputs    the inputs\n * @param outputs   the outputs\n * @param invert    true if invert output\n * @param ic        input inverter configuration\n * @param wideShape true if a wide shape is selected\n * @return the pins\n */\npublic static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape) {\n    return createPins(inputs, outputs, invert, wideShape ? 4 : 3, true, ic);\n}"
            ],
            [
                "readStyle",
                "de.neemann.digital.draw.shapes.custom.svg",
                "Context",
                "static Context readStyle(Context context, String style) throws SvgException {\n    SVGTokenizer t = new SVGTokenizer(style);\n    while (true) {\n        final String command = t.readTo(':');\n        if (command.length() == 0)\n            break;\n        final String value = t.readTo(';');\n        AttrParser p = PARSER.get(command);\n        if (p != null)\n            p.parse(context, value);\n    }\n    return context;\n}"
            ],
            [
                "getOutSize",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static int getOutSize(boolean small) {\n    if (small)\n        return SIZE2;\n    else\n        return OUT_SIZE;\n}"
            ],
            [
                "getOutStyle",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static Style getOutStyle(boolean small) {\n    if (small)\n        return Style.THIN;\n    else\n        return Style.NORMAL;\n}"
            ],
            [
                "getOutRad",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Inner circle size used for inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the output circle radius as a vector\n */\npublic static Vector getOutRad(boolean small) {\n    int s = getOutSize(small);\n    return new Vector(s - 6, s - 6);\n}"
            ],
            [
                "createTransform",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static Transform createTransform(int size) {\n    if (size == 2)\n        return Transform.IDENTITY;\n    else {\n        final TransformTranslate tr1 = new TransformTranslate(-70, -139);\n        final TransformTranslate tr2 = new TransformTranslate(70, 139);\n        float s = (2 + size) / 4f;\n        final TransformMatrix trm = new TransformMatrix(s, 0, 0, s, 0, 0);\n        return Transform.mul(tr1, Transform.mul(trm, tr2));\n    }\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"attributes\", ElementAttributes.class);\n    xStream.alias(\"visualElement\", VisualElement.class);\n    xStream.alias(\"wire\", Wire.class);\n    xStream.alias(\"circuit\", Circuit.class);\n    xStream.alias(\"intFormat\", IntFormat.class);\n    xStream.alias(\"exprFormat\", FormatToExpression.class);\n    xStream.alias(\"barrelShifterMode\", BarrelShifterMode.class);\n    xStream.alias(\"direction\", LeftRightFormat.class);\n    xStream.alias(\"rotation\", Rotation.class);\n    xStream.aliasAttribute(Rotation.class, \"rotation\", \"rotation\");\n    xStream.alias(\"language\", Language.class);\n    xStream.aliasAttribute(Language.class, \"name\", \"name\");\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"value\", InValue.class);\n    xStream.aliasAttribute(InValue.class, \"value\", \"v\");\n    xStream.aliasAttribute(InValue.class, \"highZ\", \"z\");\n    xStream.addImplicitCollection(ElementAttributes.class, \"attributes\");\n    xStream.alias(\"data\", DataField.class);\n    xStream.registerConverter(new DataFieldConverter());\n    xStream.alias(\"testData\", TestCaseDescription.class);\n    xStream.alias(\"inverterConfig\", InverterConfig.class);\n    xStream.addImplicitCollection(InverterConfig.class, \"inputs\");\n    xStream.alias(\"storedRoms\", ROMManager.class);\n    xStream.addImplicitCollection(ROMManager.class, \"roms\");\n    xStream.alias(\"romList\", ROMManagerFile.class);\n    xStream.alias(\"romFile\", ROMManagerFile.RomContainerFile.class);\n    xStream.alias(\"romData\", ROMManagerFile.RomContainerDataField.class);\n    xStream.alias(\"appType\", Application.Type.class);\n    xStream.ignoreUnknownElements();\n    xStream.alias(\"shape\", CustomShapeDescription.class);\n    xStream.alias(\"pin\", CustomShapeDescription.Pin.class);\n    xStream.alias(\"circle\", CustomShapeDescription.CircleHolder.class);\n    xStream.alias(\"line\", CustomShapeDescription.LineHolder.class);\n    xStream.alias(\"poly\", CustomShapeDescription.PolygonHolder.class);\n    xStream.alias(\"text\", CustomShapeDescription.TextHolder.class);\n    xStream.alias(\"polygon\", Polygon.class);\n    xStream.alias(\"shapeType\", CustomCircuitShapeType.class);\n    xStream.alias(\"transform\", TransformHolder.class);\n    xStream.registerConverter(new PolygonConverter());\n    return xStream;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename     filename\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load \" + filename);\n    final Circuit circuit = loadCircuit(new FileInputStream(filename), shapeFactory);\n    circuit.origin = filename;\n    return circuit;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param in           the input stream\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load stream\");\n    try {\n        XStream xStream = getxStream();\n        Circuit circuit = (Circuit) xStream.fromXML(in);\n        for (VisualElement ve : circuit.getElements()) ve.setShapeFactory(shapeFactory);\n        if (circuit.version == 0) {\n            // convert to version 1\n            for (Wire w : circuit.getWires()) {\n                w.p1 = w.p1.mul(2);\n                w.p2 = w.p2.mul(2);\n            }\n            for (VisualElement e : circuit.getElements()) e.setPos(e.getPos().mul(2));\n            circuit.version = 1;\n        }\n        if (circuit.version < 2) {\n            Object rm = circuit.getAttributes().get(Keys.ROMMANAGER);\n            if (rm instanceof ROMManager) {\n                circuit.getAttributes().set(Keys.ROMMANAGER, new ROMManagerFile((ROMManager) rm));\n            }\n            circuit.version = 2;\n        }\n        return circuit;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "fixGenerics",
                "de.neemann.digital.draw.model",
                "ModelCreator",
                "/**\n * Creates a concrete circuit from a generic on.\n * Uses the included generic init code.\n *\n * @param circuit the generic circuit\n * @param library the element library\n * @return the concrete circuit\n * @throws NodeException            NodeException\n * @throws ElementNotFoundException ElementNotFoundException\n */\npublic static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException {\n    if (circuit.getAttributes().get(Keys.IS_GENERIC))\n        return new ResolveGenerics(circuit, library).resolveCircuit(null).getCircuit();\n    else\n        return circuit;\n}"
            ],
            [
                "createFromPath",
                "de.neemann.digital.draw.graphics",
                "Polygon",
                "/**\n * Creates a polygon from a SVG path\n *\n * @param path the svg path\n * @return the polygon or null if there was an error\n */\npublic static Polygon createFromPath(String path) {\n    try {\n        return new PolygonParser(path).create();\n    } catch (PolygonParser.ParserException e) {\n        return null;\n    }\n}"
            ],
            [
                "vec",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Returns a new vector\n * shorthand for new Vector(x,y)\n *\n * @param x x\n * @param y y\n * @return the vector\n */\npublic static Vector vec(int x, int y) {\n    return new Vector(x, y);\n}"
            ],
            [
                "min",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the minimum vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the minimum\n */\npublic static Vector min(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x)\n            x = p[i].getX();\n        if (p[i].getY() < y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "max",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the maximim vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the maximum\n */\npublic static Vector max(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() > x)\n            x = p[i].getX();\n        if (p[i].getY() > y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "width",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the width of the given vectors.\n *\n * @param p the vectors\n * @return max(p)-min(p)\n */\npublic static Vector width(VectorInterface... p) {\n    int x1 = p[0].getX();\n    int y1 = p[0].getY();\n    int x2 = x1;\n    int y2 = y1;\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x1)\n            x1 = p[i].getX();\n        if (p[i].getY() < y1)\n            y1 = p[i].getY();\n        if (p[i].getX() > x2)\n            x2 = p[i].getX();\n        if (p[i].getY() > y2)\n            y2 = p[i].getY();\n    }\n    return new Vector(x2 - x1, y2 - y1);\n}"
            ],
            [
                "add",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Adds an offset to every vector in the given list\n *\n * @param vectors the original vectors\n * @param offs    the offset\n * @return the new list\n */\npublic static List<Vector> add(List<Vector> vectors, Vector offs) {\n    ArrayList<Vector> newVec = new ArrayList<>();\n    for (Vector v : vectors) newVec.add(v.add(offs));\n    return newVec;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static SVGSettings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "createKeyList",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * @return a list of available SVG export keys\n */\npublic static List<Key> createKeyList() {\n    ArrayList<Key> list = new ArrayList<>();\n    list.add(LATEX);\n    list.add(PINS_IN_MATH_MODE);\n    list.add(HIDE_TEST);\n    list.add(NO_SHAPE_FILLING);\n    list.add(SMALL_IO);\n    list.add(NO_PIN_MARKER);\n    list.add(THINNER_LINES);\n    list.add(HIGH_CONTRAST);\n    list.add(MONOCHROME);\n    return list;\n}"
            ],
            [
                "mul",
                "de.neemann.digital.draw.graphics",
                "Transform",
                "/**\n * Combines the two given transformations to a common transformation\n *\n * @param t1 first transformation\n * @param t2 second transformation\n * @return the resulting transformation\n */\nstatic Transform mul(Transform t1, Transform t2) {\n    TransformMatrix m1 = t1.getMatrix();\n    TransformMatrix m2 = t2.getMatrix();\n    return new TransformMatrix(m1.a * m2.a + m1.c * m2.b, m1.b * m2.a + m1.d * m2.b, m1.a * m2.c + m1.c * m2.d, m1.b * m2.c + m1.d * m2.d, m2.a * m1.x + m2.b * m1.y + m2.x, m2.c * m1.x + m2.d * m1.y + m2.y);\n}"
            ],
            [
                "rotate",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a rotation.\n * Rotates in mathematically positive direction. Takes into account that\n * in Digital the y-axis goes downwards.\n *\n * @param w the angle in 360 grad units\n * @return the transformation\n */\npublic static TransformMatrix rotate(double w) {\n    final double phi = w / 180 * Math.PI;\n    float cos = (float) Math.cos(phi);\n    float sin = (float) Math.sin(phi);\n    return new TransformMatrix(cos, -sin, sin, cos, 0, 0);\n}"
            ],
            [
                "scale",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a scaling transformation\n *\n * @param sx scaling in x direction\n * @param sy scaling in y direction\n * @return the transformation\n */\npublic static TransformMatrix scale(float sx, float sy) {\n    return new TransformMatrix(sx, 0, 0, sy, 0, 0);\n}"
            ],
            [
                "getTextWidth",
                "de.neemann.digital.draw.graphics",
                "GraphicMinMax",
                "/**\n * Returns a approximation of the width of the given text in the given style\n *\n * @param text  the text\n * @param style the style\n * @return the approximated text width\n */\npublic static int getTextWidth(String text, Style style) {\n    final FontRenderContext fontRenderContext = new FontRenderContext(null, true, false);\n    GraphicsFormatter.Fragment f = GraphicsFormatter.createFragment((fragment, font, str) -> {\n        Rectangle2D rec = style.getFont().getStringBounds(str, fontRenderContext);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), 0);\n    }, style.getFont(), text);\n    return f.getWidth();\n}"
            ],
            [
                "getSelected",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * @return the selected color map\n */\npublic static ColorScheme getSelected() {\n    if (instance == null) {\n        updateInstance();\n        Settings.getInstance().getAttributes().addListener(ColorScheme::updateInstance);\n    }\n    return instance;\n}"
            ],
            [
                "getWireStyle",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Returns the wire style depending on the given value\n *\n * @param value the value to represent\n * @return the style\n */\npublic static Style getWireStyle(Value value) {\n    if (value == null || value.getBits() > 1)\n        return WIRE;\n    if (value.isHighZ())\n        return WIRE_HIGHZ;\n    if (value.getValue() == 1)\n        return WIRE_HIGH;\n    else\n        return WIRE_LOW;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text the text\n * @return the string representation\n */\npublic static String format(Text text) {\n    return format(text, FormatToExpression.getDefaultFormat());\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text   the text\n * @param format the format to use\n * @return the string representation\n */\npublic static String format(Text text, FormatToExpression format) {\n    if (text instanceof Simple) {\n        return ((Simple) text).getText();\n    } else if (text instanceof Blank) {\n        return \" \";\n    } else if (text instanceof Character) {\n        return \"\" + ((Character) text).getChar();\n    } else if (text instanceof Decorate) {\n        Decorate d = (Decorate) text;\n        if (d.getStyle() == Decorate.Style.OVERLINE) {\n            final Text content = d.getContent();\n            if (content instanceof Simple || content instanceof Index)\n                return format.getNot() + format(content, format);\n            else\n                return format.getNot() + \"(\" + format(content, format) + \")\";\n        } else\n            return format(d.getContent(), format);\n    } else if (text instanceof Index) {\n        Index i = (Index) text;\n        String str = format(i.getVar(), format);\n        if (i.getSubScript() != null)\n            str += format(i.getSubScript(), format);\n        if (i.getSuperScript() != null)\n            str += format(i.getSuperScript(), format);\n        return str;\n    } else if (text instanceof Sentence) {\n        Sentence s = (Sentence) text;\n        StringBuilder sb = new StringBuilder();\n        for (Text t : s) sb.append(format(t, format));\n        return sb.toString();\n    } else\n        return \"\";\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "SVGFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr   the {@link Graphics2D} instance\n * @param text the text\n * @return the text fragment\n */\npublic static Fragment createFragment(Graphics2D gr, String text) {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), text);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr         the {@link Graphics2D} instance\n * @param expression the expression\n * @return the text fragment\n * @throws FormatterException FormatterException\n */\npublic static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), new ExpressionToText().createText(expression));\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param sizer the sizer instance\n * @param font  the font\n * @param text  the text\n * @return the fragment\n */\npublic static Fragment createFragment(FontSizer sizer, Font font, String text) {\n    Fragment fragment;\n    try {\n        Text t = new Parser(text).parse();\n        fragment = createFragment(sizer, font, t);\n    } catch (ParseException | FormatterException e) {\n        // if there was an exception, return the complete raw text as a fragment\n        fragment = new TextFragment(sizer, font, text);\n    }\n    return fragment;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param exp the expression to format\n * @return the formatted string\n */\npublic static String format(Expression exp) {\n    return format(new ExpressionToText().createText(exp, FormatToExpression.LATEX), true);\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "math",
                "de.neemann.digital.draw.graphics.text.text",
                "Decorate",
                "/**\n * Adds a MATH decoration to the given text.\n * If the text is already decorated the text is returned directly.\n *\n * @param t the text to decorate\n * @return the decorated text\n */\npublic static Text math(Text t) {\n    if (t instanceof Decorate) {\n        Decorate d = (Decorate) t;\n        if (d.getStyle() == Style.MATH)\n            return t;\n    }\n    return new Decorate(t, Style.MATH);\n}"
            ],
            [
                "escapeXML",
                "de.neemann.digital.draw.graphics",
                "GraphicSVG",
                "/**\n * Escapes a given string to XML\n *\n * @param text the text to escape\n * @return the escaped text.\n */\npublic static String escapeXML(String text) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        switch(c) {\n            case '&':\n                sb.append(\"&amp;\");\n                break;\n            case '<':\n                sb.append(\"&lt;\");\n                break;\n            case '>':\n                sb.append(\"&gt;\");\n                break;\n            case '\"':\n                sb.append(\"&quot;\");\n                break;\n            default:\n                sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
            ],
            [
                "getMirrorYOrientation",
                "de.neemann.digital.draw.graphics",
                "GraphicSwing",
                "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3) {\n    int oy = orientation.getY();\n    VectorInterface d0 = p2.sub(p1).getOrthogonal();\n    VectorInterface d1 = p3.sub(p1);\n    if (d0.scalar(d1) < 0)\n        oy = 2 - oy;\n    return oy;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param file the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(File file) throws IOException {\n    final Configuration configuration = load(new FileInputStream(file));\n    configuration.origin = file;\n    return configuration;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param in the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        return (Configuration) xStream.fromXML(in);\n    } catch (RuntimeException e) {\n        throw new IOException(\"error reading XML\", e);\n    }\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "UNKNOWN",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * Unknown release\n */\npublic static final String UNKNOWN = \"unknown\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullDown",
                "/**\n * The pull down description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "Diode",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeBackward",
                "/**\n * The description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullUp",
                "/**\n * The pull up description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeForward",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROMDualPort",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualAccess",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "CounterPreset",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Register",
                "/**\n * The registers {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "LookUpTable",
                "/**\n * The LUTs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "BlockRAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Counter",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROM",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMAsync",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROM",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROMDualPort",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePortSel",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RegisterFile",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "MIDI",
                "/**\n * The Speakers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RGBLED",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The Input description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "LEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);"
            ],
            [
                "POLARITYAWARELEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The polarity aware LED description\n */\npublic static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "SEVENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment display description\n */\npublic static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();"
            ],
            [
                "SEVENHEXDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment hex display description\n */\npublic static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "SIXTEENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * Sixteen Segment Display\n */\npublic static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RotEncoder",
                "/**\n * The rotary encoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PinControl",
                "/**\n * The description of the pin control logic\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "DipSwitch",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "LightBulb",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Probe",
                "/**\n * The Probe description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Button",
                "/**\n * The Button description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "ButtonLED",
                "/**\n * The ButtonLED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "In",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "STEPS",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * Steps for a full revolution\n */\npublic static final int STEPS = 72;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * The stepper motors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "NotConnected",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorBipolar",
                "/**\n * The bipolar motor description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Const",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PowerSupply",
                "/**\n * Enforces a power supply\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Ground",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "VDD",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.core.io.telnet",
                "ServerHolder",
                "/**\n * The singleton instance\n */\npublic static final ServerHolder INSTANCE = new ServerHolder();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io.telnet",
                "Telnet",
                "/**\n * The telnet server description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);"
            ],
            [
                "BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of bits in simple gates like And and Or\n */\npublic static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);"
            ],
            [
                "INPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * input bits of sign extender\n */\npublic static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);"
            ],
            [
                "OUTPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output bits of sign extender\n */\npublic static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);"
            ],
            [
                "INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in simple gates like And and Or\n */\npublic static final // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nKey.KeyInteger // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nINPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);"
            ],
            [
                "LUT_INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in the LUT\n */\npublic static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);"
            ],
            [
                "MAX_VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The counter max value\n */\npublic static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);"
            ],
            [
                "DELAY_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the delay time used by the delay component\n */\npublic static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);"
            ],
            [
                "MONOFLOP_DELAY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the timer delay time\n */\npublic static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);"
            ],
            [
                "LABEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The elements label\n */\npublic static final Key<String> LABEL = new Key<>(\"Label\", \"\");"
            ],
            [
                "FONT_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The font size\n */\npublic static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);"
            ],
            [
                "TEXT_ORIENTATION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * text orientation\n */\npublic static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();"
            ],
            [
                "LED_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a LED\n */\npublic static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();"
            ],
            [
                "SEVEN_SEG_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a seven seg display\n */\npublic static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);"
            ],
            [
                "VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The value of constants\n */\npublic static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();"
            ],
            [
                "DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of elements\n */\npublic static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();"
            ],
            [
                "INPUT_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of inputs\n */\npublic static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();"
            ],
            [
                "DIP_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of the dip switch\n */\npublic static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Color of LEDs\n */\npublic static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();"
            ],
            [
                "INPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The input splitting of a splitter\n */\npublic static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");"
            ],
            [
                "OUTPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The output splitting of a splitter\n */\npublic static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");"
            ],
            [
                "SPLITTER_SPREADING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The splitter spreading\n */\npublic static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();"
            ],
            [
                "IN_OUT_SMALL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to select small inputs and outputs\n */\npublic static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "RUN_AT_REAL_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable realtime mode at a clock\n */\npublic static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);"
            ],
            [
                "INVERT_OUTPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * inverts the output of a gate\n */\npublic static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);"
            ],
            [
                "FREQUENCY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The real time frequency of the clock\n */\npublic static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);"
            ],
            [
                "SELECTOR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the bit count of a muxer or decoder\n */\npublic static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);"
            ],
            [
                "ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of address bits of memory\n */\npublic static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);"
            ],
            [
                "BLOWN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a diode as blown fuse or as programmed\n */\npublic static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a switch as closed or not\n */\npublic static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();"
            ],
            [
                "SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * signed flag for comparator element\n */\npublic static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();"
            ],
            [
                "REMAINDER_POSITIVE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects if the reminder of the division is always positive\n */\npublic static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);"
            ],
            [
                "DATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the data key for memory\n */\npublic static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);"
            ],
            [
                "FLIP_SEL_POSITON",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag for flipping selector pos in muxers, decoders and drivers\n */\npublic static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();"
            ],
            [
                "ROTATE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the rotation of the elements\n */\npublic static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();"
            ],
            [
                "WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);"
            ],
            [
                "SHAPE_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * defines the shape type of the custom circuit\n */\npublic static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();"
            ],
            [
                "LAYOUT_SHAPE_DELTA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Defines the distance to the previous pin. Used by the layout shape type\n */\npublic static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));"
            ],
            [
                "TERM_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);"
            ],
            [
                "TERM_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);"
            ],
            [
                "CYCLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break timeout cycles\n */\npublic static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);"
            ],
            [
                "ENABLED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break enabled\n */\npublic static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();"
            ],
            [
                "VALUE_IS_PROBE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to make a value a probe\n */\npublic static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "IS_PROGRAM_MEMORY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();"
            ],
            [
                "IS_PROGRAM_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();"
            ],
            [
                "AUTO_RELOAD_ROM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the ROMs auto load function\n */\npublic static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();"
            ],
            [
                "LAST_DATA_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The last used ROM data file\n */\npublic static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();"
            ],
            [
                "SHOW_DATA_TABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data table window\n */\npublic static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH_MICRO",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window in single gate mode\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();"
            ],
            [
                "ADD_VALUE_TO_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to add the value to the measurement graph\n */\npublic static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();"
            ],
            [
                "MICRO_STEP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the single gate mode in the embedded data view\n */\npublic static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);"
            ],
            [
                "MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the embedded data view\n */\npublic static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);"
            ],
            [
                "SETTINGS_MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the default data view\n */\npublic static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);"
            ],
            [
                "IS_HIGH_Z",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable high z mode at an input\n */\npublic static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "AVOID_ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to avoid active low at an input\n */\npublic static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the description of an element\n */\npublic static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");"
            ],
            [
                "NETNAME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A net name\n */\npublic static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");"
            ],
            [
                "SETTINGS_IEEE_SHAPES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * shape setting\n */\npublic static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();"
            ],
            [
                "SETTINGS_LANGUAGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI Language\n */\npublic static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();"
            ],
            [
                "SETTINGS_DEFAULT_TREESELECT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Default state of the tree view\n */\npublic static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);"
            ],
            [
                "SETTINGS_EXPRESSION_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI expression string representation\n */\npublic static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);"
            ],
            [
                "SETTINGS_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the grid\n */\npublic static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();"
            ],
            [
                "SETTINGS_SHOW_WIRE_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the wire bits view\n */\npublic static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);"
            ],
            [
                "SETTINGS_MAC_MOUSE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the MAC mouse mode\n */\npublic static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables tunnel rename dialog\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);"
            ],
            [
                "SETTINGS_RENAME_LABELS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables renaming of labels ending with numbers while copying\n */\npublic static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);"
            ],
            [
                "SETTINGS_OPEN_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables remote port\n */\npublic static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();"
            ],
            [
                "SETTINGS_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * remote port\n */\npublic static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);"
            ],
            [
                "OSCILLATION_DETECTION_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Counter used to detect oscillations\n */\npublic static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);"
            ],
            [
                "INT_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();"
            ],
            [
                "PROBE_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());"
            ],
            [
                "FIXED_POINT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * fixed point fractional binary digits\n */\npublic static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();"
            ],
            [
                "GRAPHIC_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);"
            ],
            [
                "GRAPHIC_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);"
            ],
            [
                "RELAY_NORMALLY_CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a relay to indicate if it is normally open or normally closed.\n */\npublic static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();"
            ],
            [
                "POLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Number of poles in the double throw relay\n */\npublic static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();"
            ],
            [
                "BARREL_SHIFTER_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to select the shift mode\n */\npublic static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());"
            ],
            [
                "DIRECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate shift direction\n */\npublic static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());"
            ],
            [
                "BARREL_SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate if shift value is signed\n */\npublic static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);"
            ],
            [
                "COMMON_CONNECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to indicate if the 7-seg display has a common cathode output\n */\npublic static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();"
            ],
            [
                "COMMON_CONNECTION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to define the common connection type\n */\npublic static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();"
            ],
            [
                "LED_PERSISTENCE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);"
            ],
            [
                "LED_PERSIST_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();"
            ],
            [
                "SETTINGS_ATF1502_FITTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_ATMISP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Flash software for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();"
            ],
            [
                "ROW_DATA_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * row bits in led matrix\n */\npublic static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);"
            ],
            [
                "COL_ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * column address bits in led matrix\n */\npublic static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);"
            ],
            [
                "LOCKED_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * In locked mode the circuit can not be modified\n */\npublic static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);"
            ],
            [
                "PINNUMBER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin number\n */\npublic static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();"
            ],
            [
                "PINCOUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin count\n */\npublic static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));"
            ],
            [
                "INVERTER_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * contains the input inverter config\n */\npublic static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());"
            ],
            [
                "BACKGROUND_COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Background Color of nested circuits\n */\npublic static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));"
            ],
            [
                "SETTINGS_FONT_SCALING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the screen resolution\n */\npublic static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_USE_EQUALS_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses the equals key instead of the plus key.\n */\npublic static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;"
            ],
            [
                "WITH_ENABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if a enable input is needed\n */\npublic static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);"
            ],
            [
                "FET_UNIDIRECTIONAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true to simulate a unidirectional FET\n */\npublic static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);"
            ],
            [
                "ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if component is active low\n */\npublic static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();"
            ],
            [
                "MAP_TO_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if button is mapped to the keyboard\n */\npublic static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();"
            ],
            [
                "SETTINGS_LIBRARY_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf1502\n */\npublic static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_JAR_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A jar containing custom java components\n */\npublic static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "ROMMANAGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The manager which contains all the roms data\n */\npublic static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();"
            ],
            [
                "APPLICATION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The type of the external process\n */\npublic static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());"
            ],
            [
                "EXTERNAL_INPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The inputs used by the external process\n */\npublic static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");"
            ],
            [
                "EXTERNAL_OUTPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The outputs used by the external process\n */\npublic static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");"
            ],
            [
                "EXTERNAL_CODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);"
            ],
            [
                "EXTERNAL_CODE_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));"
            ],
            [
                "SETTINGS_GHDL_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to ghdl\n */\npublic static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();"
            ],
            [
                "GHDL_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The ghdl options\n */\npublic static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "IVERILOG_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The iverilog options\n */\npublic static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "SETTINGS_IVERILOG_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to iverilog installation directory\n */\npublic static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();"
            ],
            [
                "CUSTOM_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Shape used to represent a visual element\n */\npublic static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));"
            ],
            [
                "PRELOAD_PROGRAM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * True if a program is loaded to the simulator at startup\n */\npublic static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();"
            ],
            [
                "BIG_ENDIAN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);"
            ],
            [
                "PROGRAM_TO_PRELOAD",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The file to preload as a program at startup\n */\npublic static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "BIG_ENDIAN_SETTING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "WIDE_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects a wide shape\n */\npublic static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();"
            ],
            [
                "RECT_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of the rectangle\n */\npublic static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);"
            ],
            [
                "RECT_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the height of the rectangle\n */\npublic static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);"
            ],
            [
                "RECT_INSIDE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();"
            ],
            [
                "RECT_BOTTOM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();"
            ],
            [
                "RECT_RIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();"
            ],
            [
                "MIDI_CHANNEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);"
            ],
            [
                "MIDI_INSTRUMENT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");"
            ],
            [
                "MIDI_PROG_CHANGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables Program change\n */\npublic static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);"
            ],
            [
                "SETTINGS_TOOLCHAIN_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Stores the IDE settings file\n */\npublic static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();"
            ],
            [
                "GENERICLARGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();"
            ],
            [
                "IS_GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Circuit is generic\n */\npublic static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUTORIAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the tutorial\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();"
            ],
            [
                "SETTINGS_WIRETOOLTIP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the wire tool tips\n */\npublic static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);"
            ],
            [
                "SWITCH_ACTS_AS_INPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The switch acts as input\n */\npublic static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();"
            ],
            [
                "SNAP_TO_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Snaps the element to the grid\n */\npublic static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();"
            ],
            [
                "MIRROR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Mirrors the component\n */\npublic static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "TESTDATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The test data\n */\npublic static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);"
            ],
            [
                "TRIGGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The scope trigger mode\n */\npublic static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());"
            ],
            [
                "PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the telnet port\n */\npublic static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);"
            ],
            [
                "TELNET_ESCAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Telnet escape\n */\npublic static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();"
            ],
            [
                "SKIP_HDL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Skips HDL output for this circuit\n */\npublic static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();"
            ],
            [
                "PREFIX",
                "de.neemann.digital.core.basic",
                "FanIn",
                "/**\n * The inputs name prefix\n */\npublic static final String PREFIX = \"In_\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NOr",
                "/**\n * The NOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "And",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XNOr",
                "/**\n * The XNOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XOr",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Not",
                "/**\n * The Not description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NAnd",
                "/**\n * The NAnd description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Or",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "STARTED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STARTED event\n */\npublic static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CLOSED event\n */\npublic static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);"
            ],
            [
                "POSTCLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.POSTCLOSED event\n */\npublic static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);"
            ],
            [
                "STEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STEP event\n */\npublic static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);"
            ],
            [
                "CHECKBURN",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CHECKBURN event\n */\npublic static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);"
            ],
            [
                "MICROSTEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.MICROSTEP event\n */\npublic static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);"
            ],
            [
                "RUN_TO_BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK event\n */\npublic static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);"
            ],
            [
                "RUN_TO_BREAK_TIMEOUT",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK_TIMEOUT event\n */\npublic static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);"
            ],
            [
                "BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.BREAK event\n */\npublic static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGPFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "NFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGNFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "PFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "TransGate",
                "/**\n * The transmission gate description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "SwitchDT",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Relay",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "RelayDT",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Switch",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Fuse",
                "/**\n * The fuse description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Reset",
                "/**\n * The Reset description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Stop",
                "/**\n * The Stop element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Decoder",
                "/**\n * The Decoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Delay",
                "/**\n * The Delay description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Driver",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "DriverInvSel",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "PriorityEncoder",
                "/**\n * The PriorityEncoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BusSplitter",
                "/**\n * The bus splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * The splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Multiplexer",
                "/**\n * The Multiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BitSelector",
                "/**\n * The Bit Selector description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * The Break description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Clock",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "AsyncSeq",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Demultiplexer",
                "/**\n * The Demultiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopDAsync",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopD",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRSAsync",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopT",
                "/**\n * The T-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJKAsync",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJK",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "Monoflop",
                "/**\n * The Monoflop's description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRS",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BarrelShifter",
                "/**\n * The barrel shifter description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Mul",
                "/**\n * The multiplier description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Neg",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitExtender",
                "/**\n * Description of the sign extend component.\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Add",
                "/**\n * The adders description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Div",
                "/**\n * The dividers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "PRNG",
                "/**\n * The element type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Sub",
                "/**\n * The subtractors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Comparator",
                "/**\n * The comparators description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitCount",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "EMPTY_LIST",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * An empty list\n */\npublic static final ObservableValues EMPTY_LIST = new ObservableValues();"
            ],
            [
                "DEFAULT_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The default formatter\n */\npublic static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;"
            ],
            [
                "HEX_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The hexadecimal formatter\n */\npublic static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "External",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "ExternalFile",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DEFAULT_RAD",
                "de.neemann.digital.fsm",
                "State",
                "/**\n * The default state radius\n */\nstatic final int DEFAULT_RAD = 70;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "Lang",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "InstanceHolder",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.testing",
                "TestCaseElement",
                "/**\n * The TestCaseElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();"
            ],
            [
                "STATENAMES",
                "de.neemann.digital.analyse",
                "TruthTableTableModel",
                "/**\n * String representation of the states\n */\npublic static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };"
            ],
            [
                "ONE",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant true or one\n */\npublic static final Constant ONE = new Constant(true);"
            ],
            [
                "ZERO",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant false or zero\n */\npublic static final Constant ZERO = new Constant(false);"
            ],
            [
                "PRIMARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the primary panel\n */\npublic static final String PRIMARY = \"primary\";"
            ],
            [
                "SECONDARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the secondary panel\n */\npublic static final String SECONDARY = \"secondary\";"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * The single EditorFactory instance.\n */\nstatic final EditorFactory INSTANCE = new EditorFactory();"
            ],
            [
                "MAX_TERMINAL_STORED",
                "de.neemann.digital.gui.components.terminal",
                "ConsoleTerminal",
                "/**\n * Max amount of characters stored\n */\npublic static final int MAX_TERMINAL_STORED = 2048;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Terminal",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Keyboard",
                "/**\n * The keyboard description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "FAILED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for failed tests\n */\nstatic final Color FAILED_COLOR = new Color(255, 200, 200);"
            ],
            [
                "PASSED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for passed tests\n */\nstatic final Color PASSED_COLOR = new Color(200, 255, 200);"
            ],
            [
                "ICON_DELETE",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The delete icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");"
            ],
            [
                "ICON_COPY",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The copy icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "VGA",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "GraphicCard",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "LedMatrix",
                "/**\n * the LED-Matrix description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "ScopeTrigger",
                "/**\n * The ScopeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);"
            ],
            [
                "DATADESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The DataElement description\n */\npublic static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "TEXTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The TextElement description\n */\npublic static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "RECTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The shape for the rectangle\n */\npublic static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "LEFT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to left align the digits\n */\npublic final static float LEFT = 0.0f;"
            ],
            [
                "CENTER",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to center the digits\n */\npublic final static float CENTER = 0.5f;"
            ],
            [
                "RIGHT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to right align the digits\n */\npublic final static float RIGHT = 1.0f;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "Settings",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "SettingsHolder",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "BASE_FILE_KEY",
                "de.neemann.digital.hdl.hgs",
                "Context",
                "/**\n * Key used to store the base file name in the context\n */\npublic static final String BASE_FILE_KEY = \"baseFile\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericInitCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();"
            ],
            [
                "GEN_ARGS_KEY",
                "de.neemann.digital.draw.library",
                "ResolveGenerics",
                "/**\n * Key uses to store the args for the generic circuits\n */\npublic static final String GEN_ARGS_KEY = \"genArgs\";"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "ButtonShape",
                "protected static final int HEIGHT = OUT_SIZE / 2;"
            ],
            [
                "SIZE2",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Half the size of the used raster\n */\npublic static final int SIZE2 = 10;"
            ],
            [
                "SIZE",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * The size of the used raster\n */\npublic static final int SIZE = SIZE2 * 2;"
            ],
            [
                "CIRC",
                "de.neemann.digital.draw.shapes",
                "DILShape",
                "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);"
            ],
            [
                "DOWNSHIFT",
                "de.neemann.digital.draw.shapes",
                "VDDShape",
                "static final int DOWNSHIFT = 4;"
            ],
            [
                "CHARGED_GATE",
                "de.neemann.digital.draw.shapes",
                "FGFETShapeN",
                "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);"
            ],
            [
                "OUT_SIZE",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Size of the normal sized inputs and outputs\n */\npublic static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;"
            ],
            [
                "LATEX_RAD",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);"
            ],
            [
                "WIDTH2",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * half the width of the resistor\n */\npublic static final int WIDTH2 = SIZE2 - 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * height of the resistor\n */\npublic static final int HEIGHT = SIZE + SIZE / 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static final int HEIGHT = 7;"
            ],
            [
                "FRAME",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "/**\n * the Frame of the display\n */\npublic static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.elements",
                "Tunnel",
                "/**\n * The TunnelElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();"
            ],
            [
                "HIGH_CONTRAST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);"
            ],
            [
                "MONOCHROME",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);"
            ],
            [
                "SMALL_IO",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);"
            ],
            [
                "NO_PIN_MARKER",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);"
            ],
            [
                "THINNER_LINES",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);"
            ],
            [
                "HIDE_TEST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);"
            ],
            [
                "NO_SHAPE_FILLING",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);"
            ],
            [
                "LATEX",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);"
            ],
            [
                "PINS_IN_MATH_MODE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SettingsHolder",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to select the color map\n */\npublic static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();"
            ],
            [
                "CUSTOM_COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to define the custom color map\n */\npublic static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();"
            ],
            [
                "MAXLINETHICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * maximal line thickness\n */\npublic static final int MAXLINETHICK = 4;"
            ],
            [
                "NORMAL",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all lines to draw the shapes itself\n */\npublic static final Style NORMAL = new Builder().build();"
            ],
            [
                "DISABLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all disabled elements\n */\npublic static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();"
            ],
            [
                "INOUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for input and output labels\n */\npublic static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();"
            ],
            [
                "FAILED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the failed state lines in the measurement graph\n */\npublic static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();"
            ],
            [
                "PASS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the passed state lines in the measurement graph\n */\npublic static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();"
            ],
            [
                "NORMAL_TEXT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for text which is integral part of the shape.\n * Text which uses this style is always included in sizing!\n * Used for text only elements.\n */\npublic static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();"
            ],
            [
                "THIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin line used for the graphic in the clock or delay shape\n */\npublic static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();"
            ],
            [
                "THIN_FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin filled\n */\npublic static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();"
            ],
            [
                "THICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thick line used for the ground line\n */\npublic static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();"
            ],
            [
                "WIRE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in editing mode\n */\npublic static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "WIRE_LOW",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for low wires in running mode\n */\npublic static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();"
            ],
            [
                "WIRE_HIGH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for high wires in running mode\n */\npublic static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();"
            ],
            [
                "WIRE_HIGHZ",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in high Z state\n */\npublic static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();"
            ],
            [
                "WIRE_OUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the output dots\n */\npublic static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();"
            ],
            [
                "FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Filled style used to fill the splitter or the dark LEDs\n */\npublic static final Style FILLED = new Builder().setFilled(true).build();"
            ],
            [
                "DASH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the grid in the graph\n */\npublic static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();"
            ],
            [
                "SHAPE_PIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();"
            ],
            [
                "SHAPE_SPLITTER",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text for splitters\n */\npublic static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();"
            ],
            [
                "WIRE_VALUE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();"
            ],
            [
                "WIRE_BITS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the wire bit number\n */\npublic static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();"
            ],
            [
                "HIGHLIGHT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * highlight color used for the circles to mark an element\n */\npublic static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "ERROR",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * error color used for the circles to mark an element\n */\npublic static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "BLANK",
                "de.neemann.digital.draw.graphics.text.text",
                "Blank",
                "/**\n * the Blank instance\n */\npublic static final Blank BLANK = new Blank();"
            ],
            [
                "LOOK_AT_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String LOOK_AT_ALIAS = \"lookAt\";"
            ],
            [
                "REF_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String REF_ALIAS = \"ref\";"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "v",
                "de.neemann.digital.draw.graphics",
                "VectorInterface"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "transformDirection",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Transforms a direction vector.\n * Ignores the translation part of the transformation.\n *\n * @param v the vector to transform\n * @return the transformed vector\n */\npublic VectorFloat transformDirection(VectorInterface v) {\n    return new VectorFloat(v.getXFloat() * a + v.getYFloat() * b, v.getXFloat() * c + v.getYFloat() * d);\n}"
            ],
            [
                "getMatrix",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "@Override\npublic TransformMatrix getMatrix() {\n    return this;\n}"
            ],
            [
                "transform",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "@Override\npublic VectorFloat transform(VectorFloat v) {\n    return new VectorFloat(v.getXFloat() * a + v.getYFloat() * b + x, v.getXFloat() * c + v.getYFloat() * d + y);\n}"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getValues",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * @return the matrix values\n */\npublic float[] getValues() {\n    return new float[] { a, b, c, d, x, y };\n}"
            ],
            [
                "isUniform",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * @return true if this transformation does no asymmetric scaling.\n */\npublic boolean isUniform() {\n    return equal(a, d) && equal(b, -c);\n}"
            ],
            [
                "noRotation",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * @return true if this transformation does no rotation\n */\npublic boolean noRotation() {\n    return equal(b, 0) && equal(c, 0);\n}"
            ],
            [
                "invert",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Returns the inverse transformation.\n *\n * @return the inverse transformation.\n */\npublic TransformMatrix invert() {\n    float q = a * d - b * c;\n    return new TransformMatrix(d / q, -b / q, -c / q, a / q, (b * y - d * x) / q, (c * x - a * y) / q);\n}"
            ],
            [
                "transform",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "@Override\npublic Vector transform(Vector v) {\n    return new Vector((int) (v.getXFloat() * a + v.getYFloat() * b + x), (int) (v.getXFloat() * c + v.getYFloat() * d + y));\n}"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "invert",
                "de.neemann.digital.draw.graphics",
                "Transform",
                "public Transform invert()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "toFloat",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract VectorFloat toFloat()"
            ],
            [
                "getXFloat",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract float getXFloat()"
            ],
            [
                "getYFloat",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract float getYFloat()"
            ],
            [
                "sub",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract VectorInterface sub(VectorInterface arg0)"
            ],
            [
                "add",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract VectorInterface add(VectorInterface arg0)"
            ],
            [
                "getOrthogonal",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract VectorInterface getOrthogonal()"
            ],
            [
                "getY",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract int getY()"
            ],
            [
                "transform",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract VectorInterface transform(Transform arg0)"
            ],
            [
                "round",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract Vector round()"
            ],
            [
                "scalar",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public float scalar(VectorInterface arg0)"
            ],
            [
                "getX",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract int getX()"
            ],
            [
                "len",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract float len()"
            ],
            [
                "mul",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract VectorFloat mul(float arg0)"
            ],
            [
                "norm",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract VectorFloat norm()"
            ],
            [
                "div",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract VectorInterface div(int arg0)"
            ],
            [
                "getXFloat",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public float getXFloat()"
            ],
            [
                "norm",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorFloat norm()"
            ],
            [
                "equals",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public boolean equals(Object arg0)"
            ],
            [
                "round",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public Vector round()"
            ],
            [
                "add",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorFloat add(VectorInterface arg0)"
            ],
            [
                "len",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public float len()"
            ],
            [
                "getY",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public int getY()"
            ],
            [
                "getOrthogonal",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorFloat getOrthogonal()"
            ],
            [
                "transform",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorInterface transform(Transform arg0)"
            ],
            [
                "getYFloat",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public float getYFloat()"
            ],
            [
                "toFloat",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorFloat toFloat()"
            ],
            [
                "toString",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public String toString()"
            ],
            [
                "add",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorFloat add(float arg0, float arg1)"
            ],
            [
                "mul",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorFloat mul(float arg0)"
            ],
            [
                "div",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorFloat div(int arg0)"
            ],
            [
                "mul",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public float mul(VectorFloat arg0)"
            ],
            [
                "sub",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorFloat sub(VectorInterface arg0)"
            ],
            [
                "hashCode",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public int hashCode()"
            ],
            [
                "getX",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public int getX()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "a",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "final float a;"
            ],
            [
                "b",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "final float b;"
            ],
            [
                "c",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "final float c;"
            ],
            [
                "d",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "final float d;"
            ],
            [
                "x",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "final float x;"
            ],
            [
                "y",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "final float y;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 26716,
        "oracle": "v != null;",
        "oracleType": "PRE",
        "projectName": "Digital",
        "packageName": "de.neemann.digital.draw.graphics",
        "className": "TransformMatrix",
        "javadocTag": "@param v the vector to transform",
        "methodJavadoc": "    /**\n     * Transforms a direction vector.\n     * Ignores the translation part of the transformation.\n     *\n     * @param v the vector to transform\n     * @return the transformed vector\n     */",
        "methodSourceCode": "public VectorFloat transformDirection(VectorInterface v){\n    return new VectorFloat(v.getXFloat() * a + v.getYFloat() * b, v.getXFloat() * c + v.getYFloat() * d);\n}",
        "classJavadoc": "/**\n * A Matrix transformation\n */",
        "classSourceCode": "/*\n * Copyright (c) 2018 Helmut Neemann.\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.draw.graphics;\n\n/**\n * A Matrix transformation\n */\npublic class TransformMatrix implements Transform {\n\n\n    /**\n     * Creates a rotation.\n     * Rotates in mathematically positive direction. Takes into account that\n     * in Digital the y-axis goes downwards.\n     *\n     * @param w the angle in 360 grad units\n     * @return the transformation\n     */\n    public static TransformMatrix rotate(double w) {\n        final double phi = w / 180 * Math.PI;\n        float cos = (float) Math.cos(phi);\n        float sin = (float) Math.sin(phi);\n        return new TransformMatrix(cos, -sin, sin, cos, 0, 0);\n    }\n\n    /**\n     * Creates a scaling transformation\n     *\n     * @param sx scaling in x direction\n     * @param sy scaling in y direction\n     * @return the transformation\n     */\n    public static TransformMatrix scale(float sx, float sy) {\n        return new TransformMatrix(sx, 0, 0, sy, 0, 0);\n    }\n\n    final float a;\n    final float b;\n    final float c;\n    final float d;\n    final float x;\n    final float y;\n\n    /**\n     * Creates a new instance\n     *\n     * @param a A_00\n     * @param b A_10\n     * @param c A_01\n     * @param d A_11\n     * @param x x offset\n     * @param y y offset\n     */\n    public TransformMatrix(float a, float b, float c, float d, float x, float y) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.x = x;\n        this.y = y;\n    }\n\n    @Override\n    public Vector transform(Vector v) {\n        return new Vector(\n                (int) (v.getXFloat() * a + v.getYFloat() * b + x),\n                (int) (v.getXFloat() * c + v.getYFloat() * d + y));\n    }\n\n    @Override\n    public VectorFloat transform(VectorFloat v) {\n        return new VectorFloat(\n                v.getXFloat() * a + v.getYFloat() * b + x,\n                v.getXFloat() * c + v.getYFloat() * d + y);\n    }\n\n\n    /**\n     * Transforms a direction vector.\n     * Ignores the translation part of the transformation.\n     *\n     * @param v the vector to transform\n     * @return the transformed vector\n     */\n    public VectorFloat transformDirection(VectorInterface v) {\n        return new VectorFloat(\n                v.getXFloat() * a + v.getYFloat() * b,\n                v.getXFloat() * c + v.getYFloat() * d);\n    }\n\n    @Override\n    public TransformMatrix getMatrix() {\n        return this;\n    }\n\n    /**\n     * Returns the inverse transformation.\n     *\n     * @return the inverse transformation.\n     */\n    public TransformMatrix invert() {\n        float q = a * d - b * c;\n\n        return new TransformMatrix(d / q, -b / q, -c / q, a / q,\n                (b * y - d * x) / q, (c * x - a * y) / q);\n    }\n\n    /**\n     * @return true if this transformation does no asymmetric scaling.\n     */\n    public boolean isUniform() {\n        return equal(a, d) && equal(b, -c);\n    }\n\n    /**\n     * @return true if this transformation does no rotation\n     */\n    public boolean noRotation() {\n        return equal(b, 0) && equal(c, 0);\n    }\n\n    private static boolean equal(float a, float b) {\n        return Math.abs(a - b) < 1e-7;\n    }\n\n    /**\n     * @return the matrix values\n     */\n    public float[] getValues() {\n        return new float[]{a, b, c, d, x, y};\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "CLI",
                "de.neemann"
            ],
            [
                "Mouse",
                "de.neemann.gui"
            ],
            [
                "LineBreaker",
                "de.neemann.gui"
            ],
            [
                "IconCreator",
                "de.neemann.gui"
            ],
            [
                "ConfirmDialogBuilder",
                "de.neemann.gui"
            ],
            [
                "Resources",
                "de.neemann.gui.language"
            ],
            [
                "Bundle",
                "de.neemann.gui.language"
            ],
            [
                "Language",
                "de.neemann.gui.language"
            ],
            [
                "ToolTipAction",
                "de.neemann.gui"
            ],
            [
                "MyFileChooser",
                "de.neemann.gui"
            ],
            [
                "ClosingWindowListener",
                "de.neemann.gui"
            ],
            [
                "ErrorMessage",
                "de.neemann.gui"
            ],
            [
                "WindowSizeStorage",
                "de.neemann.gui"
            ],
            [
                "Screen",
                "de.neemann.gui"
            ],
            [
                "ToolTipProvider",
                "de.neemann.gui"
            ],
            [
                "InfoDialog",
                "de.neemann.gui"
            ],
            [
                "ValueFormatter",
                "de.neemann.digital.core"
            ],
            [
                "ModelStateObserver",
                "de.neemann.digital.core"
            ],
            [
                "PullDown",
                "de.neemann.digital.core.pld"
            ],
            [
                "Diode",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeBackward",
                "de.neemann.digital.core.pld"
            ],
            [
                "PullUp",
                "de.neemann.digital.core.pld"
            ],
            [
                "DiodeForward",
                "de.neemann.digital.core.pld"
            ],
            [
                "Node",
                "de.neemann.digital.core"
            ],
            [
                "RAMSinglePort",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualAccess",
                "de.neemann.digital.core.memory"
            ],
            [
                "ByteArrayFromValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "Importer",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "LogisimReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "DataFieldValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArrayReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "IntelHexReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "BinReader",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "ByteArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "MultiValueArray",
                "de.neemann.digital.core.memory.importer"
            ],
            [
                "CounterPreset",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Register",
                "de.neemann.digital.core.memory"
            ],
            [
                "LookUpTable",
                "de.neemann.digital.core.memory"
            ],
            [
                "BlockRAMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "Counter",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROMMangerBase",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManagerFile",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMManager",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "ROMInterface",
                "de.neemann.digital.core.memory.rom"
            ],
            [
                "EEPROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramCounter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMAsync",
                "de.neemann.digital.core.memory"
            ],
            [
                "ROM",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataField",
                "de.neemann.digital.core.memory"
            ],
            [
                "EEPROMDualPort",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMInterface",
                "de.neemann.digital.core.memory"
            ],
            [
                "DataFieldConverter",
                "de.neemann.digital.core.memory"
            ],
            [
                "RAMSinglePortSel",
                "de.neemann.digital.core.memory"
            ],
            [
                "ProgramMemory",
                "de.neemann.digital.core.memory"
            ],
            [
                "RegisterFile",
                "de.neemann.digital.core.memory"
            ],
            [
                "ModelStateObserverTyped",
                "de.neemann.digital.core"
            ],
            [
                "Observable",
                "de.neemann.digital.core"
            ],
            [
                "NodeWithoutDelay",
                "de.neemann.digital.core"
            ],
            [
                "ExceptionWithOrigin",
                "de.neemann.digital.core"
            ],
            [
                "ObservableValue",
                "de.neemann.digital.core"
            ],
            [
                "SpeedTest",
                "de.neemann.digital.core"
            ],
            [
                "BurnException",
                "de.neemann.digital.core"
            ],
            [
                "GlobalValues",
                "de.neemann.digital.core"
            ],
            [
                "MIDI",
                "de.neemann.digital.core.io"
            ],
            [
                "RGBLED",
                "de.neemann.digital.core.io"
            ],
            [
                "Out",
                "de.neemann.digital.core.io"
            ],
            [
                "RotEncoder",
                "de.neemann.digital.core.io"
            ],
            [
                "PinControl",
                "de.neemann.digital.core.io"
            ],
            [
                "DipSwitch",
                "de.neemann.digital.core.io"
            ],
            [
                "CommonConnectionType",
                "de.neemann.digital.core.io"
            ],
            [
                "LightBulb",
                "de.neemann.digital.core.io"
            ],
            [
                "Probe",
                "de.neemann.digital.core.io"
            ],
            [
                "Button",
                "de.neemann.digital.core.io"
            ],
            [
                "ButtonLED",
                "de.neemann.digital.core.io"
            ],
            [
                "In",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorUnipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "ProbeMode",
                "de.neemann.digital.core.io"
            ],
            [
                "NotConnected",
                "de.neemann.digital.core.io"
            ],
            [
                "MIDIHelper",
                "de.neemann.digital.core.io"
            ],
            [
                "StepperMotorBipolar",
                "de.neemann.digital.core.io"
            ],
            [
                "Const",
                "de.neemann.digital.core.io"
            ],
            [
                "PowerSupply",
                "de.neemann.digital.core.io"
            ],
            [
                "Ground",
                "de.neemann.digital.core.io"
            ],
            [
                "InValue",
                "de.neemann.digital.core.io"
            ],
            [
                "VDD",
                "de.neemann.digital.core.io"
            ],
            [
                "ServerHolder",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Telnet",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ByteBuffer",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "Server",
                "de.neemann.digital.core.io.telnet"
            ],
            [
                "ElementAttributes",
                "de.neemann.digital.core.element"
            ],
            [
                "Element",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementFactory",
                "de.neemann.digital.core.element"
            ],
            [
                "PinInfo",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescriptions",
                "de.neemann.digital.core.element"
            ],
            [
                "PinDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "Keys",
                "de.neemann.digital.core.element"
            ],
            [
                "Rotation",
                "de.neemann.digital.core.element"
            ],
            [
                "AttributeListener",
                "de.neemann.digital.core.element"
            ],
            [
                "Key",
                "de.neemann.digital.core.element"
            ],
            [
                "ImmutableList",
                "de.neemann.digital.core.element"
            ],
            [
                "ElementTypeDescription",
                "de.neemann.digital.core.element"
            ],
            [
                "FanIn",
                "de.neemann.digital.core.basic"
            ],
            [
                "NOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "And",
                "de.neemann.digital.core.basic"
            ],
            [
                "XNOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "XOr",
                "de.neemann.digital.core.basic"
            ],
            [
                "Not",
                "de.neemann.digital.core.basic"
            ],
            [
                "NAnd",
                "de.neemann.digital.core.basic"
            ],
            [
                "Function",
                "de.neemann.digital.core.basic"
            ],
            [
                "Or",
                "de.neemann.digital.core.basic"
            ],
            [
                "ExceptionWithOriginInterface",
                "de.neemann.digital.core"
            ],
            [
                "ModelEvent",
                "de.neemann.digital.core"
            ],
            [
                "BacktrackException",
                "de.neemann.digital.core"
            ],
            [
                "PlainSwitch",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGPFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "NFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "FGNFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PFET",
                "de.neemann.digital.core.switching"
            ],
            [
                "PlainSwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "TransGate",
                "de.neemann.digital.core.switching"
            ],
            [
                "SwitchDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Relay",
                "de.neemann.digital.core.switching"
            ],
            [
                "RelayDT",
                "de.neemann.digital.core.switching"
            ],
            [
                "Switch",
                "de.neemann.digital.core.switching"
            ],
            [
                "Fuse",
                "de.neemann.digital.core.switching"
            ],
            [
                "Reset",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Stop",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Decoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Delay",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Driver",
                "de.neemann.digital.core.wiring"
            ],
            [
                "DataBus",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "SingleBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "ConnectedBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "AbstractBusHandler",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "BusModelStateObserver",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "CommonBusValue",
                "de.neemann.digital.core.wiring.bus"
            ],
            [
                "DriverInvSel",
                "de.neemann.digital.core.wiring"
            ],
            [
                "PriorityEncoder",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BusSplitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Splitter",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Multiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitSelector",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Break",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Clock",
                "de.neemann.digital.core.wiring"
            ],
            [
                "AsyncSeq",
                "de.neemann.digital.core.wiring"
            ],
            [
                "Demultiplexer",
                "de.neemann.digital.core.wiring"
            ],
            [
                "BitsException",
                "de.neemann.digital.core"
            ],
            [
                "NodeInterface",
                "de.neemann.digital.core"
            ],
            [
                "NodeException",
                "de.neemann.digital.core"
            ],
            [
                "FlipflopDAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopD",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRSAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopT",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJKAsync",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopJK",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "Monoflop",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopRS",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "FlipflopBit",
                "de.neemann.digital.core.flipflops"
            ],
            [
                "BarrelShifter",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Mul",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Neg",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitExtender",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Add",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Div",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "LeftRightFormat",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "PRNG",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Sub",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BarrelShifterMode",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "Comparator",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "BitCount",
                "de.neemann.digital.core.arithmetic"
            ],
            [
                "ObservableValues",
                "de.neemann.digital.core"
            ],
            [
                "Value",
                "de.neemann.digital.core"
            ],
            [
                "IntFormat",
                "de.neemann.digital.core"
            ],
            [
                "SyncAccess",
                "de.neemann.digital.core"
            ],
            [
                "Bits",
                "de.neemann.digital.core"
            ],
            [
                "ProcessInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "StdIOInterface",
                "de.neemann.digital.core.extern.handler"
            ],
            [
                "ApplicationVerilogStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "Application",
                "de.neemann.digital.core.extern"
            ],
            [
                "External",
                "de.neemann.digital.core.extern"
            ],
            [
                "Port",
                "de.neemann.digital.core.extern"
            ],
            [
                "PortDefinition",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGHDL",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationIVerilog",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationVHDLStdIO",
                "de.neemann.digital.core.extern"
            ],
            [
                "VHDLTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ApplicationGeneric",
                "de.neemann.digital.core.extern"
            ],
            [
                "Options",
                "de.neemann.digital.core.extern"
            ],
            [
                "VerilogTokenizer",
                "de.neemann.digital.core.extern"
            ],
            [
                "ExternalFile",
                "de.neemann.digital.core.extern"
            ],
            [
                "ProcessStarter",
                "de.neemann.digital.core.extern"
            ],
            [
                "ModelEventType",
                "de.neemann.digital.core"
            ],
            [
                "Observer",
                "de.neemann.digital.core"
            ],
            [
                "ErrorDetector",
                "de.neemann.digital.core"
            ],
            [
                "Statistics",
                "de.neemann.digital.core.stats"
            ],
            [
                "Countable",
                "de.neemann.digital.core.stats"
            ],
            [
                "Model",
                "de.neemann.digital.core"
            ],
            [
                "Signal",
                "de.neemann.digital.core"
            ],
            [
                "StringList",
                "de.neemann.digital"
            ],
            [
                "XStreamValid",
                "de.neemann.digital"
            ],
            [
                "StatsExport",
                "de.neemann.digital.cli"
            ],
            [
                "SVGExport",
                "de.neemann.digital.cli"
            ],
            [
                "CommandLineTester",
                "de.neemann.digital.cli"
            ],
            [
                "CSVWriter",
                "de.neemann.digital.cli"
            ],
            [
                "BasicCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Argument",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLIException",
                "de.neemann.digital.cli.cli"
            ],
            [
                "Muxer",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentKey",
                "de.neemann.digital.cli.cli"
            ],
            [
                "NamedCommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CLICommand",
                "de.neemann.digital.cli.cli"
            ],
            [
                "ArgumentBase",
                "de.neemann.digital.cli.cli"
            ],
            [
                "CircuitLoader",
                "de.neemann.digital.cli"
            ],
            [
                "Main",
                "de.neemann.digital.cli"
            ],
            [
                "Modification",
                "de.neemann.digital.undo"
            ],
            [
                "Modifications",
                "de.neemann.digital.undo"
            ],
            [
                "ModifyException",
                "de.neemann.digital.undo"
            ],
            [
                "Copyable",
                "de.neemann.digital.undo"
            ],
            [
                "UndoManager",
                "de.neemann.digital.undo"
            ],
            [
                "ChangedListener",
                "de.neemann.digital.undo"
            ],
            [
                "CircuitRepresentation",
                "de.neemann.digital.fsm"
            ],
            [
                "Transition",
                "de.neemann.digital.fsm"
            ],
            [
                "Movable",
                "de.neemann.digital.fsm"
            ],
            [
                "MouseMovable",
                "de.neemann.digital.fsm"
            ],
            [
                "Optimizer",
                "de.neemann.digital.fsm"
            ],
            [
                "Permute",
                "de.neemann.digital.fsm"
            ],
            [
                "FiniteStateMachineException",
                "de.neemann.digital.fsm"
            ],
            [
                "TransitionTableCreator",
                "de.neemann.digital.fsm"
            ],
            [
                "ValueParser",
                "de.neemann.digital.fsm"
            ],
            [
                "WaitGroup",
                "de.neemann.digital.fsm"
            ],
            [
                "FSMComponent",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMFrame",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "OptimizerDialog",
                "de.neemann.digital.fsm.gui"
            ],
            [
                "FSMDemos",
                "de.neemann.digital.fsm"
            ],
            [
                "FSM",
                "de.neemann.digital.fsm"
            ],
            [
                "State",
                "de.neemann.digital.fsm"
            ],
            [
                "Lang",
                "de.neemann.digital.lang"
            ],
            [
                "LineListenerResolveDontCare",
                "de.neemann.digital.testing"
            ],
            [
                "TestingDataException",
                "de.neemann.digital.testing"
            ],
            [
                "UnitTester",
                "de.neemann.digital.testing"
            ],
            [
                "FolderTestRunner",
                "de.neemann.digital.testing"
            ],
            [
                "TestExecutor",
                "de.neemann.digital.testing"
            ],
            [
                "Transitions",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseDescription",
                "de.neemann.digital.testing"
            ],
            [
                "TestCaseElement",
                "de.neemann.digital.testing"
            ],
            [
                "LineEmitterRepeat",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Parser",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppenderBits",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ParserException",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Context",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ModelInitializer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Expression",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterList",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestRow",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitter",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterWhile",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.testing.parser"
            ],
            [
                "LineEmitterSimple",
                "de.neemann.digital.testing.parser"
            ],
            [
                "Random",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "SignExtend",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "IfThenElse",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "Function",
                "de.neemann.digital.testing.parser.functions"
            ],
            [
                "LineListener",
                "de.neemann.digital.testing.parser"
            ],
            [
                "VirtualSignal",
                "de.neemann.digital.testing.parser"
            ],
            [
                "ValueAppender",
                "de.neemann.digital.testing.parser"
            ],
            [
                "OperatorPrecedence",
                "de.neemann.digital.testing.parser"
            ],
            [
                "TestResultListener",
                "de.neemann.digital.testing"
            ],
            [
                "MatchedValue",
                "de.neemann.digital.testing"
            ],
            [
                "TestResult",
                "de.neemann.digital.testing"
            ],
            [
                "MinimizerInterface",
                "de.neemann.digital.analyse"
            ],
            [
                "LabelNumbering",
                "de.neemann.digital.analyse"
            ],
            [
                "ModelAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "CSVImporter",
                "de.neemann.digital.analyse"
            ],
            [
                "BoolTableExpanded",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableTableModel",
                "de.neemann.digital.analyse"
            ],
            [
                "TableReducer",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "PrimeSelector",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForce",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "LargestFirst",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BruteForceGetAll",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "PrimeSelectorDefault",
                "de.neemann.digital.analyse.quinemc.primeselector"
            ],
            [
                "BoolTableByteArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "IndependentChecker",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskey",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableExpression",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTableBoolArray",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "BoolTable",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRows",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "ThreeStateValue",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "QuineMcCluskeyExam",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TableRow",
                "de.neemann.digital.analyse.quinemc"
            ],
            [
                "TruthTableConverter",
                "de.neemann.digital.analyse"
            ],
            [
                "DetermineJKStateMachine",
                "de.neemann.digital.analyse"
            ],
            [
                "Parser",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ParseException",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.analyse.parser"
            ],
            [
                "ModelAnalyserInfo",
                "de.neemann.digital.analyse"
            ],
            [
                "AnalyseException",
                "de.neemann.digital.analyse"
            ],
            [
                "DependencyAnalyser",
                "de.neemann.digital.analyse"
            ],
            [
                "SubstituteLibrary",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTableFormatterHex",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatter",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterTestCase",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterCSV",
                "de.neemann.digital.analyse.format"
            ],
            [
                "TruthTableFormatterLaTeX",
                "de.neemann.digital.analyse.format"
            ],
            [
                "MinimizerQuineMcCluskey",
                "de.neemann.digital.analyse"
            ],
            [
                "ContextFiller",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "BitSetter",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ContextMap",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Operation",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Context",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NInputs",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NOr",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "ExpressionModifier",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "NAnd",
                "de.neemann.digital.analyse.expression.modify"
            ],
            [
                "Constant",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Variable",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ExpressionException",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "ComplexityInclNotVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "Equals",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "FormatToExpression",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTable",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Formatter",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatterException",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "FormatToTableLatex",
                "de.neemann.digital.analyse.expression.format"
            ],
            [
                "Not",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "VariableVisitor",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "NamedExpression",
                "de.neemann.digital.analyse.expression"
            ],
            [
                "MinimizerQuineMcCluskeyExam",
                "de.neemann.digital.analyse"
            ],
            [
                "TruthTable",
                "de.neemann.digital.analyse"
            ],
            [
                "SplitPinString",
                "de.neemann.digital.analyse"
            ],
            [
                "CycleDetector",
                "de.neemann.digital.analyse"
            ],
            [
                "DigitalRemoteInterface",
                "de.neemann.digital.gui"
            ],
            [
                "TextSearchFilter",
                "de.neemann.digital.gui"
            ],
            [
                "ExportZipAction",
                "de.neemann.digital.gui"
            ],
            [
                "SettingsBase",
                "de.neemann.digital.gui"
            ],
            [
                "DocumentationLocator",
                "de.neemann.digital.gui"
            ],
            [
                "InitialTutorial",
                "de.neemann.digital.gui.tutorial"
            ],
            [
                "InsertAction",
                "de.neemann.digital.gui"
            ],
            [
                "StatusInterface",
                "de.neemann.digital.gui"
            ],
            [
                "SearchTextField",
                "de.neemann.digital.gui"
            ],
            [
                "SaveAsHelper",
                "de.neemann.digital.gui"
            ],
            [
                "FileHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ReleaseInfo",
                "de.neemann.digital.gui.release"
            ],
            [
                "CheckForNewRelease",
                "de.neemann.digital.gui.release"
            ],
            [
                "StateInterface",
                "de.neemann.digital.gui.state"
            ],
            [
                "StateManager",
                "de.neemann.digital.gui.state"
            ],
            [
                "State",
                "de.neemann.digital.gui.state"
            ],
            [
                "CircuitScrollPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "ItemPicker",
                "de.neemann.digital.gui.components"
            ],
            [
                "LibraryTreeModel",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "SelectTree",
                "de.neemann.digital.gui.components.tree"
            ],
            [
                "WindowPosManager",
                "de.neemann.digital.gui.components"
            ],
            [
                "CustomShapeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "TransformHolder",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorPanel",
                "de.neemann.digital.gui.components"
            ],
            [
                "BehavioralFixtureCreator",
                "de.neemann.digital.gui.components"
            ],
            [
                "EditorFactory",
                "de.neemann.digital.gui.components"
            ],
            [
                "OrderMerger",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementOrderer",
                "de.neemann.digital.gui.components"
            ],
            [
                "ModifyMoveSelected",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteRect",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWires",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModificationOfVisualElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyCircuitAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteWire",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMoveAndRotElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyMeasurementOrdering",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyDeleteElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttribute",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyAttributes",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "ModifyInsertElement",
                "de.neemann.digital.gui.components.modification"
            ],
            [
                "DataEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "CircuitModifierPostClosed",
                "de.neemann.digital.gui.components"
            ],
            [
                "CharDeleter",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "ConsoleTerminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Terminal",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "TerminalInterface",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Keyboard",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "KeyboardDialog",
                "de.neemann.digital.gui.components.terminal"
            ],
            [
                "Editor",
                "de.neemann.digital.gui.components"
            ],
            [
                "VarRectList",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMap",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapComponent",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughMapDialog",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "MapLayout",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "KarnaughException",
                "de.neemann.digital.gui.components.karnaugh"
            ],
            [
                "CircuitTransferable",
                "de.neemann.digital.gui.components"
            ],
            [
                "ElementHelpDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "TestCaseDescriptionDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ValueTableDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestCaseDescriptionEditor",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "TestAllDialog",
                "de.neemann.digital.gui.components.testing"
            ],
            [
                "ExpressionListenerOptimizeJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "LaTeXExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "HardwareDescriptionGenerator",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateFile",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "GenerateCUPL",
                "de.neemann.digital.gui.components.table.hardware"
            ],
            [
                "ExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderOutputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AllSolutionsDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerJK",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerCSVCondensed",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "BuilderExpressionCreator",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionComponent",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "PlainTextExpressionListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "TableReorderManager",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ShowStringDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ReorderInputs",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ProgressDialog",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "CheckResultListener",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "ExpressionListenerStore",
                "de.neemann.digital.gui.components.table"
            ],
            [
                "AttributeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ProbeDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ColorSchemeEditor",
                "de.neemann.digital.gui.components"
            ],
            [
                "ROMEditorDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "LabelGenerator",
                "de.neemann.digital.gui.components"
            ],
            [
                "SingleValueDialog",
                "de.neemann.digital.gui.components"
            ],
            [
                "ExpressionDialog",
                "de.neemann.digital.gui.components.expression"
            ],
            [
                "CircuitComponent",
                "de.neemann.digital.gui.components"
            ],
            [
                "VGA",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicCard",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrix",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "VGADialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "MoveFocusTo",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "GraphicComponent",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "LedMatrixDialog",
                "de.neemann.digital.gui.components.graphics"
            ],
            [
                "ConstraintsBuilder",
                "de.neemann.digital.gui.components"
            ],
            [
                "ScopeTrigger",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphDialog",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "GraphComponent",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "DummyElement",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "ValueTableObserver",
                "de.neemann.digital.gui.components.data"
            ],
            [
                "CircuitModifier",
                "de.neemann.digital.gui.components"
            ],
            [
                "CopiedElementLabelRenamer",
                "de.neemann.digital.gui.components"
            ],
            [
                "TextLineNumber",
                "de.neemann.digital.gui.components"
            ],
            [
                "InsertHistory",
                "de.neemann.digital.gui"
            ],
            [
                "ProgramMemoryLoader",
                "de.neemann.digital.gui"
            ],
            [
                "Main",
                "de.neemann.digital.gui"
            ],
            [
                "StatsDialog",
                "de.neemann.digital.gui"
            ],
            [
                "WindowManager",
                "de.neemann.digital.gui"
            ],
            [
                "Settings",
                "de.neemann.digital.gui"
            ],
            [
                "LibrarySelector",
                "de.neemann.digital.gui"
            ],
            [
                "DigitalUncaughtExceptionHandler",
                "de.neemann.digital.gui"
            ],
            [
                "NumberingWizard",
                "de.neemann.digital.gui"
            ],
            [
                "HandlerInterface",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteSever",
                "de.neemann.digital.gui.remote"
            ],
            [
                "RemoteException",
                "de.neemann.digital.gui.remote"
            ],
            [
                "DigitalHandler",
                "de.neemann.digital.gui.remote"
            ],
            [
                "ModelModifier",
                "de.neemann.digital.gui"
            ],
            [
                "VerilogCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogRenaming",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogGenerator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogTestBenchCreator",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "VerilogElement",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogTemplate",
                "de.neemann.digital.hdl.verilog2.lib"
            ],
            [
                "VerilogLibrary",
                "de.neemann.digital.hdl.verilog2"
            ],
            [
                "CodePrinter",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "CodePrinterStr",
                "de.neemann.digital.hdl.printer"
            ],
            [
                "Statements",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Parser",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ParserException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Statement",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Context",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "FirstClassFunctionCall",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "InnerFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "JavaClass",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "FirstClassFunction",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Func",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Function",
                "de.neemann.digital.hdl.hgs.function"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSEvalException",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Tokenizer",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "ReferenceToFunc",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToStruct",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToArray",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Reference",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "ReferenceToVar",
                "de.neemann.digital.hdl.hgs.refs"
            ],
            [
                "Value",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSMap",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "HGSArray",
                "de.neemann.digital.hdl.hgs"
            ],
            [
                "Separator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLLibrary",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLRenaming",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLGenerator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "VHDLEntity",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplate",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTemplateFunctions",
                "de.neemann.digital.hdl.vhdl2.entities"
            ],
            [
                "VHDLTestBenchCreator",
                "de.neemann.digital.hdl.vhdl2"
            ],
            [
                "HDLModel",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNode",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNet",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "Printable",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLException",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLPort",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HasName",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "InlineManyToOne",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeAssignments",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "Optimization",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "MergeConstants",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "ReplaceOneToMany",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NameConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "OptimizeExpressions",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "RemoveConstantSignals",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "NodeSorterExpressionBased",
                "de.neemann.digital.hdl.model2.optimizations"
            ],
            [
                "HDLNodeSplitterManyToOne",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeCustom",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLNodeAssignment",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLCircuit",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "ExprVar",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Visitor",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprVarRange",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "Expression",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExpressionOptimizer",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprNot",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprConstant",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprOperate",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "ExprUsingNet",
                "de.neemann.digital.hdl.model2.expression"
            ],
            [
                "HDLNodeBuildIn",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "HDLClockIntegrator",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockIntegratorGeneric",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "ClockInfo",
                "de.neemann.digital.hdl.model2.clock"
            ],
            [
                "HDLNodeSplitterOneToMany",
                "de.neemann.digital.hdl.model2"
            ],
            [
                "FileLocator",
                "de.neemann.digital"
            ],
            [
                "ValueTable",
                "de.neemann.digital.data"
            ],
            [
                "ValueTableModel",
                "de.neemann.digital.data"
            ],
            [
                "DataPlotter",
                "de.neemann.digital.data"
            ],
            [
                "Value",
                "de.neemann.digital.data"
            ],
            [
                "ExpressionExporter",
                "de.neemann.digital.builder"
            ],
            [
                "ExpressionToFileExporter",
                "de.neemann.digital.builder"
            ],
            [
                "RotationByteArrayOutputStream",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "TT2Exporter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "StartATF150xFitter",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "OSExecute",
                "de.neemann.digital.builder.tt2"
            ],
            [
                "CreateCHN",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDevice",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATFDialog",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PL",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "ATF150xCuplExporter",
                "de.neemann.digital.builder.ATF150x"
            ],
            [
                "PinMap",
                "de.neemann.digital.builder"
            ],
            [
                "PinMapException",
                "de.neemann.digital.builder"
            ],
            [
                "FragmentExpression",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisualElement",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentSameInValue",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "CircuitBuilder",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVisitor",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "FragmentVariable",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Fragment",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Box",
                "de.neemann.digital.builder.circuit"
            ],
            [
                "Gal16v8JEDECExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CuplExporter",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "BuilderCollectorGAL",
                "de.neemann.digital.builder.Gal16v8"
            ],
            [
                "CleanNameBuilder",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderCollector",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderInterface",
                "de.neemann.digital.builder"
            ],
            [
                "BuilderException",
                "de.neemann.digital.builder"
            ],
            [
                "Gal22v10JEDECExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "Gal22v10CuplExporter",
                "de.neemann.digital.builder.Gal22v10"
            ],
            [
                "FuseMap",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFillerException",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "FuseMapFiller",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "JedecWriter",
                "de.neemann.digital.builder.jedec"
            ],
            [
                "GenericCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibrary",
                "de.neemann.digital.draw.library"
            ],
            [
                "GenericInitCode",
                "de.neemann.digital.draw.library"
            ],
            [
                "Visitor",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryListener",
                "de.neemann.digital.draw.library"
            ],
            [
                "JarComponentManager",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementLibraryFolder",
                "de.neemann.digital.draw.library"
            ],
            [
                "CustomElement",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundNotification",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementNotFoundException",
                "de.neemann.digital.draw.library"
            ],
            [
                "ComponentSource",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryInterface",
                "de.neemann.digital.draw.library"
            ],
            [
                "ResolveGenerics",
                "de.neemann.digital.draw.library"
            ],
            [
                "LibraryNode",
                "de.neemann.digital.draw.library"
            ],
            [
                "ElementTypeDescriptionCustom",
                "de.neemann.digital.draw.library"
            ],
            [
                "InvalidNodeException",
                "de.neemann.digital.draw.library"
            ],
            [
                "NumStringComparator",
                "de.neemann.digital.draw.library"
            ],
            [
                "InputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Interactor",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Drawable",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeBackwardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FuseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DILShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DipSwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LightBulbShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LayoutShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PolarityAwareLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ButtonLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ConstShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BreakShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TextShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegHexShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ProbeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "NotConnectedShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "StepperMotorShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BitSelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenSegShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GenericInitCodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RelayDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RectShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "VDDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RAMShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ScopeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DemuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "BusSplitterShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullUpShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TestCaseShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TunnelShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MuxerShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SwitchDTShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PinControlShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "FGFETShapeN",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "TransGateShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ResetShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DiodeForewardShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SixteenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "CustomCircuitShapeType",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "InteractorInterface",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeSpecificMatch",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "LEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RGBLEDShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "RotEncoderShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "IEEEGenericShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEENotShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEAndShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "IEEEXOrShape",
                "de.neemann.digital.draw.shapes.ieee"
            ],
            [
                "ObservableValueReader",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SvgTemplate",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "TransformParser",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "Context",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgException",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "SvgImporter",
                "de.neemann.digital.draw.shapes.custom.svg"
            ],
            [
                "CustomShapeDescription",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "CustomShape",
                "de.neemann.digital.draw.shapes.custom"
            ],
            [
                "FGFETShapeP",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "OutputShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "GroundShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "AsyncClockShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "Shape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "MissingShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "ShapeFactory",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "PullDownShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DriverShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "SevenShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DataShape",
                "de.neemann.digital.draw.shapes"
            ],
            [
                "DotCreator",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Wire",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Movable",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pins",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Circuit",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Tunnel",
                "de.neemann.digital.draw.elements"
            ],
            [
                "PinException",
                "de.neemann.digital.draw.elements"
            ],
            [
                "ElementOrder",
                "de.neemann.digital.draw.elements"
            ],
            [
                "VisualElement",
                "de.neemann.digital.draw.elements"
            ],
            [
                "Pin",
                "de.neemann.digital.draw.elements"
            ],
            [
                "IOState",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireMerger",
                "de.neemann.digital.draw.elements"
            ],
            [
                "WireConsistencyChecker",
                "de.neemann.digital.draw.elements"
            ],
            [
                "AsyncSequentialClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelEntry",
                "de.neemann.digital.draw.model"
            ],
            [
                "Net",
                "de.neemann.digital.draw.model"
            ],
            [
                "ModelCreator",
                "de.neemann.digital.draw.model"
            ],
            [
                "InverterConfig",
                "de.neemann.digital.draw.model"
            ],
            [
                "NetList",
                "de.neemann.digital.draw.model"
            ],
            [
                "RealTimeClock",
                "de.neemann.digital.draw.model"
            ],
            [
                "Polygon",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Orientation",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Vector",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGSettings",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Transform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorKey",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ExportFactory",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicsImage",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorInterface",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformMatrix",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TextFormatLaTeX",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicMinMax",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicTransform",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorScheme",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Style",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSkipLines",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "GraphicLineCollector",
                "de.neemann.digital.draw.graphics.linemerger"
            ],
            [
                "PolygonConverter",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "VectorFloat",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformRotate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Graphic",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleHighContrast",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "Parser",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "ParseException",
                "de.neemann.digital.draw.graphics.text"
            ],
            [
                "PlainTextFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "SVGFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "GraphicsFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "LaTeXFormatter",
                "de.neemann.digital.draw.graphics.text.formatter"
            ],
            [
                "Decorate",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Text",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Index",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Sentence",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Blank",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Character",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "ExpressionToText",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Simple",
                "de.neemann.digital.draw.graphics.text.text"
            ],
            [
                "Export",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "ColorStyleMonochrome",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "TransformTranslate",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSVG",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GraphicSwing",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "PolygonParser",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "SVGTokenizer",
                "de.neemann.digital.draw.graphics"
            ],
            [
                "GifSequenceWriter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "GifExporter",
                "de.neemann.digital.draw.gif"
            ],
            [
                "ConfigCache",
                "de.neemann.digital.toolchain"
            ],
            [
                "Configuration",
                "de.neemann.digital.toolchain"
            ],
            [
                "Command",
                "de.neemann.digital.toolchain"
            ],
            [
                "FileToCreate",
                "de.neemann.digital.toolchain"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "getMouse",
                "de.neemann.gui",
                "Mouse",
                "/**\n * Returns a mouse event interpreter\n *\n * @return a Mouse interface implementation\n */\nstatic Mouse getMouse() {\n    if (Settings.getInstance().get(Keys.SETTINGS_MAC_MOUSE))\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && !e.isControlDown();\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1 && e.isControlDown();\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isShiftDown();\n            }\n        };\n    else\n        return new Mouse() {\n\n            @Override\n            public boolean isPrimaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON1;\n            }\n\n            @Override\n            public boolean isSecondaryClick(MouseEvent e) {\n                return e.getButton() == MouseEvent.BUTTON3;\n            }\n\n            @Override\n            public boolean isClickModifier(MouseEvent e) {\n                return e.isControlDown();\n            }\n        };\n}"
            ],
            [
                "create",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an icon from a resource\n *\n * @param name name of the resource\n * @return the icon\n */\npublic static Icon create(String name) {\n    return new ImageIcon(createImage(name));\n}"
            ],
            [
                "createImage",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image from a resource\n *\n * @param name name of the resource\n * @return the image\n */\npublic static Image createImage(String name) {\n    try {\n        final float scaling = Screen.getInstance().getScaling();\n        if (scaling == 1) {\n            return getImage(name);\n        } else {\n            BufferedImage image = getImageOrNull(name.substring(0, name.length() - 4) + \"_hi.png\");\n            if (image != null) {\n                int w = (int) (image.getWidth() * scaling / 2);\n                int h = (int) (image.getHeight() * scaling / 2);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            } else {\n                LOGGER.info(\"upscaling of \" + name);\n                image = getImage(name);\n                int w = (int) (image.getWidth() * scaling);\n                int h = (int) (image.getHeight() * scaling);\n                return image.getScaledInstance(w, h, BufferedImage.SCALE_SMOOTH);\n            }\n        }\n    } catch (IOException e) {\n        throw new RuntimeException(\"Image \" + name + \" not found\", e);\n    }\n}"
            ],
            [
                "createImages",
                "de.neemann.gui",
                "IconCreator",
                "/**\n * Creates an image list from a resource\n *\n * @param names names of the resource\n * @return the image\n */\npublic static ArrayList<Image> createImages(String... names) {\n    try {\n        ArrayList<Image> list = new ArrayList<Image>(names.length);\n        for (String name : names) {\n            list.add(getImage(name));\n        }\n        return list;\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}"
            ],
            [
                "getCTRLMask",
                "de.neemann.gui",
                "ToolTipAction",
                "/**\n * @return the system specific CTRL mask.\n */\npublic static int getCTRLMask() {\n    int mask = InputEvent.CTRL_DOWN_MASK;\n    if (Screen.isMac())\n        mask = InputEvent.META_DOWN_MASK;\n    return mask;\n}"
            ],
            [
                "checkForSave",
                "de.neemann.gui",
                "ClosingWindowListener",
                "/**\n * Used to check for save! No Window closing is performed!\n *\n * @param parent      the Parent frame\n * @param confirmSave the confirmSafe interface\n * @return true if to proceed\n */\npublic static boolean checkForSave(JFrame parent, ConfirmSave confirmSave) {\n    if (confirmSave.isStateChanged()) {\n        int r = new ConfirmDialogBuilder(SAVE_CHANGES_MESSAGE).setTitle(STATE_CHANGED_MESSAGE).setNoOption(NO_MESSAGE).setYesOption(YES_MESSAGE).setCancleOption(CANCEL_MESSAGE).show(parent);\n        if (r == JOptionPane.YES_OPTION || r == JOptionPane.NO_OPTION) {\n            if (r == JOptionPane.YES_OPTION) {\n                confirmSave.saveChanges();\n                return !confirmSave.isStateChanged();\n            } else\n                return true;\n        } else\n            return false;\n    }\n    return true;\n}"
            ],
            [
                "getParentWindow",
                "de.neemann.gui",
                "ErrorMessage",
                "/**\n * Get the parent window of the given component.\n * If the component is a window this window is returned\n *\n * @param parent the parent component\n * @return the window instance\n */\npublic static Window getParentWindow(Component parent) {\n    if (parent == null)\n        return null;\n    else if (parent instanceof Window)\n        return (Window) parent;\n    else\n        return SwingUtilities.getWindowAncestor(parent);\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the Screen instance\n */\npublic static Screen getInstance() {\n    return InstanceHolder.instance;\n}"
            ],
            [
                "getDefaultFontScaling",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return the default font scaling in percent\n */\npublic static int getDefaultFontScaling() {\n    if (// macOS has its own retina handling\n    IS_MAC)\n        return 100;\n    int dpi = getDefaultScreenResolution();\n    int s = (dpi * 100) / 96;\n    if (s > 95 && s < 105)\n        s = 100;\n    return s;\n}"
            ],
            [
                "isLinux",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a windows system\n */\npublic static boolean isLinux() {\n    return IS_LINUX;\n}"
            ],
            [
                "isMac",
                "de.neemann.gui",
                "Screen",
                "/**\n * @return true if running on a mac\n */\npublic static boolean isMac() {\n    return IS_MAC;\n}"
            ],
            [
                "getInstance",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * @return the singleton instance\n */\npublic static InfoDialog getInstance() {\n    if (instance == null)\n        try {\n            instance = new InfoDialog();\n        } catch (IOException e) {\n            System.out.println(\"error reading InfoDialog \" + e.getMessage());\n        }\n    return instance;\n}"
            ],
            [
                "read",
                "de.neemann.digital.core.memory.importer",
                "Importer",
                "/**\n * Reads the given file to a single data field.\n *\n * @param hexFile   the file to read\n * @param dataBits  the bits used in the data field\n * @param bigEndian uses big endian at import\n * @return the data field\n * @throws IOException IOException\n */\npublic static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException {\n    DataField df = new DataField(1024);\n    read(hexFile, new DataFieldValueArray(df, dataBits), bigEndian);\n    return df;\n}"
            ],
            [
                "getOriginOf",
                "de.neemann.digital.core",
                "ExceptionWithOrigin",
                "/**\n * Returns the file or the files that caused the given exception.\n * If no origin is found null is returned.\n *\n * @param e the exception\n * @return the origin or null;\n */\npublic static String getOriginOf(Throwable e) {\n    while (e != null) {\n        if (e instanceof ExceptionWithOriginInterface) {\n            Set<File> origins = ((ExceptionWithOriginInterface) e).getOrigin();\n            if (origins != null && origins.size() > 0) {\n                StringBuilder sb = new StringBuilder();\n                for (File o : origins) {\n                    if (o != null) {\n                        if (sb.length() > 0)\n                            sb.append(\", \");\n                        sb.append(o.getName());\n                    }\n                }\n                if (sb.length() > 0)\n                    return sb.toString();\n                else\n                    return null;\n            }\n        }\n        e = e.getCause();\n    }\n    return null;\n}"
            ],
            [
                "zMaskString",
                "de.neemann.digital.core",
                "ObservableValue",
                "static String zMaskString(long value, long highZ, int bits) {\n    StringBuilder sb = new StringBuilder();\n    long m = Bits.up(1, bits - 1);\n    for (int i = 0; i < bits; i++) {\n        if ((highZ & m) != 0) {\n            sb.append(\"z\");\n        } else {\n            if ((value & m) != 0) {\n                sb.append(\"1\");\n            } else {\n                sb.append(\"0\");\n            }\n        }\n        m >>>= 1;\n    }\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core",
                "GlobalValues",
                "/**\n * @return returns the global instance\n */\npublic static GlobalValues getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.core.io",
                "MIDIHelper",
                "/**\n * @return the MIDIHelper\n */\npublic static MIDIHelper getInstance() {\n    return ourInstance;\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new input\n */\npublic static PinInfo input(String name) {\n    return new PinInfo(name, null, Direction.input);\n}"
            ],
            [
                "input",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name        the pins name\n * @param description the pins description\n * @return the new input\n */\npublic static PinInfo input(String name, String description) {\n    return new PinInfo(name, description, Direction.input);\n}"
            ],
            [
                "output",
                "de.neemann.digital.core.element",
                "PinInfo",
                "/**\n * Helper to create an input\n *\n * @param name the pins name\n * @return the new output\n */\npublic static PinInfo output(String name) {\n    return new PinInfo(name, null, Direction.output);\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "PinDescription",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "isInOut",
                "de.neemann.digital.core.element",
                "Direction",
                "/**\n * Returns true if one direction is output and the other is input\n *\n * @param a direction a\n * @param b direction a\n * @return true if a and b are a input and a output\n */\npublic static boolean isInOut(Direction a, Direction b) {\n    return (a.equals(input) && b.equals(output)) || (a.equals(output) && b.equals(input));\n}"
            ],
            [
                "getKeyByName",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Returns the key of the given name.\n * If key does not exist, null is returned.\n *\n * @param name the name of the key\n * @return the key or null\n */\npublic static Key getKeyByName(String name) {\n    return InstanceHolder.INSTANCE.get(name);\n}"
            ],
            [
                "getKeys",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * @return all available keys\n */\npublic static Iterable<Key> getKeys() {\n    return InstanceHolder.INSTANCE.values();\n}"
            ],
            [
                "combine",
                "de.neemann.digital.core.element",
                "ImmutableList",
                "/**\n * Combines two lists\n *\n * @param a   first list\n * @param b   second list\n * @param <T> the Type of the elements\n * @return the new combined list\n */\npublic static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b) {\n    T[] com = Arrays.copyOf(a.items, a.size() + b.size());\n    System.arraycopy(b.items, 0, com, a.size(), b.size());\n    return new ImmutableList<>(com);\n}"
            ],
            [
                "createSwitchModel",
                "de.neemann.digital.core.switching",
                "PlainSwitch",
                "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException {\n    if (input1 instanceof CommonBusValue) {\n        if (input2 instanceof CommonBusValue) {\n            final CommonBusValue in1 = (CommonBusValue) input1;\n            final CommonBusValue in2 = (CommonBusValue) input2;\n            ObservableValue constant = in1.searchConstant();\n            if (constant != null)\n                return new UniDirectionalSwitch(constant, output2);\n            else {\n                constant = in2.searchConstant();\n                if (constant != null)\n                    return new UniDirectionalSwitch(constant, output1);\n                else\n                    return new RealSwitch(in1, output1, in2, output2);\n            }\n        } else\n            return new UniDirectionalSwitch(input1, output2);\n    } else {\n        if (input2 instanceof CommonBusValue) {\n            return new UniDirectionalSwitch(input2, output1);\n        } else {\n            throw new NodeException(Lang.get(\"err_switchHasNoNet\"), output1, output2);\n        }\n    }\n}"
            ],
            [
                "createOneToN",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a one to N splitter\n *\n * @param bits number of outputs\n * @return the splitter\n */\npublic static Splitter createOneToN(int bits) {\n    Ports in = new Ports();\n    in.add(new Port(0, bits));\n    Ports out = new Ports();\n    for (int i = 0; i < bits; i++) out.add(new Port(i, 1));\n    return new Splitter(in, out);\n}"
            ],
            [
                "createNToOne",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * Create a N to one splitter\n *\n * @param bits number of inputs\n * @return the splitter\n */\npublic static Splitter createNToOne(int bits) {\n    Ports in = new Ports();\n    for (int i = 0; i < bits; i++) in.add(new Port(i, 1));\n    Ports out = new Ports();\n    out.add(new Port(0, bits));\n    return new Splitter(in, out);\n}"
            ],
            [
                "ovs",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * Helper to create a {@link ObservableValues} instance\n *\n * @param items the items\n * @return the created instance\n */\npublic static ObservableValues ovs(ObservableValue... items) {\n    return new ObservableValues(items);\n}"
            ],
            [
                "toShortHex",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * Creates a short hex representation of the given value.\n * Use only to represent a value.\n * If confusion is excluded, the prefix '0x' is omitted.\n * Thus 0x1A3 is converted to \"1A3\" which can not be parsed back to a long because \"0x\" is missing.\n *\n * @param value the value\n * @return the hex string\n */\npublic static String toShortHex(long value) {\n    return toShortHex(value, false);\n}"
            ],
            [
                "up",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value up\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long up(long val, int bits) {\n    if (bits < 64)\n        return val << bits;\n    else\n        return 0;\n}"
            ],
            [
                "down",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Shifts a value down\n *\n * @param val  the value to shift\n * @param bits the bit count to shift\n * @return the shifted value\n */\npublic static long down(long val, int bits) {\n    if (bits < 64)\n        return val >>> bits;\n    else\n        return 0;\n}"
            ],
            [
                "mask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Creates a bit mask with the lowest [bits] bits set.\n *\n * @param bits the number of 1 bits\n * @return a value with the lowest [bits] bits set.\n */\npublic static long mask(int bits) {\n    if (bits < 64)\n        return (1L << bits) - 1;\n    else\n        return -1;\n}"
            ],
            [
                "signedFlagMask",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * calculates the signed flag.\n *\n * @param bits the bit count\n * @return the last used bit ( 1<<(bits-1) )\n */\npublic static long signedFlagMask(int bits) {\n    return up(1, bits - 1);\n}"
            ],
            [
                "isNegative",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Returns true if value is negative\n *\n * @param value the value\n * @param bits  the bit count\n * @return true if the last relevant bit is set\n */\npublic static boolean isNegative(long value, int bits) {\n    return (value & signedFlagMask(bits)) != 0;\n}"
            ],
            [
                "signExtend",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Sign extension of the value.\n * signExtend(3,2) returns -1.\n *\n * @param value the value\n * @param bits  number of bits\n * @return the sign extended value\n */\npublic static long signExtend(long value, int bits) {\n    if (bits >= 64)\n        return value;\n    else {\n        if ((value & signedFlagMask(bits)) == 0)\n            return value;\n        else\n            return value | ~mask(bits);\n    }\n}"
            ],
            [
                "binLn2",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Calculates the number of bits needed to store the given value b.\n *\n * @param b number\n * @return number of bits needed to store b\n */\npublic static int binLn2(long b) {\n    int outBits = 1;\n    while ((1L << outBits) <= b) outBits++;\n    return outBits;\n}"
            ],
            [
                "removeBitFromValue",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Removes a bit from a value.\n * This means it shifts the higher bits down. Behaves like removing an item from a list.\n *\n * @param value the value\n * @param bit   the bit to remove\n * @return the new value\n */\npublic static int removeBitFromValue(int value, int bit) {\n    if (bit > 0) {\n        return ((value & (~((1 << (bit + 1)) - 1))) >>> 1) | (value & ((1 << bit) - 1));\n    } else {\n        return value >>> 1;\n    }\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str the string\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str) throws NumberFormatException {\n    return decode(str, false);\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes a string to a long.\n * Supports decimal, octal, hex, binary and ascii\n *\n * @param str         the string\n * @param parseFloats if true also floats are parsed\n * @return the long value\n * @throws NumberFormatException invalid string\n */\npublic static long decode(String str, boolean parseFloats) throws NumberFormatException {\n    if (str == null)\n        return 0;\n    str = str.trim();\n    if (str.length() == 0)\n        return 0;\n    if (str.indexOf(':') >= 0)\n        return decodeFixed(str);\n    if (parseFloats && str.indexOf('.') > -1) {\n        try {\n            if (str.endsWith(\"d\") || str.endsWith(\"D\"))\n                return Double.doubleToLongBits(Double.parseDouble(str.substring(0, str.length() - 1)));\n            else\n                return Float.floatToIntBits(Float.parseFloat(str));\n        } catch (java.lang.NumberFormatException e) {\n            throw new NumberFormatException(str, 0);\n        }\n    }\n    int p = 0;\n    boolean neg = false;\n    if (str.charAt(p) == '-') {\n        neg = true;\n        p++;\n    }\n    if (p >= str.length())\n        throw new NumberFormatException(str, p);\n    boolean wasZero = false;\n    while (str.length() > p && str.charAt(p) == '0') {\n        wasZero = true;\n        p++;\n    }\n    if (p >= str.length())\n        return 0;\n    int radix;\n    if (wasZero) {\n        if (neg)\n            throw new NumberFormatException(str, p);\n        switch(str.charAt(p)) {\n            case 'x':\n            case 'X':\n                radix = 16;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            case 'b':\n            case 'B':\n                radix = 2;\n                p++;\n                if (p == str.length())\n                    throw new NumberFormatException(str, p);\n                break;\n            default:\n                radix = 8;\n        }\n    } else {\n        if (str.charAt(p) == '\\'') {\n            if (neg)\n                throw new NumberFormatException(str, p);\n            p++;\n            if (p == str.length())\n                throw new NumberFormatException(str, p);\n            return str.charAt(p);\n        } else\n            radix = 10;\n    }\n    long val = decode(str, p, radix);\n    if (neg)\n        val = -val;\n    return val;\n}"
            ],
            [
                "decode",
                "de.neemann.digital.core",
                "Bits",
                "/**\n * Decodes the given string starting at position p\n *\n * @param str   the string to decode\n * @param p     the starting position\n * @param radix the radix\n * @return the value\n * @throws NumberFormatException NumberFormatException\n */\npublic static long decode(String str, int p, int radix) throws NumberFormatException {\n    long val = 0;\n    while (p < str.length()) {\n        int d = Character.digit(str.charAt(p), radix);\n        if (d < 0)\n            throw new NumberFormatException(str, p);\n        val = val * radix + d;\n        p++;\n    }\n    return val;\n}"
            ],
            [
                "getCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Extract the code from the attributes.\n * The code is either stored directly or there is a file given.\n *\n * @param attr the attributes\n * @param root the projects main folder\n * @return the code\n * @throws IOException IOException\n */\nstatic String getCode(ElementAttributes attr, File root) throws IOException {\n    if (attr.contains(Keys.EXTERNAL_CODE))\n        return attr.get(Keys.EXTERNAL_CODE);\n    if (attr.contains(Keys.EXTERNAL_CODE_FILE))\n        return readCode(attr.getFile(Keys.EXTERNAL_CODE_FILE, root));\n    return \"\";\n}"
            ],
            [
                "readCode",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Reads the code from a file\n *\n * @param file the file\n * @return the code\n * @throws IOException IOException\n */\nstatic String readCode(File file) throws IOException {\n    byte[] data = Files.readAllBytes(file.toPath());\n    return new String(data, StandardCharsets.UTF_8);\n}"
            ],
            [
                "create",
                "de.neemann.digital.core.extern",
                "Application",
                "/**\n * Creates a new application instance\n *\n * @param type the type of the process\n * @param attr the elements attributes\n * @return the created process handler\n */\nstatic Application create(Type type, ElementAttributes attr) {\n    switch(type) {\n        case Generic:\n            return new ApplicationGeneric();\n        case GHDL:\n            return new ApplicationGHDL(attr);\n        case IVERILOG:\n            return new ApplicationIVerilog(attr);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "start",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Helper to start a process.\n * If result value is not null an exception is thrown.\n *\n * @param dir  the folder in which the process is started\n * @param args the argument\n * @return the console output\n * @throws IOException IOException\n */\npublic static String start(File dir, String... args) throws IOException {\n    ProcessBuilder pb = new ProcessBuilder(args).redirectErrorStream(true);\n    if (dir != null)\n        pb.directory(dir);\n    Process p;\n    try {\n        p = pb.start();\n    } catch (IOException e) {\n        throw new CouldNotStartProcessException(Lang.get(\"err_couldNotStartProcess_N\", Arrays.toString(args)), e);\n    }\n    ReaderThread rt = new ReaderThread(p.getInputStream());\n    rt.start();\n    try {\n        int exitValue = p.waitFor();\n        rt.join();\n        String output = rt.toString();\n        if (exitValue != 0)\n            throw new IOException(Lang.get(\"err_exitValueNotNull_N_O\", exitValue, output));\n        return output;\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n}"
            ],
            [
                "joinStrings",
                "de.neemann.digital.core.extern",
                "ProcessStarter",
                "/**\n * Merges the given string.\n * If all strings are null or empty, null is returned\n *\n * @param strings the strings to join\n * @return the joined string or null\n */\npublic static String joinStrings(String... strings) {\n    StringBuilder sb = new StringBuilder();\n    for (String s : strings) {\n        if (s != null) {\n            String str = s.trim();\n            if (str.length() > 0) {\n                if (sb.length() > 0)\n                    sb.append(\"\\n\");\n                sb.append(str);\n            }\n        }\n    }\n    if (sb.length() > 0)\n        return sb.toString();\n    else\n        return null;\n}"
            ],
            [
                "fromString",
                "de.neemann.digital.cli.cli",
                "Argument",
                "/**\n * Creates a value from a string\n *\n * @param val      the value as a string\n * @param defValue the default value\n * @return the value converted to the type of the default value\n * @throws CLIException CLIException\n */\npublic static Object fromString(String val, Object defValue) throws CLIException {\n    if (defValue instanceof String)\n        return val;\n    else if (defValue instanceof Boolean)\n        switch(val.toLowerCase()) {\n            case \"yes\":\n            case \"1\":\n            case \"true\":\n                return true;\n            case \"no\":\n            case \"0\":\n            case \"false\":\n                return false;\n            default:\n                throw new CLIException(Lang.get(\"cli_notABool_N\", val), 106);\n        }\n    else if (defValue instanceof Integer) {\n        try {\n            return Integer.parseInt(val);\n        } catch (NumberFormatException e) {\n            throw new CLIException(Lang.get(\"cli_notANumber_N\", val), e);\n        }\n    } else\n        throw new CLIException(Lang.get(\"cli_invalidType_N\", defValue.getClass().getSimpleName()), 203);\n}"
            ],
            [
                "fac",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the factorial of a number.\n * If the result is greater as the max long value, the max value is returned.\n *\n * @param n integer\n * @return the factorial of the given number\n */\npublic static long fac(int n) {\n    if (n > 20)\n        return Long.MAX_VALUE;\n    return FAC_TABLE[n];\n}"
            ],
            [
                "getTimeComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "/**\n * Returns the time complexity of optimizing the given fsm\n *\n * @param fsm the fsm\n * @return the time complexity\n */\npublic static long getTimeComplexity(FSM fsm) {\n    List<State> states = fsm.getStates();\n    int size = states.size();\n    int sizeInclDC = 1 << Bits.binLn2(size - 1);\n    if (sizeInclDC > 20)\n        return Long.MAX_VALUE;\n    return fac(sizeInclDC) / fac(sizeInclDC - size);\n}"
            ],
            [
                "calcComplexity",
                "de.neemann.digital.fsm",
                "Optimizer",
                "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException {\n    TruthTable tt = fsm.createTruthTable(null);\n    MinimizerInterface mi = new MinimizerQuineMcCluskey();\n    ComplexityListener listener = new ComplexityListener(out);\n    for (int i = 0; i < tt.getResultCount(); i++) mi.minimize(tt.getVars(), tt.getResult(i), tt.getResultName(i), listener);\n    return listener.complexity;\n}"
            ],
            [
                "blink",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Blink\n *\n * @return the fsm\n */\npublic static FSM blink() {\n    State off = new State(\"off\");\n    State on = new State(\"on\");\n    return new FSM(off, on).transition(on, off, null).transition(off, on, null);\n}"
            ],
            [
                "rotDecoder",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a debounced rotary switch decoder\n *\n * @return the fsm\n */\npublic static FSM rotDecoder() {\n    State init = new State(\"init\");\n    State top = new State(\"top\");\n    State topSetLeft = new State(\"topSetLeft\").setValues(\"L=1\");\n    State topSetRight = new State(\"topSetRight\").setValues(\"R=1\");\n    State leftTop = new State(\"leftTop\");\n    State leftBottom = new State(\"leftBottom\");\n    State bottom = new State(\"bottom\");\n    State bottomSetLeft = new State(\"bottomSetRight\").setValues(\"R=1\");\n    State bottomSetRight = new State(\"bottomSetLeft\").setValues(\"L=1\");\n    State rightTop = new State(\"rightTop\");\n    State rightBottom = new State(\"rightBottom\");\n    return new FSM(init, top, topSetLeft, leftTop, leftBottom, bottomSetLeft, bottom, bottomSetRight, rightBottom, rightTop, topSetRight).transition(init, top, \"A=0 & B=0\").transition(init, bottom, \"A=1 & B=1\").transition(top, leftTop, \"A=1 & B=0\").transition(top, rightTop, \"A=0 & B=1\").transition(topSetLeft, top, null).transition(topSetRight, top, null).transition(rightTop, top, \"A=0 & B=0\").transition(rightBottom, topSetRight, \"A=0 & B=0\").transition(leftTop, top, \"A=0 & B=0\").transition(leftBottom, topSetLeft, \"A=0 & B=0\").transition(bottom, leftBottom, \"A=1 & B=0\").transition(bottom, rightBottom, \"A=0 & B=1\").transition(bottomSetLeft, bottom, null).transition(bottomSetRight, bottom, null).transition(rightBottom, bottom, \"A=1 & B=1\").transition(rightTop, bottomSetRight, \"A=1 & B=1\").transition(leftBottom, bottom, \"A=1 & B=1\").transition(leftTop, bottomSetLeft, \"A=1 & B=1\");\n}"
            ],
            [
                "counter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a counter\n *\n * @param n the number of states\n * @return the fsm\n */\npublic static FSM counter(int n) {\n    FSM fsm = new FSM();\n    State last = null;\n    for (int i = 0; i < n; i++) {\n        State s = new State(\"\").setNumber(i);\n        fsm.add(s);\n        if (last != null)\n            fsm.transition(last, s, null);\n        last = s;\n    }\n    fsm.transition(last, fsm.getStates().get(0), null);\n    return fsm;\n}"
            ],
            [
                "trafficLight",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLight() {\n    State red = new State(\"red\").setNumber(0).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(1).setValues(\"R=1,Y=1\");\n    State green = new State(\"green\").setNumber(2).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(3).setValues(\"Y=1\");\n    return new FSM(red, redYellow, green, yellow).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "trafficLightMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM trafficLightMedwedew() {\n    State init = new State(\"init\").setNumber(0);\n    State red = new State(\"red\").setNumber(1).setValues(\"R=1\");\n    State redYellow = new State(\"red/yellow\").setNumber(3).setValues(\"R=1, Y=1\");\n    State green = new State(\"green\").setNumber(4).setValues(\"G=1\");\n    State yellow = new State(\"yellow\").setNumber(2).setValues(\"Y=1\");\n    return new FSM(init, red, redYellow, green, yellow).transition(init, red, null).transition(red, redYellow, \"!Stop\").transition(redYellow, green, null).transition(green, yellow, null).transition(yellow, red, null);\n}"
            ],
            [
                "selCounter",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a traffic light fsm\n *\n * @return the fsm\n */\npublic static FSM selCounter() {\n    State s0 = new State(\"s0\").setNumber(0);\n    State s1 = new State(\"s1\").setNumber(1);\n    State s2 = new State(\"s2\").setNumber(2);\n    State s3 = new State(\"s3\").setNumber(3);\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, null).transition(s0, s0, \"!T0  !T1\").transition(s1, s2, null).transition(s1, s0, \"T0 !T1\").transition(s2, s3, null).transition(s2, s0, \"!T0 T1\").transition(s3, s0, null);\n}"
            ],
            [
                "stepper",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepper() {\n    State s0 = new State(\"s0\").setNumber(0).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(1).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(2).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(3).setValues(\"P3=1,P0=1\");\n    return new FSM(s0, s1, s2, s3).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "stepperMedwedew",
                "de.neemann.digital.fsm",
                "FSMDemos",
                "/**\n * Creates a stepper controller\n *\n * @return the fsm\n */\npublic static FSM stepperMedwedew() {\n    State init = new State(\"init\").setNumber(0).setValues(\"P0=2,P1=2,P2=2,P3=2\");\n    State s0 = new State(\"s0\").setNumber(3).setValues(\"P0=1,P1=1\");\n    State s1 = new State(\"s1\").setNumber(6).setValues(\"P1=1,P2=1\");\n    State s2 = new State(\"s2\").setNumber(12).setValues(\"P2=1,P3=1\");\n    State s3 = new State(\"s3\").setNumber(9).setValues(\"P3=1,P0=1\");\n    return new FSM(init, s0, s1, s2, s3).transition(init, s0, null).transition(s0, s1, \"D\").transition(s1, s2, \"D\").transition(s2, s3, \"D\").transition(s3, s0, \"D\").transition(s1, s0, \"!D\").transition(s2, s1, \"!D\").transition(s3, s2, \"!D\").transition(s0, s3, \"!D\");\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"fsm\", FSM.class);\n    xStream.alias(\"state\", State.class);\n    xStream.alias(\"transition\", Transition.class);\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"vectorf\", VectorFloat.class);\n    xStream.aliasAttribute(VectorFloat.class, \"x\", \"x\");\n    xStream.aliasAttribute(VectorFloat.class, \"y\", \"y\");\n    return xStream;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename filename\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(File filename) throws IOException {\n    final FSM fsm = loadFSM(new FileInputStream(filename));\n    fsm.file = filename;\n    return fsm;\n}"
            ],
            [
                "loadFSM",
                "de.neemann.digital.fsm",
                "FSM",
                "/**\n * Creates a new fsm instance from a stored file\n *\n * @param in the input stream\n * @return the fsm\n * @throws IOException IOException\n */\npublic static FSM loadFSM(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        final FSM fsm = (FSM) xStream.fromXML(in);\n        for (Transition t : fsm.transitions) t.setFSM(fsm);\n        for (State s : fsm.states) s.setFSM(fsm);\n        fsm.modified = false;\n        fsm.activeStateTransition = -1;\n        return fsm;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "get",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string of key if no translation present\n */\npublic static String get(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKey(key, params);\n}"
            ],
            [
                "getNull",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * gets an internationalized string\n *\n * @param key    the key\n * @param params optional parameters\n * @return the internationalized string or null if no translation present\n */\npublic static String getNull(String key, Object... params) {\n    return InstanceHolder.INSTANCE.getKeyNull(key, params);\n}"
            ],
            [
                "getBundle",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the resource bundle\n */\npublic static Bundle getBundle() {\n    return InstanceHolder.INSTANCE.bundle;\n}"
            ],
            [
                "currentLanguage",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * @return the current language\n */\npublic static Language currentLanguage() {\n    return InstanceHolder.INSTANCE.currentLanguage;\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "/**\n * Resolves a multilingual user defined string.\n * Allows the user to define multilingual content by using a simple syntax:\n * You can enter strings like \"Word! {{de Welt!}} {{fr Monde!}}\". This method extracts\n * the appropriate string for the current language.\n *\n * @param text the complete text description\n * @return the evaluated text.\n */\npublic static String evalMultilingualContent(String text) {\n    return evalMultilingualContent(text, currentLanguage());\n}"
            ],
            [
                "evalMultilingualContent",
                "de.neemann.digital.lang",
                "Lang",
                "static String evalMultilingualContent(String text, Language currentLanguage) {\n    int pos = text.indexOf(\"{{\");\n    if (pos < 0)\n        return text;\n    String def = text.substring(0, pos).trim();\n    do {\n        int p2 = pos + 1;\n        int count = 1;\n        while (count > 0) {\n            char c = text.charAt(p2);\n            if (c == '{')\n                count++;\n            else if (c == '}')\n                count--;\n            p2++;\n            if (p2 == text.length() && count > 0) {\n                p2 = 1;\n                break;\n            }\n        }\n        p2 -= 2;\n        if (p2 > pos + 3) {\n            String l = text.substring(pos + 2, pos + 4);\n            if (l.equalsIgnoreCase(currentLanguage.getName()))\n                return text.substring(pos + 4, p2).trim();\n            if (l.equalsIgnoreCase(\"en\") && def.isEmpty())\n                def = text.substring(pos + 4, p2).trim();\n            pos = text.indexOf(\"{{\", p2);\n        } else\n            return def;\n    } while (pos > 0);\n    return def;\n}"
            ],
            [
                "lowest",
                "de.neemann.digital.testing.parser",
                "OperatorPrecedence",
                "/**\n * @return the lowest operator precedence to start evaluation with\n */\npublic static OperatorPrecedence lowest() {\n    return OR;\n}"
            ],
            [
                "addOne",
                "de.neemann.digital.analyse",
                "ModelAnalyser",
                "/**\n * Adds the \"+1\" to the variables name\n *\n * @param name the vars name\n * @return the modified name\n */\npublic static String addOne(String name) {\n    if (name.endsWith(\"^n\"))\n        return name.substring(0, name.length() - 1) + \"{n+1}\";\n    else\n        return name + \"+1\";\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param file the file\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(File file) throws IOException {\n    return readCSV(new FileReader(file));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the string to read\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(String csv) throws IOException {\n    return readCSV(new StringReader(csv));\n}"
            ],
            [
                "readCSV",
                "de.neemann.digital.analyse",
                "CSVImporter",
                "/**\n * Reads a CSV file\n *\n * @param csv the reader\n * @return the truth table\n * @throws IOException IOException\n */\npublic static TruthTable readCSV(Reader csv) throws IOException {\n    BufferedReader r = new BufferedReader(csv);\n    TruthTable tt = readHeader(r);\n    while (true) {\n        String line = r.readLine();\n        if (line == null)\n            return tt;\n        line = line.trim();\n        if (!line.isEmpty())\n            parseLine(tt, line);\n    }\n}"
            ],
            [
                "createDoubledValues",
                "de.neemann.digital.analyse.quinemc",
                "BoolTableByteArray",
                "/**\n * Creates a table where all values added twive\n *\n * @param values the original values\n * @return the new values\n */\npublic static BoolTableByteArray createDoubledValues(BoolTable values) {\n    BoolTableByteArray t = new BoolTableByteArray(values.size() * 2);\n    for (int i = 0; i < values.size(); i++) {\n        int v = values.get(i).asInt();\n        t.set(i * 2, v);\n        t.set(i * 2 + 1, v);\n    }\n    return t;\n}"
            ],
            [
                "simplify",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Simplifies the given expression.\n * If no simplification was found, the original expression is returned unchanged.\n *\n * @param expression the expression to simplify\n * @return the simplified expression\n * @throws ExpressionException ExpressionException\n */\npublic static Expression simplify(Expression expression) throws ExpressionException {\n    int initialCplx = expression.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    Expression newExp = new QuineMcCluskey(expression).simplify().getExpression();\n    int newCplx = newExp.traverse(new ComplexityInclNotVisitor()).getComplexity();\n    if (newCplx < initialCplx)\n        return newExp;\n    else\n        return expression;\n}"
            ],
            [
                "addAnd",
                "de.neemann.digital.analyse.quinemc",
                "QuineMcCluskey",
                "/**\n * Creates the final expression\n *\n * @param e         the expression to complete\n * @param rows      the rows to add\n * @param variables the variables to use to build the expression\n * @return the expression\n */\npublic static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables) {\n    for (TableRow r : rows) {\n        Expression n = r.getExpression(variables);\n        if (e == null)\n            e = n;\n        else\n            e = or(e, n);\n    }\n    return e;\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from a bool\n *\n * @param bool the bool\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(boolean bool) {\n    if (bool) {\n        return one;\n    } else {\n        return zero;\n    }\n}"
            ],
            [
                "value",
                "de.neemann.digital.analyse.quinemc",
                "ThreeStateValue",
                "/**\n * Create a value from an int\n * 0 and 1 work as expected, any other value means \"dont care\"\n *\n * @param value the value\n * @return the created ThreeStateValue\n */\npublic static ThreeStateValue value(int value) {\n    switch(value) {\n        case 0:\n            return ThreeStateValue.zero;\n        case 1:\n            return ThreeStateValue.one;\n        default:\n            return ThreeStateValue.dontCare;\n    }\n}"
            ],
            [
                "doImplicitTypeCasts",
                "de.neemann.digital.analyse",
                "SubstituteLibrary",
                "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val) {\n    if (expectedClass == Integer.class && val instanceof Long) {\n        long l = (Long) val;\n        if (l <= Integer.MAX_VALUE && l >= Integer.MIN_VALUE)\n            return (int) l;\n    } else if (expectedClass == Long.class && val instanceof Number) {\n        return ((Number) val).longValue();\n    } else if (expectedClass == Color.class && val instanceof Number) {\n        return new Color(((Number) val).intValue());\n    } else if (expectedClass == Boolean.class && val instanceof Number) {\n        long b = ((Number) val).longValue();\n        return b != 0;\n    } else if (expectedClass == InValue.class) {\n        if (val instanceof Number)\n            return new InValue(((Number) val).longValue());\n        else {\n            try {\n                return new InValue(val.toString());\n            } catch (Bits.NumberFormatException e) {\n                return val;\n            }\n        }\n    } else if (expectedClass == InverterConfig.class && val instanceof java.util.List) {\n        InverterConfig.Builder b = new InverterConfig.Builder();\n        for (Object i : (java.util.List) val) b.add(i.toString());\n        return b.build();\n    } else if (expectedClass == DataField.class && val instanceof java.util.List) {\n        java.util.List list = (java.util.List) val;\n        long[] longs = new long[list.size()];\n        for (int i = 0; i < list.size(); i++) if (list.get(i) instanceof Number)\n            longs[i] = ((Number) list.get(i)).longValue();\n        else\n            return val;\n        return new DataField(longs);\n    } else if (expectedClass == Rotation.class && val instanceof Number) {\n        int r = ((Number) val).intValue();\n        return new Rotation(r % 4);\n    } else if (expectedClass == File.class && val instanceof String) {\n        return new File(val.toString());\n    } else if (expectedClass == TestCaseDescription.class && val instanceof String) {\n        try {\n            return new TestCaseDescription(val.toString());\n        } catch (Exception e) {\n            return val;\n        }\n    } else if (expectedClass.isEnum() && val instanceof Number) {\n        Class<Enum<?>> e = (Class<Enum<?>>) expectedClass;\n        Object[] values = e.getEnumConstants();\n        int index = ((Number) val).intValue();\n        if (index < 0 || index >= values.length)\n            return values[0];\n        else\n            return values[index];\n    }\n    return val;\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Iterable<Expression> exp) {\n    return simplify(new Or(exp, true));\n}"
            ],
            [
                "or",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression or(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), true));\n}"
            ],
            [
                "xor",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new XOR expression\n *\n * @param a the expression to XOR\n * @param b the expression to XOR\n * @return the created expression\n */\npublic static Expression xor(Expression a, Expression b) {\n    if (b == Constant.ONE) {\n        return Not.not(a);\n    } else if (b == Constant.ZERO) {\n        return a;\n    } else if (a == Constant.ONE) {\n        return Not.not(b);\n    } else if (a == Constant.ZERO) {\n        return b;\n    } else\n        return simplify(new XOr(a, b));\n}"
            ],
            [
                "orNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new OR expression\n *\n * @param exp the expressions to OR\n * @return the created expression\n */\npublic static Expression orNoMerge(Expression... exp) {\n    return simplify(new Or(Arrays.asList(exp), false));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Iterable<Expression> exp) {\n    return simplify(new And(exp, true));\n}"
            ],
            [
                "and",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression and(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), true));\n}"
            ],
            [
                "andNoMerge",
                "de.neemann.digital.analyse.expression",
                "Operation",
                "/**\n * Creates a new AND expression\n *\n * @param exp the expressions to AND\n * @return the created expression\n */\npublic static Expression andNoMerge(Expression... exp) {\n    return simplify(new And(Arrays.asList(exp), false));\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifier\n *\n * @param expression the expression to modify\n * @param modifier   the modifier to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier modifier) {\n    expression.modify(modifier);\n    return modifier.modify(expression);\n}"
            ],
            [
                "modifyExpression",
                "de.neemann.digital.analyse.expression.modify",
                "ExpressionModifier",
                "/**\n * Modifies the given expression with the given modifiers\n *\n * @param expression the expression to modify\n * @param modifiers  the modifiers to use\n * @return the modified expression\n */\nstatic Expression modifyExpression(Expression expression, ExpressionModifier... modifiers) {\n    for (ExpressionModifier m : modifiers) expression = modifyExpression(expression, m);\n    return expression;\n}"
            ],
            [
                "v",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates a new Variable\n *\n * @param name the variables name\n * @return the new Variable\n */\npublic static Variable v(String name) {\n    return new Variable(name);\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Creates an array of variables\n *\n * @param n the number of varfiables to create.\n * @return variables named \"A0\", \"A1\", \"A2\" and so on\n */\npublic static ArrayList<Variable> vars(int n) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (int i = 0; i < n; i++) v.add(new Variable(\"\" + (char) ('A' + i)));\n    return v;\n}"
            ],
            [
                "vars",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Create a list of variables using the given names\n *\n * @param names the names used to create the variables\n * @return the list of variables\n */\npublic static ArrayList<Variable> vars(String... names) {\n    ArrayList<Variable> v = new ArrayList<Variable>();\n    for (String n : names) v.add(new Variable(n));\n    return v;\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable.\n */\npublic static boolean isVar(Expression e) {\n    return e instanceof Variable;\n}"
            ],
            [
                "isVarOrNotVar",
                "de.neemann.digital.analyse.expression",
                "Variable",
                "/**\n * Returns true if the given expression is a variable or a inverted variable.\n *\n * @param e the expression\n * @return true if the given expression is a variable or a inverted variable.\n */\npublic static boolean isVarOrNotVar(Expression e) {\n    return isVar(e) || (e instanceof Not && isVar(((Not) e).getExpression()));\n}"
            ],
            [
                "getDefaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * @return the default format\n */\npublic static FormatToExpression getDefaultFormat() {\n    return Settings.getInstance().get(Keys.SETTINGS_EXPRESSION_FORMAT);\n}"
            ],
            [
                "defaultFormat",
                "de.neemann.digital.analyse.expression.format",
                "FormatToExpression",
                "/**\n * Formats a expression to a string.\n * Uses the default format for presentation on the screen.\n *\n * @param exp the expression to format\n * @return the string representation\n */\npublic static String defaultFormat(Expression exp) {\n    return getDefaultFormat().format(exp);\n}"
            ],
            [
                "not",
                "de.neemann.digital.analyse.expression",
                "Not",
                "/**\n * Creates a not expression.\n * Simplifies the expression if possible.\n *\n * @param a the child expression to invert\n * @return the inverted expression\n */\npublic static Expression not(Expression a) {\n    if (a == Constant.ONE)\n        return Constant.ZERO;\n    if (a == Constant.ZERO)\n        return Constant.ONE;\n    if (a instanceof Not && !((Not) a).protect) {\n        return ((Not) a).expression;\n    } else\n        return new Not(a);\n}"
            ],
            [
                "readFromFile",
                "de.neemann.digital.analyse",
                "TruthTable",
                "/**\n * Load the given file and returns a truth table instance\n *\n * @param filename filename\n * @return the {@link TruthTable}\n * @throws IOException IOException\n */\npublic static TruthTable readFromFile(File filename) throws IOException {\n    if (filename.getName().toLowerCase().endsWith(\".csv\"))\n        return CSVImporter.readCSV(filename);\n    else {\n        XStream xStream = getxStream();\n        try (InputStream in = new FileInputStream(filename)) {\n            return (TruthTable) xStream.fromXML(in);\n        }\n    }\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param s the signal\n * @return the port pins used\n */\npublic static SplitPinString create(Signal s) {\n    if (s.missingPinNumber())\n        return EMPTY;\n    return create(s.getPinNumber());\n}"
            ],
            [
                "create",
                "de.neemann.digital.analyse",
                "SplitPinString",
                "/**\n * Creates a new instance\n *\n * @param pinStr the pins definition;\n * @return the port pins used\n */\npublic static SplitPinString create(String pinStr) {\n    if (pinStr == null || pinStr.trim().length() == 0)\n        return EMPTY;\n    StringTokenizer st = new StringTokenizer(pinStr, \",;\");\n    ArrayList<String> pins = new ArrayList<>();\n    while (st.hasMoreTokens()) pins.add(st.nextToken().trim());\n    return new PinsArray(pins);\n}"
            ],
            [
                "checkSuffix",
                "de.neemann.digital.gui",
                "SaveAsHelper",
                "/**\n * Adds the given suffix to the file\n *\n * @param filename filename\n * @param suffix   suffix\n * @return the file name with the given suffix\n */\npublic static File checkSuffix(File filename, String suffix) {\n    if (suffix == null || filename == null)\n        return filename;\n    String name = filename.getName();\n    int p = name.lastIndexOf('.');\n    if (p >= 0) {\n        String suf = name.substring(p + 1).toLowerCase();\n        if (KNOWN.contains(suf))\n            name = name.substring(0, p);\n        while (name.length() > 0 && name.charAt(name.length() - 1) == '.') name = name.substring(0, name.length() - 1);\n    }\n    return new File(filename.getParentFile(), name + \".\" + suffix);\n}"
            ],
            [
                "addF1Traversal",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Adds F1 as a focus traversal key to a text components.\n *\n * @param text The text component\n * @param <TC> the concrete type of the text component\n * @return the given text component\n */\npublic static <TC extends JTextComponent> TC addF1Traversal(TC text) {\n    HashSet<AWTKeyStroke> set = new HashSet<>(text.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));\n    set.add(KeyStroke.getKeyStroke(\"F1\"));\n    text.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, set);\n    return text;\n}"
            ],
            [
                "createUndoManager",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * Enables undo in the given text component.\n *\n * @param text the text component\n * @return the undo manager\n */\npublic static UndoManager createUndoManager(JTextComponent text) {\n    final UndoManager undoManager;\n    undoManager = new UndoManager();\n    text.getDocument().addUndoableEditListener(undoManager);\n    text.addKeyListener(new KeyAdapter() {\n\n        @Override\n        public void keyPressed(KeyEvent e) {\n            if (e.getKeyCode() == KeyEvent.VK_Z && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canUndo())\n                    undoManager.undo();\n            } else if (e.getKeyCode() == KeyEvent.VK_Y && (e.getModifiersEx() & ToolTipAction.getCTRLMask()) != 0) {\n                if (undoManager.canRedo())\n                    undoManager.redo();\n            }\n        }\n    });\n    return undoManager;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components.modification",
                "ModifyInsertWires",
                "/**\n * Creates a simplified modification.\n *\n * @param newWires the wires to insert\n * @return the modification\n */\npublic static Modification<Circuit> create(List<Wire> newWires) {\n    switch(newWires.size()) {\n        case 0:\n            return null;\n        case 1:\n            return new ModifyInsertWire(newWires.get(0));\n        default:\n            return new ModifyInsertWires(newWires);\n    }\n}"
            ],
            [
                "getToolTipName",
                "de.neemann.digital.gui.components.modification",
                "ModificationOfVisualElement",
                "/**\n * Creates a translated name of the given element\n *\n * @param ve the element\n * @return translated name\n */\npublic static String getToolTipName(VisualElement ve) {\n    String s = Lang.getNull(\"elem_\" + ve.getElementName());\n    if (s == null) {\n        s = ve.getElementName();\n        if (s.endsWith(\".dig\"))\n            s = s.substring(0, s.length() - 4);\n    }\n    String l = ve.getElementAttributes().get(Keys.LABEL);\n    if (l.length() > 0)\n        s += \" (\" + l + \")\";\n    return s;\n}"
            ],
            [
                "getTerminal",
                "de.neemann.digital.gui.components.terminal",
                "TerminalDialog",
                "/**\n * Creates a new GUI terminal\n *\n * @param model the model\n * @param attr  the terminals attributes\n * @return the terminal interface\n */\nstatic TerminalInterface getTerminal(Model model, ElementAttributes attr) {\n    return new MyTerminal(model, attr);\n}"
            ],
            [
                "createList",
                "de.neemann.digital.gui.components",
                "CircuitTransferable",
                "/**\n * Creates a list of objects from inserted data\n * Can also throw a {@link ClassCastException}!\n *\n * @param data         the inserted data\n * @param shapeFactory the shapeFactory to set to the elements\n * @return the elements or null\n * @throws IOException IOException\n */\npublic static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException {\n    if (!(data instanceof String))\n        return null;\n    XStream xStream = Circuit.getxStream();\n    try (Reader in = new StringReader(data.toString())) {\n        ArrayList<Movable> elements = (ArrayList<Movable>) xStream.fromXML(in);\n        if (elements == null)\n            return null;\n        for (Movable m : elements) if (m instanceof VisualElement)\n            ((VisualElement) m).setShapeFactory(shapeFactory);\n        return elements;\n    }\n}"
            ],
            [
                "createURLStreamHandlerFactory",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "/**\n * @return factory which catches 'image' protocol requests to deliver images via an URL.\n */\npublic static URLStreamHandlerFactory createURLStreamHandlerFactory() {\n    return new MyURLStreamHandlerFactory();\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "ElementHelpDialog",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "getImage",
                "de.neemann.digital.gui.components",
                "MyURLStreamHandlerFactory",
                "static BufferedImage getImage(String name) {\n    BufferedImage bi = IMAGE_MAP.get(name);\n    if (bi == null) {\n        final float scale = IMAGE_SCALE * Screen.getInstance().getScaling();\n        bi = new VisualElement(name).setShapeFactory(shapeFactory).getBufferedImage(0.75 * scale, (int) (250 * scale));\n        IMAGE_MAP.put(name, bi);\n    }\n    return bi;\n}"
            ],
            [
                "isSequentialVar",
                "de.neemann.digital.gui.components.table",
                "ExpressionListenerJK",
                "/**\n * If the name belongs to a sequential state var, the state vars name is returned.\n * Otherwise a null is returned\n *\n * @param name the name of the variable\n * @return the state variable or null\n */\npublic static String isSequentialVar(String name) {\n    String detName = null;\n    if (name.endsWith(\"n+1\")) {\n        detName = name.substring(0, name.length() - 2);\n    } else if (name.endsWith(\"{n+1}\")) {\n        detName = name.substring(0, name.length() - 5) + \"n\";\n    }\n    return detName;\n}"
            ],
            [
                "getAttrList",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * @return returns the list of circuit attributes\n */\npublic static ArrayList<Key> getAttrList() {\n    return ATTR_LIST;\n}"
            ],
            [
                "raster",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * rounds the given vector to the raster\n *\n * @param pos the vector\n * @return pos round to raster\n */\npublic static Vector raster(Vector pos) {\n    return new Vector((int) Math.round((double) pos.x / SIZE) * SIZE, (int) Math.round((double) pos.y / SIZE) * SIZE);\n}"
            ],
            [
                "createLiveDialog",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "/**\n * Creates a instance prepared for \"live logging\"\n *\n * @param owner      the parent frame\n * @param model      the model\n * @param microStep  stepping mode\n * @param ordering   the ordering to use\n * @param sampleSize the number of samples\n * @return the created instance\n */\npublic static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize) {\n    String title;\n    if (microStep)\n        title = Lang.get(\"win_measures_microstep\");\n    else\n        title = Lang.get(\"win_measures_fullstep\");\n    ArrayList<Signal> signals = model.getSignalsCopy();\n    signals.removeIf(signal -> !signal.isShowInGraph());\n    new OrderMerger<String, Signal>(ordering) {\n\n        @Override\n        public boolean equals(Signal a, String b) {\n            return a.getName().equals(b);\n        }\n    }.order(signals);\n    ValueTableObserver valueTableObserver = new ValueTableObserver(microStep, signals, sampleSize);\n    GraphDialog graphDialog = new GraphDialog(owner, title, valueTableObserver.getLogData(), model, true).setColumnInfo(createColumnsInfo(signals));\n    graphDialog.addWindowListener(new WindowAdapter() {\n\n        @Override\n        public void windowOpened(WindowEvent e) {\n            model.addObserver(valueTableObserver);\n        }\n\n        @Override\n        public void windowClosed(WindowEvent e) {\n            model.removeObserver(valueTableObserver);\n        }\n    });\n    return graphDialog;\n}"
            ],
            [
                "createColumnsInfo",
                "de.neemann.digital.gui.components.data",
                "GraphDialog",
                "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals) {\n    ValueTable.ColumnInfo[] info = new ValueTable.ColumnInfo[signals.size()];\n    for (int i = 0; i < signals.size(); i++) {\n        Signal s = signals.get(i);\n        info[i] = new ValueTable.ColumnInfo(s.getFormat(), s.getValue().getBits());\n    }\n    return info;\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "CopiedElementLabelRenamer",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(VisualElement ve) {\n    return create(ve.getElementName(), ve.getElementAttributes().getLabel());\n}"
            ],
            [
                "create",
                "de.neemann.digital.gui.components",
                "LabelInstance",
                "static LabelInstance create(String elementName, String fullLabel) {\n    if (fullLabel == null)\n        return null;\n    int pos = fullLabel.length();\n    if (pos == 0)\n        return null;\n    if (!Character.isDigit(fullLabel.charAt(pos - 1)))\n        return null;\n    int number = 0;\n    int base = 1;\n    while (pos > 0 && Character.isDigit(fullLabel.charAt(pos - 1))) {\n        pos--;\n        number += (fullLabel.charAt(pos) - '0') * base;\n        base *= 10;\n    }\n    String label = fullLabel.substring(0, pos);\n    LabelClass lc = new LabelClass(elementName, label);\n    return new LabelInstance(lc, number);\n}"
            ],
            [
                "isExperimentalMode",
                "de.neemann.digital.gui",
                "Main",
                "/**\n * @return true if experimental features are enabled\n */\npublic static boolean isExperimentalMode() {\n    return experimental;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "WindowManager",
                "/**\n * @return the WindowManager\n */\npublic static WindowManager getInstance() {\n    return InstanceHolderClass.INSTANCE;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.gui",
                "Settings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static Settings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "getRange",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog bit range\n *\n * @param bits the number of bits\n * @return the bit range\n */\npublic static String getRange(int bits) {\n    if (bits == 1)\n        return \"\";\n    else\n        return \"[\" + (bits - 1) + \":0]\";\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Returns the verilog type for a signal\n *\n * @param def  the signal type (input or output) used if dir is not \"inout\"\n * @param dir  used to check if direction is \"inout\"\n * @param bits the number of bits\n * @return the verilog signal type\n */\npublic static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits) {\n    String result;\n    if (dir == HDLPort.Direction.INOUT)\n        result = \"inout\";\n    else\n        result = (def == HDLPort.Direction.IN) ? \"input\" : \"output\";\n    if (bits > 1) {\n        result += \" [\" + (bits - 1) + \":0]\";\n    }\n    return result;\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.verilog2",
                "VerilogCreator",
                "/**\n * Creates a verilog value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    return (bits + \"'b\" + s);\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.verilog2.lib",
                "VerilogTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given\n * element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(MODULE_PREFIX + elementName);\n}"
            ],
            [
                "createFromJar",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n *\n * @param path the path of the file to load\n * @param cl   the classloader used to load the template. If set to null, the SystemClassLoader is used\n * @return the statement\n * @throws IOException     IOException\n * @throws ParserException ParserException\n */\npublic static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException {\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    InputStream in = cl.getResourceAsStream(path);\n    if (in == null)\n        throw new FileNotFoundException(\"file not found: \" + path);\n    try (Reader r = new InputStreamReader(in, StandardCharsets.UTF_8)) {\n        Parser p = new Parser(r, path);\n        return p.parse();\n    }\n}"
            ],
            [
                "createFromJarStatic",
                "de.neemann.digital.hdl.hgs",
                "Parser",
                "/**\n * Creates a statement from the jar file using ClassLoader.getSystemResourceAsStream(path).\n * Throws only a RuntimeException so use with care!\n *\n * @param path the path of the file to load\n * @return the statement\n */\npublic static Statement createFromJarStatic(String path) {\n    try {\n        return createFromJar(path, null);\n    } catch (IOException | ParserException e) {\n        throw new RuntimeException(\"could not parse: \" + path, e);\n    }\n}"
            ],
            [
                "isWhiteSpace",
                "de.neemann.digital.hdl.hgs",
                "Tokenizer",
                "/**\n * Returns true if the given character is a white space.\n *\n * @param c the character to test\n * @return true in c is a white space\n */\npublic static boolean isWhiteSpace(int c) {\n    return c == ' ' || c == '\\t' || c == '\\n' || c == '\\r';\n}"
            ],
            [
                "toLong",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a long\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static long toLong(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toDouble",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a double\n *\n * @param value the value to convert\n * @return the long\n * @throws HGSEvalException HGSEvalException\n */\npublic static double toDouble(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).doubleValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toInt",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an int\n *\n * @param value the value to convert\n * @return the int value\n * @throws HGSEvalException HGSEvalException\n */\npublic static int toInt(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).intValue();\n    throw new HGSEvalException(\"not a number: \" + value.toString());\n}"
            ],
            [
                "toBool",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a bool\n *\n * @param value the value to convert\n * @return the bool value\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean toBool(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ((Number) value).longValue() != 0;\n    if (value instanceof Boolean)\n        return ((Boolean) value);\n    throw new HGSEvalException(\"Must be an integer or a bool, is: \" + value.getClass().getSimpleName() + \"=\" + value);\n}"
            ],
            [
                "toString",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a string\n *\n * @param value the value to convert\n * @return the string\n * @throws HGSEvalException HGSEvalException\n */\npublic static String toString(Object value) throws HGSEvalException {\n    if (value instanceof String)\n        return value.toString();\n    throw new HGSEvalException(\"must be a string, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toArray",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to an array\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSArray toArray(Object value) throws HGSEvalException {\n    if (value instanceof HGSArray)\n        return (HGSArray) value;\n    if (value instanceof List)\n        return new HGSArrayList((List) value);\n    throw new HGSEvalException(\"must be an array, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "toMap",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Converts the given value to a map\n *\n * @param value the value to convert\n * @return the function\n * @throws HGSEvalException HGSEvalException\n */\npublic static HGSMap toMap(Object value) throws HGSEvalException {\n    if (value instanceof HGSMap)\n        return (HGSMap) value;\n    if (value instanceof Map)\n        return new HGSMapMap((Map) value);\n    throw new HGSEvalException(\"must be a map, is a \" + value.getClass().getSimpleName());\n}"
            ],
            [
                "equals",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Compares two values\n *\n * @param a a value\n * @param b a value\n * @return true if both values are equal\n */\npublic static boolean equals(Object a, Object b) {\n    if (a instanceof Double || b instanceof Double)\n        return a.equals(b);\n    else if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() == ((Number) b).longValue();\n    else if (a instanceof String || b instanceof String)\n        return a.toString().equals(b.toString());\n    else\n        return a.equals(b);\n}"
            ],
            [
                "add",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Adds two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object add(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) + toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() + ((Number) b).longValue();\n    if (a instanceof String || b instanceof String)\n        return a.toString() + b.toString();\n    throw new HGSEvalException(\"arguments must be int or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "sub",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Subtracts two values\n *\n * @param a a value\n * @param b a value\n * @return the sum\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object sub(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) - toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() - ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "mul",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Multiplies two values\n *\n * @param a a value\n * @param b a value\n * @return the product\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object mul(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) * toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() * ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "div",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Divides two numbers\n *\n * @param a a value\n * @param b a value\n * @return the quotient\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object div(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) / toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() / ((Number) b).longValue();\n    throw new HGSEvalException(\"arguments must be int or double, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "or",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an or operation\n *\n * @param a a value\n * @param b a value\n * @return the or'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object or(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() | ((Number) b).longValue();\n    return toBool(a) || toBool(b);\n}"
            ],
            [
                "xor",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an xor operation\n *\n * @param a a value\n * @param b a value\n * @return the xor'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object xor(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() ^ ((Number) b).longValue();\n    return toBool(a) ^ toBool(b);\n}"
            ],
            [
                "and",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs an and operation\n *\n * @param a a value\n * @param b a value\n * @return the and'ed values\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object and(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Number && b instanceof Number)\n        return ((Number) a).longValue() & ((Number) b).longValue();\n    return toBool(a) && toBool(b);\n}"
            ],
            [
                "not",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Performs a not operation\n *\n * @param value a value\n * @return the inverted value\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object not(Object value) throws HGSEvalException {\n    if (value instanceof Number)\n        return ~((Number) value).longValue();\n    return !toBool(value);\n}"
            ],
            [
                "neg",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Changes the sign of the given value\n *\n * @param value the value\n * @return value with changed sign\n * @throws HGSEvalException HGSEvalException\n */\npublic static Object neg(Object value) throws HGSEvalException {\n    if (value instanceof Double)\n        return -(Double) value;\n    return -toLong(value);\n}"
            ],
            [
                "less",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a&lt;b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean less(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) < toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) < toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) < 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "lessEqual",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Helper compare two values\n *\n * @param a a value\n * @param b a value\n * @return true if a<=b\n * @throws HGSEvalException HGSEvalException\n */\npublic static boolean lessEqual(Object a, Object b) throws HGSEvalException {\n    if (a instanceof Double || b instanceof Double)\n        return toDouble(a) <= toDouble(b);\n    if (a instanceof Number && b instanceof Number)\n        return toLong(a) <= toLong(b);\n    if (a instanceof String && b instanceof String)\n        return a.toString().compareTo(b.toString()) <= 0;\n    throw new HGSEvalException(\"arguments must be int, double or string, not \" + a.getClass().getSimpleName() + \"+\" + b.getClass().getSimpleName());\n}"
            ],
            [
                "trimRight",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the right side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimRight(String str) {\n    int initial = str.length() - 1;\n    int pos = initial;\n    while (pos >= 0 && isWhiteSpace(str.charAt(pos))) pos--;\n    if (pos == initial)\n        return str;\n    else\n        return str.substring(0, pos + 1);\n}"
            ],
            [
                "trimLeft",
                "de.neemann.digital.hdl.hgs",
                "Value",
                "/**\n * Trims spaces at the left side of the string.\n *\n * @param str the string\n * @return the trimmed string\n */\npublic static String trimLeft(String str) {\n    int pos = 0;\n    while (pos < str.length() && isWhiteSpace(str.charAt(pos))) pos++;\n    if (pos == 0)\n        return str;\n    else\n        return str.substring(pos);\n}"
            ],
            [
                "getType",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Returns the vhdl type name\n *\n * @param bits the number of bits\n * @return the types name\n */\npublic static String getType(int bits) {\n    if (bits == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector(\" + (bits - 1) + \" downto 0)\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param con the constant\n * @return the value as vhdl code\n */\npublic static String value(ExprConstant con) {\n    return value(con.getValue(), con.getBits());\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2",
                "VHDLCreator",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, int bits) {\n    String s = Long.toBinaryString(val & Bits.mask(bits));\n    int missing = bits - s.length();\n    if (missing > 0)\n        s = ZEROS.substring(0, missing) + s;\n    if (bits > 1)\n        s = \"\\\"\" + s + \"\\\"\";\n    else\n        s = \"'\" + s + \"'\";\n    return s;\n}"
            ],
            [
                "isTemplate",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Returns true, if a hdl template is available.\n *\n * @param etd the {@link ElementTypeDescription}\n * @return true if VHDL template is available\n */\npublic static boolean isTemplate(ElementTypeDescription etd) {\n    ClassLoader cl = etd.getClassLoader();\n    if (cl == null)\n        cl = ClassLoader.getSystemClassLoader();\n    URL url = cl.getResource(createFileName(ENTITY_PREFIX + etd.getName()));\n    return url != null;\n}"
            ],
            [
                "neededFileName",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplate",
                "/**\n * Creates the name of the file used to load the vhdl file for the given element\n *\n * @param elementName the element name\n * @return the filename\n */\npublic static String neededFileName(String elementName) {\n    return createFileName(ENTITY_PREFIX + elementName);\n}"
            ],
            [
                "zero",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Create a vhdl zero with the given bit number\n *\n * @param bits the bit number\n * @return '0' or (others => '0')\n */\npublic static String zero(long bits) {\n    if (bits == 1)\n        return \"'0'\";\n    else\n        return \"(others => '0')\";\n}"
            ],
            [
                "value",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a vhdl value\n *\n * @param val  the value\n * @param bits the bit number\n * @return the value as vhdl code\n */\npublic static String value(long val, long bits) {\n    return VHDLCreator.value(val, (int) bits);\n}"
            ],
            [
                "genericType",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates the code for a generic type\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String genericType(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector ((Bits-1) downto 0)\";\n}"
            ],
            [
                "type",
                "de.neemann.digital.hdl.vhdl2.entities",
                "VHDLTemplateFunctions",
                "/**\n * Creates a type of given width\n *\n * @param n the number of bits\n * @return the type\n */\npublic static String type(long n) {\n    if (n == 1)\n        return \"std_logic\";\n    else\n        return \"std_logic_vector (\" + (n - 1) + \" downto 0)\";\n}"
            ],
            [
                "isVar",
                "de.neemann.digital.hdl.model2.expression",
                "Expression",
                "/**\n * Helper to check if an expression is a net reference\n *\n * @param expr the expression to check\n * @param net  the net\n * @return true if the expression is a reference to the given net\n */\nstatic boolean isVar(Expression expr, HDLNet net) {\n    return expr instanceof ExprVar && ((ExprVar) expr).getNet() == net;\n}"
            ],
            [
                "isConstant",
                "de.neemann.digital.hdl.model2.expression",
                "ExprConstant",
                "/**\n * Returns the constant if th given node represents a constant\n *\n * @param node the node\n * @return the constant of null if node is not a constant\n */\npublic static ExprConstant isConstant(HDLNode node) {\n    if (node instanceof HDLNodeAssignment) {\n        HDLNodeAssignment expr = (HDLNodeAssignment) node;\n        if (expr.getExpression() instanceof ExprConstant) {\n            return (ExprConstant) expr.getExpression();\n        }\n    }\n    return null;\n}"
            ],
            [
                "getHighZ",
                "de.neemann.digital.data",
                "Value",
                "/**\n * @return returns a high z value\n */\npublic static Value getHighZ() {\n    return new Value(0, Type.HIGHZ);\n}"
            ],
            [
                "calcBackOffset",
                "de.neemann.digital.builder.circuit",
                "FragmentExpression",
                "static int calcBackOffset(int size, int i) {\n    if ((size & 1) != 0 && i == (size - 1) / 2)\n        return 0;\n    if (i >= size / 2)\n        return size - i;\n    else\n        return i + 1;\n}"
            ],
            [
                "isXNor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXNor(long[] data) {\n    for (int i = 0; i < data.length; i++) if ((Integer.bitCount(i) & 1) == data[i])\n        return false;\n    return true;\n}"
            ],
            [
                "isXor",
                "de.neemann.digital.builder.circuit",
                "CircuitBuilder",
                "static boolean isXor(long[] data) {\n    for (int i = 0; i < data.length; i++) if (!((Integer.bitCount(i) & 1) == data[i]))\n        return false;\n    return true;\n}"
            ],
            [
                "getLibPath",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * @return the additional library path\n */\npublic static File getLibPath() {\n    String path;\n    try {\n        path = ElementLibrary.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath().replace('\\\\', '/');\n    } catch (URISyntaxException e) {\n        return new File(\"noLibFound\");\n    }\n    if (path.endsWith(\"/target/classes/\"))\n        return toCanonical(new File(path.substring(0, path.length() - 16) + \"/src/main/dig/lib\"));\n    if (path.endsWith(\"/target/Digital.jar\"))\n        return new File(path.substring(0, path.length() - 19) + \"/src/main/dig/lib\");\n    if (path.endsWith(\"Digital.jar\"))\n        return new File(path.substring(0, path.length() - 12) + \"/lib\");\n    return new File(\"noLibFound\");\n}"
            ],
            [
                "createCustomDescription",
                "de.neemann.digital.draw.library",
                "ElementLibrary",
                "/**\n * Creates a custom element description.\n *\n * @param file    the file\n * @param circuit the circuit\n * @param library the library\n * @return the type description\n * @throws PinException PinException\n */\npublic static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException {\n    ElementTypeDescriptionCustom d = new ElementTypeDescriptionCustom(file, circuit, library);\n    d.setElementFactory(attributes -> new CustomElement(d));\n    return d;\n}"
            ],
            [
                "createDeclarationDefault",
                "de.neemann.digital.draw.library",
                "ElementTypeDescriptionCustom",
                "/**\n * Creates the default for custom element declarations\n *\n * @param circuit the circuit\n * @return the default code template\n * @throws NodeException NodeException\n */\npublic static String createDeclarationDefault(Circuit circuit) throws NodeException {\n    TreeSet<String> nameSet = new TreeSet<>();\n    for (VisualElement ve : circuit.getElements()) {\n        String gen = ve.getElementAttributes().get(Keys.GENERIC).trim();\n        if (!gen.isEmpty()) {\n            try {\n                Parser p = new Parser(gen);\n                p.enableRefReadCollection();\n                p.parse(false);\n                for (Reference r : p.getRefsRead()) {\n                    if (r instanceof ReferenceToStruct) {\n                        ReferenceToStruct st = (ReferenceToStruct) r;\n                        if (st.getParent() instanceof ReferenceToVar) {\n                            ReferenceToVar var = (ReferenceToVar) st.getParent();\n                            if (var.getName().equals(\"args\")) {\n                                nameSet.add(st.getName());\n                            }\n                        }\n                    }\n                }\n            } catch (ParserException | IOException e) {\n                final NodeException ex = new NodeException(Lang.get(\"err_evaluatingGenericsCode_N_N\", ve, gen), e);\n                ex.setOrigin(circuit.getOrigin());\n                throw ex;\n            }\n        }\n    }\n    StringBuilder sb = new StringBuilder();\n    for (String name : nameSet) sb.append(name).append(\" := ;\\n\");\n    return sb.toString();\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Returns a comparator instance\n *\n * @return the singleton instance\n */\npublic static NumStringComparator getInstance() {\n    return InstanceHolder.INSTANCE;\n}"
            ],
            [
                "compareStr",
                "de.neemann.digital.draw.library",
                "NumStringComparator",
                "/**\n * Compare two strings\n *\n * @param a a string\n * @param b a string\n * @return the comparison result\n */\npublic static int compareStr(String a, String b) {\n    int pa = 0;\n    int pb = 0;\n    while (true) {\n        final boolean ae = pa == a.length();\n        final boolean be = pb == b.length();\n        if (ae && be)\n            return 0;\n        else if (ae)\n            return -1;\n        else if (be)\n            return 1;\n        char ca = Character.toLowerCase(a.charAt(pa));\n        char cb = Character.toLowerCase(b.charAt(pb));\n        if (isDigit(ca) && isDigit(cb)) {\n            ParseNumber da = new ParseNumber(a, pa);\n            ParseNumber db = new ParseNumber(b, pb);\n            int c = Integer.compare(da.num, db.num);\n            if (c != 0)\n                return c;\n            else {\n                pa = da.p;\n                pb = db.p;\n            }\n        } else {\n            int c = Character.compare(ca, cb);\n            if (c != 0) {\n                return c;\n            } else {\n                pa++;\n                pb++;\n            }\n        }\n    }\n}"
            ],
            [
                "createPins",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Creates pins\n *\n * @param inputs    the inputs\n * @param outputs   the outputs\n * @param invert    true if invert output\n * @param ic        input inverter configuration\n * @param wideShape true if a wide shape is selected\n * @return the pins\n */\npublic static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape) {\n    return createPins(inputs, outputs, invert, wideShape ? 4 : 3, true, ic);\n}"
            ],
            [
                "readStyle",
                "de.neemann.digital.draw.shapes.custom.svg",
                "Context",
                "static Context readStyle(Context context, String style) throws SvgException {\n    SVGTokenizer t = new SVGTokenizer(style);\n    while (true) {\n        final String command = t.readTo(':');\n        if (command.length() == 0)\n            break;\n        final String value = t.readTo(';');\n        AttrParser p = PARSER.get(command);\n        if (p != null)\n            p.parse(context, value);\n    }\n    return context;\n}"
            ],
            [
                "getOutSize",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static int getOutSize(boolean small) {\n    if (small)\n        return SIZE2;\n    else\n        return OUT_SIZE;\n}"
            ],
            [
                "getOutStyle",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * The size of the inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the size\n */\npublic static Style getOutStyle(boolean small) {\n    if (small)\n        return Style.THIN;\n    else\n        return Style.NORMAL;\n}"
            ],
            [
                "getOutRad",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Inner circle size used for inputs and outputs\n *\n * @param small true if small symbol is used\n * @return the output circle radius as a vector\n */\npublic static Vector getOutRad(boolean small) {\n    int s = getOutSize(small);\n    return new Vector(s - 6, s - 6);\n}"
            ],
            [
                "createTransform",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static Transform createTransform(int size) {\n    if (size == 2)\n        return Transform.IDENTITY;\n    else {\n        final TransformTranslate tr1 = new TransformTranslate(-70, -139);\n        final TransformTranslate tr2 = new TransformTranslate(70, 139);\n        float s = (2 + size) / 4f;\n        final TransformMatrix trm = new TransformMatrix(s, 0, 0, s, 0, 0);\n        return Transform.mul(tr1, Transform.mul(trm, tr2));\n    }\n}"
            ],
            [
                "getxStream",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a proper configured XStream instance\n *\n * @return the XStream instance\n */\npublic static XStream getxStream() {\n    XStream xStream = new XStreamValid();\n    xStream.alias(\"attributes\", ElementAttributes.class);\n    xStream.alias(\"visualElement\", VisualElement.class);\n    xStream.alias(\"wire\", Wire.class);\n    xStream.alias(\"circuit\", Circuit.class);\n    xStream.alias(\"intFormat\", IntFormat.class);\n    xStream.alias(\"exprFormat\", FormatToExpression.class);\n    xStream.alias(\"barrelShifterMode\", BarrelShifterMode.class);\n    xStream.alias(\"direction\", LeftRightFormat.class);\n    xStream.alias(\"rotation\", Rotation.class);\n    xStream.aliasAttribute(Rotation.class, \"rotation\", \"rotation\");\n    xStream.alias(\"language\", Language.class);\n    xStream.aliasAttribute(Language.class, \"name\", \"name\");\n    xStream.alias(\"vector\", Vector.class);\n    xStream.aliasAttribute(Vector.class, \"x\", \"x\");\n    xStream.aliasAttribute(Vector.class, \"y\", \"y\");\n    xStream.alias(\"value\", InValue.class);\n    xStream.aliasAttribute(InValue.class, \"value\", \"v\");\n    xStream.aliasAttribute(InValue.class, \"highZ\", \"z\");\n    xStream.addImplicitCollection(ElementAttributes.class, \"attributes\");\n    xStream.alias(\"data\", DataField.class);\n    xStream.registerConverter(new DataFieldConverter());\n    xStream.alias(\"testData\", TestCaseDescription.class);\n    xStream.alias(\"inverterConfig\", InverterConfig.class);\n    xStream.addImplicitCollection(InverterConfig.class, \"inputs\");\n    xStream.alias(\"storedRoms\", ROMManager.class);\n    xStream.addImplicitCollection(ROMManager.class, \"roms\");\n    xStream.alias(\"romList\", ROMManagerFile.class);\n    xStream.alias(\"romFile\", ROMManagerFile.RomContainerFile.class);\n    xStream.alias(\"romData\", ROMManagerFile.RomContainerDataField.class);\n    xStream.alias(\"appType\", Application.Type.class);\n    xStream.ignoreUnknownElements();\n    xStream.alias(\"shape\", CustomShapeDescription.class);\n    xStream.alias(\"pin\", CustomShapeDescription.Pin.class);\n    xStream.alias(\"circle\", CustomShapeDescription.CircleHolder.class);\n    xStream.alias(\"line\", CustomShapeDescription.LineHolder.class);\n    xStream.alias(\"poly\", CustomShapeDescription.PolygonHolder.class);\n    xStream.alias(\"text\", CustomShapeDescription.TextHolder.class);\n    xStream.alias(\"polygon\", Polygon.class);\n    xStream.alias(\"shapeType\", CustomCircuitShapeType.class);\n    xStream.alias(\"transform\", TransformHolder.class);\n    xStream.registerConverter(new PolygonConverter());\n    return xStream;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param filename     filename\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load \" + filename);\n    final Circuit circuit = loadCircuit(new FileInputStream(filename), shapeFactory);\n    circuit.origin = filename;\n    return circuit;\n}"
            ],
            [
                "loadCircuit",
                "de.neemann.digital.draw.elements",
                "Circuit",
                "/**\n * Creates a new circuit instance from a stored file\n *\n * @param in           the input stream\n * @param shapeFactory shapeFactory used to create the shapes\n * @return the circuit\n * @throws IOException IOException\n */\npublic static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException {\n    LOGGER.debug(\"load stream\");\n    try {\n        XStream xStream = getxStream();\n        Circuit circuit = (Circuit) xStream.fromXML(in);\n        for (VisualElement ve : circuit.getElements()) ve.setShapeFactory(shapeFactory);\n        if (circuit.version == 0) {\n            // convert to version 1\n            for (Wire w : circuit.getWires()) {\n                w.p1 = w.p1.mul(2);\n                w.p2 = w.p2.mul(2);\n            }\n            for (VisualElement e : circuit.getElements()) e.setPos(e.getPos().mul(2));\n            circuit.version = 1;\n        }\n        if (circuit.version < 2) {\n            Object rm = circuit.getAttributes().get(Keys.ROMMANAGER);\n            if (rm instanceof ROMManager) {\n                circuit.getAttributes().set(Keys.ROMMANAGER, new ROMManagerFile((ROMManager) rm));\n            }\n            circuit.version = 2;\n        }\n        return circuit;\n    } catch (RuntimeException e) {\n        throw new IOException(Lang.get(\"err_invalidFileFormat\"), e);\n    } finally {\n        in.close();\n    }\n}"
            ],
            [
                "fixGenerics",
                "de.neemann.digital.draw.model",
                "ModelCreator",
                "/**\n * Creates a concrete circuit from a generic on.\n * Uses the included generic init code.\n *\n * @param circuit the generic circuit\n * @param library the element library\n * @return the concrete circuit\n * @throws NodeException            NodeException\n * @throws ElementNotFoundException ElementNotFoundException\n */\npublic static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException {\n    if (circuit.getAttributes().get(Keys.IS_GENERIC))\n        return new ResolveGenerics(circuit, library).resolveCircuit(null).getCircuit();\n    else\n        return circuit;\n}"
            ],
            [
                "createFromPath",
                "de.neemann.digital.draw.graphics",
                "Polygon",
                "/**\n * Creates a polygon from a SVG path\n *\n * @param path the svg path\n * @return the polygon or null if there was an error\n */\npublic static Polygon createFromPath(String path) {\n    try {\n        return new PolygonParser(path).create();\n    } catch (PolygonParser.ParserException e) {\n        return null;\n    }\n}"
            ],
            [
                "vec",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Returns a new vector\n * shorthand for new Vector(x,y)\n *\n * @param x x\n * @param y y\n * @return the vector\n */\npublic static Vector vec(int x, int y) {\n    return new Vector(x, y);\n}"
            ],
            [
                "min",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the minimum vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the minimum\n */\npublic static Vector min(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x)\n            x = p[i].getX();\n        if (p[i].getY() < y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "max",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the maximim vector from the given vectors.\n *\n * @param p the vectors to evaluate\n * @return the maximum\n */\npublic static Vector max(VectorInterface... p) {\n    int x = p[0].getX();\n    int y = p[0].getY();\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() > x)\n            x = p[i].getX();\n        if (p[i].getY() > y)\n            y = p[i].getY();\n    }\n    return new Vector(x, y);\n}"
            ],
            [
                "width",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * returns the width of the given vectors.\n *\n * @param p the vectors\n * @return max(p)-min(p)\n */\npublic static Vector width(VectorInterface... p) {\n    int x1 = p[0].getX();\n    int y1 = p[0].getY();\n    int x2 = x1;\n    int y2 = y1;\n    for (int i = 1; i < p.length; i++) {\n        if (p[i].getX() < x1)\n            x1 = p[i].getX();\n        if (p[i].getY() < y1)\n            y1 = p[i].getY();\n        if (p[i].getX() > x2)\n            x2 = p[i].getX();\n        if (p[i].getY() > y2)\n            y2 = p[i].getY();\n    }\n    return new Vector(x2 - x1, y2 - y1);\n}"
            ],
            [
                "add",
                "de.neemann.digital.draw.graphics",
                "Vector",
                "/**\n * Adds an offset to every vector in the given list\n *\n * @param vectors the original vectors\n * @param offs    the offset\n * @return the new list\n */\npublic static List<Vector> add(List<Vector> vectors, Vector offs) {\n    ArrayList<Vector> newVec = new ArrayList<>();\n    for (Vector v : vectors) newVec.add(v.add(offs));\n    return newVec;\n}"
            ],
            [
                "getInstance",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * Returns the settings instance\n *\n * @return the Settings\n */\npublic static SVGSettings getInstance() {\n    return SettingsHolder.INSTANCE;\n}"
            ],
            [
                "createKeyList",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "/**\n * @return a list of available SVG export keys\n */\npublic static List<Key> createKeyList() {\n    ArrayList<Key> list = new ArrayList<>();\n    list.add(LATEX);\n    list.add(PINS_IN_MATH_MODE);\n    list.add(HIDE_TEST);\n    list.add(NO_SHAPE_FILLING);\n    list.add(SMALL_IO);\n    list.add(NO_PIN_MARKER);\n    list.add(THINNER_LINES);\n    list.add(HIGH_CONTRAST);\n    list.add(MONOCHROME);\n    return list;\n}"
            ],
            [
                "mul",
                "de.neemann.digital.draw.graphics",
                "Transform",
                "/**\n * Combines the two given transformations to a common transformation\n *\n * @param t1 first transformation\n * @param t2 second transformation\n * @return the resulting transformation\n */\nstatic Transform mul(Transform t1, Transform t2) {\n    TransformMatrix m1 = t1.getMatrix();\n    TransformMatrix m2 = t2.getMatrix();\n    return new TransformMatrix(m1.a * m2.a + m1.c * m2.b, m1.b * m2.a + m1.d * m2.b, m1.a * m2.c + m1.c * m2.d, m1.b * m2.c + m1.d * m2.d, m2.a * m1.x + m2.b * m1.y + m2.x, m2.c * m1.x + m2.d * m1.y + m2.y);\n}"
            ],
            [
                "rotate",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a rotation.\n * Rotates in mathematically positive direction. Takes into account that\n * in Digital the y-axis goes downwards.\n *\n * @param w the angle in 360 grad units\n * @return the transformation\n */\npublic static TransformMatrix rotate(double w) {\n    final double phi = w / 180 * Math.PI;\n    float cos = (float) Math.cos(phi);\n    float sin = (float) Math.sin(phi);\n    return new TransformMatrix(cos, -sin, sin, cos, 0, 0);\n}"
            ],
            [
                "scale",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Creates a scaling transformation\n *\n * @param sx scaling in x direction\n * @param sy scaling in y direction\n * @return the transformation\n */\npublic static TransformMatrix scale(float sx, float sy) {\n    return new TransformMatrix(sx, 0, 0, sy, 0, 0);\n}"
            ],
            [
                "getTextWidth",
                "de.neemann.digital.draw.graphics",
                "GraphicMinMax",
                "/**\n * Returns a approximation of the width of the given text in the given style\n *\n * @param text  the text\n * @param style the style\n * @return the approximated text width\n */\npublic static int getTextWidth(String text, Style style) {\n    final FontRenderContext fontRenderContext = new FontRenderContext(null, true, false);\n    GraphicsFormatter.Fragment f = GraphicsFormatter.createFragment((fragment, font, str) -> {\n        Rectangle2D rec = style.getFont().getStringBounds(str, fontRenderContext);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), 0);\n    }, style.getFont(), text);\n    return f.getWidth();\n}"
            ],
            [
                "getSelected",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * @return the selected color map\n */\npublic static ColorScheme getSelected() {\n    if (instance == null) {\n        updateInstance();\n        Settings.getInstance().getAttributes().addListener(ColorScheme::updateInstance);\n    }\n    return instance;\n}"
            ],
            [
                "getWireStyle",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Returns the wire style depending on the given value\n *\n * @param value the value to represent\n * @return the style\n */\npublic static Style getWireStyle(Value value) {\n    if (value == null || value.getBits() > 1)\n        return WIRE;\n    if (value.isHighZ())\n        return WIRE_HIGHZ;\n    if (value.getValue() == 1)\n        return WIRE_HIGH;\n    else\n        return WIRE_LOW;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text the text\n * @return the string representation\n */\npublic static String format(Text text) {\n    return format(text, FormatToExpression.getDefaultFormat());\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "PlainTextFormatter",
                "/**\n * Creates a simple string\n *\n * @param text   the text\n * @param format the format to use\n * @return the string representation\n */\npublic static String format(Text text, FormatToExpression format) {\n    if (text instanceof Simple) {\n        return ((Simple) text).getText();\n    } else if (text instanceof Blank) {\n        return \" \";\n    } else if (text instanceof Character) {\n        return \"\" + ((Character) text).getChar();\n    } else if (text instanceof Decorate) {\n        Decorate d = (Decorate) text;\n        if (d.getStyle() == Decorate.Style.OVERLINE) {\n            final Text content = d.getContent();\n            if (content instanceof Simple || content instanceof Index)\n                return format.getNot() + format(content, format);\n            else\n                return format.getNot() + \"(\" + format(content, format) + \")\";\n        } else\n            return format(d.getContent(), format);\n    } else if (text instanceof Index) {\n        Index i = (Index) text;\n        String str = format(i.getVar(), format);\n        if (i.getSubScript() != null)\n            str += format(i.getSubScript(), format);\n        if (i.getSuperScript() != null)\n            str += format(i.getSuperScript(), format);\n        return str;\n    } else if (text instanceof Sentence) {\n        Sentence s = (Sentence) text;\n        StringBuilder sb = new StringBuilder();\n        for (Text t : s) sb.append(format(t, format));\n        return sb.toString();\n    } else\n        return \"\";\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "SVGFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr   the {@link Graphics2D} instance\n * @param text the text\n * @return the text fragment\n */\npublic static Fragment createFragment(Graphics2D gr, String text) {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), text);\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param gr         the {@link Graphics2D} instance\n * @param expression the expression\n * @return the text fragment\n * @throws FormatterException FormatterException\n */\npublic static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException {\n    return createFragment((fragment, font, str) -> {\n        final FontMetrics metrics = gr.getFontMetrics(font);\n        Rectangle2D rec = metrics.getStringBounds(str, gr);\n        fragment.set((int) rec.getWidth(), (int) rec.getHeight(), metrics.getDescent());\n    }, gr.getFont(), new ExpressionToText().createText(expression));\n}"
            ],
            [
                "createFragment",
                "de.neemann.digital.draw.graphics.text.formatter",
                "GraphicsFormatter",
                "/**\n * Creates the text fragments\n *\n * @param sizer the sizer instance\n * @param font  the font\n * @param text  the text\n * @return the fragment\n */\npublic static Fragment createFragment(FontSizer sizer, Font font, String text) {\n    Fragment fragment;\n    try {\n        Text t = new Parser(text).parse();\n        fragment = createFragment(sizer, font, t);\n    } catch (ParseException | FormatterException e) {\n        // if there was an exception, return the complete raw text as a fragment\n        fragment = new TextFragment(sizer, font, text);\n    }\n    return fragment;\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param exp the expression to format\n * @return the formatted string\n */\npublic static String format(Expression exp) {\n    return format(new ExpressionToText().createText(exp, FormatToExpression.LATEX), true);\n}"
            ],
            [
                "format",
                "de.neemann.digital.draw.graphics.text.formatter",
                "LaTeXFormatter",
                "/**\n * Formats the given text\n *\n * @param text the text to format\n * @return the formatted string\n */\npublic static String format(Text text) {\n    return format(text, false);\n}"
            ],
            [
                "math",
                "de.neemann.digital.draw.graphics.text.text",
                "Decorate",
                "/**\n * Adds a MATH decoration to the given text.\n * If the text is already decorated the text is returned directly.\n *\n * @param t the text to decorate\n * @return the decorated text\n */\npublic static Text math(Text t) {\n    if (t instanceof Decorate) {\n        Decorate d = (Decorate) t;\n        if (d.getStyle() == Style.MATH)\n            return t;\n    }\n    return new Decorate(t, Style.MATH);\n}"
            ],
            [
                "escapeXML",
                "de.neemann.digital.draw.graphics",
                "GraphicSVG",
                "/**\n * Escapes a given string to XML\n *\n * @param text the text to escape\n * @return the escaped text.\n */\npublic static String escapeXML(String text) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        switch(c) {\n            case '&':\n                sb.append(\"&amp;\");\n                break;\n            case '<':\n                sb.append(\"&lt;\");\n                break;\n            case '>':\n                sb.append(\"&gt;\");\n                break;\n            case '\"':\n                sb.append(\"&quot;\");\n                break;\n            default:\n                sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
            ],
            [
                "getMirrorYOrientation",
                "de.neemann.digital.draw.graphics",
                "GraphicSwing",
                "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3) {\n    int oy = orientation.getY();\n    VectorInterface d0 = p2.sub(p1).getOrthogonal();\n    VectorInterface d1 = p3.sub(p1);\n    if (d0.scalar(d1) < 0)\n        oy = 2 - oy;\n    return oy;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param file the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(File file) throws IOException {\n    final Configuration configuration = load(new FileInputStream(file));\n    configuration.origin = file;\n    return configuration;\n}"
            ],
            [
                "load",
                "de.neemann.digital.toolchain",
                "Configuration",
                "/**\n * Loads a configuration\n *\n * @param in the file to load\n * @return the configuration\n * @throws IOException IOException\n */\npublic static Configuration load(InputStream in) throws IOException {\n    try {\n        XStream xStream = getxStream();\n        return (Configuration) xStream.fromXML(in);\n    } catch (RuntimeException e) {\n        throw new IOException(\"error reading XML\", e);\n    }\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "UNKNOWN",
                "de.neemann.gui",
                "InfoDialog",
                "/**\n * Unknown release\n */\npublic static final String UNKNOWN = \"unknown\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullDown",
                "/**\n * The pull down description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "Diode",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeBackward",
                "/**\n * The description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "PullUp",
                "/**\n * The pull up description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.pld",
                "DiodeForward",
                "/**\n * The diodes description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROMDualPort",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualAccess",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "CounterPreset",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Register",
                "/**\n * The registers {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "LookUpTable",
                "/**\n * The LUTs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "BlockRAMDualPort",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "Counter",
                "/**\n * The counters {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROM",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMAsync",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "ROM",
                "/**\n * The ROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "EEPROMDualPort",
                "/**\n * The EEPROMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RAMSinglePortSel",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.memory",
                "RegisterFile",
                "/**\n * The RAMs {@link ElementTypeDescription}\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "MIDI",
                "/**\n * The Speakers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RGBLED",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The Input description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "LEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);"
            ],
            [
                "POLARITYAWARELEDDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The polarity aware LED description\n */\npublic static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "SEVENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment display description\n */\npublic static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();"
            ],
            [
                "SEVENHEXDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * The seven segment hex display description\n */\npublic static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "SIXTEENDESCRIPTION",
                "de.neemann.digital.core.io",
                "Out",
                "/**\n * Sixteen Segment Display\n */\npublic static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "RotEncoder",
                "/**\n * The rotary encoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PinControl",
                "/**\n * The description of the pin control logic\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "DipSwitch",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "LightBulb",
                "/**\n * The LED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Probe",
                "/**\n * The Probe description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Button",
                "/**\n * The Button description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "ButtonLED",
                "/**\n * The ButtonLED description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "In",
                "/**\n * The inputs description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "STEPS",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * Steps for a full revolution\n */\npublic static final int STEPS = 72;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorUnipolar",
                "/**\n * The stepper motors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "NotConnected",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "StepperMotorBipolar",
                "/**\n * The bipolar motor description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Const",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "PowerSupply",
                "/**\n * Enforces a power supply\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "Ground",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io",
                "VDD",
                "/**\n * The Constant description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.core.io.telnet",
                "ServerHolder",
                "/**\n * The singleton instance\n */\npublic static final ServerHolder INSTANCE = new ServerHolder();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.io.telnet",
                "Telnet",
                "/**\n * The telnet server description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);"
            ],
            [
                "BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of bits in simple gates like And and Or\n */\npublic static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);"
            ],
            [
                "INPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * input bits of sign extender\n */\npublic static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);"
            ],
            [
                "OUTPUT_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output bits of sign extender\n */\npublic static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);"
            ],
            [
                "INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in simple gates like And and Or\n */\npublic static final // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nKey.KeyInteger // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nINPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);"
            ],
            [
                "LUT_INPUT_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of inputs in the LUT\n */\npublic static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);"
            ],
            [
                "MAX_VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The counter max value\n */\npublic static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);"
            ],
            [
                "DELAY_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the delay time used by the delay component\n */\npublic static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);"
            ],
            [
                "MONOFLOP_DELAY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the timer delay time\n */\npublic static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);"
            ],
            [
                "LABEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The elements label\n */\npublic static final Key<String> LABEL = new Key<>(\"Label\", \"\");"
            ],
            [
                "FONT_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The font size\n */\npublic static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);"
            ],
            [
                "TEXT_ORIENTATION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * text orientation\n */\npublic static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();"
            ],
            [
                "LED_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a LED\n */\npublic static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();"
            ],
            [
                "SEVEN_SEG_SIZE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The size of a seven seg display\n */\npublic static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);"
            ],
            [
                "VALUE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The value of constants\n */\npublic static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();"
            ],
            [
                "DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of elements\n */\npublic static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();"
            ],
            [
                "INPUT_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of inputs\n */\npublic static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();"
            ],
            [
                "DIP_DEFAULT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The default value of the dip switch\n */\npublic static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Color of LEDs\n */\npublic static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();"
            ],
            [
                "INPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The input splitting of a splitter\n */\npublic static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");"
            ],
            [
                "OUTPUT_SPLIT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The output splitting of a splitter\n */\npublic static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");"
            ],
            [
                "SPLITTER_SPREADING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The splitter spreading\n */\npublic static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();"
            ],
            [
                "IN_OUT_SMALL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to select small inputs and outputs\n */\npublic static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "RUN_AT_REAL_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable realtime mode at a clock\n */\npublic static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);"
            ],
            [
                "INVERT_OUTPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * inverts the output of a gate\n */\npublic static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);"
            ],
            [
                "FREQUENCY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The real time frequency of the clock\n */\npublic static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);"
            ],
            [
                "SELECTOR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the bit count of a muxer or decoder\n */\npublic static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);"
            ],
            [
                "ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * number of address bits of memory\n */\npublic static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);"
            ],
            [
                "BLOWN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a diode as blown fuse or as programmed\n */\npublic static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * indicates a switch as closed or not\n */\npublic static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();"
            ],
            [
                "SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * signed flag for comparator element\n */\npublic static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();"
            ],
            [
                "REMAINDER_POSITIVE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects if the reminder of the division is always positive\n */\npublic static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);"
            ],
            [
                "DATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the data key for memory\n */\npublic static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);"
            ],
            [
                "FLIP_SEL_POSITON",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag for flipping selector pos in muxers, decoders and drivers\n */\npublic static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();"
            ],
            [
                "ROTATE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the rotation of the elements\n */\npublic static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();"
            ],
            [
                "WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);"
            ],
            [
                "SHAPE_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * defines the shape type of the custom circuit\n */\npublic static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();"
            ],
            [
                "LAYOUT_SHAPE_DELTA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Defines the distance to the previous pin. Used by the layout shape type\n */\npublic static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of an element if it is included as nested element\n */\npublic static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));"
            ],
            [
                "TERM_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);"
            ],
            [
                "TERM_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);"
            ],
            [
                "CYCLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break timeout cycles\n */\npublic static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);"
            ],
            [
                "ENABLED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * break enabled\n */\npublic static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();"
            ],
            [
                "VALUE_IS_PROBE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to make a value a probe\n */\npublic static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "IS_PROGRAM_MEMORY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();"
            ],
            [
                "IS_PROGRAM_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to set a ROM as program memory\n */\npublic static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();"
            ],
            [
                "AUTO_RELOAD_ROM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the ROMs auto load function\n */\npublic static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();"
            ],
            [
                "LAST_DATA_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The last used ROM data file\n */\npublic static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();"
            ],
            [
                "SHOW_DATA_TABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data table window\n */\npublic static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();"
            ],
            [
                "SHOW_DATA_GRAPH_MICRO",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to show the data graph window in single gate mode\n */\npublic static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();"
            ],
            [
                "ADD_VALUE_TO_GRAPH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to add the value to the measurement graph\n */\npublic static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();"
            ],
            [
                "MICRO_STEP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable the single gate mode in the embedded data view\n */\npublic static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);"
            ],
            [
                "MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the embedded data view\n */\npublic static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);"
            ],
            [
                "SETTINGS_MAX_STEP_COUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the max number of samples in the default data view\n */\npublic static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);"
            ],
            [
                "IS_HIGH_Z",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to enable high z mode at an input\n */\npublic static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "AVOID_ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag to avoid active low at an input\n */\npublic static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the description of an element\n */\npublic static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");"
            ],
            [
                "NETNAME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A net name\n */\npublic static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");"
            ],
            [
                "SETTINGS_IEEE_SHAPES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * shape setting\n */\npublic static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();"
            ],
            [
                "SETTINGS_LANGUAGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI Language\n */\npublic static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();"
            ],
            [
                "SETTINGS_DEFAULT_TREESELECT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Default state of the tree view\n */\npublic static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);"
            ],
            [
                "SETTINGS_EXPRESSION_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The GUI expression string representation\n */\npublic static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);"
            ],
            [
                "SETTINGS_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the grid\n */\npublic static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();"
            ],
            [
                "SETTINGS_SHOW_WIRE_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the wire bits view\n */\npublic static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);"
            ],
            [
                "SETTINGS_MAC_MOUSE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables the MAC mouse mode\n */\npublic static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables tunnel rename dialog\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);"
            ],
            [
                "SETTINGS_RENAME_LABELS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables renaming of labels ending with numbers while copying\n */\npublic static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);"
            ],
            [
                "SETTINGS_OPEN_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * enables remote port\n */\npublic static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();"
            ],
            [
                "SETTINGS_REMOTE_PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * remote port\n */\npublic static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);"
            ],
            [
                "OSCILLATION_DETECTION_COUNTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Counter used to detect oscillations\n */\npublic static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);"
            ],
            [
                "INT_FORMAT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();"
            ],
            [
                "PROBE_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * output format for numbers\n */\npublic static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());"
            ],
            [
                "FIXED_POINT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * fixed point fractional binary digits\n */\npublic static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();"
            ],
            [
                "GRAPHIC_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * width of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);"
            ],
            [
                "GRAPHIC_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * height of the terminal\n */\npublic static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);"
            ],
            [
                "RELAY_NORMALLY_CLOSED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a relay to indicate if it is normally open or normally closed.\n */\npublic static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();"
            ],
            [
                "POLES",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Number of poles in the double throw relay\n */\npublic static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();"
            ],
            [
                "BARREL_SHIFTER_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to select the shift mode\n */\npublic static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());"
            ],
            [
                "DIRECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate shift direction\n */\npublic static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());"
            ],
            [
                "BARREL_SIGNED",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * flag used by a barrel shifter to indicate if shift value is signed\n */\npublic static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);"
            ],
            [
                "COMMON_CONNECTION",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to indicate if the 7-seg display has a common cathode output\n */\npublic static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();"
            ],
            [
                "COMMON_CONNECTION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to define the common connection type\n */\npublic static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();"
            ],
            [
                "LED_PERSISTENCE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);"
            ],
            [
                "LED_PERSIST_TIME",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to enable the storage of the last state in the Seven Seg display.\n */\npublic static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();"
            ],
            [
                "SETTINGS_ATF1502_FITTER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_ATMISP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Flash software for the atf15xx\n */\npublic static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();"
            ],
            [
                "ROW_DATA_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * row bits in led matrix\n */\npublic static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);"
            ],
            [
                "COL_ADDR_BITS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * column address bits in led matrix\n */\npublic static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);"
            ],
            [
                "LOCKED_MODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * In locked mode the circuit can not be modified\n */\npublic static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);"
            ],
            [
                "PINNUMBER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin number\n */\npublic static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();"
            ],
            [
                "PINCOUNT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the pin count\n */\npublic static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));"
            ],
            [
                "INVERTER_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * contains the input inverter config\n */\npublic static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());"
            ],
            [
                "BACKGROUND_COLOR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Background Color of nested circuits\n */\npublic static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));"
            ],
            [
                "SETTINGS_FONT_SCALING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the screen resolution\n */\npublic static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();"
            ],
            [
                "SETTINGS_USE_EQUALS_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses the equals key instead of the plus key.\n */\npublic static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;"
            ],
            [
                "WITH_ENABLE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if a enable input is needed\n */\npublic static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);"
            ],
            [
                "FET_UNIDIRECTIONAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true to simulate a unidirectional FET\n */\npublic static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);"
            ],
            [
                "ACTIVE_LOW",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if component is active low\n */\npublic static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();"
            ],
            [
                "MAP_TO_KEY",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * true if button is mapped to the keyboard\n */\npublic static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();"
            ],
            [
                "SETTINGS_LIBRARY_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Fitter for the atf1502\n */\npublic static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();"
            ],
            [
                "SETTINGS_JAR_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * A jar containing custom java components\n */\npublic static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "ROMMANAGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The manager which contains all the roms data\n */\npublic static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();"
            ],
            [
                "APPLICATION_TYPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The type of the external process\n */\npublic static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());"
            ],
            [
                "EXTERNAL_INPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The inputs used by the external process\n */\npublic static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");"
            ],
            [
                "EXTERNAL_OUTPUTS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The outputs used by the external process\n */\npublic static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");"
            ],
            [
                "EXTERNAL_CODE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);"
            ],
            [
                "EXTERNAL_CODE_FILE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The code to be executed by the external process\n */\npublic static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));"
            ],
            [
                "SETTINGS_GHDL_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to ghdl\n */\npublic static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();"
            ],
            [
                "GHDL_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The ghdl options\n */\npublic static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "IVERILOG_OPTIONS",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The iverilog options\n */\npublic static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");"
            ],
            [
                "SETTINGS_IVERILOG_PATH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Path to iverilog installation directory\n */\npublic static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();"
            ],
            [
                "CUSTOM_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Shape used to represent a visual element\n */\npublic static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));"
            ],
            [
                "PRELOAD_PROGRAM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * True if a program is loaded to the simulator at startup\n */\npublic static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();"
            ],
            [
                "BIG_ENDIAN",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);"
            ],
            [
                "PROGRAM_TO_PRELOAD",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The file to preload as a program at startup\n */\npublic static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "BIG_ENDIAN_SETTING",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Uses big endian at file import\n */\npublic static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);"
            ],
            [
                "WIDE_SHAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects a wide shape\n */\npublic static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();"
            ],
            [
                "RECT_WIDTH",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the width of the rectangle\n */\npublic static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);"
            ],
            [
                "RECT_HEIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the height of the rectangle\n */\npublic static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);"
            ],
            [
                "RECT_INSIDE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();"
            ],
            [
                "RECT_BOTTOM",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();"
            ],
            [
                "RECT_RIGHT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * the position of the text in the rectangle\n */\npublic static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();"
            ],
            [
                "MIDI_CHANNEL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);"
            ],
            [
                "MIDI_INSTRUMENT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the midi channel\n */\npublic static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");"
            ],
            [
                "MIDI_PROG_CHANGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables Program change\n */\npublic static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);"
            ],
            [
                "SETTINGS_TOOLCHAIN_CONFIG",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Stores the IDE settings file\n */\npublic static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();"
            ],
            [
                "GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();"
            ],
            [
                "GENERICLARGE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Used to input statements to generify a circuit.\n */\npublic static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();"
            ],
            [
                "IS_GENERIC",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Circuit is generic\n */\npublic static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();"
            ],
            [
                "SETTINGS_SHOW_TUTORIAL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the tutorial\n */\npublic static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();"
            ],
            [
                "SETTINGS_WIRETOOLTIP",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Enables the wire tool tips\n */\npublic static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);"
            ],
            [
                "SWITCH_ACTS_AS_INPUT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The switch acts as input\n */\npublic static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();"
            ],
            [
                "SNAP_TO_GRID",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Snaps the element to the grid\n */\npublic static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();"
            ],
            [
                "MIRROR",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Mirrors the component\n */\npublic static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();"
            ],
            [
                "TESTDATA",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The test data\n */\npublic static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);"
            ],
            [
                "TRIGGER",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * The scope trigger mode\n */\npublic static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());"
            ],
            [
                "PORT",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Selects the telnet port\n */\npublic static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);"
            ],
            [
                "TELNET_ESCAPE",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Telnet escape\n */\npublic static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();"
            ],
            [
                "SKIP_HDL",
                "de.neemann.digital.core.element",
                "Keys",
                "/**\n * Skips HDL output for this circuit\n */\npublic static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();"
            ],
            [
                "PREFIX",
                "de.neemann.digital.core.basic",
                "FanIn",
                "/**\n * The inputs name prefix\n */\npublic static final String PREFIX = \"In_\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NOr",
                "/**\n * The NOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "And",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XNOr",
                "/**\n * The XNOr description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "XOr",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Not",
                "/**\n * The Not description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "NAnd",
                "/**\n * The NAnd description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.basic",
                "Or",
                "/**\n * The And description\n */\npublic static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);"
            ],
            [
                "STARTED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STARTED event\n */\npublic static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);"
            ],
            [
                "CLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CLOSED event\n */\npublic static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);"
            ],
            [
                "POSTCLOSED",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.POSTCLOSED event\n */\npublic static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);"
            ],
            [
                "STEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.STEP event\n */\npublic static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);"
            ],
            [
                "CHECKBURN",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.CHECKBURN event\n */\npublic static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);"
            ],
            [
                "MICROSTEP",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.MICROSTEP event\n */\npublic static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);"
            ],
            [
                "RUN_TO_BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK event\n */\npublic static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);"
            ],
            [
                "RUN_TO_BREAK_TIMEOUT",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.RUN_TO_BREAK_TIMEOUT event\n */\npublic static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);"
            ],
            [
                "BREAK",
                "de.neemann.digital.core",
                "ModelEvent",
                "/**\n * Shorthand for a ModelEventType.BREAK event\n */\npublic static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGPFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "NFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "FGNFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "PFET",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "TransGate",
                "/**\n * The transmission gate description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "SwitchDT",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Relay",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "RelayDT",
                "/**\n * The relays description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Switch",
                "/**\n * The switch description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.switching",
                "Fuse",
                "/**\n * The fuse description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Reset",
                "/**\n * The Reset description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Stop",
                "/**\n * The Stop element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Decoder",
                "/**\n * The Decoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Delay",
                "/**\n * The Delay description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Driver",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "DriverInvSel",
                "/**\n * The Driver description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "PriorityEncoder",
                "/**\n * The PriorityEncoder description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BusSplitter",
                "/**\n * The bus splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Splitter",
                "/**\n * The splitters type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Multiplexer",
                "/**\n * The Multiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "BitSelector",
                "/**\n * The Bit Selector description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Break",
                "/**\n * The Break description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Clock",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "AsyncSeq",
                "/**\n * the clocks description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.wiring",
                "Demultiplexer",
                "/**\n * The Demultiplexer description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopDAsync",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopD",
                "/**\n * The D-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRSAsync",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopT",
                "/**\n * The T-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJKAsync",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopJK",
                "/**\n * The JK-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "Monoflop",
                "/**\n * The Monoflop's description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.flipflops",
                "FlipflopRS",
                "/**\n * The RS-FF description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BarrelShifter",
                "/**\n * The barrel shifter description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Mul",
                "/**\n * The multiplier description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Neg",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitExtender",
                "/**\n * Description of the sign extend component.\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Add",
                "/**\n * The adders description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Div",
                "/**\n * The dividers description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "PRNG",
                "/**\n * The element type description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Sub",
                "/**\n * The subtractors description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "Comparator",
                "/**\n * The comparators description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.arithmetic",
                "BitCount",
                "/**\n * The element description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);"
            ],
            [
                "EMPTY_LIST",
                "de.neemann.digital.core",
                "ObservableValues",
                "/**\n * An empty list\n */\npublic static final ObservableValues EMPTY_LIST = new ObservableValues();"
            ],
            [
                "DEFAULT_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The default formatter\n */\npublic static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;"
            ],
            [
                "HEX_FORMATTER",
                "de.neemann.digital.core",
                "IntFormat",
                "/**\n * The hexadecimal formatter\n */\npublic static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "External",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.core.extern",
                "ExternalFile",
                "/**\n * The external component description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();"
            ],
            [
                "DEFAULT_RAD",
                "de.neemann.digital.fsm",
                "State",
                "/**\n * The default state radius\n */\nstatic final int DEFAULT_RAD = 70;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "Lang",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.lang",
                "InstanceHolder",
                "static final Lang INSTANCE = new Lang();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.testing",
                "TestCaseElement",
                "/**\n * The TestCaseElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();"
            ],
            [
                "STATENAMES",
                "de.neemann.digital.analyse",
                "TruthTableTableModel",
                "/**\n * String representation of the states\n */\npublic static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };"
            ],
            [
                "ONE",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant true or one\n */\npublic static final Constant ONE = new Constant(true);"
            ],
            [
                "ZERO",
                "de.neemann.digital.analyse.expression",
                "Constant",
                "/**\n * The constant false or zero\n */\npublic static final Constant ZERO = new Constant(false);"
            ],
            [
                "PRIMARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the primary panel\n */\npublic static final String PRIMARY = \"primary\";"
            ],
            [
                "SECONDARY",
                "de.neemann.digital.gui.components",
                "EditorPanel",
                "/**\n * The Id for the secondary panel\n */\npublic static final String SECONDARY = \"secondary\";"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui.components",
                "EditorFactory",
                "/**\n * The single EditorFactory instance.\n */\nstatic final EditorFactory INSTANCE = new EditorFactory();"
            ],
            [
                "MAX_TERMINAL_STORED",
                "de.neemann.digital.gui.components.terminal",
                "ConsoleTerminal",
                "/**\n * Max amount of characters stored\n */\npublic static final int MAX_TERMINAL_STORED = 2048;"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Terminal",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.terminal",
                "Keyboard",
                "/**\n * The keyboard description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);"
            ],
            [
                "FAILED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for failed tests\n */\nstatic final Color FAILED_COLOR = new Color(255, 200, 200);"
            ],
            [
                "PASSED_COLOR",
                "de.neemann.digital.gui.components.testing",
                "ValueTableDialog",
                "/**\n * Background color for passed tests\n */\nstatic final Color PASSED_COLOR = new Color(200, 255, 200);"
            ],
            [
                "ICON_DELETE",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The delete icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");"
            ],
            [
                "ICON_COPY",
                "de.neemann.digital.gui.components",
                "CircuitComponent",
                "/**\n * The copy icon, also used from {@link de.neemann.digital.gui.components.terminal.TerminalDialog}\n */\npublic static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "VGA",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "GraphicCard",
                "/**\n * The terminal description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.graphics",
                "LedMatrix",
                "/**\n * the LED-Matrix description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "ScopeTrigger",
                "/**\n * The ScopeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);"
            ],
            [
                "DATADESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The DataElement description\n */\npublic static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "TEXTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The TextElement description\n */\npublic static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "RECTDESCRIPTION",
                "de.neemann.digital.gui.components.data",
                "DummyElement",
                "/**\n * The shape for the rectangle\n */\npublic static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);"
            ],
            [
                "LEFT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to left align the digits\n */\npublic final static float LEFT = 0.0f;"
            ],
            [
                "CENTER",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to center the digits\n */\npublic final static float CENTER = 0.5f;"
            ],
            [
                "RIGHT",
                "de.neemann.digital.gui.components",
                "TextLineNumber",
                "/**\n * Constant to right align the digits\n */\npublic final static float RIGHT = 1.0f;"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "Settings",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.gui",
                "SettingsHolder",
                "static final Settings INSTANCE = new Settings();"
            ],
            [
                "BASE_FILE_KEY",
                "de.neemann.digital.hdl.hgs",
                "Context",
                "/**\n * Key used to store the base file name in the context\n */\npublic static final String BASE_FILE_KEY = \"baseFile\";"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.library",
                "GenericInitCode",
                "/**\n * The GenericInitCodeElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();"
            ],
            [
                "GEN_ARGS_KEY",
                "de.neemann.digital.draw.library",
                "ResolveGenerics",
                "/**\n * Key uses to store the args for the generic circuits\n */\npublic static final String GEN_ARGS_KEY = \"genArgs\";"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "ButtonShape",
                "protected static final int HEIGHT = OUT_SIZE / 2;"
            ],
            [
                "SIZE2",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * Half the size of the used raster\n */\npublic static final int SIZE2 = 10;"
            ],
            [
                "SIZE",
                "de.neemann.digital.draw.shapes",
                "GenericShape",
                "/**\n * The size of the used raster\n */\npublic static final int SIZE = SIZE2 * 2;"
            ],
            [
                "CIRC",
                "de.neemann.digital.draw.shapes",
                "DILShape",
                "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);"
            ],
            [
                "DOWNSHIFT",
                "de.neemann.digital.draw.shapes",
                "VDDShape",
                "static final int DOWNSHIFT = 4;"
            ],
            [
                "CHARGED_GATE",
                "de.neemann.digital.draw.shapes",
                "FGFETShapeN",
                "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);"
            ],
            [
                "OUT_SIZE",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "/**\n * Size of the normal sized inputs and outputs\n */\npublic static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;"
            ],
            [
                "LATEX_RAD",
                "de.neemann.digital.draw.shapes",
                "OutputShape",
                "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);"
            ],
            [
                "WIDTH2",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * half the width of the resistor\n */\npublic static final int WIDTH2 = SIZE2 - 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "PullDownShape",
                "/**\n * height of the resistor\n */\npublic static final int HEIGHT = SIZE + SIZE / 3;"
            ],
            [
                "HEIGHT",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "static final int HEIGHT = 7;"
            ],
            [
                "FRAME",
                "de.neemann.digital.draw.shapes",
                "SevenShape",
                "/**\n * the Frame of the display\n */\npublic static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");"
            ],
            [
                "DESCRIPTION",
                "de.neemann.digital.draw.elements",
                "Tunnel",
                "/**\n * The TunnelElement description\n */\npublic static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();"
            ],
            [
                "HIGH_CONTRAST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);"
            ],
            [
                "MONOCHROME",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);"
            ],
            [
                "SMALL_IO",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);"
            ],
            [
                "NO_PIN_MARKER",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);"
            ],
            [
                "THINNER_LINES",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);"
            ],
            [
                "HIDE_TEST",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);"
            ],
            [
                "NO_SHAPE_FILLING",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);"
            ],
            [
                "LATEX",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);"
            ],
            [
                "PINS_IN_MATH_MODE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SVGSettings",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "INSTANCE",
                "de.neemann.digital.draw.graphics",
                "SettingsHolder",
                "static final SVGSettings INSTANCE = new SVGSettings();"
            ],
            [
                "COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to select the color map\n */\npublic static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();"
            ],
            [
                "CUSTOM_COLOR_SCHEME",
                "de.neemann.digital.draw.graphics",
                "ColorScheme",
                "/**\n * The key used to define the custom color map\n */\npublic static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();"
            ],
            [
                "MAXLINETHICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * maximal line thickness\n */\npublic static final int MAXLINETHICK = 4;"
            ],
            [
                "NORMAL",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all lines to draw the shapes itself\n */\npublic static final Style NORMAL = new Builder().build();"
            ],
            [
                "DISABLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for all disabled elements\n */\npublic static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();"
            ],
            [
                "INOUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used for input and output labels\n */\npublic static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();"
            ],
            [
                "FAILED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the failed state lines in the measurement graph\n */\npublic static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();"
            ],
            [
                "PASS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the passed state lines in the measurement graph\n */\npublic static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();"
            ],
            [
                "NORMAL_TEXT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for text which is integral part of the shape.\n * Text which uses this style is always included in sizing!\n * Used for text only elements.\n */\npublic static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();"
            ],
            [
                "THIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin line used for the graphic in the clock or delay shape\n */\npublic static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();"
            ],
            [
                "THIN_FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thin filled\n */\npublic static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();"
            ],
            [
                "THICK",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * thick line used for the ground line\n */\npublic static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();"
            ],
            [
                "WIRE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in editing mode\n */\npublic static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "WIRE_LOW",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for low wires in running mode\n */\npublic static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();"
            ],
            [
                "WIRE_HIGH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for high wires in running mode\n */\npublic static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();"
            ],
            [
                "WIRE_HIGHZ",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used for wires in high Z state\n */\npublic static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();"
            ],
            [
                "WIRE_OUT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * used to draw the output dots\n */\npublic static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();"
            ],
            [
                "FILLED",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Filled style used to fill the splitter or the dark LEDs\n */\npublic static final Style FILLED = new Builder().setFilled(true).build();"
            ],
            [
                "DASH",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the grid in the graph\n */\npublic static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();"
            ],
            [
                "SHAPE_PIN",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();"
            ],
            [
                "SHAPE_SPLITTER",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text for splitters\n */\npublic static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();"
            ],
            [
                "WIRE_VALUE",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the pin description text\n */\npublic static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();"
            ],
            [
                "WIRE_BITS",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * Used to draw the wire bit number\n */\npublic static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();"
            ],
            [
                "HIGHLIGHT",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * highlight color used for the circles to mark an element\n */\npublic static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "ERROR",
                "de.neemann.digital.draw.graphics",
                "Style",
                "/**\n * error color used for the circles to mark an element\n */\npublic static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();"
            ],
            [
                "BLANK",
                "de.neemann.digital.draw.graphics.text.text",
                "Blank",
                "/**\n * the Blank instance\n */\npublic static final Blank BLANK = new Blank();"
            ],
            [
                "LOOK_AT_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String LOOK_AT_ALIAS = \"lookAt\";"
            ],
            [
                "REF_ALIAS",
                "de.neemann.digital.toolchain",
                "Configuration",
                "static final String REF_ALIAS = \"ref\";"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "v",
                "de.neemann.digital.draw.graphics",
                "VectorInterface"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getMatrix",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "@Override\npublic TransformMatrix getMatrix() {\n    return this;\n}"
            ],
            [
                "transform",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "@Override\npublic VectorFloat transform(VectorFloat v) {\n    return new VectorFloat(v.getXFloat() * a + v.getYFloat() * b + x, v.getXFloat() * c + v.getYFloat() * d + y);\n}"
            ],
            [
                "invert",
                "de.neemann.digital.draw.graphics",
                "Transform",
                "public Transform invert()"
            ],
            [
                "getValues",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * @return the matrix values\n */\npublic float[] getValues() {\n    return new float[] { a, b, c, d, x, y };\n}"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "invert",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Returns the inverse transformation.\n *\n * @return the inverse transformation.\n */\npublic TransformMatrix invert() {\n    float q = a * d - b * c;\n    return new TransformMatrix(d / q, -b / q, -c / q, a / q, (b * y - d * x) / q, (c * x - a * y) / q);\n}"
            ],
            [
                "isUniform",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * @return true if this transformation does no asymmetric scaling.\n */\npublic boolean isUniform() {\n    return equal(a, d) && equal(b, -c);\n}"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "transform",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "@Override\npublic Vector transform(Vector v) {\n    return new Vector((int) (v.getXFloat() * a + v.getYFloat() * b + x), (int) (v.getXFloat() * c + v.getYFloat() * d + y));\n}"
            ],
            [
                "transformDirection",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * Transforms a direction vector.\n * Ignores the translation part of the transformation.\n *\n * @param v the vector to transform\n * @return the transformed vector\n */\npublic VectorFloat transformDirection(VectorInterface v) {\n    return new VectorFloat(v.getXFloat() * a + v.getYFloat() * b, v.getXFloat() * c + v.getYFloat() * d);\n}"
            ],
            [
                "noRotation",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "/**\n * @return true if this transformation does no rotation\n */\npublic boolean noRotation() {\n    return equal(b, 0) && equal(c, 0);\n}"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "transform",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract VectorInterface transform(Transform arg0)"
            ],
            [
                "getY",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract int getY()"
            ],
            [
                "toFloat",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract VectorFloat toFloat()"
            ],
            [
                "len",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract float len()"
            ],
            [
                "add",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract VectorInterface add(VectorInterface arg0)"
            ],
            [
                "scalar",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public float scalar(VectorInterface arg0)"
            ],
            [
                "div",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract VectorInterface div(int arg0)"
            ],
            [
                "getOrthogonal",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract VectorInterface getOrthogonal()"
            ],
            [
                "getX",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract int getX()"
            ],
            [
                "round",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract Vector round()"
            ],
            [
                "getXFloat",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract float getXFloat()"
            ],
            [
                "getYFloat",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract float getYFloat()"
            ],
            [
                "mul",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract VectorFloat mul(float arg0)"
            ],
            [
                "sub",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract VectorInterface sub(VectorInterface arg0)"
            ],
            [
                "norm",
                "de.neemann.digital.draw.graphics",
                "VectorInterface",
                "public abstract VectorFloat norm()"
            ],
            [
                "toString",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public String toString()"
            ],
            [
                "equals",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public boolean equals(Object arg0)"
            ],
            [
                "sub",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorFloat sub(VectorInterface arg0)"
            ],
            [
                "add",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorFloat add(VectorInterface arg0)"
            ],
            [
                "getXFloat",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public float getXFloat()"
            ],
            [
                "transform",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorInterface transform(Transform arg0)"
            ],
            [
                "div",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorFloat div(int arg0)"
            ],
            [
                "round",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public Vector round()"
            ],
            [
                "mul",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public float mul(VectorFloat arg0)"
            ],
            [
                "norm",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorFloat norm()"
            ],
            [
                "getOrthogonal",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorFloat getOrthogonal()"
            ],
            [
                "mul",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorFloat mul(float arg0)"
            ],
            [
                "getYFloat",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public float getYFloat()"
            ],
            [
                "add",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorFloat add(float arg0, float arg1)"
            ],
            [
                "len",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public float len()"
            ],
            [
                "getY",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public int getY()"
            ],
            [
                "hashCode",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public int hashCode()"
            ],
            [
                "getX",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public int getX()"
            ],
            [
                "toFloat",
                "de.neemann.digital.draw.graphics",
                "VectorFloat",
                "public VectorFloat toFloat()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "a",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "final float a;"
            ],
            [
                "b",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "final float b;"
            ],
            [
                "c",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "final float c;"
            ],
            [
                "d",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "final float d;"
            ],
            [
                "x",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "final float x;"
            ],
            [
                "y",
                "de.neemann.digital.draw.graphics",
                "TransformMatrix",
                "final float y;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    }
]