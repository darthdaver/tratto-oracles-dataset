[
    {
        "id": 15245,
        "oracle": "format == null;",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.complex",
        "className": "ComplexFormat",
        "javadocTag": "@throws NullArgumentException if {@code realFormat} is {@code null}.",
        "methodJavadoc": "    /**\n     * Create an instance with a custom number format for both real and\n     * imaginary parts.\n     * @param format the custom format for both real and imaginary parts.\n     * @throws NullArgumentException if {@code realFormat} is {@code null}.\n     */",
        "methodSourceCode": "public ComplexFormat(NumberFormat format) throws NullArgumentException{\n    if (format == null) {\n        throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);\n    }\n    this.imaginaryCharacter = DEFAULT_IMAGINARY_CHARACTER;\n    this.imaginaryFormat = format;\n    this.realFormat = format;\n}",
        "classJavadoc": "/**\n * Formats a Complex number in cartesian format \"Re(c) + Im(c)i\".  'i' can\n * be replaced with 'j' (or anything else), and the number format for both real\n * and imaginary parts can be configured.\n *\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.complex;\n\nimport java.text.FieldPosition;\nimport java.text.NumberFormat;\nimport java.text.ParsePosition;\nimport java.util.Locale;\n\nimport org.apache.commons.math3.exception.MathIllegalArgumentException;\nimport org.apache.commons.math3.exception.MathParseException;\nimport org.apache.commons.math3.exception.NoDataException;\nimport org.apache.commons.math3.exception.NullArgumentException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.util.CompositeFormat;\n\n/**\n * Formats a Complex number in cartesian format \"Re(c) + Im(c)i\".  'i' can\n * be replaced with 'j' (or anything else), and the number format for both real\n * and imaginary parts can be configured.\n *\n */\npublic class ComplexFormat {\n\n     /** The default imaginary character. */\n    private static final String DEFAULT_IMAGINARY_CHARACTER = \"i\";\n    /** The notation used to signify the imaginary part of the complex number. */\n    private final String imaginaryCharacter;\n    /** The format used for the imaginary part. */\n    private final NumberFormat imaginaryFormat;\n    /** The format used for the real part. */\n    private final NumberFormat realFormat;\n\n    /**\n     * Create an instance with the default imaginary character, 'i', and the\n     * default number format for both real and imaginary parts.\n     */\n    public ComplexFormat() {\n        this.imaginaryCharacter = DEFAULT_IMAGINARY_CHARACTER;\n        this.imaginaryFormat = CompositeFormat.getDefaultNumberFormat();\n        this.realFormat = imaginaryFormat;\n    }\n\n    /**\n     * Create an instance with a custom number format for both real and\n     * imaginary parts.\n     * @param format the custom format for both real and imaginary parts.\n     * @throws NullArgumentException if {@code realFormat} is {@code null}.\n     */\n    public ComplexFormat(NumberFormat format) throws NullArgumentException {\n        if (format == null) {\n            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);\n        }\n        this.imaginaryCharacter = DEFAULT_IMAGINARY_CHARACTER;\n        this.imaginaryFormat = format;\n        this.realFormat = format;\n    }\n\n    /**\n     * Create an instance with a custom number format for the real part and a\n     * custom number format for the imaginary part.\n     * @param realFormat the custom format for the real part.\n     * @param imaginaryFormat the custom format for the imaginary part.\n     * @throws NullArgumentException if {@code imaginaryFormat} is {@code null}.\n     * @throws NullArgumentException if {@code realFormat} is {@code null}.\n      */\n    public ComplexFormat(NumberFormat realFormat, NumberFormat imaginaryFormat)\n        throws NullArgumentException {\n        if (imaginaryFormat == null) {\n            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);\n        }\n        if (realFormat == null) {\n            throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);\n        }\n\n        this.imaginaryCharacter = DEFAULT_IMAGINARY_CHARACTER;\n        this.imaginaryFormat = imaginaryFormat;\n        this.realFormat = realFormat;\n    }\n\n    /**\n     * Create an instance with a custom imaginary character, and the default\n     * number format for both real and imaginary parts.\n     * @param imaginaryCharacter The custom imaginary character.\n     * @throws NullArgumentException if {@code imaginaryCharacter} is\n     * {@code null}.\n     * @throws NoDataException if {@code imaginaryCharacter} is an\n     * empty string.\n     */\n    public ComplexFormat(String imaginaryCharacter)\n        throws NullArgumentException, NoDataException {\n        this(imaginaryCharacter, CompositeFormat.getDefaultNumberFormat());\n    }\n\n    /**\n     * Create an instance with a custom imaginary character, and a custom number\n     * format for both real and imaginary parts.\n     * @param imaginaryCharacter The custom imaginary character.\n     * @param format the custom format for both real and imaginary parts.\n     * @throws NullArgumentException if {@code imaginaryCharacter} is\n     * {@code null}.\n     * @throws NoDataException if {@code imaginaryCharacter} is an\n     * empty string.\n     * @throws NullArgumentException if {@code format} is {@code null}.\n     */\n    public ComplexFormat(String imaginaryCharacter, NumberFormat format)\n        throws NullArgumentException, NoDataException {\n        this(imaginaryCharacter, format, format);\n    }\n\n    /**\n     * Create an instance with a custom imaginary character, a custom number\n     * format for the real part, and a custom number format for the imaginary\n     * part.\n     *\n     * @param imaginaryCharacter The custom imaginary character.\n     * @param realFormat the custom format for the real part.\n     * @param imaginaryFormat the custom format for the imaginary part.\n     * @throws NullArgumentException if {@code imaginaryCharacter} is\n     * {@code null}.\n     * @throws NoDataException if {@code imaginaryCharacter} is an\n     * empty string.\n     * @throws NullArgumentException if {@code imaginaryFormat} is {@code null}.\n     * @throws NullArgumentException if {@code realFormat} is {@code null}.\n     */\n    public ComplexFormat(String imaginaryCharacter,\n                         NumberFormat realFormat,\n                         NumberFormat imaginaryFormat)\n        throws NullArgumentException, NoDataException {\n        if (imaginaryCharacter == null) {\n            throw new NullArgumentException();\n        }\n        if (imaginaryCharacter.length() == 0) {\n            throw new NoDataException();\n        }\n        if (imaginaryFormat == null) {\n            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);\n        }\n        if (realFormat == null) {\n            throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);\n        }\n\n        this.imaginaryCharacter = imaginaryCharacter;\n        this.imaginaryFormat = imaginaryFormat;\n        this.realFormat = realFormat;\n    }\n\n    /**\n     * Get the set of locales for which complex formats are available.\n     * <p>This is the same set as the {@link NumberFormat} set.</p>\n     * @return available complex format locales.\n     */\n    public static Locale[] getAvailableLocales() {\n        return NumberFormat.getAvailableLocales();\n    }\n\n    /**\n     * This method calls {@link #format(Object,StringBuffer,FieldPosition)}.\n     *\n     * @param c Complex object to format.\n     * @return A formatted number in the form \"Re(c) + Im(c)i\".\n     */\n    public String format(Complex c) {\n        return format(c, new StringBuffer(), new FieldPosition(0)).toString();\n    }\n\n    /**\n     * This method calls {@link #format(Object,StringBuffer,FieldPosition)}.\n     *\n     * @param c Double object to format.\n     * @return A formatted number.\n     */\n    public String format(Double c) {\n        return format(new Complex(c, 0), new StringBuffer(), new FieldPosition(0)).toString();\n    }\n\n    /**\n     * Formats a {@link Complex} object to produce a string.\n     *\n     * @param complex the object to format.\n     * @param toAppendTo where the text is to be appended\n     * @param pos On input: an alignment field, if desired. On output: the\n     *            offsets of the alignment field\n     * @return the value passed in as toAppendTo.\n     */\n    public StringBuffer format(Complex complex, StringBuffer toAppendTo,\n                               FieldPosition pos) {\n        pos.setBeginIndex(0);\n        pos.setEndIndex(0);\n\n        // format real\n        double re = complex.getReal();\n        CompositeFormat.formatDouble(re, getRealFormat(), toAppendTo, pos);\n\n        // format sign and imaginary\n        double im = complex.getImaginary();\n        StringBuffer imAppendTo;\n        if (im < 0.0) {\n            toAppendTo.append(\" - \");\n            imAppendTo = formatImaginary(-im, new StringBuffer(), pos);\n            toAppendTo.append(imAppendTo);\n            toAppendTo.append(getImaginaryCharacter());\n        } else if (im > 0.0 || Double.isNaN(im)) {\n            toAppendTo.append(\" + \");\n            imAppendTo = formatImaginary(im, new StringBuffer(), pos);\n            toAppendTo.append(imAppendTo);\n            toAppendTo.append(getImaginaryCharacter());\n        }\n\n        return toAppendTo;\n    }\n\n    /**\n     * Format the absolute value of the imaginary part.\n     *\n     * @param absIm Absolute value of the imaginary part of a complex number.\n     * @param toAppendTo where the text is to be appended.\n     * @param pos On input: an alignment field, if desired. On output: the\n     * offsets of the alignment field.\n     * @return the value passed in as toAppendTo.\n     */\n    private StringBuffer formatImaginary(double absIm,\n                                         StringBuffer toAppendTo,\n                                         FieldPosition pos) {\n        pos.setBeginIndex(0);\n        pos.setEndIndex(0);\n\n        CompositeFormat.formatDouble(absIm, getImaginaryFormat(), toAppendTo, pos);\n        if (toAppendTo.toString().equals(\"1\")) {\n            // Remove the character \"1\" if it is the only one.\n            toAppendTo.setLength(0);\n        }\n\n        return toAppendTo;\n    }\n\n    /**\n     * Formats a object to produce a string.  {@code obj} must be either a\n     * {@link Complex} object or a {@link Number} object.  Any other type of\n     * object will result in an {@link IllegalArgumentException} being thrown.\n     *\n     * @param obj the object to format.\n     * @param toAppendTo where the text is to be appended\n     * @param pos On input: an alignment field, if desired. On output: the\n     *            offsets of the alignment field\n     * @return the value passed in as toAppendTo.\n     * @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)\n     * @throws MathIllegalArgumentException is {@code obj} is not a valid type.\n     */\n    public StringBuffer format(Object obj, StringBuffer toAppendTo,\n                               FieldPosition pos)\n        throws MathIllegalArgumentException {\n\n        StringBuffer ret = null;\n\n        if (obj instanceof Complex) {\n            ret = format( (Complex)obj, toAppendTo, pos);\n        } else if (obj instanceof Number) {\n            ret = format(new Complex(((Number)obj).doubleValue(), 0.0),\n                         toAppendTo, pos);\n        } else {\n            throw new MathIllegalArgumentException(LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX,\n                                                   obj.getClass().getName());\n        }\n\n        return ret;\n    }\n\n    /**\n     * Access the imaginaryCharacter.\n     * @return the imaginaryCharacter.\n     */\n    public String getImaginaryCharacter() {\n        return imaginaryCharacter;\n    }\n\n    /**\n     * Access the imaginaryFormat.\n     * @return the imaginaryFormat.\n     */\n    public NumberFormat getImaginaryFormat() {\n        return imaginaryFormat;\n    }\n\n    /**\n     * Returns the default complex format for the current locale.\n     * @return the default complex format.\n     */\n    public static ComplexFormat getInstance() {\n        return getInstance(Locale.getDefault());\n    }\n\n    /**\n     * Returns the default complex format for the given locale.\n     * @param locale the specific locale used by the format.\n     * @return the complex format specific to the given locale.\n     */\n    public static ComplexFormat getInstance(Locale locale) {\n        NumberFormat f = CompositeFormat.getDefaultNumberFormat(locale);\n        return new ComplexFormat(f);\n    }\n\n    /**\n     * Returns the default complex format for the given locale.\n     * @param locale the specific locale used by the format.\n     * @param imaginaryCharacter Imaginary character.\n     * @return the complex format specific to the given locale.\n     * @throws NullArgumentException if {@code imaginaryCharacter} is\n     * {@code null}.\n     * @throws NoDataException if {@code imaginaryCharacter} is an\n     * empty string.\n     */\n    public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale)\n        throws NullArgumentException, NoDataException {\n        NumberFormat f = CompositeFormat.getDefaultNumberFormat(locale);\n        return new ComplexFormat(imaginaryCharacter, f);\n    }\n\n    /**\n     * Access the realFormat.\n     * @return the realFormat.\n     */\n    public NumberFormat getRealFormat() {\n        return realFormat;\n    }\n\n    /**\n     * Parses a string to produce a {@link Complex} object.\n     *\n     * @param source the string to parse.\n     * @return the parsed {@link Complex} object.\n     * @throws MathParseException if the beginning of the specified string\n     * cannot be parsed.\n     */\n    public Complex parse(String source) throws MathParseException {\n        ParsePosition parsePosition = new ParsePosition(0);\n        Complex result = parse(source, parsePosition);\n        if (parsePosition.getIndex() == 0) {\n            throw new MathParseException(source,\n                                         parsePosition.getErrorIndex(),\n                                         Complex.class);\n        }\n        return result;\n    }\n\n    /**\n     * Parses a string to produce a {@link Complex} object.\n     *\n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Complex} object.\n     */\n    public Complex parse(String source, ParsePosition pos) {\n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        CompositeFormat.parseAndIgnoreWhitespace(source, pos);\n\n        // parse real\n        Number re = CompositeFormat.parseNumber(source, getRealFormat(), pos);\n        if (re == null) {\n            // invalid real number\n            // set index back to initial, error index should already be set\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse sign\n        int startIndex = pos.getIndex();\n        char c = CompositeFormat.parseNextCharacter(source, pos);\n        int sign = 0;\n        switch (c) {\n        case 0 :\n            // no sign\n            // return real only complex number\n            return new Complex(re.doubleValue(), 0.0);\n        case '-' :\n            sign = -1;\n            break;\n        case '+' :\n            sign = 1;\n            break;\n        default :\n            // invalid sign\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // parse whitespace\n        CompositeFormat.parseAndIgnoreWhitespace(source, pos);\n\n        // parse imaginary\n        Number im = CompositeFormat.parseNumber(source, getRealFormat(), pos);\n        if (im == null) {\n            // invalid imaginary number\n            // set index back to initial, error index should already be set\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse imaginary character\n        if (!CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), pos)) {\n            return null;\n        }\n\n        return new Complex(re.doubleValue(), im.doubleValue() * sign);\n\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "format",
                "java.text",
                "NumberFormat"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "format",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public String format(Complex c)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getRealFormat",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public NumberFormat getRealFormat()"
            ],
            [
                "parse",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public Complex parse(String source, ParsePosition pos)"
            ],
            [
                "getImaginaryFormat",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public NumberFormat getImaginaryFormat()"
            ],
            [
                "getImaginaryCharacter",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public String getImaginaryCharacter()"
            ],
            [
                "format",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) throws MathIllegalArgumentException"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "format",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public StringBuffer format(Complex complex, StringBuffer toAppendTo, FieldPosition pos)"
            ],
            [
                "parse",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public Complex parse(String source) throws MathParseException"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "format",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public String format(Double c)"
            ],
            [
                "parse",
                "java.text",
                "NumberFormat",
                "public abstract Number parse(String arg0, ParsePosition arg1)"
            ],
            [
                "format",
                "java.text",
                "NumberFormat",
                "public final String format(double arg0)"
            ],
            [
                "getMinimumIntegerDigits",
                "java.text",
                "NumberFormat",
                "public int getMinimumIntegerDigits()"
            ],
            [
                "hashCode",
                "java.text",
                "NumberFormat",
                "public int hashCode()"
            ],
            [
                "isParseIntegerOnly",
                "java.text",
                "NumberFormat",
                "public boolean isParseIntegerOnly()"
            ],
            [
                "format",
                "java.text",
                "NumberFormat",
                "public abstract StringBuffer format(long arg0, StringBuffer arg1, FieldPosition arg2)"
            ],
            [
                "isGroupingUsed",
                "java.text",
                "NumberFormat",
                "public boolean isGroupingUsed()"
            ],
            [
                "getMaximumIntegerDigits",
                "java.text",
                "NumberFormat",
                "public int getMaximumIntegerDigits()"
            ],
            [
                "format",
                "java.text",
                "NumberFormat",
                "public abstract StringBuffer format(double arg0, StringBuffer arg1, FieldPosition arg2)"
            ],
            [
                "equals",
                "java.text",
                "NumberFormat",
                "public boolean equals(Object arg0)"
            ],
            [
                "format",
                "java.text",
                "NumberFormat",
                "public StringBuffer format(Object arg0, StringBuffer arg1, FieldPosition arg2)"
            ],
            [
                "fastFormat",
                "java.text",
                "NumberFormat",
                "String fastFormat(double arg0)"
            ],
            [
                "parseObject",
                "java.text",
                "NumberFormat",
                "public final Object parseObject(String arg0, ParsePosition arg1)"
            ],
            [
                "clone",
                "java.text",
                "NumberFormat",
                "public Object clone()"
            ],
            [
                "getRoundingMode",
                "java.text",
                "NumberFormat",
                "public RoundingMode getRoundingMode()"
            ],
            [
                "getCurrency",
                "java.text",
                "NumberFormat",
                "public Currency getCurrency()"
            ],
            [
                "getMaximumFractionDigits",
                "java.text",
                "NumberFormat",
                "public int getMaximumFractionDigits()"
            ],
            [
                "getMinimumFractionDigits",
                "java.text",
                "NumberFormat",
                "public int getMinimumFractionDigits()"
            ],
            [
                "format",
                "java.text",
                "NumberFormat",
                "public final String format(long arg0)"
            ],
            [
                "parse",
                "java.text",
                "NumberFormat",
                "public Number parse(String arg0) throws ParseException"
            ],
            [
                "createAttributedCharacterIterator",
                "java.text",
                "Format",
                "AttributedCharacterIterator createAttributedCharacterIterator(String arg0, AttributedCharacterIterator.Attribute arg1, Object arg2)"
            ],
            [
                "parseObject",
                "java.text",
                "Format",
                "public abstract Object parseObject(String arg0, ParsePosition arg1)"
            ],
            [
                "createAttributedCharacterIterator",
                "java.text",
                "Format",
                "AttributedCharacterIterator createAttributedCharacterIterator(String arg0)"
            ],
            [
                "parseObject",
                "java.text",
                "Format",
                "public Object parseObject(String arg0) throws ParseException"
            ],
            [
                "clone",
                "java.text",
                "Format",
                "public Object clone()"
            ],
            [
                "createAttributedCharacterIterator",
                "java.text",
                "Format",
                "AttributedCharacterIterator createAttributedCharacterIterator(AttributedCharacterIterator[] arg0)"
            ],
            [
                "createAttributedCharacterIterator",
                "java.text",
                "Format",
                "AttributedCharacterIterator createAttributedCharacterIterator(AttributedCharacterIterator arg0, AttributedCharacterIterator.Attribute arg1, Object arg2)"
            ],
            [
                "format",
                "java.text",
                "Format",
                "public abstract StringBuffer format(Object arg0, StringBuffer arg1, FieldPosition arg2)"
            ],
            [
                "formatToCharacterIterator",
                "java.text",
                "Format",
                "public AttributedCharacterIterator formatToCharacterIterator(Object arg0)"
            ],
            [
                "format",
                "java.text",
                "Format",
                "public final String format(Object arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 15249,
        "oracle": "imaginaryCharacter.length() == 0;",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.complex",
        "className": "ComplexFormat",
        "javadocTag": "@throws NoDataException if {@code imaginaryCharacter} is an\nempty string.",
        "methodJavadoc": "    /**\n     * Create an instance with a custom imaginary character, and the default\n     * number format for both real and imaginary parts.\n     * @param imaginaryCharacter The custom imaginary character.\n     * @throws NullArgumentException if {@code imaginaryCharacter} is\n     * {@code null}.\n     * @throws NoDataException if {@code imaginaryCharacter} is an\n     * empty string.\n     */",
        "methodSourceCode": "public ComplexFormat(String imaginaryCharacter) throws NullArgumentException, NoDataException{\n    this(imaginaryCharacter, CompositeFormat.getDefaultNumberFormat());\n}",
        "classJavadoc": "/**\n * Formats a Complex number in cartesian format \"Re(c) + Im(c)i\".  'i' can\n * be replaced with 'j' (or anything else), and the number format for both real\n * and imaginary parts can be configured.\n *\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.complex;\n\nimport java.text.FieldPosition;\nimport java.text.NumberFormat;\nimport java.text.ParsePosition;\nimport java.util.Locale;\n\nimport org.apache.commons.math3.exception.MathIllegalArgumentException;\nimport org.apache.commons.math3.exception.MathParseException;\nimport org.apache.commons.math3.exception.NoDataException;\nimport org.apache.commons.math3.exception.NullArgumentException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.util.CompositeFormat;\n\n/**\n * Formats a Complex number in cartesian format \"Re(c) + Im(c)i\".  'i' can\n * be replaced with 'j' (or anything else), and the number format for both real\n * and imaginary parts can be configured.\n *\n */\npublic class ComplexFormat {\n\n     /** The default imaginary character. */\n    private static final String DEFAULT_IMAGINARY_CHARACTER = \"i\";\n    /** The notation used to signify the imaginary part of the complex number. */\n    private final String imaginaryCharacter;\n    /** The format used for the imaginary part. */\n    private final NumberFormat imaginaryFormat;\n    /** The format used for the real part. */\n    private final NumberFormat realFormat;\n\n    /**\n     * Create an instance with the default imaginary character, 'i', and the\n     * default number format for both real and imaginary parts.\n     */\n    public ComplexFormat() {\n        this.imaginaryCharacter = DEFAULT_IMAGINARY_CHARACTER;\n        this.imaginaryFormat = CompositeFormat.getDefaultNumberFormat();\n        this.realFormat = imaginaryFormat;\n    }\n\n    /**\n     * Create an instance with a custom number format for both real and\n     * imaginary parts.\n     * @param format the custom format for both real and imaginary parts.\n     * @throws NullArgumentException if {@code realFormat} is {@code null}.\n     */\n    public ComplexFormat(NumberFormat format) throws NullArgumentException {\n        if (format == null) {\n            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);\n        }\n        this.imaginaryCharacter = DEFAULT_IMAGINARY_CHARACTER;\n        this.imaginaryFormat = format;\n        this.realFormat = format;\n    }\n\n    /**\n     * Create an instance with a custom number format for the real part and a\n     * custom number format for the imaginary part.\n     * @param realFormat the custom format for the real part.\n     * @param imaginaryFormat the custom format for the imaginary part.\n     * @throws NullArgumentException if {@code imaginaryFormat} is {@code null}.\n     * @throws NullArgumentException if {@code realFormat} is {@code null}.\n      */\n    public ComplexFormat(NumberFormat realFormat, NumberFormat imaginaryFormat)\n        throws NullArgumentException {\n        if (imaginaryFormat == null) {\n            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);\n        }\n        if (realFormat == null) {\n            throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);\n        }\n\n        this.imaginaryCharacter = DEFAULT_IMAGINARY_CHARACTER;\n        this.imaginaryFormat = imaginaryFormat;\n        this.realFormat = realFormat;\n    }\n\n    /**\n     * Create an instance with a custom imaginary character, and the default\n     * number format for both real and imaginary parts.\n     * @param imaginaryCharacter The custom imaginary character.\n     * @throws NullArgumentException if {@code imaginaryCharacter} is\n     * {@code null}.\n     * @throws NoDataException if {@code imaginaryCharacter} is an\n     * empty string.\n     */\n    public ComplexFormat(String imaginaryCharacter)\n        throws NullArgumentException, NoDataException {\n        this(imaginaryCharacter, CompositeFormat.getDefaultNumberFormat());\n    }\n\n    /**\n     * Create an instance with a custom imaginary character, and a custom number\n     * format for both real and imaginary parts.\n     * @param imaginaryCharacter The custom imaginary character.\n     * @param format the custom format for both real and imaginary parts.\n     * @throws NullArgumentException if {@code imaginaryCharacter} is\n     * {@code null}.\n     * @throws NoDataException if {@code imaginaryCharacter} is an\n     * empty string.\n     * @throws NullArgumentException if {@code format} is {@code null}.\n     */\n    public ComplexFormat(String imaginaryCharacter, NumberFormat format)\n        throws NullArgumentException, NoDataException {\n        this(imaginaryCharacter, format, format);\n    }\n\n    /**\n     * Create an instance with a custom imaginary character, a custom number\n     * format for the real part, and a custom number format for the imaginary\n     * part.\n     *\n     * @param imaginaryCharacter The custom imaginary character.\n     * @param realFormat the custom format for the real part.\n     * @param imaginaryFormat the custom format for the imaginary part.\n     * @throws NullArgumentException if {@code imaginaryCharacter} is\n     * {@code null}.\n     * @throws NoDataException if {@code imaginaryCharacter} is an\n     * empty string.\n     * @throws NullArgumentException if {@code imaginaryFormat} is {@code null}.\n     * @throws NullArgumentException if {@code realFormat} is {@code null}.\n     */\n    public ComplexFormat(String imaginaryCharacter,\n                         NumberFormat realFormat,\n                         NumberFormat imaginaryFormat)\n        throws NullArgumentException, NoDataException {\n        if (imaginaryCharacter == null) {\n            throw new NullArgumentException();\n        }\n        if (imaginaryCharacter.length() == 0) {\n            throw new NoDataException();\n        }\n        if (imaginaryFormat == null) {\n            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);\n        }\n        if (realFormat == null) {\n            throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);\n        }\n\n        this.imaginaryCharacter = imaginaryCharacter;\n        this.imaginaryFormat = imaginaryFormat;\n        this.realFormat = realFormat;\n    }\n\n    /**\n     * Get the set of locales for which complex formats are available.\n     * <p>This is the same set as the {@link NumberFormat} set.</p>\n     * @return available complex format locales.\n     */\n    public static Locale[] getAvailableLocales() {\n        return NumberFormat.getAvailableLocales();\n    }\n\n    /**\n     * This method calls {@link #format(Object,StringBuffer,FieldPosition)}.\n     *\n     * @param c Complex object to format.\n     * @return A formatted number in the form \"Re(c) + Im(c)i\".\n     */\n    public String format(Complex c) {\n        return format(c, new StringBuffer(), new FieldPosition(0)).toString();\n    }\n\n    /**\n     * This method calls {@link #format(Object,StringBuffer,FieldPosition)}.\n     *\n     * @param c Double object to format.\n     * @return A formatted number.\n     */\n    public String format(Double c) {\n        return format(new Complex(c, 0), new StringBuffer(), new FieldPosition(0)).toString();\n    }\n\n    /**\n     * Formats a {@link Complex} object to produce a string.\n     *\n     * @param complex the object to format.\n     * @param toAppendTo where the text is to be appended\n     * @param pos On input: an alignment field, if desired. On output: the\n     *            offsets of the alignment field\n     * @return the value passed in as toAppendTo.\n     */\n    public StringBuffer format(Complex complex, StringBuffer toAppendTo,\n                               FieldPosition pos) {\n        pos.setBeginIndex(0);\n        pos.setEndIndex(0);\n\n        // format real\n        double re = complex.getReal();\n        CompositeFormat.formatDouble(re, getRealFormat(), toAppendTo, pos);\n\n        // format sign and imaginary\n        double im = complex.getImaginary();\n        StringBuffer imAppendTo;\n        if (im < 0.0) {\n            toAppendTo.append(\" - \");\n            imAppendTo = formatImaginary(-im, new StringBuffer(), pos);\n            toAppendTo.append(imAppendTo);\n            toAppendTo.append(getImaginaryCharacter());\n        } else if (im > 0.0 || Double.isNaN(im)) {\n            toAppendTo.append(\" + \");\n            imAppendTo = formatImaginary(im, new StringBuffer(), pos);\n            toAppendTo.append(imAppendTo);\n            toAppendTo.append(getImaginaryCharacter());\n        }\n\n        return toAppendTo;\n    }\n\n    /**\n     * Format the absolute value of the imaginary part.\n     *\n     * @param absIm Absolute value of the imaginary part of a complex number.\n     * @param toAppendTo where the text is to be appended.\n     * @param pos On input: an alignment field, if desired. On output: the\n     * offsets of the alignment field.\n     * @return the value passed in as toAppendTo.\n     */\n    private StringBuffer formatImaginary(double absIm,\n                                         StringBuffer toAppendTo,\n                                         FieldPosition pos) {\n        pos.setBeginIndex(0);\n        pos.setEndIndex(0);\n\n        CompositeFormat.formatDouble(absIm, getImaginaryFormat(), toAppendTo, pos);\n        if (toAppendTo.toString().equals(\"1\")) {\n            // Remove the character \"1\" if it is the only one.\n            toAppendTo.setLength(0);\n        }\n\n        return toAppendTo;\n    }\n\n    /**\n     * Formats a object to produce a string.  {@code obj} must be either a\n     * {@link Complex} object or a {@link Number} object.  Any other type of\n     * object will result in an {@link IllegalArgumentException} being thrown.\n     *\n     * @param obj the object to format.\n     * @param toAppendTo where the text is to be appended\n     * @param pos On input: an alignment field, if desired. On output: the\n     *            offsets of the alignment field\n     * @return the value passed in as toAppendTo.\n     * @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)\n     * @throws MathIllegalArgumentException is {@code obj} is not a valid type.\n     */\n    public StringBuffer format(Object obj, StringBuffer toAppendTo,\n                               FieldPosition pos)\n        throws MathIllegalArgumentException {\n\n        StringBuffer ret = null;\n\n        if (obj instanceof Complex) {\n            ret = format( (Complex)obj, toAppendTo, pos);\n        } else if (obj instanceof Number) {\n            ret = format(new Complex(((Number)obj).doubleValue(), 0.0),\n                         toAppendTo, pos);\n        } else {\n            throw new MathIllegalArgumentException(LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX,\n                                                   obj.getClass().getName());\n        }\n\n        return ret;\n    }\n\n    /**\n     * Access the imaginaryCharacter.\n     * @return the imaginaryCharacter.\n     */\n    public String getImaginaryCharacter() {\n        return imaginaryCharacter;\n    }\n\n    /**\n     * Access the imaginaryFormat.\n     * @return the imaginaryFormat.\n     */\n    public NumberFormat getImaginaryFormat() {\n        return imaginaryFormat;\n    }\n\n    /**\n     * Returns the default complex format for the current locale.\n     * @return the default complex format.\n     */\n    public static ComplexFormat getInstance() {\n        return getInstance(Locale.getDefault());\n    }\n\n    /**\n     * Returns the default complex format for the given locale.\n     * @param locale the specific locale used by the format.\n     * @return the complex format specific to the given locale.\n     */\n    public static ComplexFormat getInstance(Locale locale) {\n        NumberFormat f = CompositeFormat.getDefaultNumberFormat(locale);\n        return new ComplexFormat(f);\n    }\n\n    /**\n     * Returns the default complex format for the given locale.\n     * @param locale the specific locale used by the format.\n     * @param imaginaryCharacter Imaginary character.\n     * @return the complex format specific to the given locale.\n     * @throws NullArgumentException if {@code imaginaryCharacter} is\n     * {@code null}.\n     * @throws NoDataException if {@code imaginaryCharacter} is an\n     * empty string.\n     */\n    public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale)\n        throws NullArgumentException, NoDataException {\n        NumberFormat f = CompositeFormat.getDefaultNumberFormat(locale);\n        return new ComplexFormat(imaginaryCharacter, f);\n    }\n\n    /**\n     * Access the realFormat.\n     * @return the realFormat.\n     */\n    public NumberFormat getRealFormat() {\n        return realFormat;\n    }\n\n    /**\n     * Parses a string to produce a {@link Complex} object.\n     *\n     * @param source the string to parse.\n     * @return the parsed {@link Complex} object.\n     * @throws MathParseException if the beginning of the specified string\n     * cannot be parsed.\n     */\n    public Complex parse(String source) throws MathParseException {\n        ParsePosition parsePosition = new ParsePosition(0);\n        Complex result = parse(source, parsePosition);\n        if (parsePosition.getIndex() == 0) {\n            throw new MathParseException(source,\n                                         parsePosition.getErrorIndex(),\n                                         Complex.class);\n        }\n        return result;\n    }\n\n    /**\n     * Parses a string to produce a {@link Complex} object.\n     *\n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Complex} object.\n     */\n    public Complex parse(String source, ParsePosition pos) {\n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        CompositeFormat.parseAndIgnoreWhitespace(source, pos);\n\n        // parse real\n        Number re = CompositeFormat.parseNumber(source, getRealFormat(), pos);\n        if (re == null) {\n            // invalid real number\n            // set index back to initial, error index should already be set\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse sign\n        int startIndex = pos.getIndex();\n        char c = CompositeFormat.parseNextCharacter(source, pos);\n        int sign = 0;\n        switch (c) {\n        case 0 :\n            // no sign\n            // return real only complex number\n            return new Complex(re.doubleValue(), 0.0);\n        case '-' :\n            sign = -1;\n            break;\n        case '+' :\n            sign = 1;\n            break;\n        default :\n            // invalid sign\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // parse whitespace\n        CompositeFormat.parseAndIgnoreWhitespace(source, pos);\n\n        // parse imaginary\n        Number im = CompositeFormat.parseNumber(source, getRealFormat(), pos);\n        if (im == null) {\n            // invalid imaginary number\n            // set index back to initial, error index should already be set\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse imaginary character\n        if (!CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), pos)) {\n            return null;\n        }\n\n        return new Complex(re.doubleValue(), im.doubleValue() * sign);\n\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "imaginaryCharacter",
                "java.lang",
                "String"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getImaginaryCharacter",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public String getImaginaryCharacter()"
            ],
            [
                "format",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) throws MathIllegalArgumentException"
            ],
            [
                "format",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public String format(Double c)"
            ],
            [
                "format",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public StringBuffer format(Complex complex, StringBuffer toAppendTo, FieldPosition pos)"
            ],
            [
                "getImaginaryFormat",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public NumberFormat getImaginaryFormat()"
            ],
            [
                "parse",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public Complex parse(String source) throws MathParseException"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getRealFormat",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public NumberFormat getRealFormat()"
            ],
            [
                "parse",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public Complex parse(String source, ParsePosition pos)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "format",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public String format(Complex c)"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 15252,
        "oracle": "imaginaryCharacter.length() == 0;",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.complex",
        "className": "ComplexFormat",
        "javadocTag": "@throws NoDataException if {@code imaginaryCharacter} is an\nempty string.",
        "methodJavadoc": "    /**\n     * Create an instance with a custom imaginary character, and a custom number\n     * format for both real and imaginary parts.\n     * @param imaginaryCharacter The custom imaginary character.\n     * @param format the custom format for both real and imaginary parts.\n     * @throws NullArgumentException if {@code imaginaryCharacter} is\n     * {@code null}.\n     * @throws NoDataException if {@code imaginaryCharacter} is an\n     * empty string.\n     * @throws NullArgumentException if {@code format} is {@code null}.\n     */",
        "methodSourceCode": "public ComplexFormat(String imaginaryCharacter, NumberFormat format) throws NullArgumentException, NoDataException{\n    this(imaginaryCharacter, format, format);\n}",
        "classJavadoc": "/**\n * Formats a Complex number in cartesian format \"Re(c) + Im(c)i\".  'i' can\n * be replaced with 'j' (or anything else), and the number format for both real\n * and imaginary parts can be configured.\n *\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.complex;\n\nimport java.text.FieldPosition;\nimport java.text.NumberFormat;\nimport java.text.ParsePosition;\nimport java.util.Locale;\n\nimport org.apache.commons.math3.exception.MathIllegalArgumentException;\nimport org.apache.commons.math3.exception.MathParseException;\nimport org.apache.commons.math3.exception.NoDataException;\nimport org.apache.commons.math3.exception.NullArgumentException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.util.CompositeFormat;\n\n/**\n * Formats a Complex number in cartesian format \"Re(c) + Im(c)i\".  'i' can\n * be replaced with 'j' (or anything else), and the number format for both real\n * and imaginary parts can be configured.\n *\n */\npublic class ComplexFormat {\n\n     /** The default imaginary character. */\n    private static final String DEFAULT_IMAGINARY_CHARACTER = \"i\";\n    /** The notation used to signify the imaginary part of the complex number. */\n    private final String imaginaryCharacter;\n    /** The format used for the imaginary part. */\n    private final NumberFormat imaginaryFormat;\n    /** The format used for the real part. */\n    private final NumberFormat realFormat;\n\n    /**\n     * Create an instance with the default imaginary character, 'i', and the\n     * default number format for both real and imaginary parts.\n     */\n    public ComplexFormat() {\n        this.imaginaryCharacter = DEFAULT_IMAGINARY_CHARACTER;\n        this.imaginaryFormat = CompositeFormat.getDefaultNumberFormat();\n        this.realFormat = imaginaryFormat;\n    }\n\n    /**\n     * Create an instance with a custom number format for both real and\n     * imaginary parts.\n     * @param format the custom format for both real and imaginary parts.\n     * @throws NullArgumentException if {@code realFormat} is {@code null}.\n     */\n    public ComplexFormat(NumberFormat format) throws NullArgumentException {\n        if (format == null) {\n            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);\n        }\n        this.imaginaryCharacter = DEFAULT_IMAGINARY_CHARACTER;\n        this.imaginaryFormat = format;\n        this.realFormat = format;\n    }\n\n    /**\n     * Create an instance with a custom number format for the real part and a\n     * custom number format for the imaginary part.\n     * @param realFormat the custom format for the real part.\n     * @param imaginaryFormat the custom format for the imaginary part.\n     * @throws NullArgumentException if {@code imaginaryFormat} is {@code null}.\n     * @throws NullArgumentException if {@code realFormat} is {@code null}.\n      */\n    public ComplexFormat(NumberFormat realFormat, NumberFormat imaginaryFormat)\n        throws NullArgumentException {\n        if (imaginaryFormat == null) {\n            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);\n        }\n        if (realFormat == null) {\n            throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);\n        }\n\n        this.imaginaryCharacter = DEFAULT_IMAGINARY_CHARACTER;\n        this.imaginaryFormat = imaginaryFormat;\n        this.realFormat = realFormat;\n    }\n\n    /**\n     * Create an instance with a custom imaginary character, and the default\n     * number format for both real and imaginary parts.\n     * @param imaginaryCharacter The custom imaginary character.\n     * @throws NullArgumentException if {@code imaginaryCharacter} is\n     * {@code null}.\n     * @throws NoDataException if {@code imaginaryCharacter} is an\n     * empty string.\n     */\n    public ComplexFormat(String imaginaryCharacter)\n        throws NullArgumentException, NoDataException {\n        this(imaginaryCharacter, CompositeFormat.getDefaultNumberFormat());\n    }\n\n    /**\n     * Create an instance with a custom imaginary character, and a custom number\n     * format for both real and imaginary parts.\n     * @param imaginaryCharacter The custom imaginary character.\n     * @param format the custom format for both real and imaginary parts.\n     * @throws NullArgumentException if {@code imaginaryCharacter} is\n     * {@code null}.\n     * @throws NoDataException if {@code imaginaryCharacter} is an\n     * empty string.\n     * @throws NullArgumentException if {@code format} is {@code null}.\n     */\n    public ComplexFormat(String imaginaryCharacter, NumberFormat format)\n        throws NullArgumentException, NoDataException {\n        this(imaginaryCharacter, format, format);\n    }\n\n    /**\n     * Create an instance with a custom imaginary character, a custom number\n     * format for the real part, and a custom number format for the imaginary\n     * part.\n     *\n     * @param imaginaryCharacter The custom imaginary character.\n     * @param realFormat the custom format for the real part.\n     * @param imaginaryFormat the custom format for the imaginary part.\n     * @throws NullArgumentException if {@code imaginaryCharacter} is\n     * {@code null}.\n     * @throws NoDataException if {@code imaginaryCharacter} is an\n     * empty string.\n     * @throws NullArgumentException if {@code imaginaryFormat} is {@code null}.\n     * @throws NullArgumentException if {@code realFormat} is {@code null}.\n     */\n    public ComplexFormat(String imaginaryCharacter,\n                         NumberFormat realFormat,\n                         NumberFormat imaginaryFormat)\n        throws NullArgumentException, NoDataException {\n        if (imaginaryCharacter == null) {\n            throw new NullArgumentException();\n        }\n        if (imaginaryCharacter.length() == 0) {\n            throw new NoDataException();\n        }\n        if (imaginaryFormat == null) {\n            throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT);\n        }\n        if (realFormat == null) {\n            throw new NullArgumentException(LocalizedFormats.REAL_FORMAT);\n        }\n\n        this.imaginaryCharacter = imaginaryCharacter;\n        this.imaginaryFormat = imaginaryFormat;\n        this.realFormat = realFormat;\n    }\n\n    /**\n     * Get the set of locales for which complex formats are available.\n     * <p>This is the same set as the {@link NumberFormat} set.</p>\n     * @return available complex format locales.\n     */\n    public static Locale[] getAvailableLocales() {\n        return NumberFormat.getAvailableLocales();\n    }\n\n    /**\n     * This method calls {@link #format(Object,StringBuffer,FieldPosition)}.\n     *\n     * @param c Complex object to format.\n     * @return A formatted number in the form \"Re(c) + Im(c)i\".\n     */\n    public String format(Complex c) {\n        return format(c, new StringBuffer(), new FieldPosition(0)).toString();\n    }\n\n    /**\n     * This method calls {@link #format(Object,StringBuffer,FieldPosition)}.\n     *\n     * @param c Double object to format.\n     * @return A formatted number.\n     */\n    public String format(Double c) {\n        return format(new Complex(c, 0), new StringBuffer(), new FieldPosition(0)).toString();\n    }\n\n    /**\n     * Formats a {@link Complex} object to produce a string.\n     *\n     * @param complex the object to format.\n     * @param toAppendTo where the text is to be appended\n     * @param pos On input: an alignment field, if desired. On output: the\n     *            offsets of the alignment field\n     * @return the value passed in as toAppendTo.\n     */\n    public StringBuffer format(Complex complex, StringBuffer toAppendTo,\n                               FieldPosition pos) {\n        pos.setBeginIndex(0);\n        pos.setEndIndex(0);\n\n        // format real\n        double re = complex.getReal();\n        CompositeFormat.formatDouble(re, getRealFormat(), toAppendTo, pos);\n\n        // format sign and imaginary\n        double im = complex.getImaginary();\n        StringBuffer imAppendTo;\n        if (im < 0.0) {\n            toAppendTo.append(\" - \");\n            imAppendTo = formatImaginary(-im, new StringBuffer(), pos);\n            toAppendTo.append(imAppendTo);\n            toAppendTo.append(getImaginaryCharacter());\n        } else if (im > 0.0 || Double.isNaN(im)) {\n            toAppendTo.append(\" + \");\n            imAppendTo = formatImaginary(im, new StringBuffer(), pos);\n            toAppendTo.append(imAppendTo);\n            toAppendTo.append(getImaginaryCharacter());\n        }\n\n        return toAppendTo;\n    }\n\n    /**\n     * Format the absolute value of the imaginary part.\n     *\n     * @param absIm Absolute value of the imaginary part of a complex number.\n     * @param toAppendTo where the text is to be appended.\n     * @param pos On input: an alignment field, if desired. On output: the\n     * offsets of the alignment field.\n     * @return the value passed in as toAppendTo.\n     */\n    private StringBuffer formatImaginary(double absIm,\n                                         StringBuffer toAppendTo,\n                                         FieldPosition pos) {\n        pos.setBeginIndex(0);\n        pos.setEndIndex(0);\n\n        CompositeFormat.formatDouble(absIm, getImaginaryFormat(), toAppendTo, pos);\n        if (toAppendTo.toString().equals(\"1\")) {\n            // Remove the character \"1\" if it is the only one.\n            toAppendTo.setLength(0);\n        }\n\n        return toAppendTo;\n    }\n\n    /**\n     * Formats a object to produce a string.  {@code obj} must be either a\n     * {@link Complex} object or a {@link Number} object.  Any other type of\n     * object will result in an {@link IllegalArgumentException} being thrown.\n     *\n     * @param obj the object to format.\n     * @param toAppendTo where the text is to be appended\n     * @param pos On input: an alignment field, if desired. On output: the\n     *            offsets of the alignment field\n     * @return the value passed in as toAppendTo.\n     * @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)\n     * @throws MathIllegalArgumentException is {@code obj} is not a valid type.\n     */\n    public StringBuffer format(Object obj, StringBuffer toAppendTo,\n                               FieldPosition pos)\n        throws MathIllegalArgumentException {\n\n        StringBuffer ret = null;\n\n        if (obj instanceof Complex) {\n            ret = format( (Complex)obj, toAppendTo, pos);\n        } else if (obj instanceof Number) {\n            ret = format(new Complex(((Number)obj).doubleValue(), 0.0),\n                         toAppendTo, pos);\n        } else {\n            throw new MathIllegalArgumentException(LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX,\n                                                   obj.getClass().getName());\n        }\n\n        return ret;\n    }\n\n    /**\n     * Access the imaginaryCharacter.\n     * @return the imaginaryCharacter.\n     */\n    public String getImaginaryCharacter() {\n        return imaginaryCharacter;\n    }\n\n    /**\n     * Access the imaginaryFormat.\n     * @return the imaginaryFormat.\n     */\n    public NumberFormat getImaginaryFormat() {\n        return imaginaryFormat;\n    }\n\n    /**\n     * Returns the default complex format for the current locale.\n     * @return the default complex format.\n     */\n    public static ComplexFormat getInstance() {\n        return getInstance(Locale.getDefault());\n    }\n\n    /**\n     * Returns the default complex format for the given locale.\n     * @param locale the specific locale used by the format.\n     * @return the complex format specific to the given locale.\n     */\n    public static ComplexFormat getInstance(Locale locale) {\n        NumberFormat f = CompositeFormat.getDefaultNumberFormat(locale);\n        return new ComplexFormat(f);\n    }\n\n    /**\n     * Returns the default complex format for the given locale.\n     * @param locale the specific locale used by the format.\n     * @param imaginaryCharacter Imaginary character.\n     * @return the complex format specific to the given locale.\n     * @throws NullArgumentException if {@code imaginaryCharacter} is\n     * {@code null}.\n     * @throws NoDataException if {@code imaginaryCharacter} is an\n     * empty string.\n     */\n    public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale)\n        throws NullArgumentException, NoDataException {\n        NumberFormat f = CompositeFormat.getDefaultNumberFormat(locale);\n        return new ComplexFormat(imaginaryCharacter, f);\n    }\n\n    /**\n     * Access the realFormat.\n     * @return the realFormat.\n     */\n    public NumberFormat getRealFormat() {\n        return realFormat;\n    }\n\n    /**\n     * Parses a string to produce a {@link Complex} object.\n     *\n     * @param source the string to parse.\n     * @return the parsed {@link Complex} object.\n     * @throws MathParseException if the beginning of the specified string\n     * cannot be parsed.\n     */\n    public Complex parse(String source) throws MathParseException {\n        ParsePosition parsePosition = new ParsePosition(0);\n        Complex result = parse(source, parsePosition);\n        if (parsePosition.getIndex() == 0) {\n            throw new MathParseException(source,\n                                         parsePosition.getErrorIndex(),\n                                         Complex.class);\n        }\n        return result;\n    }\n\n    /**\n     * Parses a string to produce a {@link Complex} object.\n     *\n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Complex} object.\n     */\n    public Complex parse(String source, ParsePosition pos) {\n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        CompositeFormat.parseAndIgnoreWhitespace(source, pos);\n\n        // parse real\n        Number re = CompositeFormat.parseNumber(source, getRealFormat(), pos);\n        if (re == null) {\n            // invalid real number\n            // set index back to initial, error index should already be set\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse sign\n        int startIndex = pos.getIndex();\n        char c = CompositeFormat.parseNextCharacter(source, pos);\n        int sign = 0;\n        switch (c) {\n        case 0 :\n            // no sign\n            // return real only complex number\n            return new Complex(re.doubleValue(), 0.0);\n        case '-' :\n            sign = -1;\n            break;\n        case '+' :\n            sign = 1;\n            break;\n        default :\n            // invalid sign\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // parse whitespace\n        CompositeFormat.parseAndIgnoreWhitespace(source, pos);\n\n        // parse imaginary\n        Number im = CompositeFormat.parseNumber(source, getRealFormat(), pos);\n        if (im == null) {\n            // invalid imaginary number\n            // set index back to initial, error index should already be set\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse imaginary character\n        if (!CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), pos)) {\n            return null;\n        }\n\n        return new Complex(re.doubleValue(), im.doubleValue() * sign);\n\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "imaginaryCharacter",
                "java.lang",
                "String"
            ],
            [
                "format",
                "java.text",
                "NumberFormat"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getImaginaryCharacter",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public String getImaginaryCharacter()"
            ],
            [
                "getImaginaryFormat",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public NumberFormat getImaginaryFormat()"
            ],
            [
                "format",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public String format(Complex c)"
            ],
            [
                "getRealFormat",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public NumberFormat getRealFormat()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "parse",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public Complex parse(String source, ParsePosition pos)"
            ],
            [
                "parse",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public Complex parse(String source) throws MathParseException"
            ],
            [
                "format",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public String format(Double c)"
            ],
            [
                "format",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) throws MathIllegalArgumentException"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "format",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public StringBuffer format(Complex complex, StringBuffer toAppendTo, FieldPosition pos)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ],
            [
                "parseObject",
                "java.text",
                "NumberFormat",
                "public final Object parseObject(String arg0, ParsePosition arg1)"
            ],
            [
                "format",
                "java.text",
                "NumberFormat",
                "public final String format(long arg0)"
            ],
            [
                "equals",
                "java.text",
                "NumberFormat",
                "public boolean equals(Object arg0)"
            ],
            [
                "getMaximumIntegerDigits",
                "java.text",
                "NumberFormat",
                "public int getMaximumIntegerDigits()"
            ],
            [
                "format",
                "java.text",
                "NumberFormat",
                "public abstract StringBuffer format(long arg0, StringBuffer arg1, FieldPosition arg2)"
            ],
            [
                "isParseIntegerOnly",
                "java.text",
                "NumberFormat",
                "public boolean isParseIntegerOnly()"
            ],
            [
                "getMinimumFractionDigits",
                "java.text",
                "NumberFormat",
                "public int getMinimumFractionDigits()"
            ],
            [
                "getMinimumIntegerDigits",
                "java.text",
                "NumberFormat",
                "public int getMinimumIntegerDigits()"
            ],
            [
                "getMaximumFractionDigits",
                "java.text",
                "NumberFormat",
                "public int getMaximumFractionDigits()"
            ],
            [
                "fastFormat",
                "java.text",
                "NumberFormat",
                "String fastFormat(double arg0)"
            ],
            [
                "getRoundingMode",
                "java.text",
                "NumberFormat",
                "public RoundingMode getRoundingMode()"
            ],
            [
                "parse",
                "java.text",
                "NumberFormat",
                "public Number parse(String arg0) throws ParseException"
            ],
            [
                "format",
                "java.text",
                "NumberFormat",
                "public abstract StringBuffer format(double arg0, StringBuffer arg1, FieldPosition arg2)"
            ],
            [
                "isGroupingUsed",
                "java.text",
                "NumberFormat",
                "public boolean isGroupingUsed()"
            ],
            [
                "hashCode",
                "java.text",
                "NumberFormat",
                "public int hashCode()"
            ],
            [
                "clone",
                "java.text",
                "NumberFormat",
                "public Object clone()"
            ],
            [
                "parse",
                "java.text",
                "NumberFormat",
                "public abstract Number parse(String arg0, ParsePosition arg1)"
            ],
            [
                "format",
                "java.text",
                "NumberFormat",
                "public StringBuffer format(Object arg0, StringBuffer arg1, FieldPosition arg2)"
            ],
            [
                "getCurrency",
                "java.text",
                "NumberFormat",
                "public Currency getCurrency()"
            ],
            [
                "format",
                "java.text",
                "NumberFormat",
                "public final String format(double arg0)"
            ],
            [
                "parseObject",
                "java.text",
                "Format",
                "public Object parseObject(String arg0) throws ParseException"
            ],
            [
                "createAttributedCharacterIterator",
                "java.text",
                "Format",
                "AttributedCharacterIterator createAttributedCharacterIterator(AttributedCharacterIterator arg0, AttributedCharacterIterator.Attribute arg1, Object arg2)"
            ],
            [
                "clone",
                "java.text",
                "Format",
                "public Object clone()"
            ],
            [
                "parseObject",
                "java.text",
                "Format",
                "public abstract Object parseObject(String arg0, ParsePosition arg1)"
            ],
            [
                "createAttributedCharacterIterator",
                "java.text",
                "Format",
                "AttributedCharacterIterator createAttributedCharacterIterator(AttributedCharacterIterator[] arg0)"
            ],
            [
                "createAttributedCharacterIterator",
                "java.text",
                "Format",
                "AttributedCharacterIterator createAttributedCharacterIterator(String arg0)"
            ],
            [
                "formatToCharacterIterator",
                "java.text",
                "Format",
                "public AttributedCharacterIterator formatToCharacterIterator(Object arg0)"
            ],
            [
                "format",
                "java.text",
                "Format",
                "public final String format(Object arg0)"
            ],
            [
                "createAttributedCharacterIterator",
                "java.text",
                "Format",
                "AttributedCharacterIterator createAttributedCharacterIterator(String arg0, AttributedCharacterIterator.Attribute arg1, Object arg2)"
            ],
            [
                "format",
                "java.text",
                "Format",
                "public abstract StringBuffer format(Object arg0, StringBuffer arg1, FieldPosition arg2)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 15260,
        "oracle": "this.getNumberOfRoots() == 0;",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.complex",
        "className": "RootsOfUnity",
        "javadocTag": "@throws MathIllegalStateException if no roots of unity have been computed\nyet",
        "methodJavadoc": "    /**\n     * Returns {@code true} if {@link #computeRoots(int)} was called with a\n     * positive value of its argument {@code n}. If {@code true}, then\n     * counter-clockwise ordering of the roots of unity should be used.\n     *\n     * @return {@code true} if the roots of unity are stored in\n     * counter-clockwise order\n     * @throws MathIllegalStateException if no roots of unity have been computed\n     * yet\n     */",
        "methodSourceCode": "public synchronized boolean isCounterClockWise() throws MathIllegalStateException{\n    if (omegaCount == 0) {\n        throw new MathIllegalStateException(LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n    }\n    return isCounterClockWise;\n}",
        "classJavadoc": "/**\n * A helper class for the computation and caching of the {@code n}-th roots of\n * unity.\n *\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.complex;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math3.exception.MathIllegalArgumentException;\nimport org.apache.commons.math3.exception.MathIllegalStateException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.ZeroException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n * A helper class for the computation and caching of the {@code n}-th roots of\n * unity.\n *\n * @since 3.0\n */\npublic class RootsOfUnity implements Serializable {\n\n    /** Serializable version id. */\n    private static final long serialVersionUID = 20120201L;\n\n    /** Number of roots of unity. */\n    private int omegaCount;\n\n    /** Real part of the roots. */\n    private double[] omegaReal;\n\n    /**\n     * Imaginary part of the {@code n}-th roots of unity, for positive values\n     * of {@code n}. In this array, the roots are stored in counter-clockwise\n     * order.\n     */\n    private double[] omegaImaginaryCounterClockwise;\n\n    /**\n     * Imaginary part of the {@code n}-th roots of unity, for negative values\n     * of {@code n}. In this array, the roots are stored in clockwise order.\n     */\n    private double[] omegaImaginaryClockwise;\n\n    /**\n     * {@code true} if {@link #computeRoots(int)} was called with a positive\n     * value of its argument {@code n}. In this case, counter-clockwise ordering\n     * of the roots of unity should be used.\n     */\n    private boolean isCounterClockWise;\n\n    /**\n     * Build an engine for computing the {@code n}-th roots of unity.\n     */\n    public RootsOfUnity() {\n\n        omegaCount = 0;\n        omegaReal = null;\n        omegaImaginaryCounterClockwise = null;\n        omegaImaginaryClockwise = null;\n        isCounterClockWise = true;\n    }\n\n    /**\n     * Returns {@code true} if {@link #computeRoots(int)} was called with a\n     * positive value of its argument {@code n}. If {@code true}, then\n     * counter-clockwise ordering of the roots of unity should be used.\n     *\n     * @return {@code true} if the roots of unity are stored in\n     * counter-clockwise order\n     * @throws MathIllegalStateException if no roots of unity have been computed\n     * yet\n     */\n    public synchronized boolean isCounterClockWise()\n            throws MathIllegalStateException {\n\n        if (omegaCount == 0) {\n            throw new MathIllegalStateException(\n                    LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n        }\n        return isCounterClockWise;\n    }\n\n    /**\n     * <p>\n     * Computes the {@code n}-th roots of unity. The roots are stored in\n     * {@code omega[]}, such that {@code omega[k] = w ^ k}, where\n     * {@code k = 0, ..., n - 1}, {@code w = exp(2 * pi * i / n)} and\n     * {@code i = sqrt(-1)}.\n     * </p>\n     * <p>\n     * Note that {@code n} can be positive of negative\n     * </p>\n     * <ul>\n     * <li>{@code abs(n)} is always the number of roots of unity.</li>\n     * <li>If {@code n > 0}, then the roots are stored in counter-clockwise order.</li>\n     * <li>If {@code n < 0}, then the roots are stored in clockwise order.</p>\n     * </ul>\n     *\n     * @param n the (signed) number of roots of unity to be computed\n     * @throws ZeroException if {@code n = 0}\n     */\n    public synchronized void computeRoots(int n) throws ZeroException {\n\n        if (n == 0) {\n            throw new ZeroException(\n                    LocalizedFormats.CANNOT_COMPUTE_0TH_ROOT_OF_UNITY);\n        }\n\n        isCounterClockWise = n > 0;\n\n        // avoid repetitive calculations\n        final int absN = FastMath.abs(n);\n\n        if (absN == omegaCount) {\n            return;\n        }\n\n        // calculate everything from scratch\n        final double t = 2.0 * FastMath.PI / absN;\n        final double cosT = FastMath.cos(t);\n        final double sinT = FastMath.sin(t);\n        omegaReal = new double[absN];\n        omegaImaginaryCounterClockwise = new double[absN];\n        omegaImaginaryClockwise = new double[absN];\n        omegaReal[0] = 1.0;\n        omegaImaginaryCounterClockwise[0] = 0.0;\n        omegaImaginaryClockwise[0] = 0.0;\n        for (int i = 1; i < absN; i++) {\n            omegaReal[i] = omegaReal[i - 1] * cosT -\n                    omegaImaginaryCounterClockwise[i - 1] * sinT;\n            omegaImaginaryCounterClockwise[i] = omegaReal[i - 1] * sinT +\n                    omegaImaginaryCounterClockwise[i - 1] * cosT;\n            omegaImaginaryClockwise[i] = -omegaImaginaryCounterClockwise[i];\n        }\n        omegaCount = absN;\n    }\n\n    /**\n     * Get the real part of the {@code k}-th {@code n}-th root of unity.\n     *\n     * @param k index of the {@code n}-th root of unity\n     * @return real part of the {@code k}-th {@code n}-th root of unity\n     * @throws MathIllegalStateException if no roots of unity have been\n     * computed yet\n     * @throws MathIllegalArgumentException if {@code k} is out of range\n     */\n    public synchronized double getReal(int k)\n            throws MathIllegalStateException, MathIllegalArgumentException {\n\n        if (omegaCount == 0) {\n            throw new MathIllegalStateException(\n                    LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n        }\n        if ((k < 0) || (k >= omegaCount)) {\n            throw new OutOfRangeException(\n                    LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX,\n                    Integer.valueOf(k),\n                    Integer.valueOf(0),\n                    Integer.valueOf(omegaCount - 1));\n        }\n\n        return omegaReal[k];\n    }\n\n    /**\n     * Get the imaginary part of the {@code k}-th {@code n}-th root of unity.\n     *\n     * @param k index of the {@code n}-th root of unity\n     * @return imaginary part of the {@code k}-th {@code n}-th root of unity\n     * @throws MathIllegalStateException if no roots of unity have been\n     * computed yet\n     * @throws OutOfRangeException if {@code k} is out of range\n     */\n    public synchronized double getImaginary(int k)\n            throws MathIllegalStateException, OutOfRangeException {\n\n        if (omegaCount == 0) {\n            throw new MathIllegalStateException(\n                    LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n        }\n        if ((k < 0) || (k >= omegaCount)) {\n            throw new OutOfRangeException(\n                    LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX,\n                    Integer.valueOf(k),\n                    Integer.valueOf(0),\n                    Integer.valueOf(omegaCount - 1));\n        }\n\n        return isCounterClockWise ? omegaImaginaryCounterClockwise[k] :\n            omegaImaginaryClockwise[k];\n    }\n\n    /**\n     * Returns the number of roots of unity currently stored. If\n     * {@link #computeRoots(int)} was called with {@code n}, then this method\n     * returns {@code abs(n)}. If no roots of unity have been computed yet, this\n     * method returns 0.\n     *\n     * @return the number of roots of unity currently stored\n     */\n    public synchronized int getNumberOfRoots() {\n        return omegaCount;\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getNumberOfRoots",
                "org.apache.commons.math3.complex",
                "RootsOfUnity",
                "public synchronized int getNumberOfRoots()"
            ],
            [
                "isCounterClockWise",
                "org.apache.commons.math3.complex",
                "RootsOfUnity",
                "public synchronized boolean isCounterClockWise() throws MathIllegalStateException"
            ],
            [
                "getImaginary",
                "org.apache.commons.math3.complex",
                "RootsOfUnity",
                "public synchronized double getImaginary(int k) throws MathIllegalStateException, OutOfRangeException"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getReal",
                "org.apache.commons.math3.complex",
                "RootsOfUnity",
                "public synchronized double getReal(int k) throws MathIllegalStateException, MathIllegalArgumentException"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 15264,
        "oracle": "this.getNumberOfRoots() == 0;",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.complex",
        "className": "RootsOfUnity",
        "javadocTag": "@throws MathIllegalStateException if no roots of unity have been\ncomputed yet",
        "methodJavadoc": "    /**\n     * Get the real part of the {@code k}-th {@code n}-th root of unity.\n     *\n     * @param k index of the {@code n}-th root of unity\n     * @return real part of the {@code k}-th {@code n}-th root of unity\n     * @throws MathIllegalStateException if no roots of unity have been\n     * computed yet\n     * @throws MathIllegalArgumentException if {@code k} is out of range\n     */",
        "methodSourceCode": "public synchronized double getReal(int k) throws MathIllegalStateException, MathIllegalArgumentException{\n    if (omegaCount == 0) {\n        throw new MathIllegalStateException(LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n    }\n    if ((k < 0) || (k >= omegaCount)) {\n        throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, Integer.valueOf(k), Integer.valueOf(0), Integer.valueOf(omegaCount - 1));\n    }\n    return omegaReal[k];\n}",
        "classJavadoc": "/**\n * A helper class for the computation and caching of the {@code n}-th roots of\n * unity.\n *\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.complex;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math3.exception.MathIllegalArgumentException;\nimport org.apache.commons.math3.exception.MathIllegalStateException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.ZeroException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n * A helper class for the computation and caching of the {@code n}-th roots of\n * unity.\n *\n * @since 3.0\n */\npublic class RootsOfUnity implements Serializable {\n\n    /** Serializable version id. */\n    private static final long serialVersionUID = 20120201L;\n\n    /** Number of roots of unity. */\n    private int omegaCount;\n\n    /** Real part of the roots. */\n    private double[] omegaReal;\n\n    /**\n     * Imaginary part of the {@code n}-th roots of unity, for positive values\n     * of {@code n}. In this array, the roots are stored in counter-clockwise\n     * order.\n     */\n    private double[] omegaImaginaryCounterClockwise;\n\n    /**\n     * Imaginary part of the {@code n}-th roots of unity, for negative values\n     * of {@code n}. In this array, the roots are stored in clockwise order.\n     */\n    private double[] omegaImaginaryClockwise;\n\n    /**\n     * {@code true} if {@link #computeRoots(int)} was called with a positive\n     * value of its argument {@code n}. In this case, counter-clockwise ordering\n     * of the roots of unity should be used.\n     */\n    private boolean isCounterClockWise;\n\n    /**\n     * Build an engine for computing the {@code n}-th roots of unity.\n     */\n    public RootsOfUnity() {\n\n        omegaCount = 0;\n        omegaReal = null;\n        omegaImaginaryCounterClockwise = null;\n        omegaImaginaryClockwise = null;\n        isCounterClockWise = true;\n    }\n\n    /**\n     * Returns {@code true} if {@link #computeRoots(int)} was called with a\n     * positive value of its argument {@code n}. If {@code true}, then\n     * counter-clockwise ordering of the roots of unity should be used.\n     *\n     * @return {@code true} if the roots of unity are stored in\n     * counter-clockwise order\n     * @throws MathIllegalStateException if no roots of unity have been computed\n     * yet\n     */\n    public synchronized boolean isCounterClockWise()\n            throws MathIllegalStateException {\n\n        if (omegaCount == 0) {\n            throw new MathIllegalStateException(\n                    LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n        }\n        return isCounterClockWise;\n    }\n\n    /**\n     * <p>\n     * Computes the {@code n}-th roots of unity. The roots are stored in\n     * {@code omega[]}, such that {@code omega[k] = w ^ k}, where\n     * {@code k = 0, ..., n - 1}, {@code w = exp(2 * pi * i / n)} and\n     * {@code i = sqrt(-1)}.\n     * </p>\n     * <p>\n     * Note that {@code n} can be positive of negative\n     * </p>\n     * <ul>\n     * <li>{@code abs(n)} is always the number of roots of unity.</li>\n     * <li>If {@code n > 0}, then the roots are stored in counter-clockwise order.</li>\n     * <li>If {@code n < 0}, then the roots are stored in clockwise order.</p>\n     * </ul>\n     *\n     * @param n the (signed) number of roots of unity to be computed\n     * @throws ZeroException if {@code n = 0}\n     */\n    public synchronized void computeRoots(int n) throws ZeroException {\n\n        if (n == 0) {\n            throw new ZeroException(\n                    LocalizedFormats.CANNOT_COMPUTE_0TH_ROOT_OF_UNITY);\n        }\n\n        isCounterClockWise = n > 0;\n\n        // avoid repetitive calculations\n        final int absN = FastMath.abs(n);\n\n        if (absN == omegaCount) {\n            return;\n        }\n\n        // calculate everything from scratch\n        final double t = 2.0 * FastMath.PI / absN;\n        final double cosT = FastMath.cos(t);\n        final double sinT = FastMath.sin(t);\n        omegaReal = new double[absN];\n        omegaImaginaryCounterClockwise = new double[absN];\n        omegaImaginaryClockwise = new double[absN];\n        omegaReal[0] = 1.0;\n        omegaImaginaryCounterClockwise[0] = 0.0;\n        omegaImaginaryClockwise[0] = 0.0;\n        for (int i = 1; i < absN; i++) {\n            omegaReal[i] = omegaReal[i - 1] * cosT -\n                    omegaImaginaryCounterClockwise[i - 1] * sinT;\n            omegaImaginaryCounterClockwise[i] = omegaReal[i - 1] * sinT +\n                    omegaImaginaryCounterClockwise[i - 1] * cosT;\n            omegaImaginaryClockwise[i] = -omegaImaginaryCounterClockwise[i];\n        }\n        omegaCount = absN;\n    }\n\n    /**\n     * Get the real part of the {@code k}-th {@code n}-th root of unity.\n     *\n     * @param k index of the {@code n}-th root of unity\n     * @return real part of the {@code k}-th {@code n}-th root of unity\n     * @throws MathIllegalStateException if no roots of unity have been\n     * computed yet\n     * @throws MathIllegalArgumentException if {@code k} is out of range\n     */\n    public synchronized double getReal(int k)\n            throws MathIllegalStateException, MathIllegalArgumentException {\n\n        if (omegaCount == 0) {\n            throw new MathIllegalStateException(\n                    LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n        }\n        if ((k < 0) || (k >= omegaCount)) {\n            throw new OutOfRangeException(\n                    LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX,\n                    Integer.valueOf(k),\n                    Integer.valueOf(0),\n                    Integer.valueOf(omegaCount - 1));\n        }\n\n        return omegaReal[k];\n    }\n\n    /**\n     * Get the imaginary part of the {@code k}-th {@code n}-th root of unity.\n     *\n     * @param k index of the {@code n}-th root of unity\n     * @return imaginary part of the {@code k}-th {@code n}-th root of unity\n     * @throws MathIllegalStateException if no roots of unity have been\n     * computed yet\n     * @throws OutOfRangeException if {@code k} is out of range\n     */\n    public synchronized double getImaginary(int k)\n            throws MathIllegalStateException, OutOfRangeException {\n\n        if (omegaCount == 0) {\n            throw new MathIllegalStateException(\n                    LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n        }\n        if ((k < 0) || (k >= omegaCount)) {\n            throw new OutOfRangeException(\n                    LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX,\n                    Integer.valueOf(k),\n                    Integer.valueOf(0),\n                    Integer.valueOf(omegaCount - 1));\n        }\n\n        return isCounterClockWise ? omegaImaginaryCounterClockwise[k] :\n            omegaImaginaryClockwise[k];\n    }\n\n    /**\n     * Returns the number of roots of unity currently stored. If\n     * {@link #computeRoots(int)} was called with {@code n}, then this method\n     * returns {@code abs(n)}. If no roots of unity have been computed yet, this\n     * method returns 0.\n     *\n     * @return the number of roots of unity currently stored\n     */\n    public synchronized int getNumberOfRoots() {\n        return omegaCount;\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "k",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getImaginary",
                "org.apache.commons.math3.complex",
                "RootsOfUnity",
                "public synchronized double getImaginary(int k) throws MathIllegalStateException, OutOfRangeException"
            ],
            [
                "getReal",
                "org.apache.commons.math3.complex",
                "RootsOfUnity",
                "public synchronized double getReal(int k) throws MathIllegalStateException, MathIllegalArgumentException"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "isCounterClockWise",
                "org.apache.commons.math3.complex",
                "RootsOfUnity",
                "public synchronized boolean isCounterClockWise() throws MathIllegalStateException"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getNumberOfRoots",
                "org.apache.commons.math3.complex",
                "RootsOfUnity",
                "public synchronized int getNumberOfRoots()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 15265,
        "oracle": "k < 0 || k >= this.getNumberOfRoots();",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.complex",
        "className": "RootsOfUnity",
        "javadocTag": "@throws MathIllegalArgumentException if {@code k} is out of range",
        "methodJavadoc": "    /**\n     * Get the real part of the {@code k}-th {@code n}-th root of unity.\n     *\n     * @param k index of the {@code n}-th root of unity\n     * @return real part of the {@code k}-th {@code n}-th root of unity\n     * @throws MathIllegalStateException if no roots of unity have been\n     * computed yet\n     * @throws MathIllegalArgumentException if {@code k} is out of range\n     */",
        "methodSourceCode": "public synchronized double getReal(int k) throws MathIllegalStateException, MathIllegalArgumentException{\n    if (omegaCount == 0) {\n        throw new MathIllegalStateException(LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n    }\n    if ((k < 0) || (k >= omegaCount)) {\n        throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, Integer.valueOf(k), Integer.valueOf(0), Integer.valueOf(omegaCount - 1));\n    }\n    return omegaReal[k];\n}",
        "classJavadoc": "/**\n * A helper class for the computation and caching of the {@code n}-th roots of\n * unity.\n *\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.complex;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math3.exception.MathIllegalArgumentException;\nimport org.apache.commons.math3.exception.MathIllegalStateException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.ZeroException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n * A helper class for the computation and caching of the {@code n}-th roots of\n * unity.\n *\n * @since 3.0\n */\npublic class RootsOfUnity implements Serializable {\n\n    /** Serializable version id. */\n    private static final long serialVersionUID = 20120201L;\n\n    /** Number of roots of unity. */\n    private int omegaCount;\n\n    /** Real part of the roots. */\n    private double[] omegaReal;\n\n    /**\n     * Imaginary part of the {@code n}-th roots of unity, for positive values\n     * of {@code n}. In this array, the roots are stored in counter-clockwise\n     * order.\n     */\n    private double[] omegaImaginaryCounterClockwise;\n\n    /**\n     * Imaginary part of the {@code n}-th roots of unity, for negative values\n     * of {@code n}. In this array, the roots are stored in clockwise order.\n     */\n    private double[] omegaImaginaryClockwise;\n\n    /**\n     * {@code true} if {@link #computeRoots(int)} was called with a positive\n     * value of its argument {@code n}. In this case, counter-clockwise ordering\n     * of the roots of unity should be used.\n     */\n    private boolean isCounterClockWise;\n\n    /**\n     * Build an engine for computing the {@code n}-th roots of unity.\n     */\n    public RootsOfUnity() {\n\n        omegaCount = 0;\n        omegaReal = null;\n        omegaImaginaryCounterClockwise = null;\n        omegaImaginaryClockwise = null;\n        isCounterClockWise = true;\n    }\n\n    /**\n     * Returns {@code true} if {@link #computeRoots(int)} was called with a\n     * positive value of its argument {@code n}. If {@code true}, then\n     * counter-clockwise ordering of the roots of unity should be used.\n     *\n     * @return {@code true} if the roots of unity are stored in\n     * counter-clockwise order\n     * @throws MathIllegalStateException if no roots of unity have been computed\n     * yet\n     */\n    public synchronized boolean isCounterClockWise()\n            throws MathIllegalStateException {\n\n        if (omegaCount == 0) {\n            throw new MathIllegalStateException(\n                    LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n        }\n        return isCounterClockWise;\n    }\n\n    /**\n     * <p>\n     * Computes the {@code n}-th roots of unity. The roots are stored in\n     * {@code omega[]}, such that {@code omega[k] = w ^ k}, where\n     * {@code k = 0, ..., n - 1}, {@code w = exp(2 * pi * i / n)} and\n     * {@code i = sqrt(-1)}.\n     * </p>\n     * <p>\n     * Note that {@code n} can be positive of negative\n     * </p>\n     * <ul>\n     * <li>{@code abs(n)} is always the number of roots of unity.</li>\n     * <li>If {@code n > 0}, then the roots are stored in counter-clockwise order.</li>\n     * <li>If {@code n < 0}, then the roots are stored in clockwise order.</p>\n     * </ul>\n     *\n     * @param n the (signed) number of roots of unity to be computed\n     * @throws ZeroException if {@code n = 0}\n     */\n    public synchronized void computeRoots(int n) throws ZeroException {\n\n        if (n == 0) {\n            throw new ZeroException(\n                    LocalizedFormats.CANNOT_COMPUTE_0TH_ROOT_OF_UNITY);\n        }\n\n        isCounterClockWise = n > 0;\n\n        // avoid repetitive calculations\n        final int absN = FastMath.abs(n);\n\n        if (absN == omegaCount) {\n            return;\n        }\n\n        // calculate everything from scratch\n        final double t = 2.0 * FastMath.PI / absN;\n        final double cosT = FastMath.cos(t);\n        final double sinT = FastMath.sin(t);\n        omegaReal = new double[absN];\n        omegaImaginaryCounterClockwise = new double[absN];\n        omegaImaginaryClockwise = new double[absN];\n        omegaReal[0] = 1.0;\n        omegaImaginaryCounterClockwise[0] = 0.0;\n        omegaImaginaryClockwise[0] = 0.0;\n        for (int i = 1; i < absN; i++) {\n            omegaReal[i] = omegaReal[i - 1] * cosT -\n                    omegaImaginaryCounterClockwise[i - 1] * sinT;\n            omegaImaginaryCounterClockwise[i] = omegaReal[i - 1] * sinT +\n                    omegaImaginaryCounterClockwise[i - 1] * cosT;\n            omegaImaginaryClockwise[i] = -omegaImaginaryCounterClockwise[i];\n        }\n        omegaCount = absN;\n    }\n\n    /**\n     * Get the real part of the {@code k}-th {@code n}-th root of unity.\n     *\n     * @param k index of the {@code n}-th root of unity\n     * @return real part of the {@code k}-th {@code n}-th root of unity\n     * @throws MathIllegalStateException if no roots of unity have been\n     * computed yet\n     * @throws MathIllegalArgumentException if {@code k} is out of range\n     */\n    public synchronized double getReal(int k)\n            throws MathIllegalStateException, MathIllegalArgumentException {\n\n        if (omegaCount == 0) {\n            throw new MathIllegalStateException(\n                    LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n        }\n        if ((k < 0) || (k >= omegaCount)) {\n            throw new OutOfRangeException(\n                    LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX,\n                    Integer.valueOf(k),\n                    Integer.valueOf(0),\n                    Integer.valueOf(omegaCount - 1));\n        }\n\n        return omegaReal[k];\n    }\n\n    /**\n     * Get the imaginary part of the {@code k}-th {@code n}-th root of unity.\n     *\n     * @param k index of the {@code n}-th root of unity\n     * @return imaginary part of the {@code k}-th {@code n}-th root of unity\n     * @throws MathIllegalStateException if no roots of unity have been\n     * computed yet\n     * @throws OutOfRangeException if {@code k} is out of range\n     */\n    public synchronized double getImaginary(int k)\n            throws MathIllegalStateException, OutOfRangeException {\n\n        if (omegaCount == 0) {\n            throw new MathIllegalStateException(\n                    LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n        }\n        if ((k < 0) || (k >= omegaCount)) {\n            throw new OutOfRangeException(\n                    LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX,\n                    Integer.valueOf(k),\n                    Integer.valueOf(0),\n                    Integer.valueOf(omegaCount - 1));\n        }\n\n        return isCounterClockWise ? omegaImaginaryCounterClockwise[k] :\n            omegaImaginaryClockwise[k];\n    }\n\n    /**\n     * Returns the number of roots of unity currently stored. If\n     * {@link #computeRoots(int)} was called with {@code n}, then this method\n     * returns {@code abs(n)}. If no roots of unity have been computed yet, this\n     * method returns 0.\n     *\n     * @return the number of roots of unity currently stored\n     */\n    public synchronized int getNumberOfRoots() {\n        return omegaCount;\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "k",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getImaginary",
                "org.apache.commons.math3.complex",
                "RootsOfUnity",
                "public synchronized double getImaginary(int k) throws MathIllegalStateException, OutOfRangeException"
            ],
            [
                "getReal",
                "org.apache.commons.math3.complex",
                "RootsOfUnity",
                "public synchronized double getReal(int k) throws MathIllegalStateException, MathIllegalArgumentException"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getNumberOfRoots",
                "org.apache.commons.math3.complex",
                "RootsOfUnity",
                "public synchronized int getNumberOfRoots()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "isCounterClockWise",
                "org.apache.commons.math3.complex",
                "RootsOfUnity",
                "public synchronized boolean isCounterClockWise() throws MathIllegalStateException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 15269,
        "oracle": "k < 0 || k>= this.getNumberOfRoots();",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.complex",
        "className": "RootsOfUnity",
        "javadocTag": "@throws OutOfRangeException if {@code k} is out of range",
        "methodJavadoc": "    /**\n     * Get the imaginary part of the {@code k}-th {@code n}-th root of unity.\n     *\n     * @param k index of the {@code n}-th root of unity\n     * @return imaginary part of the {@code k}-th {@code n}-th root of unity\n     * @throws MathIllegalStateException if no roots of unity have been\n     * computed yet\n     * @throws OutOfRangeException if {@code k} is out of range\n     */",
        "methodSourceCode": "public synchronized double getImaginary(int k) throws MathIllegalStateException, OutOfRangeException{\n    if (omegaCount == 0) {\n        throw new MathIllegalStateException(LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n    }\n    if ((k < 0) || (k >= omegaCount)) {\n        throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, Integer.valueOf(k), Integer.valueOf(0), Integer.valueOf(omegaCount - 1));\n    }\n    return isCounterClockWise ? omegaImaginaryCounterClockwise[k] : omegaImaginaryClockwise[k];\n}",
        "classJavadoc": "/**\n * A helper class for the computation and caching of the {@code n}-th roots of\n * unity.\n *\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.complex;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math3.exception.MathIllegalArgumentException;\nimport org.apache.commons.math3.exception.MathIllegalStateException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.ZeroException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n * A helper class for the computation and caching of the {@code n}-th roots of\n * unity.\n *\n * @since 3.0\n */\npublic class RootsOfUnity implements Serializable {\n\n    /** Serializable version id. */\n    private static final long serialVersionUID = 20120201L;\n\n    /** Number of roots of unity. */\n    private int omegaCount;\n\n    /** Real part of the roots. */\n    private double[] omegaReal;\n\n    /**\n     * Imaginary part of the {@code n}-th roots of unity, for positive values\n     * of {@code n}. In this array, the roots are stored in counter-clockwise\n     * order.\n     */\n    private double[] omegaImaginaryCounterClockwise;\n\n    /**\n     * Imaginary part of the {@code n}-th roots of unity, for negative values\n     * of {@code n}. In this array, the roots are stored in clockwise order.\n     */\n    private double[] omegaImaginaryClockwise;\n\n    /**\n     * {@code true} if {@link #computeRoots(int)} was called with a positive\n     * value of its argument {@code n}. In this case, counter-clockwise ordering\n     * of the roots of unity should be used.\n     */\n    private boolean isCounterClockWise;\n\n    /**\n     * Build an engine for computing the {@code n}-th roots of unity.\n     */\n    public RootsOfUnity() {\n\n        omegaCount = 0;\n        omegaReal = null;\n        omegaImaginaryCounterClockwise = null;\n        omegaImaginaryClockwise = null;\n        isCounterClockWise = true;\n    }\n\n    /**\n     * Returns {@code true} if {@link #computeRoots(int)} was called with a\n     * positive value of its argument {@code n}. If {@code true}, then\n     * counter-clockwise ordering of the roots of unity should be used.\n     *\n     * @return {@code true} if the roots of unity are stored in\n     * counter-clockwise order\n     * @throws MathIllegalStateException if no roots of unity have been computed\n     * yet\n     */\n    public synchronized boolean isCounterClockWise()\n            throws MathIllegalStateException {\n\n        if (omegaCount == 0) {\n            throw new MathIllegalStateException(\n                    LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n        }\n        return isCounterClockWise;\n    }\n\n    /**\n     * <p>\n     * Computes the {@code n}-th roots of unity. The roots are stored in\n     * {@code omega[]}, such that {@code omega[k] = w ^ k}, where\n     * {@code k = 0, ..., n - 1}, {@code w = exp(2 * pi * i / n)} and\n     * {@code i = sqrt(-1)}.\n     * </p>\n     * <p>\n     * Note that {@code n} can be positive of negative\n     * </p>\n     * <ul>\n     * <li>{@code abs(n)} is always the number of roots of unity.</li>\n     * <li>If {@code n > 0}, then the roots are stored in counter-clockwise order.</li>\n     * <li>If {@code n < 0}, then the roots are stored in clockwise order.</p>\n     * </ul>\n     *\n     * @param n the (signed) number of roots of unity to be computed\n     * @throws ZeroException if {@code n = 0}\n     */\n    public synchronized void computeRoots(int n) throws ZeroException {\n\n        if (n == 0) {\n            throw new ZeroException(\n                    LocalizedFormats.CANNOT_COMPUTE_0TH_ROOT_OF_UNITY);\n        }\n\n        isCounterClockWise = n > 0;\n\n        // avoid repetitive calculations\n        final int absN = FastMath.abs(n);\n\n        if (absN == omegaCount) {\n            return;\n        }\n\n        // calculate everything from scratch\n        final double t = 2.0 * FastMath.PI / absN;\n        final double cosT = FastMath.cos(t);\n        final double sinT = FastMath.sin(t);\n        omegaReal = new double[absN];\n        omegaImaginaryCounterClockwise = new double[absN];\n        omegaImaginaryClockwise = new double[absN];\n        omegaReal[0] = 1.0;\n        omegaImaginaryCounterClockwise[0] = 0.0;\n        omegaImaginaryClockwise[0] = 0.0;\n        for (int i = 1; i < absN; i++) {\n            omegaReal[i] = omegaReal[i - 1] * cosT -\n                    omegaImaginaryCounterClockwise[i - 1] * sinT;\n            omegaImaginaryCounterClockwise[i] = omegaReal[i - 1] * sinT +\n                    omegaImaginaryCounterClockwise[i - 1] * cosT;\n            omegaImaginaryClockwise[i] = -omegaImaginaryCounterClockwise[i];\n        }\n        omegaCount = absN;\n    }\n\n    /**\n     * Get the real part of the {@code k}-th {@code n}-th root of unity.\n     *\n     * @param k index of the {@code n}-th root of unity\n     * @return real part of the {@code k}-th {@code n}-th root of unity\n     * @throws MathIllegalStateException if no roots of unity have been\n     * computed yet\n     * @throws MathIllegalArgumentException if {@code k} is out of range\n     */\n    public synchronized double getReal(int k)\n            throws MathIllegalStateException, MathIllegalArgumentException {\n\n        if (omegaCount == 0) {\n            throw new MathIllegalStateException(\n                    LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n        }\n        if ((k < 0) || (k >= omegaCount)) {\n            throw new OutOfRangeException(\n                    LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX,\n                    Integer.valueOf(k),\n                    Integer.valueOf(0),\n                    Integer.valueOf(omegaCount - 1));\n        }\n\n        return omegaReal[k];\n    }\n\n    /**\n     * Get the imaginary part of the {@code k}-th {@code n}-th root of unity.\n     *\n     * @param k index of the {@code n}-th root of unity\n     * @return imaginary part of the {@code k}-th {@code n}-th root of unity\n     * @throws MathIllegalStateException if no roots of unity have been\n     * computed yet\n     * @throws OutOfRangeException if {@code k} is out of range\n     */\n    public synchronized double getImaginary(int k)\n            throws MathIllegalStateException, OutOfRangeException {\n\n        if (omegaCount == 0) {\n            throw new MathIllegalStateException(\n                    LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\n        }\n        if ((k < 0) || (k >= omegaCount)) {\n            throw new OutOfRangeException(\n                    LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX,\n                    Integer.valueOf(k),\n                    Integer.valueOf(0),\n                    Integer.valueOf(omegaCount - 1));\n        }\n\n        return isCounterClockWise ? omegaImaginaryCounterClockwise[k] :\n            omegaImaginaryClockwise[k];\n    }\n\n    /**\n     * Returns the number of roots of unity currently stored. If\n     * {@link #computeRoots(int)} was called with {@code n}, then this method\n     * returns {@code abs(n)}. If no roots of unity have been computed yet, this\n     * method returns 0.\n     *\n     * @return the number of roots of unity currently stored\n     */\n    public synchronized int getNumberOfRoots() {\n        return omegaCount;\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "k",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getImaginary",
                "org.apache.commons.math3.complex",
                "RootsOfUnity",
                "public synchronized double getImaginary(int k) throws MathIllegalStateException, OutOfRangeException"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "isCounterClockWise",
                "org.apache.commons.math3.complex",
                "RootsOfUnity",
                "public synchronized boolean isCounterClockWise() throws MathIllegalStateException"
            ],
            [
                "getReal",
                "org.apache.commons.math3.complex",
                "RootsOfUnity",
                "public synchronized double getReal(int k) throws MathIllegalStateException, MathIllegalArgumentException"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getNumberOfRoots",
                "org.apache.commons.math3.complex",
                "RootsOfUnity",
                "public synchronized int getNumberOfRoots()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 15298,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.complex",
        "className": "Quaternion",
        "javadocTag": "@param eps Tolerance (absolute error).",
        "methodJavadoc": "    /**\n     * Checks whether the instance is a unit quaternion within a given\n     * tolerance.\n     *\n     * @param eps Tolerance (absolute error).\n     * @return {@code true} if the norm is 1 within the given tolerance,\n     * {@code false} otherwise\n     */",
        "methodSourceCode": "public boolean isUnitQuaternion(double eps){\n    return Precision.equals(getNorm(), 1d, eps);\n}",
        "classJavadoc": "/**\n * This class implements <a href=\"http://mathworld.wolfram.com/Quaternion.html\">\n * quaternions</a> (Hamilton's hypercomplex numbers).\n * <br/>\n * Instance of this class are guaranteed to be immutable.\n *\n * @since 3.1\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.complex;\n\nimport java.io.Serializable;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.Precision;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.ZeroException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\n\n/**\n * This class implements <a href=\"http://mathworld.wolfram.com/Quaternion.html\">\n * quaternions</a> (Hamilton's hypercomplex numbers).\n * <br/>\n * Instance of this class are guaranteed to be immutable.\n *\n * @since 3.1\n */\npublic final class Quaternion implements Serializable {\n    /** Identity quaternion. */\n    public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);\n    /** Zero quaternion. */\n    public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);\n    /** i */\n    public static final Quaternion I = new Quaternion(0, 1, 0, 0);\n    /** j */\n    public static final Quaternion J = new Quaternion(0, 0, 1, 0);\n    /** k */\n    public static final Quaternion K = new Quaternion(0, 0, 0, 1);\n\n    /** Serializable version identifier. */\n    private static final long serialVersionUID = 20092012L;\n\n    /** First component (scalar part). */\n    private final double q0;\n    /** Second component (first vector part). */\n    private final double q1;\n    /** Third component (second vector part). */\n    private final double q2;\n    /** Fourth component (third vector part). */\n    private final double q3;\n\n    /**\n     * Builds a quaternion from its components.\n     *\n     * @param a Scalar component.\n     * @param b First vector component.\n     * @param c Second vector component.\n     * @param d Third vector component.\n     */\n    public Quaternion(final double a,\n                      final double b,\n                      final double c,\n                      final double d) {\n        this.q0 = a;\n        this.q1 = b;\n        this.q2 = c;\n        this.q3 = d;\n    }\n\n    /**\n     * Builds a quaternion from scalar and vector parts.\n     *\n     * @param scalar Scalar part of the quaternion.\n     * @param v Components of the vector part of the quaternion.\n     *\n     * @throws DimensionMismatchException if the array length is not 3.\n     */\n    public Quaternion(final double scalar,\n                      final double[] v)\n        throws DimensionMismatchException {\n        if (v.length != 3) {\n            throw new DimensionMismatchException(v.length, 3);\n        }\n        this.q0 = scalar;\n        this.q1 = v[0];\n        this.q2 = v[1];\n        this.q3 = v[2];\n    }\n\n    /**\n     * Builds a pure quaternion from a vector (assuming that the scalar\n     * part is zero).\n     *\n     * @param v Components of the vector part of the pure quaternion.\n     */\n    public Quaternion(final double[] v) {\n        this(0, v);\n    }\n\n    /**\n     * Returns the conjugate quaternion of the instance.\n     *\n     * @return the conjugate quaternion\n     */\n    public Quaternion getConjugate() {\n        return new Quaternion(q0, -q1, -q2, -q3);\n    }\n\n    /**\n     * Returns the Hamilton product of two quaternions.\n     *\n     * @param q1 First quaternion.\n     * @param q2 Second quaternion.\n     * @return the product {@code q1} and {@code q2}, in that order.\n     */\n    public static Quaternion multiply(final Quaternion q1, final Quaternion q2) {\n        // Components of the first quaternion.\n        final double q1a = q1.getQ0();\n        final double q1b = q1.getQ1();\n        final double q1c = q1.getQ2();\n        final double q1d = q1.getQ3();\n\n        // Components of the second quaternion.\n        final double q2a = q2.getQ0();\n        final double q2b = q2.getQ1();\n        final double q2c = q2.getQ2();\n        final double q2d = q2.getQ3();\n\n        // Components of the product.\n        final double w = q1a * q2a - q1b * q2b - q1c * q2c - q1d * q2d;\n        final double x = q1a * q2b + q1b * q2a + q1c * q2d - q1d * q2c;\n        final double y = q1a * q2c - q1b * q2d + q1c * q2a + q1d * q2b;\n        final double z = q1a * q2d + q1b * q2c - q1c * q2b + q1d * q2a;\n\n        return new Quaternion(w, x, y, z);\n    }\n\n    /**\n     * Returns the Hamilton product of the instance by a quaternion.\n     *\n     * @param q Quaternion.\n     * @return the product of this instance with {@code q}, in that order.\n     */\n    public Quaternion multiply(final Quaternion q) {\n        return multiply(this, q);\n    }\n\n    /**\n     * Computes the sum of two quaternions.\n     *\n     * @param q1 Quaternion.\n     * @param q2 Quaternion.\n     * @return the sum of {@code q1} and {@code q2}.\n     */\n    public static Quaternion add(final Quaternion q1,\n                                 final Quaternion q2) {\n        return new Quaternion(q1.getQ0() + q2.getQ0(),\n                              q1.getQ1() + q2.getQ1(),\n                              q1.getQ2() + q2.getQ2(),\n                              q1.getQ3() + q2.getQ3());\n    }\n\n    /**\n     * Computes the sum of the instance and another quaternion.\n     *\n     * @param q Quaternion.\n     * @return the sum of this instance and {@code q}\n     */\n    public Quaternion add(final Quaternion q) {\n        return add(this, q);\n    }\n\n    /**\n     * Subtracts two quaternions.\n     *\n     * @param q1 First Quaternion.\n     * @param q2 Second quaternion.\n     * @return the difference between {@code q1} and {@code q2}.\n     */\n    public static Quaternion subtract(final Quaternion q1,\n                                      final Quaternion q2) {\n        return new Quaternion(q1.getQ0() - q2.getQ0(),\n                              q1.getQ1() - q2.getQ1(),\n                              q1.getQ2() - q2.getQ2(),\n                              q1.getQ3() - q2.getQ3());\n    }\n\n    /**\n     * Subtracts a quaternion from the instance.\n     *\n     * @param q Quaternion.\n     * @return the difference between this instance and {@code q}.\n     */\n    public Quaternion subtract(final Quaternion q) {\n        return subtract(this, q);\n    }\n\n    /**\n     * Computes the dot-product of two quaternions.\n     *\n     * @param q1 Quaternion.\n     * @param q2 Quaternion.\n     * @return the dot product of {@code q1} and {@code q2}.\n     */\n    public static double dotProduct(final Quaternion q1,\n                                    final Quaternion q2) {\n        return q1.getQ0() * q2.getQ0() +\n            q1.getQ1() * q2.getQ1() +\n            q1.getQ2() * q2.getQ2() +\n            q1.getQ3() * q2.getQ3();\n    }\n\n    /**\n     * Computes the dot-product of the instance by a quaternion.\n     *\n     * @param q Quaternion.\n     * @return the dot product of this instance and {@code q}.\n     */\n    public double dotProduct(final Quaternion q) {\n        return dotProduct(this, q);\n    }\n\n    /**\n     * Computes the norm of the quaternion.\n     *\n     * @return the norm.\n     */\n    public double getNorm() {\n        return FastMath.sqrt(q0 * q0 +\n                             q1 * q1 +\n                             q2 * q2 +\n                             q3 * q3);\n    }\n\n    /**\n     * Computes the normalized quaternion (the versor of the instance).\n     * The norm of the quaternion must not be zero.\n     *\n     * @return a normalized quaternion.\n     * @throws ZeroException if the norm of the quaternion is zero.\n     */\n    public Quaternion normalize() {\n        final double norm = getNorm();\n\n        if (norm < Precision.SAFE_MIN) {\n            throw new ZeroException(LocalizedFormats.NORM, norm);\n        }\n\n        return new Quaternion(q0 / norm,\n                              q1 / norm,\n                              q2 / norm,\n                              q3 / norm);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean equals(Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other instanceof Quaternion) {\n            final Quaternion q = (Quaternion) other;\n            return q0 == q.getQ0() &&\n                q1 == q.getQ1() &&\n                q2 == q.getQ2() &&\n                q3 == q.getQ3();\n        }\n\n        return false;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int hashCode() {\n        // \"Effective Java\" (second edition, p. 47).\n        int result = 17;\n        for (double comp : new double[] { q0, q1, q2, q3 }) {\n            final int c = MathUtils.hash(comp);\n            result = 31 * result + c;\n        }\n        return result;\n    }\n\n    /**\n     * Checks whether this instance is equal to another quaternion\n     * within a given tolerance.\n     *\n     * @param q Quaternion with which to compare the current quaternion.\n     * @param eps Tolerance.\n     * @return {@code true} if the each of the components are equal\n     * within the allowed absolute error.\n     */\n    public boolean equals(final Quaternion q,\n                          final double eps) {\n        return Precision.equals(q0, q.getQ0(), eps) &&\n            Precision.equals(q1, q.getQ1(), eps) &&\n            Precision.equals(q2, q.getQ2(), eps) &&\n            Precision.equals(q3, q.getQ3(), eps);\n    }\n\n    /**\n     * Checks whether the instance is a unit quaternion within a given\n     * tolerance.\n     *\n     * @param eps Tolerance (absolute error).\n     * @return {@code true} if the norm is 1 within the given tolerance,\n     * {@code false} otherwise\n     */\n    public boolean isUnitQuaternion(double eps) {\n        return Precision.equals(getNorm(), 1d, eps);\n    }\n\n    /**\n     * Checks whether the instance is a pure quaternion within a given\n     * tolerance.\n     *\n     * @param eps Tolerance (absolute error).\n     * @return {@code true} if the scalar part of the quaternion is zero.\n     */\n    public boolean isPureQuaternion(double eps) {\n        return FastMath.abs(getQ0()) <= eps;\n    }\n\n    /**\n     * Returns the polar form of the quaternion.\n     *\n     * @return the unit quaternion with positive scalar part.\n     */\n    public Quaternion getPositivePolarForm() {\n        if (getQ0() < 0) {\n            final Quaternion unitQ = normalize();\n            // The quaternion of rotation (normalized quaternion) q and -q\n            // are equivalent (i.e. represent the same rotation).\n            return new Quaternion(-unitQ.getQ0(),\n                                  -unitQ.getQ1(),\n                                  -unitQ.getQ2(),\n                                  -unitQ.getQ3());\n        } else {\n            return this.normalize();\n        }\n    }\n\n    /**\n     * Returns the inverse of this instance.\n     * The norm of the quaternion must not be zero.\n     *\n     * @return the inverse.\n     * @throws ZeroException if the norm (squared) of the quaternion is zero.\n     */\n    public Quaternion getInverse() {\n        final double squareNorm = q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3;\n        if (squareNorm < Precision.SAFE_MIN) {\n            throw new ZeroException(LocalizedFormats.NORM, squareNorm);\n        }\n\n        return new Quaternion(q0 / squareNorm,\n                              -q1 / squareNorm,\n                              -q2 / squareNorm,\n                              -q3 / squareNorm);\n    }\n\n    /**\n     * Gets the first component of the quaternion (scalar part).\n     *\n     * @return the scalar part.\n     */\n    public double getQ0() {\n        return q0;\n    }\n\n    /**\n     * Gets the second component of the quaternion (first component\n     * of the vector part).\n     *\n     * @return the first component of the vector part.\n     */\n    public double getQ1() {\n        return q1;\n    }\n\n    /**\n     * Gets the third component of the quaternion (second component\n     * of the vector part).\n     *\n     * @return the second component of the vector part.\n     */\n    public double getQ2() {\n        return q2;\n    }\n\n    /**\n     * Gets the fourth component of the quaternion (third component\n     * of the vector part).\n     *\n     * @return the third component of the vector part.\n     */\n    public double getQ3() {\n        return q3;\n    }\n\n    /**\n     * Gets the scalar part of the quaternion.\n     *\n     * @return the scalar part.\n     * @see #getQ0()\n     */\n    public double getScalarPart() {\n        return getQ0();\n    }\n\n    /**\n     * Gets the three components of the vector part of the quaternion.\n     *\n     * @return the vector part.\n     * @see #getQ1()\n     * @see #getQ2()\n     * @see #getQ3()\n     */\n    public double[] getVectorPart() {\n        return new double[] { getQ1(), getQ2(), getQ3() };\n    }\n\n    /**\n     * Multiplies the instance by a scalar.\n     *\n     * @param alpha Scalar factor.\n     * @return a scaled quaternion.\n     */\n    public Quaternion multiply(final double alpha) {\n        return new Quaternion(alpha * q0,\n                              alpha * q1,\n                              alpha * q2,\n                              alpha * q3);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String toString() {\n        final String sp = \" \";\n        final StringBuilder s = new StringBuilder();\n        s.append(\"[\")\n            .append(q0).append(sp)\n            .append(q1).append(sp)\n            .append(q2).append(sp)\n            .append(q3)\n            .append(\"]\");\n\n        return s.toString();\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "eps",
                "",
                "double"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "isPureQuaternion",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public boolean isPureQuaternion(double eps)"
            ],
            [
                "isUnitQuaternion",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public boolean isUnitQuaternion(double eps)"
            ],
            [
                "getQ3",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public double getQ3()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getQ1",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public double getQ1()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getInverse",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public Quaternion getInverse()"
            ],
            [
                "hashCode",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public int hashCode()"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public Quaternion subtract(final Quaternion q)"
            ],
            [
                "getVectorPart",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public double[] getVectorPart()"
            ],
            [
                "getQ0",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public double getQ0()"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public boolean equals(final Quaternion q, final double eps)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public Quaternion add(final Quaternion q)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public Quaternion multiply(final double alpha)"
            ],
            [
                "getQ2",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public double getQ2()"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public double dotProduct(final Quaternion q)"
            ],
            [
                "getNorm",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public double getNorm()"
            ],
            [
                "getPositivePolarForm",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public Quaternion getPositivePolarForm()"
            ],
            [
                "getScalarPart",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public double getScalarPart()"
            ],
            [
                "normalize",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public Quaternion normalize()"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public boolean equals(Object other)"
            ],
            [
                "toString",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public String toString()"
            ],
            [
                "getConjugate",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public Quaternion getConjugate()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public Quaternion multiply(final Quaternion q)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    }
]