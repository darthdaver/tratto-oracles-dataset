[
    {
        "id": 15449,
        "oracle": ";",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optimization.fitting",
        "className": "PolynomialFitter",
        "javadocTag": "@throws org.apache.commons.math3.exception.ConvergenceException if the algorithm failed to converge.",
        "methodJavadoc": "    /**\n     * Get the polynomial fitting the weighted (x, y) points.\n     *\n     * @return the coefficients of the polynomial that best fits the observed points.\n     * @throws org.apache.commons.math3.exception.ConvergenceException\n     * if the algorithm failed to converge.\n     * @deprecated Since 3.1 (to be removed in 4.0). Please use {@link #fit(double[])} instead.\n     */",
        "methodSourceCode": "public double[] fit(){\n    return fit(new PolynomialFunction.Parametric(), new double[degree + 1]);\n}",
        "classJavadoc": "/**\n * Polynomial fitting is a very simple case of {@link CurveFitter curve fitting}.\n * The estimated coefficients are the polynomial coefficients (see the\n * {@link #fit(double[]) fit} method).\n *\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 2.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optimization.fitting;\n\nimport org.apache.commons.math3.analysis.polynomials.PolynomialFunction;\nimport org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;\n\n/**\n * Polynomial fitting is a very simple case of {@link CurveFitter curve fitting}.\n * The estimated coefficients are the polynomial coefficients (see the\n * {@link #fit(double[]) fit} method).\n *\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 2.0\n */\n@Deprecated\npublic class PolynomialFitter extends CurveFitter<PolynomialFunction.Parametric> {\n    /** Polynomial degree.\n     * @deprecated\n     */\n    @Deprecated\n    private final int degree;\n\n    /**\n     * Simple constructor.\n     * <p>The polynomial fitter built this way are complete polynomials,\n     * ie. a n-degree polynomial has n+1 coefficients.</p>\n     *\n     * @param degree Maximal degree of the polynomial.\n     * @param optimizer Optimizer to use for the fitting.\n     * @deprecated Since 3.1 (to be removed in 4.0). Please use\n     * {@link #PolynomialFitter(DifferentiableMultivariateVectorOptimizer)} instead.\n     */\n    @Deprecated\n    public PolynomialFitter(int degree, final DifferentiableMultivariateVectorOptimizer optimizer) {\n        super(optimizer);\n        this.degree = degree;\n    }\n\n    /**\n     * Simple constructor.\n     *\n     * @param optimizer Optimizer to use for the fitting.\n     * @since 3.1\n     */\n    public PolynomialFitter(DifferentiableMultivariateVectorOptimizer optimizer) {\n        super(optimizer);\n        degree = -1; // To avoid compilation error until the instance variable is removed.\n    }\n\n    /**\n     * Get the polynomial fitting the weighted (x, y) points.\n     *\n     * @return the coefficients of the polynomial that best fits the observed points.\n     * @throws org.apache.commons.math3.exception.ConvergenceException\n     * if the algorithm failed to converge.\n     * @deprecated Since 3.1 (to be removed in 4.0). Please use {@link #fit(double[])} instead.\n     */\n    @Deprecated\n    public double[] fit() {\n        return fit(new PolynomialFunction.Parametric(), new double[degree + 1]);\n    }\n\n    /**\n     * Get the coefficients of the polynomial fitting the weighted data points.\n     * The degree of the fitting polynomial is {@code guess.length - 1}.\n     *\n     * @param guess First guess for the coefficients. They must be sorted in\n     * increasing order of the polynomial's degree.\n     * @param maxEval Maximum number of evaluations of the polynomial.\n     * @return the coefficients of the polynomial that best fits the observed points.\n     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException if\n     * the number of evaluations exceeds {@code maxEval}.\n     * @throws org.apache.commons.math3.exception.ConvergenceException\n     * if the algorithm failed to converge.\n     * @since 3.1\n     */\n    public double[] fit(int maxEval, double[] guess) {\n        return fit(maxEval, new PolynomialFunction.Parametric(), guess);\n    }\n\n    /**\n     * Get the coefficients of the polynomial fitting the weighted data points.\n     * The degree of the fitting polynomial is {@code guess.length - 1}.\n     *\n     * @param guess First guess for the coefficients. They must be sorted in\n     * increasing order of the polynomial's degree.\n     * @return the coefficients of the polynomial that best fits the observed points.\n     * @throws org.apache.commons.math3.exception.ConvergenceException\n     * if the algorithm failed to converge.\n     * @since 3.1\n     */\n    public double[] fit(double[] guess) {\n        return fit(new PolynomialFunction.Parametric(), guess);\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "3",
                "int"
            ],
            [
                "3.1",
                "double"
            ],
            [
                "4.0",
                "double"
            ]
        ],
        "tokensMethodArguments": [],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "PolynomialFitter",
                "public double[] fit(int maxEval, double[] guess)"
            ],
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "CurveFitter",
                "public double[] fit(T arg0, double[] arg1)"
            ],
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "CurveFitter",
                "public double[] fit(int arg0, T arg1, double[] arg2)"
            ],
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "PolynomialFitter",
                "public double[] fit()"
            ],
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "PolynomialFitter",
                "public double[] fit(double[] guess)"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getObservations",
                "org.apache.commons.math3.optimization.fitting",
                "CurveFitter",
                "public WeightedObservedPoint[] getObservations()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "equals",
                "",
                "double[]",
                "public boolean equals(Object);"
            ],
            [
                "toString",
                "",
                "double[]",
                "public String toString()"
            ],
            [
                "hashCode",
                "",
                "double[]",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "",
                "double[]",
                "public final native Class getClass();"
            ],
            [
                "clone",
                "",
                "double[]",
                "public T[] clone();"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "length",
                "",
                "double[]",
                "public final int length;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 15457,
        "oracle": ";",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optimization.fitting",
        "className": "PolynomialFitter",
        "javadocTag": "@throws org.apache.commons.math3.exception.ConvergenceException if the algorithm failed to converge.",
        "methodJavadoc": "    /**\n     * Get the coefficients of the polynomial fitting the weighted data points.\n     * The degree of the fitting polynomial is {@code guess.length - 1}.\n     *\n     * @param guess First guess for the coefficients. They must be sorted in\n     * increasing order of the polynomial's degree.\n     * @return the coefficients of the polynomial that best fits the observed points.\n     * @throws org.apache.commons.math3.exception.ConvergenceException\n     * if the algorithm failed to converge.\n     * @since 3.1\n     */",
        "methodSourceCode": "public double[] fit(double[] guess){\n    return fit(new PolynomialFunction.Parametric(), guess);\n}",
        "classJavadoc": "/**\n * Polynomial fitting is a very simple case of {@link CurveFitter curve fitting}.\n * The estimated coefficients are the polynomial coefficients (see the\n * {@link #fit(double[]) fit} method).\n *\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 2.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optimization.fitting;\n\nimport org.apache.commons.math3.analysis.polynomials.PolynomialFunction;\nimport org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;\n\n/**\n * Polynomial fitting is a very simple case of {@link CurveFitter curve fitting}.\n * The estimated coefficients are the polynomial coefficients (see the\n * {@link #fit(double[]) fit} method).\n *\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 2.0\n */\n@Deprecated\npublic class PolynomialFitter extends CurveFitter<PolynomialFunction.Parametric> {\n    /** Polynomial degree.\n     * @deprecated\n     */\n    @Deprecated\n    private final int degree;\n\n    /**\n     * Simple constructor.\n     * <p>The polynomial fitter built this way are complete polynomials,\n     * ie. a n-degree polynomial has n+1 coefficients.</p>\n     *\n     * @param degree Maximal degree of the polynomial.\n     * @param optimizer Optimizer to use for the fitting.\n     * @deprecated Since 3.1 (to be removed in 4.0). Please use\n     * {@link #PolynomialFitter(DifferentiableMultivariateVectorOptimizer)} instead.\n     */\n    @Deprecated\n    public PolynomialFitter(int degree, final DifferentiableMultivariateVectorOptimizer optimizer) {\n        super(optimizer);\n        this.degree = degree;\n    }\n\n    /**\n     * Simple constructor.\n     *\n     * @param optimizer Optimizer to use for the fitting.\n     * @since 3.1\n     */\n    public PolynomialFitter(DifferentiableMultivariateVectorOptimizer optimizer) {\n        super(optimizer);\n        degree = -1; // To avoid compilation error until the instance variable is removed.\n    }\n\n    /**\n     * Get the polynomial fitting the weighted (x, y) points.\n     *\n     * @return the coefficients of the polynomial that best fits the observed points.\n     * @throws org.apache.commons.math3.exception.ConvergenceException\n     * if the algorithm failed to converge.\n     * @deprecated Since 3.1 (to be removed in 4.0). Please use {@link #fit(double[])} instead.\n     */\n    @Deprecated\n    public double[] fit() {\n        return fit(new PolynomialFunction.Parametric(), new double[degree + 1]);\n    }\n\n    /**\n     * Get the coefficients of the polynomial fitting the weighted data points.\n     * The degree of the fitting polynomial is {@code guess.length - 1}.\n     *\n     * @param guess First guess for the coefficients. They must be sorted in\n     * increasing order of the polynomial's degree.\n     * @param maxEval Maximum number of evaluations of the polynomial.\n     * @return the coefficients of the polynomial that best fits the observed points.\n     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException if\n     * the number of evaluations exceeds {@code maxEval}.\n     * @throws org.apache.commons.math3.exception.ConvergenceException\n     * if the algorithm failed to converge.\n     * @since 3.1\n     */\n    public double[] fit(int maxEval, double[] guess) {\n        return fit(maxEval, new PolynomialFunction.Parametric(), guess);\n    }\n\n    /**\n     * Get the coefficients of the polynomial fitting the weighted data points.\n     * The degree of the fitting polynomial is {@code guess.length - 1}.\n     *\n     * @param guess First guess for the coefficients. They must be sorted in\n     * increasing order of the polynomial's degree.\n     * @return the coefficients of the polynomial that best fits the observed points.\n     * @throws org.apache.commons.math3.exception.ConvergenceException\n     * if the algorithm failed to converge.\n     * @since 3.1\n     */\n    public double[] fit(double[] guess) {\n        return fit(new PolynomialFunction.Parametric(), guess);\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1",
                "int"
            ],
            [
                "3",
                "int"
            ],
            [
                "3.1",
                "double"
            ]
        ],
        "tokensMethodArguments": [
            [
                "guess",
                "",
                "double[]"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "CurveFitter",
                "public double[] fit(int arg0, T arg1, double[] arg2)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "PolynomialFitter",
                "public double[] fit(double[] guess)"
            ],
            [
                "getObservations",
                "org.apache.commons.math3.optimization.fitting",
                "CurveFitter",
                "public WeightedObservedPoint[] getObservations()"
            ],
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "PolynomialFitter",
                "public double[] fit()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "PolynomialFitter",
                "public double[] fit(int maxEval, double[] guess)"
            ],
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "CurveFitter",
                "public double[] fit(T arg0, double[] arg1)"
            ],
            [
                "equals",
                "",
                "double[]",
                "public boolean equals(Object);"
            ],
            [
                "toString",
                "",
                "double[]",
                "public String toString()"
            ],
            [
                "hashCode",
                "",
                "double[]",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "",
                "double[]",
                "public final native Class getClass();"
            ],
            [
                "clone",
                "",
                "double[]",
                "public T[] clone();"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "length",
                "",
                "double[]",
                "public final int length;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 15464,
        "oracle": "(this.getObservations())).guess().length) < 4;",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optimization.fitting",
        "className": "HarmonicFitter",
        "javadocTag": "@throws NumberIsTooSmallException if the sample is too short for the\nthe first guess to be computed.",
        "methodJavadoc": "    /**\n     * Fit an harmonic function to the observed points.\n     * An initial guess will be automatically computed.\n     *\n     * @return the parameters of the harmonic function that best fits the\n     * observed points (see the other {@link #fit(double[]) fit} method.\n     * @throws NumberIsTooSmallException if the sample is too short for the\n     * the first guess to be computed.\n     * @throws ZeroException if the first guess cannot be computed because\n     * the abscissa range is zero.\n     */",
        "methodSourceCode": "public double[] fit(){\n    return fit((new ParameterGuesser(getObservations())).guess());\n}",
        "classJavadoc": "/**\n * Class that implements a curve fitting specialized for sinusoids.\n *\n * Harmonic fitting is a very simple case of curve fitting. The\n * estimated coefficients are the amplitude a, the pulsation &omega; and\n * the phase &phi;: <code>f (t) = a cos (&omega; t + &phi;)</code>. They are\n * searched by a least square estimator initialized with a rough guess\n * based on integrals.\n *\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 2.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optimization.fitting;\n\nimport org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;\nimport org.apache.commons.math3.analysis.function.HarmonicOscillator;\nimport org.apache.commons.math3.exception.ZeroException;\nimport org.apache.commons.math3.exception.NumberIsTooSmallException;\nimport org.apache.commons.math3.exception.MathIllegalStateException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n * Class that implements a curve fitting specialized for sinusoids.\n *\n * Harmonic fitting is a very simple case of curve fitting. The\n * estimated coefficients are the amplitude a, the pulsation &omega; and\n * the phase &phi;: <code>f (t) = a cos (&omega; t + &phi;)</code>. They are\n * searched by a least square estimator initialized with a rough guess\n * based on integrals.\n *\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 2.0\n */\n@Deprecated\npublic class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {\n    /**\n     * Simple constructor.\n     * @param optimizer Optimizer to use for the fitting.\n     */\n    public HarmonicFitter(final DifferentiableMultivariateVectorOptimizer optimizer) {\n        super(optimizer);\n    }\n\n    /**\n     * Fit an harmonic function to the observed points.\n     *\n     * @param initialGuess First guess values in the following order:\n     * <ul>\n     *  <li>Amplitude</li>\n     *  <li>Angular frequency</li>\n     *  <li>Phase</li>\n     * </ul>\n     * @return the parameters of the harmonic function that best fits the\n     * observed points (in the same order as above).\n     */\n    public double[] fit(double[] initialGuess) {\n        return fit(new HarmonicOscillator.Parametric(), initialGuess);\n    }\n\n    /**\n     * Fit an harmonic function to the observed points.\n     * An initial guess will be automatically computed.\n     *\n     * @return the parameters of the harmonic function that best fits the\n     * observed points (see the other {@link #fit(double[]) fit} method.\n     * @throws NumberIsTooSmallException if the sample is too short for the\n     * the first guess to be computed.\n     * @throws ZeroException if the first guess cannot be computed because\n     * the abscissa range is zero.\n     */\n    public double[] fit() {\n        return fit((new ParameterGuesser(getObservations())).guess());\n    }\n\n    /**\n     * This class guesses harmonic coefficients from a sample.\n     * <p>The algorithm used to guess the coefficients is as follows:</p>\n     *\n     * <p>We know f (t) at some sampling points t<sub>i</sub> and want to find a,\n     * &omega; and &phi; such that f (t) = a cos (&omega; t + &phi;).\n     * </p>\n     *\n     * <p>From the analytical expression, we can compute two primitives :\n     * <pre>\n     *     If2  (t) = &int; f<sup>2</sup>  = a<sup>2</sup> &times; [t + S (t)] / 2\n     *     If'2 (t) = &int; f'<sup>2</sup> = a<sup>2</sup> &omega;<sup>2</sup> &times; [t - S (t)] / 2\n     *     where S (t) = sin (2 (&omega; t + &phi;)) / (2 &omega;)\n     * </pre>\n     * </p>\n     *\n     * <p>We can remove S between these expressions :\n     * <pre>\n     *     If'2 (t) = a<sup>2</sup> &omega;<sup>2</sup> t - &omega;<sup>2</sup> If2 (t)\n     * </pre>\n     * </p>\n     *\n     * <p>The preceding expression shows that If'2 (t) is a linear\n     * combination of both t and If2 (t): If'2 (t) = A &times; t + B &times; If2 (t)\n     * </p>\n     *\n     * <p>From the primitive, we can deduce the same form for definite\n     * integrals between t<sub>1</sub> and t<sub>i</sub> for each t<sub>i</sub> :\n     * <pre>\n     *   If2 (t<sub>i</sub>) - If2 (t<sub>1</sub>) = A &times; (t<sub>i</sub> - t<sub>1</sub>) + B &times; (If2 (t<sub>i</sub>) - If2 (t<sub>1</sub>))\n     * </pre>\n     * </p>\n     *\n     * <p>We can find the coefficients A and B that best fit the sample\n     * to this linear expression by computing the definite integrals for\n     * each sample points.\n     * </p>\n     *\n     * <p>For a bilinear expression z (x<sub>i</sub>, y<sub>i</sub>) = A &times; x<sub>i</sub> + B &times; y<sub>i</sub>, the\n     * coefficients A and B that minimize a least square criterion\n     * &sum; (z<sub>i</sub> - z (x<sub>i</sub>, y<sub>i</sub>))<sup>2</sup> are given by these expressions:</p>\n     * <pre>\n     *\n     *         &sum;y<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>\n     *     A = ------------------------\n     *         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>\n     *\n     *         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub>\n     *     B = ------------------------\n     *         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>\n     * </pre>\n     * </p>\n     *\n     *\n     * <p>In fact, we can assume both a and &omega; are positive and\n     * compute them directly, knowing that A = a<sup>2</sup> &omega;<sup>2</sup> and that\n     * B = - &omega;<sup>2</sup>. The complete algorithm is therefore:</p>\n     * <pre>\n     *\n     * for each t<sub>i</sub> from t<sub>1</sub> to t<sub>n-1</sub>, compute:\n     *   f  (t<sub>i</sub>)\n     *   f' (t<sub>i</sub>) = (f (t<sub>i+1</sub>) - f(t<sub>i-1</sub>)) / (t<sub>i+1</sub> - t<sub>i-1</sub>)\n     *   x<sub>i</sub> = t<sub>i</sub> - t<sub>1</sub>\n     *   y<sub>i</sub> = &int; f<sup>2</sup> from t<sub>1</sub> to t<sub>i</sub>\n     *   z<sub>i</sub> = &int; f'<sup>2</sup> from t<sub>1</sub> to t<sub>i</sub>\n     *   update the sums &sum;x<sub>i</sub>x<sub>i</sub>, &sum;y<sub>i</sub>y<sub>i</sub>, &sum;x<sub>i</sub>y<sub>i</sub>, &sum;x<sub>i</sub>z<sub>i</sub> and &sum;y<sub>i</sub>z<sub>i</sub>\n     * end for\n     *\n     *            |--------------------------\n     *         \\  | &sum;y<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>\n     * a     =  \\ | ------------------------\n     *           \\| &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>\n     *\n     *\n     *            |--------------------------\n     *         \\  | &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>\n     * &omega;     =  \\ | ------------------------\n     *           \\| &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>\n     *\n     * </pre>\n     * </p>\n     *\n     * <p>Once we know &omega;, we can compute:\n     * <pre>\n     *    fc = &omega; f (t) cos (&omega; t) - f' (t) sin (&omega; t)\n     *    fs = &omega; f (t) sin (&omega; t) + f' (t) cos (&omega; t)\n     * </pre>\n     * </p>\n     *\n     * <p>It appears that <code>fc = a &omega; cos (&phi;)</code> and\n     * <code>fs = -a &omega; sin (&phi;)</code>, so we can use these\n     * expressions to compute &phi;. The best estimate over the sample is\n     * given by averaging these expressions.\n     * </p>\n     *\n     * <p>Since integrals and means are involved in the preceding\n     * estimations, these operations run in O(n) time, where n is the\n     * number of measurements.</p>\n     */\n    public static class ParameterGuesser {\n        /** Amplitude. */\n        private final double a;\n        /** Angular frequency. */\n        private final double omega;\n        /** Phase. */\n        private final double phi;\n\n        /**\n         * Simple constructor.\n         *\n         * @param observations Sampled observations.\n         * @throws NumberIsTooSmallException if the sample is too short.\n         * @throws ZeroException if the abscissa range is zero.\n         * @throws MathIllegalStateException when the guessing procedure cannot\n         * produce sensible results.\n         */\n        public ParameterGuesser(WeightedObservedPoint[] observations) {\n            if (observations.length < 4) {\n                throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n                                                    observations.length, 4, true);\n            }\n\n            final WeightedObservedPoint[] sorted = sortObservations(observations);\n\n            final double aOmega[] = guessAOmega(sorted);\n            a = aOmega[0];\n            omega = aOmega[1];\n\n            phi = guessPhi(sorted);\n        }\n\n        /**\n         * Gets an estimation of the parameters.\n         *\n         * @return the guessed parameters, in the following order:\n         * <ul>\n         *  <li>Amplitude</li>\n         *  <li>Angular frequency</li>\n         *  <li>Phase</li>\n         * </ul>\n         */\n        public double[] guess() {\n            return new double[] { a, omega, phi };\n        }\n\n        /**\n         * Sort the observations with respect to the abscissa.\n         *\n         * @param unsorted Input observations.\n         * @return the input observations, sorted.\n         */\n        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\n                    int i = j - 1;\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }\n\n        /**\n         * Estimate a first guess of the amplitude and angular frequency.\n         * This method assumes that the {@link #sortObservations(WeightedObservedPoint[])} method\n         * has been called previously.\n         *\n         * @param observations Observations, sorted w.r.t. abscissa.\n         * @throws ZeroException if the abscissa range is zero.\n         * @throws MathIllegalStateException when the guessing procedure cannot\n         * produce sensible results.\n         * @return the guessed amplitude (at index 0) and circular frequency\n         * (at index 1).\n         */\n        private double[] guessAOmega(WeightedObservedPoint[] observations) {\n            final double[] aOmega = new double[2];\n\n            // initialize the sums for the linear model between the two integrals\n            double sx2 = 0;\n            double sy2 = 0;\n            double sxy = 0;\n            double sxz = 0;\n            double syz = 0;\n\n            double currentX = observations[0].getX();\n            double currentY = observations[0].getY();\n            double f2Integral = 0;\n            double fPrime2Integral = 0;\n            final double startX = currentX;\n            for (int i = 1; i < observations.length; ++i) {\n                // one step forward\n                final double previousX = currentX;\n                final double previousY = currentY;\n                currentX = observations[i].getX();\n                currentY = observations[i].getY();\n\n                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>\n                // considering a linear model for f (and therefore constant f')\n                final double dx = currentX - previousX;\n                final double dy = currentY - previousY;\n                final double f2StepIntegral =\n                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n                final double fPrime2StepIntegral = dy * dy / dx;\n\n                final double x = currentX - startX;\n                f2Integral += f2StepIntegral;\n                fPrime2Integral += fPrime2StepIntegral;\n\n                sx2 += x * x;\n                sy2 += f2Integral * f2Integral;\n                sxy += x * f2Integral;\n                sxz += x * fPrime2Integral;\n                syz += f2Integral * fPrime2Integral;\n            }\n\n            // compute the amplitude and pulsation coefficients\n            double c1 = sy2 * sxz - sxy * syz;\n            double c2 = sxy * sxz - sx2 * syz;\n            double c3 = sx2 * sy2 - sxy * sxy;\n            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {\n                final int last = observations.length - 1;\n                // Range of the observations, assuming that the\n                // observations are sorted.\n                final double xRange = observations[last].getX() - observations[0].getX();\n                if (xRange == 0) {\n                    throw new ZeroException();\n                }\n                aOmega[1] = 2 * Math.PI / xRange;\n\n                double yMin = Double.POSITIVE_INFINITY;\n                double yMax = Double.NEGATIVE_INFINITY;\n                for (int i = 1; i < observations.length; ++i) {\n                    final double y = observations[i].getY();\n                    if (y < yMin) {\n                        yMin = y;\n                    }\n                    if (y > yMax) {\n                        yMax = y;\n                    }\n                }\n                aOmega[0] = 0.5 * (yMax - yMin);\n            } else {\n                if (c2 == 0) {\n                    // In some ill-conditioned cases (cf. MATH-844), the guesser\n                    // procedure cannot produce sensible results.\n                    throw new MathIllegalStateException(LocalizedFormats.ZERO_DENOMINATOR);\n                }\n\n                aOmega[0] = FastMath.sqrt(c1 / c2);\n                aOmega[1] = FastMath.sqrt(c2 / c3);\n            }\n\n            return aOmega;\n        }\n\n        /**\n         * Estimate a first guess of the phase.\n         *\n         * @param observations Observations, sorted w.r.t. abscissa.\n         * @return the guessed phase.\n         */\n        private double guessPhi(WeightedObservedPoint[] observations) {\n            // initialize the means\n            double fcMean = 0;\n            double fsMean = 0;\n\n            double currentX = observations[0].getX();\n            double currentY = observations[0].getY();\n            for (int i = 1; i < observations.length; ++i) {\n                // one step forward\n                final double previousX = currentX;\n                final double previousY = currentY;\n                currentX = observations[i].getX();\n                currentY = observations[i].getY();\n                final double currentYPrime = (currentY - previousY) / (currentX - previousX);\n\n                double omegaX = omega * currentX;\n                double cosine = FastMath.cos(omegaX);\n                double sine = FastMath.sin(omegaX);\n                fcMean += omega * currentY * cosine - currentYPrime * sine;\n                fsMean += omega * currentY * sine + currentYPrime * cosine;\n            }\n\n            return FastMath.atan2(-fsMean, fcMean);\n        }\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "CurveFitter",
                "public double[] fit(T arg0, double[] arg1)"
            ],
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "HarmonicFitter",
                "public double[] fit()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "HarmonicFitter",
                "public double[] fit(double[] initialGuess)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getObservations",
                "org.apache.commons.math3.optimization.fitting",
                "CurveFitter",
                "public WeightedObservedPoint[] getObservations()"
            ],
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "CurveFitter",
                "public double[] fit(int arg0, T arg1, double[] arg2)"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "equals",
                "",
                "double[]",
                "public boolean equals(Object);"
            ],
            [
                "toString",
                "",
                "double[]",
                "public String toString()"
            ],
            [
                "hashCode",
                "",
                "double[]",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "",
                "double[]",
                "public final native Class getClass();"
            ],
            [
                "clone",
                "",
                "double[]",
                "public T[] clone();"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "length",
                "",
                "double[]",
                "public final int length;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 15465,
        "oracle": ";",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optimization.fitting",
        "className": "HarmonicFitter",
        "javadocTag": "@throws ZeroException if the first guess cannot be computed because\nthe abscissa range is zero.",
        "methodJavadoc": "    /**\n     * Fit an harmonic function to the observed points.\n     * An initial guess will be automatically computed.\n     *\n     * @return the parameters of the harmonic function that best fits the\n     * observed points (see the other {@link #fit(double[]) fit} method.\n     * @throws NumberIsTooSmallException if the sample is too short for the\n     * the first guess to be computed.\n     * @throws ZeroException if the first guess cannot be computed because\n     * the abscissa range is zero.\n     */",
        "methodSourceCode": "public double[] fit(){\n    return fit((new ParameterGuesser(getObservations())).guess());\n}",
        "classJavadoc": "/**\n * Class that implements a curve fitting specialized for sinusoids.\n *\n * Harmonic fitting is a very simple case of curve fitting. The\n * estimated coefficients are the amplitude a, the pulsation &omega; and\n * the phase &phi;: <code>f (t) = a cos (&omega; t + &phi;)</code>. They are\n * searched by a least square estimator initialized with a rough guess\n * based on integrals.\n *\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 2.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optimization.fitting;\n\nimport org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;\nimport org.apache.commons.math3.analysis.function.HarmonicOscillator;\nimport org.apache.commons.math3.exception.ZeroException;\nimport org.apache.commons.math3.exception.NumberIsTooSmallException;\nimport org.apache.commons.math3.exception.MathIllegalStateException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n * Class that implements a curve fitting specialized for sinusoids.\n *\n * Harmonic fitting is a very simple case of curve fitting. The\n * estimated coefficients are the amplitude a, the pulsation &omega; and\n * the phase &phi;: <code>f (t) = a cos (&omega; t + &phi;)</code>. They are\n * searched by a least square estimator initialized with a rough guess\n * based on integrals.\n *\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 2.0\n */\n@Deprecated\npublic class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {\n    /**\n     * Simple constructor.\n     * @param optimizer Optimizer to use for the fitting.\n     */\n    public HarmonicFitter(final DifferentiableMultivariateVectorOptimizer optimizer) {\n        super(optimizer);\n    }\n\n    /**\n     * Fit an harmonic function to the observed points.\n     *\n     * @param initialGuess First guess values in the following order:\n     * <ul>\n     *  <li>Amplitude</li>\n     *  <li>Angular frequency</li>\n     *  <li>Phase</li>\n     * </ul>\n     * @return the parameters of the harmonic function that best fits the\n     * observed points (in the same order as above).\n     */\n    public double[] fit(double[] initialGuess) {\n        return fit(new HarmonicOscillator.Parametric(), initialGuess);\n    }\n\n    /**\n     * Fit an harmonic function to the observed points.\n     * An initial guess will be automatically computed.\n     *\n     * @return the parameters of the harmonic function that best fits the\n     * observed points (see the other {@link #fit(double[]) fit} method.\n     * @throws NumberIsTooSmallException if the sample is too short for the\n     * the first guess to be computed.\n     * @throws ZeroException if the first guess cannot be computed because\n     * the abscissa range is zero.\n     */\n    public double[] fit() {\n        return fit((new ParameterGuesser(getObservations())).guess());\n    }\n\n    /**\n     * This class guesses harmonic coefficients from a sample.\n     * <p>The algorithm used to guess the coefficients is as follows:</p>\n     *\n     * <p>We know f (t) at some sampling points t<sub>i</sub> and want to find a,\n     * &omega; and &phi; such that f (t) = a cos (&omega; t + &phi;).\n     * </p>\n     *\n     * <p>From the analytical expression, we can compute two primitives :\n     * <pre>\n     *     If2  (t) = &int; f<sup>2</sup>  = a<sup>2</sup> &times; [t + S (t)] / 2\n     *     If'2 (t) = &int; f'<sup>2</sup> = a<sup>2</sup> &omega;<sup>2</sup> &times; [t - S (t)] / 2\n     *     where S (t) = sin (2 (&omega; t + &phi;)) / (2 &omega;)\n     * </pre>\n     * </p>\n     *\n     * <p>We can remove S between these expressions :\n     * <pre>\n     *     If'2 (t) = a<sup>2</sup> &omega;<sup>2</sup> t - &omega;<sup>2</sup> If2 (t)\n     * </pre>\n     * </p>\n     *\n     * <p>The preceding expression shows that If'2 (t) is a linear\n     * combination of both t and If2 (t): If'2 (t) = A &times; t + B &times; If2 (t)\n     * </p>\n     *\n     * <p>From the primitive, we can deduce the same form for definite\n     * integrals between t<sub>1</sub> and t<sub>i</sub> for each t<sub>i</sub> :\n     * <pre>\n     *   If2 (t<sub>i</sub>) - If2 (t<sub>1</sub>) = A &times; (t<sub>i</sub> - t<sub>1</sub>) + B &times; (If2 (t<sub>i</sub>) - If2 (t<sub>1</sub>))\n     * </pre>\n     * </p>\n     *\n     * <p>We can find the coefficients A and B that best fit the sample\n     * to this linear expression by computing the definite integrals for\n     * each sample points.\n     * </p>\n     *\n     * <p>For a bilinear expression z (x<sub>i</sub>, y<sub>i</sub>) = A &times; x<sub>i</sub> + B &times; y<sub>i</sub>, the\n     * coefficients A and B that minimize a least square criterion\n     * &sum; (z<sub>i</sub> - z (x<sub>i</sub>, y<sub>i</sub>))<sup>2</sup> are given by these expressions:</p>\n     * <pre>\n     *\n     *         &sum;y<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>\n     *     A = ------------------------\n     *         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>\n     *\n     *         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub>\n     *     B = ------------------------\n     *         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>\n     * </pre>\n     * </p>\n     *\n     *\n     * <p>In fact, we can assume both a and &omega; are positive and\n     * compute them directly, knowing that A = a<sup>2</sup> &omega;<sup>2</sup> and that\n     * B = - &omega;<sup>2</sup>. The complete algorithm is therefore:</p>\n     * <pre>\n     *\n     * for each t<sub>i</sub> from t<sub>1</sub> to t<sub>n-1</sub>, compute:\n     *   f  (t<sub>i</sub>)\n     *   f' (t<sub>i</sub>) = (f (t<sub>i+1</sub>) - f(t<sub>i-1</sub>)) / (t<sub>i+1</sub> - t<sub>i-1</sub>)\n     *   x<sub>i</sub> = t<sub>i</sub> - t<sub>1</sub>\n     *   y<sub>i</sub> = &int; f<sup>2</sup> from t<sub>1</sub> to t<sub>i</sub>\n     *   z<sub>i</sub> = &int; f'<sup>2</sup> from t<sub>1</sub> to t<sub>i</sub>\n     *   update the sums &sum;x<sub>i</sub>x<sub>i</sub>, &sum;y<sub>i</sub>y<sub>i</sub>, &sum;x<sub>i</sub>y<sub>i</sub>, &sum;x<sub>i</sub>z<sub>i</sub> and &sum;y<sub>i</sub>z<sub>i</sub>\n     * end for\n     *\n     *            |--------------------------\n     *         \\  | &sum;y<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>\n     * a     =  \\ | ------------------------\n     *           \\| &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>\n     *\n     *\n     *            |--------------------------\n     *         \\  | &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>\n     * &omega;     =  \\ | ------------------------\n     *           \\| &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>\n     *\n     * </pre>\n     * </p>\n     *\n     * <p>Once we know &omega;, we can compute:\n     * <pre>\n     *    fc = &omega; f (t) cos (&omega; t) - f' (t) sin (&omega; t)\n     *    fs = &omega; f (t) sin (&omega; t) + f' (t) cos (&omega; t)\n     * </pre>\n     * </p>\n     *\n     * <p>It appears that <code>fc = a &omega; cos (&phi;)</code> and\n     * <code>fs = -a &omega; sin (&phi;)</code>, so we can use these\n     * expressions to compute &phi;. The best estimate over the sample is\n     * given by averaging these expressions.\n     * </p>\n     *\n     * <p>Since integrals and means are involved in the preceding\n     * estimations, these operations run in O(n) time, where n is the\n     * number of measurements.</p>\n     */\n    public static class ParameterGuesser {\n        /** Amplitude. */\n        private final double a;\n        /** Angular frequency. */\n        private final double omega;\n        /** Phase. */\n        private final double phi;\n\n        /**\n         * Simple constructor.\n         *\n         * @param observations Sampled observations.\n         * @throws NumberIsTooSmallException if the sample is too short.\n         * @throws ZeroException if the abscissa range is zero.\n         * @throws MathIllegalStateException when the guessing procedure cannot\n         * produce sensible results.\n         */\n        public ParameterGuesser(WeightedObservedPoint[] observations) {\n            if (observations.length < 4) {\n                throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n                                                    observations.length, 4, true);\n            }\n\n            final WeightedObservedPoint[] sorted = sortObservations(observations);\n\n            final double aOmega[] = guessAOmega(sorted);\n            a = aOmega[0];\n            omega = aOmega[1];\n\n            phi = guessPhi(sorted);\n        }\n\n        /**\n         * Gets an estimation of the parameters.\n         *\n         * @return the guessed parameters, in the following order:\n         * <ul>\n         *  <li>Amplitude</li>\n         *  <li>Angular frequency</li>\n         *  <li>Phase</li>\n         * </ul>\n         */\n        public double[] guess() {\n            return new double[] { a, omega, phi };\n        }\n\n        /**\n         * Sort the observations with respect to the abscissa.\n         *\n         * @param unsorted Input observations.\n         * @return the input observations, sorted.\n         */\n        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\n                    int i = j - 1;\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }\n\n        /**\n         * Estimate a first guess of the amplitude and angular frequency.\n         * This method assumes that the {@link #sortObservations(WeightedObservedPoint[])} method\n         * has been called previously.\n         *\n         * @param observations Observations, sorted w.r.t. abscissa.\n         * @throws ZeroException if the abscissa range is zero.\n         * @throws MathIllegalStateException when the guessing procedure cannot\n         * produce sensible results.\n         * @return the guessed amplitude (at index 0) and circular frequency\n         * (at index 1).\n         */\n        private double[] guessAOmega(WeightedObservedPoint[] observations) {\n            final double[] aOmega = new double[2];\n\n            // initialize the sums for the linear model between the two integrals\n            double sx2 = 0;\n            double sy2 = 0;\n            double sxy = 0;\n            double sxz = 0;\n            double syz = 0;\n\n            double currentX = observations[0].getX();\n            double currentY = observations[0].getY();\n            double f2Integral = 0;\n            double fPrime2Integral = 0;\n            final double startX = currentX;\n            for (int i = 1; i < observations.length; ++i) {\n                // one step forward\n                final double previousX = currentX;\n                final double previousY = currentY;\n                currentX = observations[i].getX();\n                currentY = observations[i].getY();\n\n                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>\n                // considering a linear model for f (and therefore constant f')\n                final double dx = currentX - previousX;\n                final double dy = currentY - previousY;\n                final double f2StepIntegral =\n                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n                final double fPrime2StepIntegral = dy * dy / dx;\n\n                final double x = currentX - startX;\n                f2Integral += f2StepIntegral;\n                fPrime2Integral += fPrime2StepIntegral;\n\n                sx2 += x * x;\n                sy2 += f2Integral * f2Integral;\n                sxy += x * f2Integral;\n                sxz += x * fPrime2Integral;\n                syz += f2Integral * fPrime2Integral;\n            }\n\n            // compute the amplitude and pulsation coefficients\n            double c1 = sy2 * sxz - sxy * syz;\n            double c2 = sxy * sxz - sx2 * syz;\n            double c3 = sx2 * sy2 - sxy * sxy;\n            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {\n                final int last = observations.length - 1;\n                // Range of the observations, assuming that the\n                // observations are sorted.\n                final double xRange = observations[last].getX() - observations[0].getX();\n                if (xRange == 0) {\n                    throw new ZeroException();\n                }\n                aOmega[1] = 2 * Math.PI / xRange;\n\n                double yMin = Double.POSITIVE_INFINITY;\n                double yMax = Double.NEGATIVE_INFINITY;\n                for (int i = 1; i < observations.length; ++i) {\n                    final double y = observations[i].getY();\n                    if (y < yMin) {\n                        yMin = y;\n                    }\n                    if (y > yMax) {\n                        yMax = y;\n                    }\n                }\n                aOmega[0] = 0.5 * (yMax - yMin);\n            } else {\n                if (c2 == 0) {\n                    // In some ill-conditioned cases (cf. MATH-844), the guesser\n                    // procedure cannot produce sensible results.\n                    throw new MathIllegalStateException(LocalizedFormats.ZERO_DENOMINATOR);\n                }\n\n                aOmega[0] = FastMath.sqrt(c1 / c2);\n                aOmega[1] = FastMath.sqrt(c2 / c3);\n            }\n\n            return aOmega;\n        }\n\n        /**\n         * Estimate a first guess of the phase.\n         *\n         * @param observations Observations, sorted w.r.t. abscissa.\n         * @return the guessed phase.\n         */\n        private double guessPhi(WeightedObservedPoint[] observations) {\n            // initialize the means\n            double fcMean = 0;\n            double fsMean = 0;\n\n            double currentX = observations[0].getX();\n            double currentY = observations[0].getY();\n            for (int i = 1; i < observations.length; ++i) {\n                // one step forward\n                final double previousX = currentX;\n                final double previousY = currentY;\n                currentX = observations[i].getX();\n                currentY = observations[i].getY();\n                final double currentYPrime = (currentY - previousY) / (currentX - previousX);\n\n                double omegaX = omega * currentX;\n                double cosine = FastMath.cos(omegaX);\n                double sine = FastMath.sin(omegaX);\n                fcMean += omega * currentY * cosine - currentYPrime * sine;\n                fsMean += omega * currentY * sine + currentYPrime * cosine;\n            }\n\n            return FastMath.atan2(-fsMean, fcMean);\n        }\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "CurveFitter",
                "public double[] fit(int arg0, T arg1, double[] arg2)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getObservations",
                "org.apache.commons.math3.optimization.fitting",
                "CurveFitter",
                "public WeightedObservedPoint[] getObservations()"
            ],
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "CurveFitter",
                "public double[] fit(T arg0, double[] arg1)"
            ],
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "HarmonicFitter",
                "public double[] fit()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "fit",
                "org.apache.commons.math3.optimization.fitting",
                "HarmonicFitter",
                "public double[] fit(double[] initialGuess)"
            ],
            [
                "equals",
                "",
                "double[]",
                "public boolean equals(Object);"
            ],
            [
                "toString",
                "",
                "double[]",
                "public String toString()"
            ],
            [
                "hashCode",
                "",
                "double[]",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "",
                "double[]",
                "public final native Class getClass();"
            ],
            [
                "clone",
                "",
                "double[]",
                "public T[] clone();"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "length",
                "",
                "double[]",
                "public final int length;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 15484,
        "oracle": "comparator != null;",
        "oracleType": "PRE",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optimization.direct",
        "className": "AbstractSimplex",
        "javadocTag": "@param comparator Comparator to use to sort simplex vertices from best\nto worst.",
        "methodJavadoc": "    /**\n     * Compute the next simplex of the algorithm.\n     *\n     * @param evaluationFunction Evaluation function.\n     * @param comparator Comparator to use to sort simplex vertices from best\n     * to worst.\n     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n     * if the algorithm fails to converge.\n     */",
        "methodSourceCode": "public abstract void iterate(final MultivariateFunction evaluationFunction, final Comparator<PointValuePair> comparator);",
        "classJavadoc": "/**\n * This class implements the simplex concept.\n * It is intended to be used in conjunction with {@link SimplexOptimizer}.\n * <br/>\n * The initial configuration of the simplex is set by the constructors\n * {@link #AbstractSimplex(double[])} or {@link #AbstractSimplex(double[][])}.\n * The other {@link #AbstractSimplex(int) constructor} will set all steps\n * to 1, thus building a default configuration from a unit hypercube.\n * <br/>\n * Users <em>must</em> call the {@link #build(double[]) build} method in order\n * to create the data structure that will be acted on by the other methods of\n * this class.\n *\n * @see SimplexOptimizer\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optimization.direct;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\n\nimport org.apache.commons.math3.analysis.MultivariateFunction;\nimport org.apache.commons.math3.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.ZeroException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.NullArgumentException;\nimport org.apache.commons.math3.exception.MathIllegalArgumentException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.optimization.PointValuePair;\nimport org.apache.commons.math3.optimization.OptimizationData;\n\n/**\n * This class implements the simplex concept.\n * It is intended to be used in conjunction with {@link SimplexOptimizer}.\n * <br/>\n * The initial configuration of the simplex is set by the constructors\n * {@link #AbstractSimplex(double[])} or {@link #AbstractSimplex(double[][])}.\n * The other {@link #AbstractSimplex(int) constructor} will set all steps\n * to 1, thus building a default configuration from a unit hypercube.\n * <br/>\n * Users <em>must</em> call the {@link #build(double[]) build} method in order\n * to create the data structure that will be acted on by the other methods of\n * this class.\n *\n * @see SimplexOptimizer\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 3.0\n */\n@Deprecated\npublic abstract class AbstractSimplex implements OptimizationData {\n    /** Simplex. */\n    private PointValuePair[] simplex;\n    /** Start simplex configuration. */\n    private double[][] startConfiguration;\n    /** Simplex dimension (must be equal to {@code simplex.length - 1}). */\n    private final int dimension;\n\n    /**\n     * Build a unit hypercube simplex.\n     *\n     * @param n Dimension of the simplex.\n     */\n    protected AbstractSimplex(int n) {\n        this(n, 1d);\n    }\n\n    /**\n     * Build a hypercube simplex with the given side length.\n     *\n     * @param n Dimension of the simplex.\n     * @param sideLength Length of the sides of the hypercube.\n     */\n    protected AbstractSimplex(int n,\n                              double sideLength) {\n        this(createHypercubeSteps(n, sideLength));\n    }\n\n    /**\n     * The start configuration for simplex is built from a box parallel to\n     * the canonical axes of the space. The simplex is the subset of vertices\n     * of a box parallel to the canonical axes. It is built as the path followed\n     * while traveling from one vertex of the box to the diagonally opposite\n     * vertex moving only along the box edges. The first vertex of the box will\n     * be located at the start point of the optimization.\n     * As an example, in dimension 3 a simplex has 4 vertices. Setting the\n     * steps to (1, 10, 2) and the start point to (1, 1, 1) would imply the\n     * start simplex would be: { (1, 1, 1), (2, 1, 1), (2, 11, 1), (2, 11, 3) }.\n     * The first vertex would be set to the start point at (1, 1, 1) and the\n     * last vertex would be set to the diagonally opposite vertex at (2, 11, 3).\n     *\n     * @param steps Steps along the canonical axes representing box edges. They\n     * may be negative but not zero.\n     * @throws NullArgumentException if {@code steps} is {@code null}.\n     * @throws ZeroException if one of the steps is zero.\n     */\n    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\n                if (steps[j] == 0) {\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }\n\n    /**\n     * The real initial simplex will be set up by moving the reference\n     * simplex such that its first point is located at the start point of the\n     * optimization.\n     *\n     * @param referenceSimplex Reference simplex.\n     * @throws NotStrictlyPositiveException if the reference simplex does not\n     * contain at least one point.\n     * @throws DimensionMismatchException if there is a dimension mismatch\n     * in the reference simplex.\n     * @throws IllegalArgumentException if one of its vertices is duplicated.\n     */\n    protected AbstractSimplex(final double[][] referenceSimplex) {\n        if (referenceSimplex.length <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.SIMPLEX_NEED_ONE_POINT,\n                                                   referenceSimplex.length);\n        }\n        dimension = referenceSimplex.length - 1;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        final double[] ref0 = referenceSimplex[0];\n\n        // Loop over vertices.\n        for (int i = 0; i < referenceSimplex.length; i++) {\n            final double[] refI = referenceSimplex[i];\n\n            // Safety checks.\n            if (refI.length != dimension) {\n                throw new DimensionMismatchException(refI.length, dimension);\n            }\n            for (int j = 0; j < i; j++) {\n                final double[] refJ = referenceSimplex[j];\n                boolean allEquals = true;\n                for (int k = 0; k < dimension; k++) {\n                    if (refI[k] != refJ[k]) {\n                        allEquals = false;\n                        break;\n                    }\n                }\n                if (allEquals) {\n                    throw new MathIllegalArgumentException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX,\n                                                           i, j);\n                }\n            }\n\n            // Store vertex i position relative to vertex 0 position.\n            if (i > 0) {\n                final double[] confI = startConfiguration[i - 1];\n                for (int k = 0; k < dimension; k++) {\n                    confI[k] = refI[k] - ref0[k];\n                }\n            }\n        }\n    }\n\n    /**\n     * Get simplex dimension.\n     *\n     * @return the dimension of the simplex.\n     */\n    public int getDimension() {\n        return dimension;\n    }\n\n    /**\n     * Get simplex size.\n     * After calling the {@link #build(double[]) build} method, this method will\n     * will be equivalent to {@code getDimension() + 1}.\n     *\n     * @return the size of the simplex.\n     */\n    public int getSize() {\n        return simplex.length;\n    }\n\n    /**\n     * Compute the next simplex of the algorithm.\n     *\n     * @param evaluationFunction Evaluation function.\n     * @param comparator Comparator to use to sort simplex vertices from best\n     * to worst.\n     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n     * if the algorithm fails to converge.\n     */\n    public abstract void iterate(final MultivariateFunction evaluationFunction,\n                                 final Comparator<PointValuePair> comparator);\n\n    /**\n     * Build an initial simplex.\n     *\n     * @param startPoint First point of the simplex.\n     * @throws DimensionMismatchException if the start point does not match\n     * simplex dimension.\n     */\n    public void build(final double[] startPoint) {\n        if (dimension != startPoint.length) {\n            throw new DimensionMismatchException(dimension, startPoint.length);\n        }\n\n        // Set first vertex.\n        simplex = new PointValuePair[dimension + 1];\n        simplex[0] = new PointValuePair(startPoint, Double.NaN);\n\n        // Set remaining vertices.\n        for (int i = 0; i < dimension; i++) {\n            final double[] confI = startConfiguration[i];\n            final double[] vertexI = new double[dimension];\n            for (int k = 0; k < dimension; k++) {\n                vertexI[k] = startPoint[k] + confI[k];\n            }\n            simplex[i + 1] = new PointValuePair(vertexI, Double.NaN);\n        }\n    }\n\n    /**\n     * Evaluate all the non-evaluated points of the simplex.\n     *\n     * @param evaluationFunction Evaluation function.\n     * @param comparator Comparator to use to sort simplex vertices from best to worst.\n     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n     * if the maximal number of evaluations is exceeded.\n     */\n    public void evaluate(final MultivariateFunction evaluationFunction,\n                         final Comparator<PointValuePair> comparator) {\n        // Evaluate the objective function at all non-evaluated simplex points.\n        for (int i = 0; i < simplex.length; i++) {\n            final PointValuePair vertex = simplex[i];\n            final double[] point = vertex.getPointRef();\n            if (Double.isNaN(vertex.getValue())) {\n                simplex[i] = new PointValuePair(point, evaluationFunction.value(point), false);\n            }\n        }\n\n        // Sort the simplex from best to worst.\n        Arrays.sort(simplex, comparator);\n    }\n\n    /**\n     * Replace the worst point of the simplex by a new point.\n     *\n     * @param pointValuePair Point to insert.\n     * @param comparator Comparator to use for sorting the simplex vertices\n     * from best to worst.\n     */\n    protected void replaceWorstPoint(PointValuePair pointValuePair,\n                                     final Comparator<PointValuePair> comparator) {\n        for (int i = 0; i < dimension; i++) {\n            if (comparator.compare(simplex[i], pointValuePair) > 0) {\n                PointValuePair tmp = simplex[i];\n                simplex[i] = pointValuePair;\n                pointValuePair = tmp;\n            }\n        }\n        simplex[dimension] = pointValuePair;\n    }\n\n    /**\n     * Get the points of the simplex.\n     *\n     * @return all the simplex points.\n     */\n    public PointValuePair[] getPoints() {\n        final PointValuePair[] copy = new PointValuePair[simplex.length];\n        System.arraycopy(simplex, 0, copy, 0, simplex.length);\n        return copy;\n    }\n\n    /**\n     * Get the simplex point stored at the requested {@code index}.\n     *\n     * @param index Location.\n     * @return the point at location {@code index}.\n     */\n    public PointValuePair getPoint(int index) {\n        if (index < 0 ||\n            index >= simplex.length) {\n            throw new OutOfRangeException(index, 0, simplex.length - 1);\n        }\n        return simplex[index];\n    }\n\n    /**\n     * Store a new point at location {@code index}.\n     * Note that no deep-copy of {@code point} is performed.\n     *\n     * @param index Location.\n     * @param point New value.\n     */\n    protected void setPoint(int index, PointValuePair point) {\n        if (index < 0 ||\n            index >= simplex.length) {\n            throw new OutOfRangeException(index, 0, simplex.length - 1);\n        }\n        simplex[index] = point;\n    }\n\n    /**\n     * Replace all points.\n     * Note that no deep-copy of {@code points} is performed.\n     *\n     * @param points New Points.\n     */\n    protected void setPoints(PointValuePair[] points) {\n        if (points.length != simplex.length) {\n            throw new DimensionMismatchException(points.length, simplex.length);\n        }\n        simplex = points;\n    }\n\n    /**\n     * Create steps for a unit hypercube.\n     *\n     * @param n Dimension of the hypercube.\n     * @param sideLength Length of the sides of the hypercube.\n     * @return the steps.\n     */\n    private static double[] createHypercubeSteps(int n,\n                                                 double sideLength) {\n        final double[] steps = new double[n];\n        for (int i = 0; i < n; i++) {\n            steps[i] = sideLength;\n        }\n        return steps;\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "3",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "evaluationFunction",
                "org.apache.commons.math3.analysis",
                "MultivariateFunction"
            ],
            [
                "comparator",
                "java.util.Comparator",
                "Comparator<PointValuePair>"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getSize",
                "org.apache.commons.math3.optimization.direct",
                "AbstractSimplex",
                "public int getSize()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getPoints",
                "org.apache.commons.math3.optimization.direct",
                "AbstractSimplex",
                "public PointValuePair[] getPoints()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getDimension",
                "org.apache.commons.math3.optimization.direct",
                "AbstractSimplex",
                "public int getDimension()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getPoint",
                "org.apache.commons.math3.optimization.direct",
                "AbstractSimplex",
                "public PointValuePair getPoint(int index)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "value",
                "org.apache.commons.math3.analysis",
                "MultivariateFunction",
                "public abstract double value(double[] arg0)"
            ],
            [
                "reversed",
                "java.util",
                "Comparator",
                "public default Comparator<T> reversed()"
            ],
            [
                "thenComparingDouble",
                "java.util",
                "Comparator",
                "public default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> arg0)"
            ],
            [
                "thenComparing",
                "java.util",
                "Comparator",
                "public default <U> Comparator<T> thenComparing(Function<? super T, ? extends U> arg0, Comparator<? super U> arg1)"
            ],
            [
                "compare",
                "java.util",
                "Comparator",
                "public abstract int compare(T arg0, T arg1)"
            ],
            [
                "thenComparing",
                "java.util",
                "Comparator",
                "public default <U> Comparator<T> thenComparing(Function<? super T, ? extends U> arg0)"
            ],
            [
                "thenComparingLong",
                "java.util",
                "Comparator",
                "public default Comparator<T> thenComparingLong(ToLongFunction<? super T> arg0)"
            ],
            [
                "thenComparingInt",
                "java.util",
                "Comparator",
                "public default Comparator<T> thenComparingInt(ToIntFunction<? super T> arg0)"
            ],
            [
                "equals",
                "java.util",
                "Comparator",
                "public abstract boolean equals(Object arg0)"
            ],
            [
                "thenComparing",
                "java.util",
                "Comparator",
                "public default Comparator<T> thenComparing(Comparator<? super T> arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 15485,
        "oracle": ";",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optimization.direct",
        "className": "AbstractSimplex",
        "javadocTag": "@throws org.apache.commons.math3.exception.TooManyEvaluationsException if the algorithm fails to converge.",
        "methodJavadoc": "    /**\n     * Compute the next simplex of the algorithm.\n     *\n     * @param evaluationFunction Evaluation function.\n     * @param comparator Comparator to use to sort simplex vertices from best\n     * to worst.\n     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n     * if the algorithm fails to converge.\n     */",
        "methodSourceCode": "public abstract void iterate(final MultivariateFunction evaluationFunction, final Comparator<PointValuePair> comparator);",
        "classJavadoc": "/**\n * This class implements the simplex concept.\n * It is intended to be used in conjunction with {@link SimplexOptimizer}.\n * <br/>\n * The initial configuration of the simplex is set by the constructors\n * {@link #AbstractSimplex(double[])} or {@link #AbstractSimplex(double[][])}.\n * The other {@link #AbstractSimplex(int) constructor} will set all steps\n * to 1, thus building a default configuration from a unit hypercube.\n * <br/>\n * Users <em>must</em> call the {@link #build(double[]) build} method in order\n * to create the data structure that will be acted on by the other methods of\n * this class.\n *\n * @see SimplexOptimizer\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optimization.direct;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\n\nimport org.apache.commons.math3.analysis.MultivariateFunction;\nimport org.apache.commons.math3.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.ZeroException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.NullArgumentException;\nimport org.apache.commons.math3.exception.MathIllegalArgumentException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.optimization.PointValuePair;\nimport org.apache.commons.math3.optimization.OptimizationData;\n\n/**\n * This class implements the simplex concept.\n * It is intended to be used in conjunction with {@link SimplexOptimizer}.\n * <br/>\n * The initial configuration of the simplex is set by the constructors\n * {@link #AbstractSimplex(double[])} or {@link #AbstractSimplex(double[][])}.\n * The other {@link #AbstractSimplex(int) constructor} will set all steps\n * to 1, thus building a default configuration from a unit hypercube.\n * <br/>\n * Users <em>must</em> call the {@link #build(double[]) build} method in order\n * to create the data structure that will be acted on by the other methods of\n * this class.\n *\n * @see SimplexOptimizer\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 3.0\n */\n@Deprecated\npublic abstract class AbstractSimplex implements OptimizationData {\n    /** Simplex. */\n    private PointValuePair[] simplex;\n    /** Start simplex configuration. */\n    private double[][] startConfiguration;\n    /** Simplex dimension (must be equal to {@code simplex.length - 1}). */\n    private final int dimension;\n\n    /**\n     * Build a unit hypercube simplex.\n     *\n     * @param n Dimension of the simplex.\n     */\n    protected AbstractSimplex(int n) {\n        this(n, 1d);\n    }\n\n    /**\n     * Build a hypercube simplex with the given side length.\n     *\n     * @param n Dimension of the simplex.\n     * @param sideLength Length of the sides of the hypercube.\n     */\n    protected AbstractSimplex(int n,\n                              double sideLength) {\n        this(createHypercubeSteps(n, sideLength));\n    }\n\n    /**\n     * The start configuration for simplex is built from a box parallel to\n     * the canonical axes of the space. The simplex is the subset of vertices\n     * of a box parallel to the canonical axes. It is built as the path followed\n     * while traveling from one vertex of the box to the diagonally opposite\n     * vertex moving only along the box edges. The first vertex of the box will\n     * be located at the start point of the optimization.\n     * As an example, in dimension 3 a simplex has 4 vertices. Setting the\n     * steps to (1, 10, 2) and the start point to (1, 1, 1) would imply the\n     * start simplex would be: { (1, 1, 1), (2, 1, 1), (2, 11, 1), (2, 11, 3) }.\n     * The first vertex would be set to the start point at (1, 1, 1) and the\n     * last vertex would be set to the diagonally opposite vertex at (2, 11, 3).\n     *\n     * @param steps Steps along the canonical axes representing box edges. They\n     * may be negative but not zero.\n     * @throws NullArgumentException if {@code steps} is {@code null}.\n     * @throws ZeroException if one of the steps is zero.\n     */\n    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\n                if (steps[j] == 0) {\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }\n\n    /**\n     * The real initial simplex will be set up by moving the reference\n     * simplex such that its first point is located at the start point of the\n     * optimization.\n     *\n     * @param referenceSimplex Reference simplex.\n     * @throws NotStrictlyPositiveException if the reference simplex does not\n     * contain at least one point.\n     * @throws DimensionMismatchException if there is a dimension mismatch\n     * in the reference simplex.\n     * @throws IllegalArgumentException if one of its vertices is duplicated.\n     */\n    protected AbstractSimplex(final double[][] referenceSimplex) {\n        if (referenceSimplex.length <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.SIMPLEX_NEED_ONE_POINT,\n                                                   referenceSimplex.length);\n        }\n        dimension = referenceSimplex.length - 1;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        final double[] ref0 = referenceSimplex[0];\n\n        // Loop over vertices.\n        for (int i = 0; i < referenceSimplex.length; i++) {\n            final double[] refI = referenceSimplex[i];\n\n            // Safety checks.\n            if (refI.length != dimension) {\n                throw new DimensionMismatchException(refI.length, dimension);\n            }\n            for (int j = 0; j < i; j++) {\n                final double[] refJ = referenceSimplex[j];\n                boolean allEquals = true;\n                for (int k = 0; k < dimension; k++) {\n                    if (refI[k] != refJ[k]) {\n                        allEquals = false;\n                        break;\n                    }\n                }\n                if (allEquals) {\n                    throw new MathIllegalArgumentException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX,\n                                                           i, j);\n                }\n            }\n\n            // Store vertex i position relative to vertex 0 position.\n            if (i > 0) {\n                final double[] confI = startConfiguration[i - 1];\n                for (int k = 0; k < dimension; k++) {\n                    confI[k] = refI[k] - ref0[k];\n                }\n            }\n        }\n    }\n\n    /**\n     * Get simplex dimension.\n     *\n     * @return the dimension of the simplex.\n     */\n    public int getDimension() {\n        return dimension;\n    }\n\n    /**\n     * Get simplex size.\n     * After calling the {@link #build(double[]) build} method, this method will\n     * will be equivalent to {@code getDimension() + 1}.\n     *\n     * @return the size of the simplex.\n     */\n    public int getSize() {\n        return simplex.length;\n    }\n\n    /**\n     * Compute the next simplex of the algorithm.\n     *\n     * @param evaluationFunction Evaluation function.\n     * @param comparator Comparator to use to sort simplex vertices from best\n     * to worst.\n     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n     * if the algorithm fails to converge.\n     */\n    public abstract void iterate(final MultivariateFunction evaluationFunction,\n                                 final Comparator<PointValuePair> comparator);\n\n    /**\n     * Build an initial simplex.\n     *\n     * @param startPoint First point of the simplex.\n     * @throws DimensionMismatchException if the start point does not match\n     * simplex dimension.\n     */\n    public void build(final double[] startPoint) {\n        if (dimension != startPoint.length) {\n            throw new DimensionMismatchException(dimension, startPoint.length);\n        }\n\n        // Set first vertex.\n        simplex = new PointValuePair[dimension + 1];\n        simplex[0] = new PointValuePair(startPoint, Double.NaN);\n\n        // Set remaining vertices.\n        for (int i = 0; i < dimension; i++) {\n            final double[] confI = startConfiguration[i];\n            final double[] vertexI = new double[dimension];\n            for (int k = 0; k < dimension; k++) {\n                vertexI[k] = startPoint[k] + confI[k];\n            }\n            simplex[i + 1] = new PointValuePair(vertexI, Double.NaN);\n        }\n    }\n\n    /**\n     * Evaluate all the non-evaluated points of the simplex.\n     *\n     * @param evaluationFunction Evaluation function.\n     * @param comparator Comparator to use to sort simplex vertices from best to worst.\n     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n     * if the maximal number of evaluations is exceeded.\n     */\n    public void evaluate(final MultivariateFunction evaluationFunction,\n                         final Comparator<PointValuePair> comparator) {\n        // Evaluate the objective function at all non-evaluated simplex points.\n        for (int i = 0; i < simplex.length; i++) {\n            final PointValuePair vertex = simplex[i];\n            final double[] point = vertex.getPointRef();\n            if (Double.isNaN(vertex.getValue())) {\n                simplex[i] = new PointValuePair(point, evaluationFunction.value(point), false);\n            }\n        }\n\n        // Sort the simplex from best to worst.\n        Arrays.sort(simplex, comparator);\n    }\n\n    /**\n     * Replace the worst point of the simplex by a new point.\n     *\n     * @param pointValuePair Point to insert.\n     * @param comparator Comparator to use for sorting the simplex vertices\n     * from best to worst.\n     */\n    protected void replaceWorstPoint(PointValuePair pointValuePair,\n                                     final Comparator<PointValuePair> comparator) {\n        for (int i = 0; i < dimension; i++) {\n            if (comparator.compare(simplex[i], pointValuePair) > 0) {\n                PointValuePair tmp = simplex[i];\n                simplex[i] = pointValuePair;\n                pointValuePair = tmp;\n            }\n        }\n        simplex[dimension] = pointValuePair;\n    }\n\n    /**\n     * Get the points of the simplex.\n     *\n     * @return all the simplex points.\n     */\n    public PointValuePair[] getPoints() {\n        final PointValuePair[] copy = new PointValuePair[simplex.length];\n        System.arraycopy(simplex, 0, copy, 0, simplex.length);\n        return copy;\n    }\n\n    /**\n     * Get the simplex point stored at the requested {@code index}.\n     *\n     * @param index Location.\n     * @return the point at location {@code index}.\n     */\n    public PointValuePair getPoint(int index) {\n        if (index < 0 ||\n            index >= simplex.length) {\n            throw new OutOfRangeException(index, 0, simplex.length - 1);\n        }\n        return simplex[index];\n    }\n\n    /**\n     * Store a new point at location {@code index}.\n     * Note that no deep-copy of {@code point} is performed.\n     *\n     * @param index Location.\n     * @param point New value.\n     */\n    protected void setPoint(int index, PointValuePair point) {\n        if (index < 0 ||\n            index >= simplex.length) {\n            throw new OutOfRangeException(index, 0, simplex.length - 1);\n        }\n        simplex[index] = point;\n    }\n\n    /**\n     * Replace all points.\n     * Note that no deep-copy of {@code points} is performed.\n     *\n     * @param points New Points.\n     */\n    protected void setPoints(PointValuePair[] points) {\n        if (points.length != simplex.length) {\n            throw new DimensionMismatchException(points.length, simplex.length);\n        }\n        simplex = points;\n    }\n\n    /**\n     * Create steps for a unit hypercube.\n     *\n     * @param n Dimension of the hypercube.\n     * @param sideLength Length of the sides of the hypercube.\n     * @return the steps.\n     */\n    private static double[] createHypercubeSteps(int n,\n                                                 double sideLength) {\n        final double[] steps = new double[n];\n        for (int i = 0; i < n; i++) {\n            steps[i] = sideLength;\n        }\n        return steps;\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "3",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "evaluationFunction",
                "org.apache.commons.math3.analysis",
                "MultivariateFunction"
            ],
            [
                "comparator",
                "java.util.Comparator",
                "Comparator<PointValuePair>"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getDimension",
                "org.apache.commons.math3.optimization.direct",
                "AbstractSimplex",
                "public int getDimension()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getSize",
                "org.apache.commons.math3.optimization.direct",
                "AbstractSimplex",
                "public int getSize()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getPoints",
                "org.apache.commons.math3.optimization.direct",
                "AbstractSimplex",
                "public PointValuePair[] getPoints()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getPoint",
                "org.apache.commons.math3.optimization.direct",
                "AbstractSimplex",
                "public PointValuePair getPoint(int index)"
            ],
            [
                "value",
                "org.apache.commons.math3.analysis",
                "MultivariateFunction",
                "public abstract double value(double[] arg0)"
            ],
            [
                "thenComparing",
                "java.util",
                "Comparator",
                "public default Comparator<T> thenComparing(Comparator<? super T> arg0)"
            ],
            [
                "thenComparingInt",
                "java.util",
                "Comparator",
                "public default Comparator<T> thenComparingInt(ToIntFunction<? super T> arg0)"
            ],
            [
                "thenComparingLong",
                "java.util",
                "Comparator",
                "public default Comparator<T> thenComparingLong(ToLongFunction<? super T> arg0)"
            ],
            [
                "reversed",
                "java.util",
                "Comparator",
                "public default Comparator<T> reversed()"
            ],
            [
                "thenComparingDouble",
                "java.util",
                "Comparator",
                "public default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> arg0)"
            ],
            [
                "equals",
                "java.util",
                "Comparator",
                "public abstract boolean equals(Object arg0)"
            ],
            [
                "compare",
                "java.util",
                "Comparator",
                "public abstract int compare(T arg0, T arg1)"
            ],
            [
                "thenComparing",
                "java.util",
                "Comparator",
                "public default <U> Comparator<T> thenComparing(Function<? super T, ? extends U> arg0)"
            ],
            [
                "thenComparing",
                "java.util",
                "Comparator",
                "public default <U> Comparator<T> thenComparing(Function<? super T, ? extends U> arg0, Comparator<? super U> arg1)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 15490,
        "oracle": ";",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optimization.direct",
        "className": "AbstractSimplex",
        "javadocTag": "@throws org.apache.commons.math3.exception.TooManyEvaluationsException if the maximal number of evaluations is exceeded.",
        "methodJavadoc": "    /**\n     * Evaluate all the non-evaluated points of the simplex.\n     *\n     * @param evaluationFunction Evaluation function.\n     * @param comparator Comparator to use to sort simplex vertices from best to worst.\n     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n     * if the maximal number of evaluations is exceeded.\n     */",
        "methodSourceCode": "public void evaluate(final MultivariateFunction evaluationFunction, final Comparator<PointValuePair> comparator){\n    // Evaluate the objective function at all non-evaluated simplex points.\n    for (int i = 0; i < simplex.length; i++) {\n        final PointValuePair vertex = simplex[i];\n        final double[] point = vertex.getPointRef();\n        if (Double.isNaN(vertex.getValue())) {\n            simplex[i] = new PointValuePair(point, evaluationFunction.value(point), false);\n        }\n    }\n    // Sort the simplex from best to worst.\n    Arrays.sort(simplex, comparator);\n}",
        "classJavadoc": "/**\n * This class implements the simplex concept.\n * It is intended to be used in conjunction with {@link SimplexOptimizer}.\n * <br/>\n * The initial configuration of the simplex is set by the constructors\n * {@link #AbstractSimplex(double[])} or {@link #AbstractSimplex(double[][])}.\n * The other {@link #AbstractSimplex(int) constructor} will set all steps\n * to 1, thus building a default configuration from a unit hypercube.\n * <br/>\n * Users <em>must</em> call the {@link #build(double[]) build} method in order\n * to create the data structure that will be acted on by the other methods of\n * this class.\n *\n * @see SimplexOptimizer\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optimization.direct;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\n\nimport org.apache.commons.math3.analysis.MultivariateFunction;\nimport org.apache.commons.math3.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.ZeroException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.NullArgumentException;\nimport org.apache.commons.math3.exception.MathIllegalArgumentException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.optimization.PointValuePair;\nimport org.apache.commons.math3.optimization.OptimizationData;\n\n/**\n * This class implements the simplex concept.\n * It is intended to be used in conjunction with {@link SimplexOptimizer}.\n * <br/>\n * The initial configuration of the simplex is set by the constructors\n * {@link #AbstractSimplex(double[])} or {@link #AbstractSimplex(double[][])}.\n * The other {@link #AbstractSimplex(int) constructor} will set all steps\n * to 1, thus building a default configuration from a unit hypercube.\n * <br/>\n * Users <em>must</em> call the {@link #build(double[]) build} method in order\n * to create the data structure that will be acted on by the other methods of\n * this class.\n *\n * @see SimplexOptimizer\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 3.0\n */\n@Deprecated\npublic abstract class AbstractSimplex implements OptimizationData {\n    /** Simplex. */\n    private PointValuePair[] simplex;\n    /** Start simplex configuration. */\n    private double[][] startConfiguration;\n    /** Simplex dimension (must be equal to {@code simplex.length - 1}). */\n    private final int dimension;\n\n    /**\n     * Build a unit hypercube simplex.\n     *\n     * @param n Dimension of the simplex.\n     */\n    protected AbstractSimplex(int n) {\n        this(n, 1d);\n    }\n\n    /**\n     * Build a hypercube simplex with the given side length.\n     *\n     * @param n Dimension of the simplex.\n     * @param sideLength Length of the sides of the hypercube.\n     */\n    protected AbstractSimplex(int n,\n                              double sideLength) {\n        this(createHypercubeSteps(n, sideLength));\n    }\n\n    /**\n     * The start configuration for simplex is built from a box parallel to\n     * the canonical axes of the space. The simplex is the subset of vertices\n     * of a box parallel to the canonical axes. It is built as the path followed\n     * while traveling from one vertex of the box to the diagonally opposite\n     * vertex moving only along the box edges. The first vertex of the box will\n     * be located at the start point of the optimization.\n     * As an example, in dimension 3 a simplex has 4 vertices. Setting the\n     * steps to (1, 10, 2) and the start point to (1, 1, 1) would imply the\n     * start simplex would be: { (1, 1, 1), (2, 1, 1), (2, 11, 1), (2, 11, 3) }.\n     * The first vertex would be set to the start point at (1, 1, 1) and the\n     * last vertex would be set to the diagonally opposite vertex at (2, 11, 3).\n     *\n     * @param steps Steps along the canonical axes representing box edges. They\n     * may be negative but not zero.\n     * @throws NullArgumentException if {@code steps} is {@code null}.\n     * @throws ZeroException if one of the steps is zero.\n     */\n    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\n                if (steps[j] == 0) {\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }\n\n    /**\n     * The real initial simplex will be set up by moving the reference\n     * simplex such that its first point is located at the start point of the\n     * optimization.\n     *\n     * @param referenceSimplex Reference simplex.\n     * @throws NotStrictlyPositiveException if the reference simplex does not\n     * contain at least one point.\n     * @throws DimensionMismatchException if there is a dimension mismatch\n     * in the reference simplex.\n     * @throws IllegalArgumentException if one of its vertices is duplicated.\n     */\n    protected AbstractSimplex(final double[][] referenceSimplex) {\n        if (referenceSimplex.length <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.SIMPLEX_NEED_ONE_POINT,\n                                                   referenceSimplex.length);\n        }\n        dimension = referenceSimplex.length - 1;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        final double[] ref0 = referenceSimplex[0];\n\n        // Loop over vertices.\n        for (int i = 0; i < referenceSimplex.length; i++) {\n            final double[] refI = referenceSimplex[i];\n\n            // Safety checks.\n            if (refI.length != dimension) {\n                throw new DimensionMismatchException(refI.length, dimension);\n            }\n            for (int j = 0; j < i; j++) {\n                final double[] refJ = referenceSimplex[j];\n                boolean allEquals = true;\n                for (int k = 0; k < dimension; k++) {\n                    if (refI[k] != refJ[k]) {\n                        allEquals = false;\n                        break;\n                    }\n                }\n                if (allEquals) {\n                    throw new MathIllegalArgumentException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX,\n                                                           i, j);\n                }\n            }\n\n            // Store vertex i position relative to vertex 0 position.\n            if (i > 0) {\n                final double[] confI = startConfiguration[i - 1];\n                for (int k = 0; k < dimension; k++) {\n                    confI[k] = refI[k] - ref0[k];\n                }\n            }\n        }\n    }\n\n    /**\n     * Get simplex dimension.\n     *\n     * @return the dimension of the simplex.\n     */\n    public int getDimension() {\n        return dimension;\n    }\n\n    /**\n     * Get simplex size.\n     * After calling the {@link #build(double[]) build} method, this method will\n     * will be equivalent to {@code getDimension() + 1}.\n     *\n     * @return the size of the simplex.\n     */\n    public int getSize() {\n        return simplex.length;\n    }\n\n    /**\n     * Compute the next simplex of the algorithm.\n     *\n     * @param evaluationFunction Evaluation function.\n     * @param comparator Comparator to use to sort simplex vertices from best\n     * to worst.\n     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n     * if the algorithm fails to converge.\n     */\n    public abstract void iterate(final MultivariateFunction evaluationFunction,\n                                 final Comparator<PointValuePair> comparator);\n\n    /**\n     * Build an initial simplex.\n     *\n     * @param startPoint First point of the simplex.\n     * @throws DimensionMismatchException if the start point does not match\n     * simplex dimension.\n     */\n    public void build(final double[] startPoint) {\n        if (dimension != startPoint.length) {\n            throw new DimensionMismatchException(dimension, startPoint.length);\n        }\n\n        // Set first vertex.\n        simplex = new PointValuePair[dimension + 1];\n        simplex[0] = new PointValuePair(startPoint, Double.NaN);\n\n        // Set remaining vertices.\n        for (int i = 0; i < dimension; i++) {\n            final double[] confI = startConfiguration[i];\n            final double[] vertexI = new double[dimension];\n            for (int k = 0; k < dimension; k++) {\n                vertexI[k] = startPoint[k] + confI[k];\n            }\n            simplex[i + 1] = new PointValuePair(vertexI, Double.NaN);\n        }\n    }\n\n    /**\n     * Evaluate all the non-evaluated points of the simplex.\n     *\n     * @param evaluationFunction Evaluation function.\n     * @param comparator Comparator to use to sort simplex vertices from best to worst.\n     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n     * if the maximal number of evaluations is exceeded.\n     */\n    public void evaluate(final MultivariateFunction evaluationFunction,\n                         final Comparator<PointValuePair> comparator) {\n        // Evaluate the objective function at all non-evaluated simplex points.\n        for (int i = 0; i < simplex.length; i++) {\n            final PointValuePair vertex = simplex[i];\n            final double[] point = vertex.getPointRef();\n            if (Double.isNaN(vertex.getValue())) {\n                simplex[i] = new PointValuePair(point, evaluationFunction.value(point), false);\n            }\n        }\n\n        // Sort the simplex from best to worst.\n        Arrays.sort(simplex, comparator);\n    }\n\n    /**\n     * Replace the worst point of the simplex by a new point.\n     *\n     * @param pointValuePair Point to insert.\n     * @param comparator Comparator to use for sorting the simplex vertices\n     * from best to worst.\n     */\n    protected void replaceWorstPoint(PointValuePair pointValuePair,\n                                     final Comparator<PointValuePair> comparator) {\n        for (int i = 0; i < dimension; i++) {\n            if (comparator.compare(simplex[i], pointValuePair) > 0) {\n                PointValuePair tmp = simplex[i];\n                simplex[i] = pointValuePair;\n                pointValuePair = tmp;\n            }\n        }\n        simplex[dimension] = pointValuePair;\n    }\n\n    /**\n     * Get the points of the simplex.\n     *\n     * @return all the simplex points.\n     */\n    public PointValuePair[] getPoints() {\n        final PointValuePair[] copy = new PointValuePair[simplex.length];\n        System.arraycopy(simplex, 0, copy, 0, simplex.length);\n        return copy;\n    }\n\n    /**\n     * Get the simplex point stored at the requested {@code index}.\n     *\n     * @param index Location.\n     * @return the point at location {@code index}.\n     */\n    public PointValuePair getPoint(int index) {\n        if (index < 0 ||\n            index >= simplex.length) {\n            throw new OutOfRangeException(index, 0, simplex.length - 1);\n        }\n        return simplex[index];\n    }\n\n    /**\n     * Store a new point at location {@code index}.\n     * Note that no deep-copy of {@code point} is performed.\n     *\n     * @param index Location.\n     * @param point New value.\n     */\n    protected void setPoint(int index, PointValuePair point) {\n        if (index < 0 ||\n            index >= simplex.length) {\n            throw new OutOfRangeException(index, 0, simplex.length - 1);\n        }\n        simplex[index] = point;\n    }\n\n    /**\n     * Replace all points.\n     * Note that no deep-copy of {@code points} is performed.\n     *\n     * @param points New Points.\n     */\n    protected void setPoints(PointValuePair[] points) {\n        if (points.length != simplex.length) {\n            throw new DimensionMismatchException(points.length, simplex.length);\n        }\n        simplex = points;\n    }\n\n    /**\n     * Create steps for a unit hypercube.\n     *\n     * @param n Dimension of the hypercube.\n     * @param sideLength Length of the sides of the hypercube.\n     * @return the steps.\n     */\n    private static double[] createHypercubeSteps(int n,\n                                                 double sideLength) {\n        final double[] steps = new double[n];\n        for (int i = 0; i < n; i++) {\n            steps[i] = sideLength;\n        }\n        return steps;\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "3",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "evaluationFunction",
                "org.apache.commons.math3.analysis",
                "MultivariateFunction"
            ],
            [
                "comparator",
                "java.util.Comparator",
                "Comparator<PointValuePair>"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getPoint",
                "org.apache.commons.math3.optimization.direct",
                "AbstractSimplex",
                "public PointValuePair getPoint(int index)"
            ],
            [
                "getPoints",
                "org.apache.commons.math3.optimization.direct",
                "AbstractSimplex",
                "public PointValuePair[] getPoints()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getSize",
                "org.apache.commons.math3.optimization.direct",
                "AbstractSimplex",
                "public int getSize()"
            ],
            [
                "getDimension",
                "org.apache.commons.math3.optimization.direct",
                "AbstractSimplex",
                "public int getDimension()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "value",
                "org.apache.commons.math3.analysis",
                "MultivariateFunction",
                "public abstract double value(double[] arg0)"
            ],
            [
                "thenComparingLong",
                "java.util",
                "Comparator",
                "public default Comparator<T> thenComparingLong(ToLongFunction<? super T> arg0)"
            ],
            [
                "thenComparingInt",
                "java.util",
                "Comparator",
                "public default Comparator<T> thenComparingInt(ToIntFunction<? super T> arg0)"
            ],
            [
                "thenComparing",
                "java.util",
                "Comparator",
                "public default Comparator<T> thenComparing(Comparator<? super T> arg0)"
            ],
            [
                "thenComparing",
                "java.util",
                "Comparator",
                "public default <U> Comparator<T> thenComparing(Function<? super T, ? extends U> arg0, Comparator<? super U> arg1)"
            ],
            [
                "thenComparingDouble",
                "java.util",
                "Comparator",
                "public default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> arg0)"
            ],
            [
                "thenComparing",
                "java.util",
                "Comparator",
                "public default <U> Comparator<T> thenComparing(Function<? super T, ? extends U> arg0)"
            ],
            [
                "compare",
                "java.util",
                "Comparator",
                "public abstract int compare(T arg0, T arg1)"
            ],
            [
                "reversed",
                "java.util",
                "Comparator",
                "public default Comparator<T> reversed()"
            ],
            [
                "equals",
                "java.util",
                "Comparator",
                "public abstract boolean equals(Object arg0)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 15500,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optimization.direct",
        "className": "AbstractSimplex",
        "javadocTag": "@param sideLength Length of the sides of the hypercube.",
        "methodJavadoc": "    /**\n     * Create steps for a unit hypercube.\n     *\n     * @param n Dimension of the hypercube.\n     * @param sideLength Length of the sides of the hypercube.\n     * @return the steps.\n     */",
        "methodSourceCode": "private static double[] createHypercubeSteps(int n, double sideLength){\n    final double[] steps = new double[n];\n    for (int i = 0; i < n; i++) {\n        steps[i] = sideLength;\n    }\n    return steps;\n}",
        "classJavadoc": "/**\n * This class implements the simplex concept.\n * It is intended to be used in conjunction with {@link SimplexOptimizer}.\n * <br/>\n * The initial configuration of the simplex is set by the constructors\n * {@link #AbstractSimplex(double[])} or {@link #AbstractSimplex(double[][])}.\n * The other {@link #AbstractSimplex(int) constructor} will set all steps\n * to 1, thus building a default configuration from a unit hypercube.\n * <br/>\n * Users <em>must</em> call the {@link #build(double[]) build} method in order\n * to create the data structure that will be acted on by the other methods of\n * this class.\n *\n * @see SimplexOptimizer\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optimization.direct;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\n\nimport org.apache.commons.math3.analysis.MultivariateFunction;\nimport org.apache.commons.math3.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.ZeroException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.NullArgumentException;\nimport org.apache.commons.math3.exception.MathIllegalArgumentException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.optimization.PointValuePair;\nimport org.apache.commons.math3.optimization.OptimizationData;\n\n/**\n * This class implements the simplex concept.\n * It is intended to be used in conjunction with {@link SimplexOptimizer}.\n * <br/>\n * The initial configuration of the simplex is set by the constructors\n * {@link #AbstractSimplex(double[])} or {@link #AbstractSimplex(double[][])}.\n * The other {@link #AbstractSimplex(int) constructor} will set all steps\n * to 1, thus building a default configuration from a unit hypercube.\n * <br/>\n * Users <em>must</em> call the {@link #build(double[]) build} method in order\n * to create the data structure that will be acted on by the other methods of\n * this class.\n *\n * @see SimplexOptimizer\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 3.0\n */\n@Deprecated\npublic abstract class AbstractSimplex implements OptimizationData {\n    /** Simplex. */\n    private PointValuePair[] simplex;\n    /** Start simplex configuration. */\n    private double[][] startConfiguration;\n    /** Simplex dimension (must be equal to {@code simplex.length - 1}). */\n    private final int dimension;\n\n    /**\n     * Build a unit hypercube simplex.\n     *\n     * @param n Dimension of the simplex.\n     */\n    protected AbstractSimplex(int n) {\n        this(n, 1d);\n    }\n\n    /**\n     * Build a hypercube simplex with the given side length.\n     *\n     * @param n Dimension of the simplex.\n     * @param sideLength Length of the sides of the hypercube.\n     */\n    protected AbstractSimplex(int n,\n                              double sideLength) {\n        this(createHypercubeSteps(n, sideLength));\n    }\n\n    /**\n     * The start configuration for simplex is built from a box parallel to\n     * the canonical axes of the space. The simplex is the subset of vertices\n     * of a box parallel to the canonical axes. It is built as the path followed\n     * while traveling from one vertex of the box to the diagonally opposite\n     * vertex moving only along the box edges. The first vertex of the box will\n     * be located at the start point of the optimization.\n     * As an example, in dimension 3 a simplex has 4 vertices. Setting the\n     * steps to (1, 10, 2) and the start point to (1, 1, 1) would imply the\n     * start simplex would be: { (1, 1, 1), (2, 1, 1), (2, 11, 1), (2, 11, 3) }.\n     * The first vertex would be set to the start point at (1, 1, 1) and the\n     * last vertex would be set to the diagonally opposite vertex at (2, 11, 3).\n     *\n     * @param steps Steps along the canonical axes representing box edges. They\n     * may be negative but not zero.\n     * @throws NullArgumentException if {@code steps} is {@code null}.\n     * @throws ZeroException if one of the steps is zero.\n     */\n    protected AbstractSimplex(final double[] steps) {\n        if (steps == null) {\n            throw new NullArgumentException();\n        }\n        if (steps.length == 0) {\n            throw new ZeroException();\n        }\n        dimension = steps.length;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        for (int i = 0; i < dimension; i++) {\n            final double[] vertexI = startConfiguration[i];\n            for (int j = 0; j < i + 1; j++) {\n                if (steps[j] == 0) {\n                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);\n                }\n                System.arraycopy(steps, 0, vertexI, 0, j + 1);\n            }\n        }\n    }\n\n    /**\n     * The real initial simplex will be set up by moving the reference\n     * simplex such that its first point is located at the start point of the\n     * optimization.\n     *\n     * @param referenceSimplex Reference simplex.\n     * @throws NotStrictlyPositiveException if the reference simplex does not\n     * contain at least one point.\n     * @throws DimensionMismatchException if there is a dimension mismatch\n     * in the reference simplex.\n     * @throws IllegalArgumentException if one of its vertices is duplicated.\n     */\n    protected AbstractSimplex(final double[][] referenceSimplex) {\n        if (referenceSimplex.length <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.SIMPLEX_NEED_ONE_POINT,\n                                                   referenceSimplex.length);\n        }\n        dimension = referenceSimplex.length - 1;\n\n        // Only the relative position of the n final vertices with respect\n        // to the first one are stored.\n        startConfiguration = new double[dimension][dimension];\n        final double[] ref0 = referenceSimplex[0];\n\n        // Loop over vertices.\n        for (int i = 0; i < referenceSimplex.length; i++) {\n            final double[] refI = referenceSimplex[i];\n\n            // Safety checks.\n            if (refI.length != dimension) {\n                throw new DimensionMismatchException(refI.length, dimension);\n            }\n            for (int j = 0; j < i; j++) {\n                final double[] refJ = referenceSimplex[j];\n                boolean allEquals = true;\n                for (int k = 0; k < dimension; k++) {\n                    if (refI[k] != refJ[k]) {\n                        allEquals = false;\n                        break;\n                    }\n                }\n                if (allEquals) {\n                    throw new MathIllegalArgumentException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX,\n                                                           i, j);\n                }\n            }\n\n            // Store vertex i position relative to vertex 0 position.\n            if (i > 0) {\n                final double[] confI = startConfiguration[i - 1];\n                for (int k = 0; k < dimension; k++) {\n                    confI[k] = refI[k] - ref0[k];\n                }\n            }\n        }\n    }\n\n    /**\n     * Get simplex dimension.\n     *\n     * @return the dimension of the simplex.\n     */\n    public int getDimension() {\n        return dimension;\n    }\n\n    /**\n     * Get simplex size.\n     * After calling the {@link #build(double[]) build} method, this method will\n     * will be equivalent to {@code getDimension() + 1}.\n     *\n     * @return the size of the simplex.\n     */\n    public int getSize() {\n        return simplex.length;\n    }\n\n    /**\n     * Compute the next simplex of the algorithm.\n     *\n     * @param evaluationFunction Evaluation function.\n     * @param comparator Comparator to use to sort simplex vertices from best\n     * to worst.\n     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n     * if the algorithm fails to converge.\n     */\n    public abstract void iterate(final MultivariateFunction evaluationFunction,\n                                 final Comparator<PointValuePair> comparator);\n\n    /**\n     * Build an initial simplex.\n     *\n     * @param startPoint First point of the simplex.\n     * @throws DimensionMismatchException if the start point does not match\n     * simplex dimension.\n     */\n    public void build(final double[] startPoint) {\n        if (dimension != startPoint.length) {\n            throw new DimensionMismatchException(dimension, startPoint.length);\n        }\n\n        // Set first vertex.\n        simplex = new PointValuePair[dimension + 1];\n        simplex[0] = new PointValuePair(startPoint, Double.NaN);\n\n        // Set remaining vertices.\n        for (int i = 0; i < dimension; i++) {\n            final double[] confI = startConfiguration[i];\n            final double[] vertexI = new double[dimension];\n            for (int k = 0; k < dimension; k++) {\n                vertexI[k] = startPoint[k] + confI[k];\n            }\n            simplex[i + 1] = new PointValuePair(vertexI, Double.NaN);\n        }\n    }\n\n    /**\n     * Evaluate all the non-evaluated points of the simplex.\n     *\n     * @param evaluationFunction Evaluation function.\n     * @param comparator Comparator to use to sort simplex vertices from best to worst.\n     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n     * if the maximal number of evaluations is exceeded.\n     */\n    public void evaluate(final MultivariateFunction evaluationFunction,\n                         final Comparator<PointValuePair> comparator) {\n        // Evaluate the objective function at all non-evaluated simplex points.\n        for (int i = 0; i < simplex.length; i++) {\n            final PointValuePair vertex = simplex[i];\n            final double[] point = vertex.getPointRef();\n            if (Double.isNaN(vertex.getValue())) {\n                simplex[i] = new PointValuePair(point, evaluationFunction.value(point), false);\n            }\n        }\n\n        // Sort the simplex from best to worst.\n        Arrays.sort(simplex, comparator);\n    }\n\n    /**\n     * Replace the worst point of the simplex by a new point.\n     *\n     * @param pointValuePair Point to insert.\n     * @param comparator Comparator to use for sorting the simplex vertices\n     * from best to worst.\n     */\n    protected void replaceWorstPoint(PointValuePair pointValuePair,\n                                     final Comparator<PointValuePair> comparator) {\n        for (int i = 0; i < dimension; i++) {\n            if (comparator.compare(simplex[i], pointValuePair) > 0) {\n                PointValuePair tmp = simplex[i];\n                simplex[i] = pointValuePair;\n                pointValuePair = tmp;\n            }\n        }\n        simplex[dimension] = pointValuePair;\n    }\n\n    /**\n     * Get the points of the simplex.\n     *\n     * @return all the simplex points.\n     */\n    public PointValuePair[] getPoints() {\n        final PointValuePair[] copy = new PointValuePair[simplex.length];\n        System.arraycopy(simplex, 0, copy, 0, simplex.length);\n        return copy;\n    }\n\n    /**\n     * Get the simplex point stored at the requested {@code index}.\n     *\n     * @param index Location.\n     * @return the point at location {@code index}.\n     */\n    public PointValuePair getPoint(int index) {\n        if (index < 0 ||\n            index >= simplex.length) {\n            throw new OutOfRangeException(index, 0, simplex.length - 1);\n        }\n        return simplex[index];\n    }\n\n    /**\n     * Store a new point at location {@code index}.\n     * Note that no deep-copy of {@code point} is performed.\n     *\n     * @param index Location.\n     * @param point New value.\n     */\n    protected void setPoint(int index, PointValuePair point) {\n        if (index < 0 ||\n            index >= simplex.length) {\n            throw new OutOfRangeException(index, 0, simplex.length - 1);\n        }\n        simplex[index] = point;\n    }\n\n    /**\n     * Replace all points.\n     * Note that no deep-copy of {@code points} is performed.\n     *\n     * @param points New Points.\n     */\n    protected void setPoints(PointValuePair[] points) {\n        if (points.length != simplex.length) {\n            throw new DimensionMismatchException(points.length, simplex.length);\n        }\n        simplex = points;\n    }\n\n    /**\n     * Create steps for a unit hypercube.\n     *\n     * @param n Dimension of the hypercube.\n     * @param sideLength Length of the sides of the hypercube.\n     * @return the steps.\n     */\n    private static double[] createHypercubeSteps(int n,\n                                                 double sideLength) {\n        final double[] steps = new double[n];\n        for (int i = 0; i < n; i++) {\n            steps[i] = sideLength;\n        }\n        return steps;\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "n",
                "",
                "int"
            ],
            [
                "sideLength",
                "",
                "double"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getPoints",
                "org.apache.commons.math3.optimization.direct",
                "AbstractSimplex",
                "public PointValuePair[] getPoints()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getDimension",
                "org.apache.commons.math3.optimization.direct",
                "AbstractSimplex",
                "public int getDimension()"
            ],
            [
                "getPoint",
                "org.apache.commons.math3.optimization.direct",
                "AbstractSimplex",
                "public PointValuePair getPoint(int index)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getSize",
                "org.apache.commons.math3.optimization.direct",
                "AbstractSimplex",
                "public int getSize()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "equals",
                "",
                "double[]",
                "public boolean equals(Object);"
            ],
            [
                "toString",
                "",
                "double[]",
                "public String toString()"
            ],
            [
                "hashCode",
                "",
                "double[]",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "",
                "double[]",
                "public final native Class getClass();"
            ],
            [
                "clone",
                "",
                "double[]",
                "public T[] clone();"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "length",
                "",
                "double[]",
                "public final int length;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 15518,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optimization.direct",
        "className": "SimplexOptimizer",
        "javadocTag": "@param rel Relative threshold.",
        "methodJavadoc": "    /**\n     * @param rel Relative threshold.\n     * @param abs Absolute threshold.\n     */",
        "methodSourceCode": "public SimplexOptimizer(double rel, double abs){\n    this(new SimpleValueChecker(rel, abs));\n}",
        "classJavadoc": "/**\n * This class implements simplex-based direct search optimization.\n *\n * <p>\n *  Direct search methods only use objective function values, they do\n *  not need derivatives and don't either try to compute approximation\n *  of the derivatives. According to a 1996 paper by Margaret H. Wright\n *  (<a href=\"http://cm.bell-labs.com/cm/cs/doc/96/4-02.ps.gz\">Direct\n *  Search Methods: Once Scorned, Now Respectable</a>), they are used\n *  when either the computation of the derivative is impossible (noisy\n *  functions, unpredictable discontinuities) or difficult (complexity,\n *  computation cost). In the first cases, rather than an optimum, a\n *  <em>not too bad</em> point is desired. In the latter cases, an\n *  optimum is desired but cannot be reasonably found. In all cases\n *  direct search methods can be useful.\n * </p>\n * <p>\n *  Simplex-based direct search methods are based on comparison of\n *  the objective function values at the vertices of a simplex (which is a\n *  set of n+1 points in dimension n) that is updated by the algorithms\n *  steps.\n * <p>\n * <p>\n *  The {@link #setSimplex(AbstractSimplex) setSimplex} method <em>must</em>\n *  be called prior to calling the {@code optimize} method.\n * </p>\n * <p>\n *  Each call to {@link #optimize(int,MultivariateFunction,GoalType,double[])\n *  optimize} will re-use the start configuration of the current simplex and\n *  move it such that its first vertex is at the provided start point of the\n *  optimization. If the {@code optimize} method is called to solve a different\n *  problem and the number of parameters change, the simplex must be\n *  re-initialized to one with the appropriate dimensions.\n * </p>\n * <p>\n *  Convergence is checked by providing the <em>worst</em> points of\n *  previous and current simplex to the convergence checker, not the best\n *  ones.\n * </p>\n * <p>\n * This simplex optimizer implementation does not directly support constrained\n * optimization with simple bounds, so for such optimizations, either a more\n * dedicated method must be used like {@link CMAESOptimizer} or {@link\n * BOBYQAOptimizer}, or the optimized method must be wrapped in an adapter like\n * {@link MultivariateFunctionMappingAdapter} or {@link\n * MultivariateFunctionPenaltyAdapter}.\n * </p>\n *\n * @see AbstractSimplex\n * @see MultivariateFunctionMappingAdapter\n * @see MultivariateFunctionPenaltyAdapter\n * @see CMAESOptimizer\n * @see BOBYQAOptimizer\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optimization.direct;\n\nimport java.util.Comparator;\n\nimport org.apache.commons.math3.analysis.MultivariateFunction;\nimport org.apache.commons.math3.exception.NullArgumentException;\nimport org.apache.commons.math3.optimization.GoalType;\nimport org.apache.commons.math3.optimization.ConvergenceChecker;\nimport org.apache.commons.math3.optimization.PointValuePair;\nimport org.apache.commons.math3.optimization.SimpleValueChecker;\nimport org.apache.commons.math3.optimization.MultivariateOptimizer;\nimport org.apache.commons.math3.optimization.OptimizationData;\n\n/**\n * This class implements simplex-based direct search optimization.\n *\n * <p>\n *  Direct search methods only use objective function values, they do\n *  not need derivatives and don't either try to compute approximation\n *  of the derivatives. According to a 1996 paper by Margaret H. Wright\n *  (<a href=\"http://cm.bell-labs.com/cm/cs/doc/96/4-02.ps.gz\">Direct\n *  Search Methods: Once Scorned, Now Respectable</a>), they are used\n *  when either the computation of the derivative is impossible (noisy\n *  functions, unpredictable discontinuities) or difficult (complexity,\n *  computation cost). In the first cases, rather than an optimum, a\n *  <em>not too bad</em> point is desired. In the latter cases, an\n *  optimum is desired but cannot be reasonably found. In all cases\n *  direct search methods can be useful.\n * </p>\n * <p>\n *  Simplex-based direct search methods are based on comparison of\n *  the objective function values at the vertices of a simplex (which is a\n *  set of n+1 points in dimension n) that is updated by the algorithms\n *  steps.\n * <p>\n * <p>\n *  The {@link #setSimplex(AbstractSimplex) setSimplex} method <em>must</em>\n *  be called prior to calling the {@code optimize} method.\n * </p>\n * <p>\n *  Each call to {@link #optimize(int,MultivariateFunction,GoalType,double[])\n *  optimize} will re-use the start configuration of the current simplex and\n *  move it such that its first vertex is at the provided start point of the\n *  optimization. If the {@code optimize} method is called to solve a different\n *  problem and the number of parameters change, the simplex must be\n *  re-initialized to one with the appropriate dimensions.\n * </p>\n * <p>\n *  Convergence is checked by providing the <em>worst</em> points of\n *  previous and current simplex to the convergence checker, not the best\n *  ones.\n * </p>\n * <p>\n * This simplex optimizer implementation does not directly support constrained\n * optimization with simple bounds, so for such optimizations, either a more\n * dedicated method must be used like {@link CMAESOptimizer} or {@link\n * BOBYQAOptimizer}, or the optimized method must be wrapped in an adapter like\n * {@link MultivariateFunctionMappingAdapter} or {@link\n * MultivariateFunctionPenaltyAdapter}.\n * </p>\n *\n * @see AbstractSimplex\n * @see MultivariateFunctionMappingAdapter\n * @see MultivariateFunctionPenaltyAdapter\n * @see CMAESOptimizer\n * @see BOBYQAOptimizer\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 3.0\n */\n@SuppressWarnings(\"boxing\") // deprecated anyway\n@Deprecated\npublic class SimplexOptimizer\n    extends BaseAbstractMultivariateOptimizer<MultivariateFunction>\n    implements MultivariateOptimizer {\n    /** Simplex. */\n    private AbstractSimplex simplex;\n\n    /**\n     * Constructor using a default {@link SimpleValueChecker convergence\n     * checker}.\n     * @deprecated See {@link SimpleValueChecker#SimpleValueChecker()}\n     */\n    @Deprecated\n    public SimplexOptimizer() {\n        this(new SimpleValueChecker());\n    }\n\n    /**\n     * @param checker Convergence checker.\n     */\n    public SimplexOptimizer(ConvergenceChecker<PointValuePair> checker) {\n        super(checker);\n    }\n\n    /**\n     * @param rel Relative threshold.\n     * @param abs Absolute threshold.\n     */\n    public SimplexOptimizer(double rel, double abs) {\n        this(new SimpleValueChecker(rel, abs));\n    }\n\n    /**\n     * Set the simplex algorithm.\n     *\n     * @param simplex Simplex.\n     * @deprecated As of 3.1. The initial simplex can now be passed as an\n     * argument of the {@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])}\n     * method.\n     */\n    @Deprecated\n    public void setSimplex(AbstractSimplex simplex) {\n        parseOptimizationData(simplex);\n    }\n\n    /**\n     * Optimize an objective function.\n     *\n     * @param maxEval Allowed number of evaluations of the objective function.\n     * @param f Objective function.\n     * @param goalType Optimization type.\n     * @param optData Optimization data. The following data will be looked for:\n     * <ul>\n     *  <li>{@link org.apache.commons.math3.optimization.InitialGuess InitialGuess}</li>\n     *  <li>{@link AbstractSimplex}</li>\n     * </ul>\n     * @return the point/value pair giving the optimal value for objective\n     * function.\n     */\n    @Override\n    protected PointValuePair optimizeInternal(int maxEval, MultivariateFunction f,\n                                              GoalType goalType,\n                                              OptimizationData... optData) {\n        // Scan \"optData\" for the input specific to this optimizer.\n        parseOptimizationData(optData);\n\n        // The parent's method will retrieve the common parameters from\n        // \"optData\" and call \"doOptimize\".\n        return super.optimizeInternal(maxEval, f, goalType, optData);\n    }\n\n    /**\n     * Scans the list of (required and optional) optimization data that\n     * characterize the problem.\n     *\n     * @param optData Optimization data. The following data will be looked for:\n     * <ul>\n     *  <li>{@link AbstractSimplex}</li>\n     * </ul>\n     */\n    private void parseOptimizationData(OptimizationData... optData) {\n        // The existing values (as set by the previous call) are reused if\n        // not provided in the argument list.\n        for (OptimizationData data : optData) {\n            if (data instanceof AbstractSimplex) {\n                simplex = (AbstractSimplex) data;\n                continue;\n            }\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize() {\n        if (simplex == null) {\n            throw new NullArgumentException();\n        }\n\n        // Indirect call to \"computeObjectiveValue\" in order to update the\n        // evaluations counter.\n        final MultivariateFunction evalFunc\n            = new MultivariateFunction() {\n                /** {@inheritDoc} */\n                public double value(double[] point) {\n                    return computeObjectiveValue(point);\n                }\n            };\n\n        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;\n        final Comparator<PointValuePair> comparator\n            = new Comparator<PointValuePair>() {\n            /** {@inheritDoc} */\n            public int compare(final PointValuePair o1,\n                               final PointValuePair o2) {\n                final double v1 = o1.getValue();\n                final double v2 = o2.getValue();\n                return isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);\n            }\n        };\n\n        // Initialize search.\n        simplex.build(getStartPoint());\n        simplex.evaluate(evalFunc, comparator);\n\n        PointValuePair[] previous = null;\n        int iteration = 0;\n        final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();\n        while (true) {\n            if (iteration > 0) {\n                boolean converged = true;\n                for (int i = 0; i < simplex.getSize(); i++) {\n                    PointValuePair prev = previous[i];\n                    converged = converged &&\n                        checker.converged(iteration, prev, simplex.getPoint(i));\n                }\n                if (converged) {\n                    // We have found an optimum.\n                    return simplex.getPoint(0);\n                }\n            }\n\n            // We still need to search.\n            previous = simplex.getPoints();\n            simplex.iterate(evalFunc, comparator);\n            ++iteration;\n        }\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "rel",
                "",
                "double"
            ],
            [
                "abs",
                "",
                "double"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getUpperBound",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public double[] getUpperBound()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public PointValuePair optimize(int arg0, FUNC arg1, GoalType arg2, double[] arg3)"
            ],
            [
                "getGoalType",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public GoalType getGoalType()"
            ],
            [
                "computeObjectiveValue",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "protected double computeObjectiveValue(double[] arg0)"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public transient PointValuePair optimize(int arg0, FUNC arg1, GoalType arg2, OptimizationData[] arg3)"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "optimizeInternal",
                "org.apache.commons.math3.optimization.direct",
                "SimplexOptimizer",
                "protected PointValuePair optimizeInternal(int maxEval, MultivariateFunction f, GoalType goalType, OptimizationData... optData)"
            ],
            [
                "getLowerBound",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public double[] getLowerBound()"
            ],
            [
                "getConvergenceChecker",
                "org.apache.commons.math3.optimization",
                "BaseOptimizer",
                "public abstract ConvergenceChecker<PAIR> getConvergenceChecker()"
            ],
            [
                "getEvaluations",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public int getEvaluations()"
            ],
            [
                "doOptimize",
                "org.apache.commons.math3.optimization.direct",
                "SimplexOptimizer",
                "protected PointValuePair doOptimize()"
            ],
            [
                "getConvergenceChecker",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public ConvergenceChecker<PointValuePair> getConvergenceChecker()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "optimizeInternal",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "protected PointValuePair optimizeInternal(int arg0, FUNC arg1, GoalType arg2, double[] arg3)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getStartPoint",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public double[] getStartPoint()"
            ],
            [
                "getMaxEvaluations",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public int getMaxEvaluations()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "evaluations",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "protected Incrementor evaluations;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 15520,
        "oracle": "lowerBound < upperBound;",
        "oracleType": "PRE",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optimization.direct",
        "className": "BOBYQAOptimizer",
        "javadocTag": "@param lowerBound Lower bounds.",
        "methodJavadoc": "    /**\n     *     This subroutine seeks the least value of a function of many variables,\n     *     by applying a trust region method that forms quadratic models by\n     *     interpolation. There is usually some freedom in the interpolation\n     *     conditions, which is taken up by minimizing the Frobenius norm of\n     *     the change to the second derivative of the model, beginning with the\n     *     zero matrix. The values of the variables are constrained by upper and\n     *     lower bounds. The arguments of the subroutine are as follows.\n     *\n     *     N must be set to the number of variables and must be at least two.\n     *     NPT is the number of interpolation conditions. Its value must be in\n     *       the interval [N+2,(N+1)(N+2)/2]. Choices that exceed 2*N+1 are not\n     *       recommended.\n     *     Initial values of the variables must be set in X(1),X(2),...,X(N). They\n     *       will be changed to the values that give the least calculated F.\n     *     For I=1,2,...,N, XL(I) and XU(I) must provide the lower and upper\n     *       bounds, respectively, on X(I). The construction of quadratic models\n     *       requires XL(I) to be strictly less than XU(I) for each I. Further,\n     *       the contribution to a model from changes to the I-th variable is\n     *       damaged severely by rounding errors if XU(I)-XL(I) is too small.\n     *     RHOBEG and RHOEND must be set to the initial and final values of a trust\n     *       region radius, so both must be positive with RHOEND no greater than\n     *       RHOBEG. Typically, RHOBEG should be about one tenth of the greatest\n     *       expected change to a variable, while RHOEND should indicate the\n     *       accuracy that is required in the final values of the variables. An\n     *       error return occurs if any of the differences XU(I)-XL(I), I=1,...,N,\n     *       is less than 2*RHOBEG.\n     *     MAXFUN must be set to an upper bound on the number of calls of CALFUN.\n     *     The array W will be used for working space. Its length must be at least\n     *       (NPT+5)*(NPT+N)+3*N*(N+5)/2.\n     *\n     * @param lowerBound Lower bounds.\n     * @param upperBound Upper bounds.\n     * @return the value of the objective at the optimum.\n     */",
        "methodSourceCode": "private double bobyqa(double[] lowerBound, double[] upperBound){\n    // XXX\n    printMethod();\n    final int n = currentBest.getDimension();\n    // Return if there is insufficient space between the bounds. Modify the\n    // initial X if necessary in order to avoid conflicts between the bounds\n    // and the construction of the first quadratic model. The lower and upper\n    // bounds on moves from the updated X are set now, in the ISL and ISU\n    // partitions of W, in order to provide useful and exact information about\n    // components of X that become within distance RHOBEG from their bounds.\n    for (int j = 0; j < n; j++) {\n        final double boundDiff = boundDifference[j];\n        lowerDifference.setEntry(j, lowerBound[j] - currentBest.getEntry(j));\n        upperDifference.setEntry(j, upperBound[j] - currentBest.getEntry(j));\n        if (lowerDifference.getEntry(j) >= -initialTrustRegionRadius) {\n            if (lowerDifference.getEntry(j) >= ZERO) {\n                currentBest.setEntry(j, lowerBound[j]);\n                lowerDifference.setEntry(j, ZERO);\n                upperDifference.setEntry(j, boundDiff);\n            } else {\n                currentBest.setEntry(j, lowerBound[j] + initialTrustRegionRadius);\n                lowerDifference.setEntry(j, -initialTrustRegionRadius);\n                // Computing MAX\n                final double deltaOne = upperBound[j] - currentBest.getEntry(j);\n                upperDifference.setEntry(j, FastMath.max(deltaOne, initialTrustRegionRadius));\n            }\n        } else if (upperDifference.getEntry(j) <= initialTrustRegionRadius) {\n            if (upperDifference.getEntry(j) <= ZERO) {\n                currentBest.setEntry(j, upperBound[j]);\n                lowerDifference.setEntry(j, -boundDiff);\n                upperDifference.setEntry(j, ZERO);\n            } else {\n                currentBest.setEntry(j, upperBound[j] - initialTrustRegionRadius);\n                // Computing MIN\n                final double deltaOne = lowerBound[j] - currentBest.getEntry(j);\n                final double deltaTwo = -initialTrustRegionRadius;\n                lowerDifference.setEntry(j, FastMath.min(deltaOne, deltaTwo));\n                upperDifference.setEntry(j, initialTrustRegionRadius);\n            }\n        }\n    }\n    // Make the call of BOBYQB.\n    return bobyqb(lowerBound, upperBound);\n}",
        "classJavadoc": "/**\n * Powell's BOBYQA algorithm. This implementation is translated and\n * adapted from the Fortran version available\n * <a href=\"http://plato.asu.edu/ftp/other_software/bobyqa.zip\">here</a>.\n * See <a href=\"http://www.optimization-online.org/DB_HTML/2010/05/2616.html\">\n * this paper</a> for an introduction.\n * <br/>\n * BOBYQA is particularly well suited for high dimensional problems\n * where derivatives are not available. In most cases it outperforms the\n * {@link PowellOptimizer} significantly. Stochastic algorithms like\n * {@link CMAESOptimizer} succeed more often than BOBYQA, but are more\n * expensive. BOBYQA could also be considered as a replacement of any\n * derivative-based optimizer when the derivatives are approximated by\n * finite differences.\n *\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// CHECKSTYLE: stop all\npackage org.apache.commons.math3.optimization.direct;\n\nimport org.apache.commons.math3.analysis.MultivariateFunction;\nimport org.apache.commons.math3.exception.MathIllegalStateException;\nimport org.apache.commons.math3.exception.NumberIsTooSmallException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.ArrayRealVector;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.optimization.GoalType;\nimport org.apache.commons.math3.optimization.PointValuePair;\nimport org.apache.commons.math3.optimization.MultivariateOptimizer;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n * Powell's BOBYQA algorithm. This implementation is translated and\n * adapted from the Fortran version available\n * <a href=\"http://plato.asu.edu/ftp/other_software/bobyqa.zip\">here</a>.\n * See <a href=\"http://www.optimization-online.org/DB_HTML/2010/05/2616.html\">\n * this paper</a> for an introduction.\n * <br/>\n * BOBYQA is particularly well suited for high dimensional problems\n * where derivatives are not available. In most cases it outperforms the\n * {@link PowellOptimizer} significantly. Stochastic algorithms like\n * {@link CMAESOptimizer} succeed more often than BOBYQA, but are more\n * expensive. BOBYQA could also be considered as a replacement of any\n * derivative-based optimizer when the derivatives are approximated by\n * finite differences.\n *\n * @deprecated As of 3.1 (to be removed in 4.0).\n * @since 3.0\n */\n@Deprecated\npublic class BOBYQAOptimizer\n    extends BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>\n    implements MultivariateOptimizer {\n    /** Minimum dimension of the problem: {@value} */\n    public static final int MINIMUM_PROBLEM_DIMENSION = 2;\n    /** Default value for {@link #initialTrustRegionRadius}: {@value} . */\n    public static final double DEFAULT_INITIAL_RADIUS = 10.0;\n    /** Default value for {@link #stoppingTrustRegionRadius}: {@value} . */\n    public static final double DEFAULT_STOPPING_RADIUS = 1E-8;\n    /** Constant 0. */\n    private static final double ZERO = 0d;\n    /** Constant 1. */\n    private static final double ONE = 1d;\n    /** Constant 2. */\n    private static final double TWO = 2d;\n    /** Constant 10. */\n    private static final double TEN = 10d;\n    /** Constant 16. */\n    private static final double SIXTEEN = 16d;\n    /** Constant 250. */\n    private static final double TWO_HUNDRED_FIFTY = 250d;\n    /** Constant -1. */\n    private static final double MINUS_ONE = -ONE;\n    /** Constant 1/2. */\n    private static final double HALF = ONE / 2;\n    /** Constant 1/4. */\n    private static final double ONE_OVER_FOUR = ONE / 4;\n    /** Constant 1/8. */\n    private static final double ONE_OVER_EIGHT = ONE / 8;\n    /** Constant 1/10. */\n    private static final double ONE_OVER_TEN = ONE / 10;\n    /** Constant 1/1000. */\n    private static final double ONE_OVER_A_THOUSAND = ONE / 1000;\n\n    /**\n     * numberOfInterpolationPoints XXX\n     */\n    private final int numberOfInterpolationPoints;\n    /**\n     * initialTrustRegionRadius XXX\n     */\n    private double initialTrustRegionRadius;\n    /**\n     * stoppingTrustRegionRadius XXX\n     */\n    private final double stoppingTrustRegionRadius;\n    /** Goal type (minimize or maximize). */\n    private boolean isMinimize;\n    /**\n     * Current best values for the variables to be optimized.\n     * The vector will be changed in-place to contain the values of the least\n     * calculated objective function values.\n     */\n    private ArrayRealVector currentBest;\n    /** Differences between the upper and lower bounds. */\n    private double[] boundDifference;\n    /**\n     * Index of the interpolation point at the trust region center.\n     */\n    private int trustRegionCenterInterpolationPointIndex;\n    /**\n     * Last <em>n</em> columns of matrix H (where <em>n</em> is the dimension\n     * of the problem).\n     * XXX \"bmat\" in the original code.\n     */\n    private Array2DRowRealMatrix bMatrix;\n    /**\n     * Factorization of the leading <em>npt</em> square submatrix of H, this\n     * factorization being Z Z<sup>T</sup>, which provides both the correct\n     * rank and positive semi-definiteness.\n     * XXX \"zmat\" in the original code.\n     */\n    private Array2DRowRealMatrix zMatrix;\n    /**\n     * Coordinates of the interpolation points relative to {@link #originShift}.\n     * XXX \"xpt\" in the original code.\n     */\n    private Array2DRowRealMatrix interpolationPoints;\n    /**\n     * Shift of origin that should reduce the contributions from rounding\n     * errors to values of the model and Lagrange functions.\n     * XXX \"xbase\" in the original code.\n     */\n    private ArrayRealVector originShift;\n    /**\n     * Values of the objective function at the interpolation points.\n     * XXX \"fval\" in the original code.\n     */\n    private ArrayRealVector fAtInterpolationPoints;\n    /**\n     * Displacement from {@link #originShift} of the trust region center.\n     * XXX \"xopt\" in the original code.\n     */\n    private ArrayRealVector trustRegionCenterOffset;\n    /**\n     * Gradient of the quadratic model at {@link #originShift} +\n     * {@link #trustRegionCenterOffset}.\n     * XXX \"gopt\" in the original code.\n     */\n    private ArrayRealVector gradientAtTrustRegionCenter;\n    /**\n     * Differences {@link #getLowerBound()} - {@link #originShift}.\n     * All the components of every {@link #trustRegionCenterOffset} are going\n     * to satisfy the bounds<br/>\n     * {@link #getLowerBound() lowerBound}<sub>i</sub> &le;\n     * {@link #trustRegionCenterOffset}<sub>i</sub>,<br/>\n     * with appropriate equalities when {@link #trustRegionCenterOffset} is\n     * on a constraint boundary.\n     * XXX \"sl\" in the original code.\n     */\n    private ArrayRealVector lowerDifference;\n    /**\n     * Differences {@link #getUpperBound()} - {@link #originShift}\n     * All the components of every {@link #trustRegionCenterOffset} are going\n     * to satisfy the bounds<br/>\n     *  {@link #trustRegionCenterOffset}<sub>i</sub> &le;\n     *  {@link #getUpperBound() upperBound}<sub>i</sub>,<br/>\n     * with appropriate equalities when {@link #trustRegionCenterOffset} is\n     * on a constraint boundary.\n     * XXX \"su\" in the original code.\n     */\n    private ArrayRealVector upperDifference;\n    /**\n     * Parameters of the implicit second derivatives of the quadratic model.\n     * XXX \"pq\" in the original code.\n     */\n    private ArrayRealVector modelSecondDerivativesParameters;\n    /**\n     * Point chosen by function {@link #trsbox(double,ArrayRealVector,\n     * ArrayRealVector, ArrayRealVector,ArrayRealVector,ArrayRealVector) trsbox}\n     * or {@link #altmov(int,double) altmov}.\n     * Usually {@link #originShift} + {@link #newPoint} is the vector of\n     * variables for the next evaluation of the objective function.\n     * It also satisfies the constraints indicated in {@link #lowerDifference}\n     * and {@link #upperDifference}.\n     * XXX \"xnew\" in the original code.\n     */\n    private ArrayRealVector newPoint;\n    /**\n     * Alternative to {@link #newPoint}, chosen by\n     * {@link #altmov(int,double) altmov}.\n     * It may replace {@link #newPoint} in order to increase the denominator\n     * in the {@link #update(double, double, int) updating procedure}.\n     * XXX \"xalt\" in the original code.\n     */\n    private ArrayRealVector alternativeNewPoint;\n    /**\n     * Trial step from {@link #trustRegionCenterOffset} which is usually\n     * {@link #newPoint} - {@link #trustRegionCenterOffset}.\n     * XXX \"d__\" in the original code.\n     */\n    private ArrayRealVector trialStepPoint;\n    /**\n     * Values of the Lagrange functions at a new point.\n     * XXX \"vlag\" in the original code.\n     */\n    private ArrayRealVector lagrangeValuesAtNewPoint;\n    /**\n     * Explicit second derivatives of the quadratic model.\n     * XXX \"hq\" in the original code.\n     */\n    private ArrayRealVector modelSecondDerivativesValues;\n\n    /**\n     * @param numberOfInterpolationPoints Number of interpolation conditions.\n     * For a problem of dimension {@code n}, its value must be in the interval\n     * {@code [n+2, (n+1)(n+2)/2]}.\n     * Choices that exceed {@code 2n+1} are not recommended.\n     */\n    public BOBYQAOptimizer(int numberOfInterpolationPoints) {\n        this(numberOfInterpolationPoints,\n             DEFAULT_INITIAL_RADIUS,\n             DEFAULT_STOPPING_RADIUS);\n    }\n\n    /**\n     * @param numberOfInterpolationPoints Number of interpolation conditions.\n     * For a problem of dimension {@code n}, its value must be in the interval\n     * {@code [n+2, (n+1)(n+2)/2]}.\n     * Choices that exceed {@code 2n+1} are not recommended.\n     * @param initialTrustRegionRadius Initial trust region radius.\n     * @param stoppingTrustRegionRadius Stopping trust region radius.\n     */\n    public BOBYQAOptimizer(int numberOfInterpolationPoints,\n                           double initialTrustRegionRadius,\n                           double stoppingTrustRegionRadius) {\n        super(null); // No custom convergence criterion.\n        this.numberOfInterpolationPoints = numberOfInterpolationPoints;\n        this.initialTrustRegionRadius = initialTrustRegionRadius;\n        this.stoppingTrustRegionRadius = stoppingTrustRegionRadius;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize() {\n        final double[] lowerBound = getLowerBound();\n        final double[] upperBound = getUpperBound();\n\n        // Validity checks.\n        setup(lowerBound, upperBound);\n\n        isMinimize = (getGoalType() == GoalType.MINIMIZE);\n        currentBest = new ArrayRealVector(getStartPoint());\n\n        final double value = bobyqa(lowerBound, upperBound);\n\n        return new PointValuePair(currentBest.getDataRef(),\n                                      isMinimize ? value : -value);\n    }\n\n    /**\n     *     This subroutine seeks the least value of a function of many variables,\n     *     by applying a trust region method that forms quadratic models by\n     *     interpolation. There is usually some freedom in the interpolation\n     *     conditions, which is taken up by minimizing the Frobenius norm of\n     *     the change to the second derivative of the model, beginning with the\n     *     zero matrix. The values of the variables are constrained by upper and\n     *     lower bounds. The arguments of the subroutine are as follows.\n     *\n     *     N must be set to the number of variables and must be at least two.\n     *     NPT is the number of interpolation conditions. Its value must be in\n     *       the interval [N+2,(N+1)(N+2)/2]. Choices that exceed 2*N+1 are not\n     *       recommended.\n     *     Initial values of the variables must be set in X(1),X(2),...,X(N). They\n     *       will be changed to the values that give the least calculated F.\n     *     For I=1,2,...,N, XL(I) and XU(I) must provide the lower and upper\n     *       bounds, respectively, on X(I). The construction of quadratic models\n     *       requires XL(I) to be strictly less than XU(I) for each I. Further,\n     *       the contribution to a model from changes to the I-th variable is\n     *       damaged severely by rounding errors if XU(I)-XL(I) is too small.\n     *     RHOBEG and RHOEND must be set to the initial and final values of a trust\n     *       region radius, so both must be positive with RHOEND no greater than\n     *       RHOBEG. Typically, RHOBEG should be about one tenth of the greatest\n     *       expected change to a variable, while RHOEND should indicate the\n     *       accuracy that is required in the final values of the variables. An\n     *       error return occurs if any of the differences XU(I)-XL(I), I=1,...,N,\n     *       is less than 2*RHOBEG.\n     *     MAXFUN must be set to an upper bound on the number of calls of CALFUN.\n     *     The array W will be used for working space. Its length must be at least\n     *       (NPT+5)*(NPT+N)+3*N*(N+5)/2.\n     *\n     * @param lowerBound Lower bounds.\n     * @param upperBound Upper bounds.\n     * @return the value of the objective at the optimum.\n     */\n    private double bobyqa(double[] lowerBound,\n                          double[] upperBound) {\n        printMethod(); // XXX\n\n        final int n = currentBest.getDimension();\n\n        // Return if there is insufficient space between the bounds. Modify the\n        // initial X if necessary in order to avoid conflicts between the bounds\n        // and the construction of the first quadratic model. The lower and upper\n        // bounds on moves from the updated X are set now, in the ISL and ISU\n        // partitions of W, in order to provide useful and exact information about\n        // components of X that become within distance RHOBEG from their bounds.\n\n        for (int j = 0; j < n; j++) {\n            final double boundDiff = boundDifference[j];\n            lowerDifference.setEntry(j, lowerBound[j] - currentBest.getEntry(j));\n            upperDifference.setEntry(j, upperBound[j] - currentBest.getEntry(j));\n            if (lowerDifference.getEntry(j) >= -initialTrustRegionRadius) {\n                if (lowerDifference.getEntry(j) >= ZERO) {\n                    currentBest.setEntry(j, lowerBound[j]);\n                    lowerDifference.setEntry(j, ZERO);\n                    upperDifference.setEntry(j, boundDiff);\n                } else {\n                    currentBest.setEntry(j, lowerBound[j] + initialTrustRegionRadius);\n                    lowerDifference.setEntry(j, -initialTrustRegionRadius);\n                    // Computing MAX\n                    final double deltaOne = upperBound[j] - currentBest.getEntry(j);\n                    upperDifference.setEntry(j, FastMath.max(deltaOne, initialTrustRegionRadius));\n                }\n            } else if (upperDifference.getEntry(j) <= initialTrustRegionRadius) {\n                if (upperDifference.getEntry(j) <= ZERO) {\n                    currentBest.setEntry(j, upperBound[j]);\n                    lowerDifference.setEntry(j, -boundDiff);\n                    upperDifference.setEntry(j, ZERO);\n                } else {\n                    currentBest.setEntry(j, upperBound[j] - initialTrustRegionRadius);\n                    // Computing MIN\n                    final double deltaOne = lowerBound[j] - currentBest.getEntry(j);\n                    final double deltaTwo = -initialTrustRegionRadius;\n                    lowerDifference.setEntry(j, FastMath.min(deltaOne, deltaTwo));\n                    upperDifference.setEntry(j, initialTrustRegionRadius);\n                }\n            }\n        }\n\n        // Make the call of BOBYQB.\n\n        return bobyqb(lowerBound, upperBound);\n    } // bobyqa\n\n    // ----------------------------------------------------------------------------------------\n\n    /**\n     *     The arguments N, NPT, X, XL, XU, RHOBEG, RHOEND, IPRINT and MAXFUN\n     *       are identical to the corresponding arguments in SUBROUTINE BOBYQA.\n     *     XBASE holds a shift of origin that should reduce the contributions\n     *       from rounding errors to values of the model and Lagrange functions.\n     *     XPT is a two-dimensional array that holds the coordinates of the\n     *       interpolation points relative to XBASE.\n     *     FVAL holds the values of F at the interpolation points.\n     *     XOPT is set to the displacement from XBASE of the trust region centre.\n     *     GOPT holds the gradient of the quadratic model at XBASE+XOPT.\n     *     HQ holds the explicit second derivatives of the quadratic model.\n     *     PQ contains the parameters of the implicit second derivatives of the\n     *       quadratic model.\n     *     BMAT holds the last N columns of H.\n     *     ZMAT holds the factorization of the leading NPT by NPT submatrix of H,\n     *       this factorization being ZMAT times ZMAT^T, which provides both the\n     *       correct rank and positive semi-definiteness.\n     *     NDIM is the first dimension of BMAT and has the value NPT+N.\n     *     SL and SU hold the differences XL-XBASE and XU-XBASE, respectively.\n     *       All the components of every XOPT are going to satisfy the bounds\n     *       SL(I) .LEQ. XOPT(I) .LEQ. SU(I), with appropriate equalities when\n     *       XOPT is on a constraint boundary.\n     *     XNEW is chosen by SUBROUTINE TRSBOX or ALTMOV. Usually XBASE+XNEW is the\n     *       vector of variables for the next call of CALFUN. XNEW also satisfies\n     *       the SL and SU constraints in the way that has just been mentioned.\n     *     XALT is an alternative to XNEW, chosen by ALTMOV, that may replace XNEW\n     *       in order to increase the denominator in the updating of UPDATE.\n     *     D is reserved for a trial step from XOPT, which is usually XNEW-XOPT.\n     *     VLAG contains the values of the Lagrange functions at a new point X.\n     *       They are part of a product that requires VLAG to be of length NDIM.\n     *     W is a one-dimensional array that is used for working space. Its length\n     *       must be at least 3*NDIM = 3*(NPT+N).\n     *\n     * @param lowerBound Lower bounds.\n     * @param upperBound Upper bounds.\n     * @return the value of the objective at the optimum.\n     */\n    private double bobyqb(double[] lowerBound,\n                          double[] upperBound) {\n        printMethod(); // XXX\n\n        final int n = currentBest.getDimension();\n        final int npt = numberOfInterpolationPoints;\n        final int np = n + 1;\n        final int nptm = npt - np;\n        final int nh = n * np / 2;\n\n        final ArrayRealVector work1 = new ArrayRealVector(n);\n        final ArrayRealVector work2 = new ArrayRealVector(npt);\n        final ArrayRealVector work3 = new ArrayRealVector(npt);\n\n        double cauchy = Double.NaN;\n        double alpha = Double.NaN;\n        double dsq = Double.NaN;\n        double crvmin = Double.NaN;\n\n        // Set some constants.\n        // Parameter adjustments\n\n        // Function Body\n\n        // The call of PRELIM sets the elements of XBASE, XPT, FVAL, GOPT, HQ, PQ,\n        // BMAT and ZMAT for the first iteration, with the corresponding values of\n        // of NF and KOPT, which are the number of calls of CALFUN so far and the\n        // index of the interpolation point at the trust region centre. Then the\n        // initial XOPT is set too. The branch to label 720 occurs if MAXFUN is\n        // less than NPT. GOPT will be updated if KOPT is different from KBASE.\n\n        trustRegionCenterInterpolationPointIndex = 0;\n\n        prelim(lowerBound, upperBound);\n        double xoptsq = ZERO;\n        for (int i = 0; i < n; i++) {\n            trustRegionCenterOffset.setEntry(i, interpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex, i));\n            // Computing 2nd power\n            final double deltaOne = trustRegionCenterOffset.getEntry(i);\n            xoptsq += deltaOne * deltaOne;\n        }\n        double fsave = fAtInterpolationPoints.getEntry(0);\n        final int kbase = 0;\n\n        // Complete the settings that are required for the iterative procedure.\n\n        int ntrits = 0;\n        int itest = 0;\n        int knew = 0;\n        int nfsav = getEvaluations();\n        double rho = initialTrustRegionRadius;\n        double delta = rho;\n        double diffa = ZERO;\n        double diffb = ZERO;\n        double diffc = ZERO;\n        double f = ZERO;\n        double beta = ZERO;\n        double adelt = ZERO;\n        double denom = ZERO;\n        double ratio = ZERO;\n        double dnorm = ZERO;\n        double scaden = ZERO;\n        double biglsq = ZERO;\n        double distsq = ZERO;\n\n        // Update GOPT if necessary before the first iteration and after each\n        // call of RESCUE that makes a call of CALFUN.\n\n        int state = 20;\n        for(;;) {\n        switch (state) {\n        case 20: {\n            printState(20); // XXX\n            if (trustRegionCenterInterpolationPointIndex != kbase) {\n                int ih = 0;\n                for (int j = 0; j < n; j++) {\n                    for (int i = 0; i <= j; i++) {\n                        if (i < j) {\n                            gradientAtTrustRegionCenter.setEntry(j,  gradientAtTrustRegionCenter.getEntry(j) + modelSecondDerivativesValues.getEntry(ih) * trustRegionCenterOffset.getEntry(i));\n                        }\n                        gradientAtTrustRegionCenter.setEntry(i,  gradientAtTrustRegionCenter.getEntry(i) + modelSecondDerivativesValues.getEntry(ih) * trustRegionCenterOffset.getEntry(j));\n                        ih++;\n                    }\n                }\n                if (getEvaluations() > npt) {\n                    for (int k = 0; k < npt; k++) {\n                        double temp = ZERO;\n                        for (int j = 0; j < n; j++) {\n                            temp += interpolationPoints.getEntry(k, j) * trustRegionCenterOffset.getEntry(j);\n                        }\n                        temp *= modelSecondDerivativesParameters.getEntry(k);\n                        for (int i = 0; i < n; i++) {\n                            gradientAtTrustRegionCenter.setEntry(i, gradientAtTrustRegionCenter.getEntry(i) + temp * interpolationPoints.getEntry(k, i));\n                        }\n                    }\n                    // throw new PathIsExploredException(); // XXX\n                }\n            }\n\n            // Generate the next point in the trust region that provides a small value\n            // of the quadratic model subject to the constraints on the variables.\n            // The int NTRITS is set to the number \"trust region\" iterations that\n            // have occurred since the last \"alternative\" iteration. If the length\n            // of XNEW-XOPT is less than HALF*RHO, however, then there is a branch to\n            // label 650 or 680 with NTRITS=-1, instead of calculating F at XNEW.\n\n        }\n        case 60: {\n            printState(60); // XXX\n            final ArrayRealVector gnew = new ArrayRealVector(n);\n            final ArrayRealVector xbdi = new ArrayRealVector(n);\n            final ArrayRealVector s = new ArrayRealVector(n);\n            final ArrayRealVector hs = new ArrayRealVector(n);\n            final ArrayRealVector hred = new ArrayRealVector(n);\n\n            final double[] dsqCrvmin = trsbox(delta, gnew, xbdi, s,\n                                              hs, hred);\n            dsq = dsqCrvmin[0];\n            crvmin = dsqCrvmin[1];\n\n            // Computing MIN\n            double deltaOne = delta;\n            double deltaTwo = FastMath.sqrt(dsq);\n            dnorm = FastMath.min(deltaOne, deltaTwo);\n            if (dnorm < HALF * rho) {\n                ntrits = -1;\n                // Computing 2nd power\n                deltaOne = TEN * rho;\n                distsq = deltaOne * deltaOne;\n                if (getEvaluations() <= nfsav + 2) {\n                    state = 650; break;\n                }\n\n                // The following choice between labels 650 and 680 depends on whether or\n                // not our work with the current RHO seems to be complete. Either RHO is\n                // decreased or termination occurs if the errors in the quadratic model at\n                // the last three interpolation points compare favourably with predictions\n                // of likely improvements to the model within distance HALF*RHO of XOPT.\n\n                // Computing MAX\n                deltaOne = FastMath.max(diffa, diffb);\n                final double errbig = FastMath.max(deltaOne, diffc);\n                final double frhosq = rho * ONE_OVER_EIGHT * rho;\n                if (crvmin > ZERO &&\n                    errbig > frhosq * crvmin) {\n                    state = 650; break;\n                }\n                final double bdtol = errbig / rho;\n                for (int j = 0; j < n; j++) {\n                    double bdtest = bdtol;\n                    if (newPoint.getEntry(j) == lowerDifference.getEntry(j)) {\n                        bdtest = work1.getEntry(j);\n                    }\n                    if (newPoint.getEntry(j) == upperDifference.getEntry(j)) {\n                        bdtest = -work1.getEntry(j);\n                    }\n                    if (bdtest < bdtol) {\n                        double curv = modelSecondDerivativesValues.getEntry((j + j * j) / 2);\n                        for (int k = 0; k < npt; k++) {\n                            // Computing 2nd power\n                            final double d1 = interpolationPoints.getEntry(k, j);\n                            curv += modelSecondDerivativesParameters.getEntry(k) * (d1 * d1);\n                        }\n                        bdtest += HALF * curv * rho;\n                        if (bdtest < bdtol) {\n                            state = 650; break;\n                        }\n                        // throw new PathIsExploredException(); // XXX\n                    }\n                }\n                state = 680; break;\n            }\n            ++ntrits;\n\n            // Severe cancellation is likely to occur if XOPT is too far from XBASE.\n            // If the following test holds, then XBASE is shifted so that XOPT becomes\n            // zero. The appropriate changes are made to BMAT and to the second\n            // derivatives of the current model, beginning with the changes to BMAT\n            // that do not depend on ZMAT. VLAG is used temporarily for working space.\n\n        }\n        case 90: {\n            printState(90); // XXX\n            if (dsq <= xoptsq * ONE_OVER_A_THOUSAND) {\n                final double fracsq = xoptsq * ONE_OVER_FOUR;\n                double sumpq = ZERO;\n                // final RealVector sumVector\n                //     = new ArrayRealVector(npt, -HALF * xoptsq).add(interpolationPoints.operate(trustRegionCenter));\n                for (int k = 0; k < npt; k++) {\n                    sumpq += modelSecondDerivativesParameters.getEntry(k);\n                    double sum = -HALF * xoptsq;\n                    for (int i = 0; i < n; i++) {\n                        sum += interpolationPoints.getEntry(k, i) * trustRegionCenterOffset.getEntry(i);\n                    }\n                    // sum = sumVector.getEntry(k); // XXX \"testAckley\" and \"testDiffPow\" fail.\n                    work2.setEntry(k, sum);\n                    final double temp = fracsq - HALF * sum;\n                    for (int i = 0; i < n; i++) {\n                        work1.setEntry(i, bMatrix.getEntry(k, i));\n                        lagrangeValuesAtNewPoint.setEntry(i, sum * interpolationPoints.getEntry(k, i) + temp * trustRegionCenterOffset.getEntry(i));\n                        final int ip = npt + i;\n                        for (int j = 0; j <= i; j++) {\n                            bMatrix.setEntry(ip, j,\n                                          bMatrix.getEntry(ip, j)\n                                          + work1.getEntry(i) * lagrangeValuesAtNewPoint.getEntry(j)\n                                          + lagrangeValuesAtNewPoint.getEntry(i) * work1.getEntry(j));\n                        }\n                    }\n                }\n\n                // Then the revisions of BMAT that depend on ZMAT are calculated.\n\n                for (int m = 0; m < nptm; m++) {\n                    double sumz = ZERO;\n                    double sumw = ZERO;\n                    for (int k = 0; k < npt; k++) {\n                        sumz += zMatrix.getEntry(k, m);\n                        lagrangeValuesAtNewPoint.setEntry(k, work2.getEntry(k) * zMatrix.getEntry(k, m));\n                        sumw += lagrangeValuesAtNewPoint.getEntry(k);\n                    }\n                    for (int j = 0; j < n; j++) {\n                        double sum = (fracsq * sumz - HALF * sumw) * trustRegionCenterOffset.getEntry(j);\n                        for (int k = 0; k < npt; k++) {\n                            sum += lagrangeValuesAtNewPoint.getEntry(k) * interpolationPoints.getEntry(k, j);\n                        }\n                        work1.setEntry(j, sum);\n                        for (int k = 0; k < npt; k++) {\n                            bMatrix.setEntry(k, j,\n                                          bMatrix.getEntry(k, j)\n                                          + sum * zMatrix.getEntry(k, m));\n                        }\n                    }\n                    for (int i = 0; i < n; i++) {\n                        final int ip = i + npt;\n                        final double temp = work1.getEntry(i);\n                        for (int j = 0; j <= i; j++) {\n                            bMatrix.setEntry(ip, j,\n                                          bMatrix.getEntry(ip, j)\n                                          + temp * work1.getEntry(j));\n                        }\n                    }\n                }\n\n                // The following instructions complete the shift, including the changes\n                // to the second derivative parameters of the quadratic model.\n\n                int ih = 0;\n                for (int j = 0; j < n; j++) {\n                    work1.setEntry(j, -HALF * sumpq * trustRegionCenterOffset.getEntry(j));\n                    for (int k = 0; k < npt; k++) {\n                        work1.setEntry(j, work1.getEntry(j) + modelSecondDerivativesParameters.getEntry(k) * interpolationPoints.getEntry(k, j));\n                        interpolationPoints.setEntry(k, j, interpolationPoints.getEntry(k, j) - trustRegionCenterOffset.getEntry(j));\n                    }\n                    for (int i = 0; i <= j; i++) {\n                         modelSecondDerivativesValues.setEntry(ih,\n                                    modelSecondDerivativesValues.getEntry(ih)\n                                    + work1.getEntry(i) * trustRegionCenterOffset.getEntry(j)\n                                    + trustRegionCenterOffset.getEntry(i) * work1.getEntry(j));\n                        bMatrix.setEntry(npt + i, j, bMatrix.getEntry(npt + j, i));\n                        ih++;\n                    }\n                }\n                for (int i = 0; i < n; i++) {\n                    originShift.setEntry(i, originShift.getEntry(i) + trustRegionCenterOffset.getEntry(i));\n                    newPoint.setEntry(i, newPoint.getEntry(i) - trustRegionCenterOffset.getEntry(i));\n                    lowerDifference.setEntry(i, lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i));\n                    upperDifference.setEntry(i, upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i));\n                    trustRegionCenterOffset.setEntry(i, ZERO);\n                }\n                xoptsq = ZERO;\n            }\n            if (ntrits == 0) {\n                state = 210; break;\n            }\n            state = 230; break;\n\n            // XBASE is also moved to XOPT by a call of RESCUE. This calculation is\n            // more expensive than the previous shift, because new matrices BMAT and\n            // ZMAT are generated from scratch, which may include the replacement of\n            // interpolation points whose positions seem to be causing near linear\n            // dependence in the interpolation conditions. Therefore RESCUE is called\n            // only if rounding errors have reduced by at least a factor of two the\n            // denominator of the formula for updating the H matrix. It provides a\n            // useful safeguard, but is not invoked in most applications of BOBYQA.\n\n        }\n        case 210: {\n            printState(210); // XXX\n            // Pick two alternative vectors of variables, relative to XBASE, that\n            // are suitable as new positions of the KNEW-th interpolation point.\n            // Firstly, XNEW is set to the point on a line through XOPT and another\n            // interpolation point that minimizes the predicted value of the next\n            // denominator, subject to ||XNEW - XOPT|| .LEQ. ADELT and to the SL\n            // and SU bounds. Secondly, XALT is set to the best feasible point on\n            // a constrained version of the Cauchy step of the KNEW-th Lagrange\n            // function, the corresponding value of the square of this function\n            // being returned in CAUCHY. The choice between these alternatives is\n            // going to be made when the denominator is calculated.\n\n            final double[] alphaCauchy = altmov(knew, adelt);\n            alpha = alphaCauchy[0];\n            cauchy = alphaCauchy[1];\n\n            for (int i = 0; i < n; i++) {\n                trialStepPoint.setEntry(i, newPoint.getEntry(i) - trustRegionCenterOffset.getEntry(i));\n            }\n\n            // Calculate VLAG and BETA for the current choice of D. The scalar\n            // product of D with XPT(K,.) is going to be held in W(NPT+K) for\n            // use when VQUAD is calculated.\n\n        }\n        case 230: {\n            printState(230); // XXX\n            for (int k = 0; k < npt; k++) {\n                double suma = ZERO;\n                double sumb = ZERO;\n                double sum = ZERO;\n                for (int j = 0; j < n; j++) {\n                    suma += interpolationPoints.getEntry(k, j) * trialStepPoint.getEntry(j);\n                    sumb += interpolationPoints.getEntry(k, j) * trustRegionCenterOffset.getEntry(j);\n                    sum += bMatrix.getEntry(k, j) * trialStepPoint.getEntry(j);\n                }\n                work3.setEntry(k, suma * (HALF * suma + sumb));\n                lagrangeValuesAtNewPoint.setEntry(k, sum);\n                work2.setEntry(k, suma);\n            }\n            beta = ZERO;\n            for (int m = 0; m < nptm; m++) {\n                double sum = ZERO;\n                for (int k = 0; k < npt; k++) {\n                    sum += zMatrix.getEntry(k, m) * work3.getEntry(k);\n                }\n                beta -= sum * sum;\n                for (int k = 0; k < npt; k++) {\n                    lagrangeValuesAtNewPoint.setEntry(k, lagrangeValuesAtNewPoint.getEntry(k) + sum * zMatrix.getEntry(k, m));\n                }\n            }\n            dsq = ZERO;\n            double bsum = ZERO;\n            double dx = ZERO;\n            for (int j = 0; j < n; j++) {\n                // Computing 2nd power\n                final double d1 = trialStepPoint.getEntry(j);\n                dsq += d1 * d1;\n                double sum = ZERO;\n                for (int k = 0; k < npt; k++) {\n                    sum += work3.getEntry(k) * bMatrix.getEntry(k, j);\n                }\n                bsum += sum * trialStepPoint.getEntry(j);\n                final int jp = npt + j;\n                for (int i = 0; i < n; i++) {\n                    sum += bMatrix.getEntry(jp, i) * trialStepPoint.getEntry(i);\n                }\n                lagrangeValuesAtNewPoint.setEntry(jp, sum);\n                bsum += sum * trialStepPoint.getEntry(j);\n                dx += trialStepPoint.getEntry(j) * trustRegionCenterOffset.getEntry(j);\n            }\n\n            beta = dx * dx + dsq * (xoptsq + dx + dx + HALF * dsq) + beta - bsum; // Original\n            // beta += dx * dx + dsq * (xoptsq + dx + dx + HALF * dsq) - bsum; // XXX \"testAckley\" and \"testDiffPow\" fail.\n            // beta = dx * dx + dsq * (xoptsq + 2 * dx + HALF * dsq) + beta - bsum; // XXX \"testDiffPow\" fails.\n\n            lagrangeValuesAtNewPoint.setEntry(trustRegionCenterInterpolationPointIndex,\n                          lagrangeValuesAtNewPoint.getEntry(trustRegionCenterInterpolationPointIndex) + ONE);\n\n            // If NTRITS is zero, the denominator may be increased by replacing\n            // the step D of ALTMOV by a Cauchy step. Then RESCUE may be called if\n            // rounding errors have damaged the chosen denominator.\n\n            if (ntrits == 0) {\n                // Computing 2nd power\n                final double d1 = lagrangeValuesAtNewPoint.getEntry(knew);\n                denom = d1 * d1 + alpha * beta;\n                if (denom < cauchy && cauchy > ZERO) {\n                    for (int i = 0; i < n; i++) {\n                        newPoint.setEntry(i, alternativeNewPoint.getEntry(i));\n                        trialStepPoint.setEntry(i, newPoint.getEntry(i) - trustRegionCenterOffset.getEntry(i));\n                    }\n                    cauchy = ZERO; // XXX Useful statement?\n                    state = 230; break;\n                }\n                // Alternatively, if NTRITS is positive, then set KNEW to the index of\n                // the next interpolation point to be deleted to make room for a trust\n                // region step. Again RESCUE may be called if rounding errors have damaged_\n                // the chosen denominator, which is the reason for attempting to select\n                // KNEW before calculating the next value of the objective function.\n\n            } else {\n                final double delsq = delta * delta;\n                scaden = ZERO;\n                biglsq = ZERO;\n                knew = 0;\n                for (int k = 0; k < npt; k++) {\n                    if (k == trustRegionCenterInterpolationPointIndex) {\n                        continue;\n                    }\n                    double hdiag = ZERO;\n                    for (int m = 0; m < nptm; m++) {\n                        // Computing 2nd power\n                        final double d1 = zMatrix.getEntry(k, m);\n                        hdiag += d1 * d1;\n                    }\n                    // Computing 2nd power\n                    final double d2 = lagrangeValuesAtNewPoint.getEntry(k);\n                    final double den = beta * hdiag + d2 * d2;\n                    distsq = ZERO;\n                    for (int j = 0; j < n; j++) {\n                        // Computing 2nd power\n                        final double d3 = interpolationPoints.getEntry(k, j) - trustRegionCenterOffset.getEntry(j);\n                        distsq += d3 * d3;\n                    }\n                    // Computing MAX\n                    // Computing 2nd power\n                    final double d4 = distsq / delsq;\n                    final double temp = FastMath.max(ONE, d4 * d4);\n                    if (temp * den > scaden) {\n                        scaden = temp * den;\n                        knew = k;\n                        denom = den;\n                    }\n                    // Computing MAX\n                    // Computing 2nd power\n                    final double d5 = lagrangeValuesAtNewPoint.getEntry(k);\n                    biglsq = FastMath.max(biglsq, temp * (d5 * d5));\n                }\n            }\n\n            // Put the variables for the next calculation of the objective function\n            //   in XNEW, with any adjustments for the bounds.\n\n            // Calculate the value of the objective function at XBASE+XNEW, unless\n            //   the limit on the number of calculations of F has been reached.\n\n        }\n        case 360: {\n            printState(360); // XXX\n            for (int i = 0; i < n; i++) {\n                // Computing MIN\n                // Computing MAX\n                final double d3 = lowerBound[i];\n                final double d4 = originShift.getEntry(i) + newPoint.getEntry(i);\n                final double d1 = FastMath.max(d3, d4);\n                final double d2 = upperBound[i];\n                currentBest.setEntry(i, FastMath.min(d1, d2));\n                if (newPoint.getEntry(i) == lowerDifference.getEntry(i)) {\n                    currentBest.setEntry(i, lowerBound[i]);\n                }\n                if (newPoint.getEntry(i) == upperDifference.getEntry(i)) {\n                    currentBest.setEntry(i, upperBound[i]);\n                }\n            }\n\n            f = computeObjectiveValue(currentBest.toArray());\n\n            if (!isMinimize) {\n                f = -f;\n            }\n            if (ntrits == -1) {\n                fsave = f;\n                state = 720; break;\n            }\n\n            // Use the quadratic model to predict the change in F due to the step D,\n            //   and set DIFF to the error of this prediction.\n\n            final double fopt = fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex);\n            double vquad = ZERO;\n            int ih = 0;\n            for (int j = 0; j < n; j++) {\n                vquad += trialStepPoint.getEntry(j) * gradientAtTrustRegionCenter.getEntry(j);\n                for (int i = 0; i <= j; i++) {\n                    double temp = trialStepPoint.getEntry(i) * trialStepPoint.getEntry(j);\n                    if (i == j) {\n                        temp *= HALF;\n                    }\n                    vquad += modelSecondDerivativesValues.getEntry(ih) * temp;\n                    ih++;\n               }\n            }\n            for (int k = 0; k < npt; k++) {\n                // Computing 2nd power\n                final double d1 = work2.getEntry(k);\n                final double d2 = d1 * d1; // \"d1\" must be squared first to prevent test failures.\n                vquad += HALF * modelSecondDerivativesParameters.getEntry(k) * d2;\n            }\n            final double diff = f - fopt - vquad;\n            diffc = diffb;\n            diffb = diffa;\n            diffa = FastMath.abs(diff);\n            if (dnorm > rho) {\n                nfsav = getEvaluations();\n            }\n\n            // Pick the next value of DELTA after a trust region step.\n\n            if (ntrits > 0) {\n                if (vquad >= ZERO) {\n                    throw new MathIllegalStateException(LocalizedFormats.TRUST_REGION_STEP_FAILED, vquad);\n                }\n                ratio = (f - fopt) / vquad;\n                final double hDelta = HALF * delta;\n                if (ratio <= ONE_OVER_TEN) {\n                    // Computing MIN\n                    delta = FastMath.min(hDelta, dnorm);\n                } else if (ratio <= .7) {\n                    // Computing MAX\n                    delta = FastMath.max(hDelta, dnorm);\n                } else {\n                    // Computing MAX\n                    delta = FastMath.max(hDelta, 2 * dnorm);\n                }\n                if (delta <= rho * 1.5) {\n                    delta = rho;\n                }\n\n                // Recalculate KNEW and DENOM if the new F is less than FOPT.\n\n                if (f < fopt) {\n                    final int ksav = knew;\n                    final double densav = denom;\n                    final double delsq = delta * delta;\n                    scaden = ZERO;\n                    biglsq = ZERO;\n                    knew = 0;\n                    for (int k = 0; k < npt; k++) {\n                        double hdiag = ZERO;\n                        for (int m = 0; m < nptm; m++) {\n                            // Computing 2nd power\n                            final double d1 = zMatrix.getEntry(k, m);\n                            hdiag += d1 * d1;\n                        }\n                        // Computing 2nd power\n                        final double d1 = lagrangeValuesAtNewPoint.getEntry(k);\n                        final double den = beta * hdiag + d1 * d1;\n                        distsq = ZERO;\n                        for (int j = 0; j < n; j++) {\n                            // Computing 2nd power\n                            final double d2 = interpolationPoints.getEntry(k, j) - newPoint.getEntry(j);\n                            distsq += d2 * d2;\n                        }\n                        // Computing MAX\n                        // Computing 2nd power\n                        final double d3 = distsq / delsq;\n                        final double temp = FastMath.max(ONE, d3 * d3);\n                        if (temp * den > scaden) {\n                            scaden = temp * den;\n                            knew = k;\n                            denom = den;\n                        }\n                        // Computing MAX\n                        // Computing 2nd power\n                        final double d4 = lagrangeValuesAtNewPoint.getEntry(k);\n                        final double d5 = temp * (d4 * d4);\n                        biglsq = FastMath.max(biglsq, d5);\n                    }\n                    if (scaden <= HALF * biglsq) {\n                        knew = ksav;\n                        denom = densav;\n                    }\n                }\n            }\n\n            // Update BMAT and ZMAT, so that the KNEW-th interpolation point can be\n            // moved. Also update the second derivative terms of the model.\n\n            update(beta, denom, knew);\n\n            ih = 0;\n            final double pqold = modelSecondDerivativesParameters.getEntry(knew);\n            modelSecondDerivativesParameters.setEntry(knew, ZERO);\n            for (int i = 0; i < n; i++) {\n                final double temp = pqold * interpolationPoints.getEntry(knew, i);\n                for (int j = 0; j <= i; j++) {\n                    modelSecondDerivativesValues.setEntry(ih, modelSecondDerivativesValues.getEntry(ih) + temp * interpolationPoints.getEntry(knew, j));\n                    ih++;\n                }\n            }\n            for (int m = 0; m < nptm; m++) {\n                final double temp = diff * zMatrix.getEntry(knew, m);\n                for (int k = 0; k < npt; k++) {\n                    modelSecondDerivativesParameters.setEntry(k, modelSecondDerivativesParameters.getEntry(k) + temp * zMatrix.getEntry(k, m));\n                }\n            }\n\n            // Include the new interpolation point, and make the changes to GOPT at\n            // the old XOPT that are caused by the updating of the quadratic model.\n\n            fAtInterpolationPoints.setEntry(knew,  f);\n            for (int i = 0; i < n; i++) {\n                interpolationPoints.setEntry(knew, i, newPoint.getEntry(i));\n                work1.setEntry(i, bMatrix.getEntry(knew, i));\n            }\n            for (int k = 0; k < npt; k++) {\n                double suma = ZERO;\n                for (int m = 0; m < nptm; m++) {\n                    suma += zMatrix.getEntry(knew, m) * zMatrix.getEntry(k, m);\n                }\n                double sumb = ZERO;\n                for (int j = 0; j < n; j++) {\n                    sumb += interpolationPoints.getEntry(k, j) * trustRegionCenterOffset.getEntry(j);\n                }\n                final double temp = suma * sumb;\n                for (int i = 0; i < n; i++) {\n                    work1.setEntry(i, work1.getEntry(i) + temp * interpolationPoints.getEntry(k, i));\n                }\n            }\n            for (int i = 0; i < n; i++) {\n                gradientAtTrustRegionCenter.setEntry(i, gradientAtTrustRegionCenter.getEntry(i) + diff * work1.getEntry(i));\n            }\n\n            // Update XOPT, GOPT and KOPT if the new calculated F is less than FOPT.\n\n            if (f < fopt) {\n                trustRegionCenterInterpolationPointIndex = knew;\n                xoptsq = ZERO;\n                ih = 0;\n                for (int j = 0; j < n; j++) {\n                    trustRegionCenterOffset.setEntry(j, newPoint.getEntry(j));\n                    // Computing 2nd power\n                    final double d1 = trustRegionCenterOffset.getEntry(j);\n                    xoptsq += d1 * d1;\n                    for (int i = 0; i <= j; i++) {\n                        if (i < j) {\n                            gradientAtTrustRegionCenter.setEntry(j, gradientAtTrustRegionCenter.getEntry(j) + modelSecondDerivativesValues.getEntry(ih) * trialStepPoint.getEntry(i));\n                        }\n                        gradientAtTrustRegionCenter.setEntry(i, gradientAtTrustRegionCenter.getEntry(i) + modelSecondDerivativesValues.getEntry(ih) * trialStepPoint.getEntry(j));\n                        ih++;\n                    }\n                }\n                for (int k = 0; k < npt; k++) {\n                    double temp = ZERO;\n                    for (int j = 0; j < n; j++) {\n                        temp += interpolationPoints.getEntry(k, j) * trialStepPoint.getEntry(j);\n                    }\n                    temp *= modelSecondDerivativesParameters.getEntry(k);\n                    for (int i = 0; i < n; i++) {\n                        gradientAtTrustRegionCenter.setEntry(i, gradientAtTrustRegionCenter.getEntry(i) + temp * interpolationPoints.getEntry(k, i));\n                    }\n                }\n            }\n\n            // Calculate the parameters of the least Frobenius norm interpolant to\n            // the current data, the gradient of this interpolant at XOPT being put\n            // into VLAG(NPT+I), I=1,2,...,N.\n\n            if (ntrits > 0) {\n                for (int k = 0; k < npt; k++) {\n                    lagrangeValuesAtNewPoint.setEntry(k, fAtInterpolationPoints.getEntry(k) - fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex));\n                    work3.setEntry(k, ZERO);\n                }\n                for (int j = 0; j < nptm; j++) {\n                    double sum = ZERO;\n                    for (int k = 0; k < npt; k++) {\n                        sum += zMatrix.getEntry(k, j) * lagrangeValuesAtNewPoint.getEntry(k);\n                    }\n                    for (int k = 0; k < npt; k++) {\n                        work3.setEntry(k, work3.getEntry(k) + sum * zMatrix.getEntry(k, j));\n                    }\n                }\n                for (int k = 0; k < npt; k++) {\n                    double sum = ZERO;\n                    for (int j = 0; j < n; j++) {\n                        sum += interpolationPoints.getEntry(k, j) * trustRegionCenterOffset.getEntry(j);\n                    }\n                    work2.setEntry(k, work3.getEntry(k));\n                    work3.setEntry(k, sum * work3.getEntry(k));\n                }\n                double gqsq = ZERO;\n                double gisq = ZERO;\n                for (int i = 0; i < n; i++) {\n                    double sum = ZERO;\n                    for (int k = 0; k < npt; k++) {\n                        sum += bMatrix.getEntry(k, i) *\n                            lagrangeValuesAtNewPoint.getEntry(k) + interpolationPoints.getEntry(k, i) * work3.getEntry(k);\n                    }\n                    if (trustRegionCenterOffset.getEntry(i) == lowerDifference.getEntry(i)) {\n                        // Computing MIN\n                        // Computing 2nd power\n                        final double d1 = FastMath.min(ZERO, gradientAtTrustRegionCenter.getEntry(i));\n                        gqsq += d1 * d1;\n                        // Computing 2nd power\n                        final double d2 = FastMath.min(ZERO, sum);\n                        gisq += d2 * d2;\n                    } else if (trustRegionCenterOffset.getEntry(i) == upperDifference.getEntry(i)) {\n                        // Computing MAX\n                        // Computing 2nd power\n                        final double d1 = FastMath.max(ZERO, gradientAtTrustRegionCenter.getEntry(i));\n                        gqsq += d1 * d1;\n                        // Computing 2nd power\n                        final double d2 = FastMath.max(ZERO, sum);\n                        gisq += d2 * d2;\n                    } else {\n                        // Computing 2nd power\n                        final double d1 = gradientAtTrustRegionCenter.getEntry(i);\n                        gqsq += d1 * d1;\n                        gisq += sum * sum;\n                    }\n                    lagrangeValuesAtNewPoint.setEntry(npt + i, sum);\n                }\n\n                // Test whether to replace the new quadratic model by the least Frobenius\n                // norm interpolant, making the replacement if the test is satisfied.\n\n                ++itest;\n                if (gqsq < TEN * gisq) {\n                    itest = 0;\n                }\n                if (itest >= 3) {\n                    for (int i = 0, max = FastMath.max(npt, nh); i < max; i++) {\n                        if (i < n) {\n                            gradientAtTrustRegionCenter.setEntry(i, lagrangeValuesAtNewPoint.getEntry(npt + i));\n                        }\n                        if (i < npt) {\n                            modelSecondDerivativesParameters.setEntry(i, work2.getEntry(i));\n                        }\n                        if (i < nh) {\n                            modelSecondDerivativesValues.setEntry(i, ZERO);\n                        }\n                        itest = 0;\n                    }\n                }\n            }\n\n            // If a trust region step has provided a sufficient decrease in F, then\n            // branch for another trust region calculation. The case NTRITS=0 occurs\n            // when the new interpolation point was reached by an alternative step.\n\n            if (ntrits == 0) {\n                state = 60; break;\n            }\n            if (f <= fopt + ONE_OVER_TEN * vquad) {\n                state = 60; break;\n            }\n\n            // Alternatively, find out if the interpolation points are close enough\n            //   to the best point so far.\n\n            // Computing MAX\n            // Computing 2nd power\n            final double d1 = TWO * delta;\n            // Computing 2nd power\n            final double d2 = TEN * rho;\n            distsq = FastMath.max(d1 * d1, d2 * d2);\n        }\n        case 650: {\n            printState(650); // XXX\n            knew = -1;\n            for (int k = 0; k < npt; k++) {\n                double sum = ZERO;\n                for (int j = 0; j < n; j++) {\n                    // Computing 2nd power\n                    final double d1 = interpolationPoints.getEntry(k, j) - trustRegionCenterOffset.getEntry(j);\n                    sum += d1 * d1;\n                }\n                if (sum > distsq) {\n                    knew = k;\n                    distsq = sum;\n                }\n            }\n\n            // If KNEW is positive, then ALTMOV finds alternative new positions for\n            // the KNEW-th interpolation point within distance ADELT of XOPT. It is\n            // reached via label 90. Otherwise, there is a branch to label 60 for\n            // another trust region iteration, unless the calculations with the\n            // current RHO are complete.\n\n            if (knew >= 0) {\n                final double dist = FastMath.sqrt(distsq);\n                if (ntrits == -1) {\n                    // Computing MIN\n                    delta = FastMath.min(ONE_OVER_TEN * delta, HALF * dist);\n                    if (delta <= rho * 1.5) {\n                        delta = rho;\n                    }\n                }\n                ntrits = 0;\n                // Computing MAX\n                // Computing MIN\n                final double d1 = FastMath.min(ONE_OVER_TEN * dist, delta);\n                adelt = FastMath.max(d1, rho);\n                dsq = adelt * adelt;\n                state = 90; break;\n            }\n            if (ntrits == -1) {\n                state = 680; break;\n            }\n            if (ratio > ZERO) {\n                state = 60; break;\n            }\n            if (FastMath.max(delta, dnorm) > rho) {\n                state = 60; break;\n            }\n\n            // The calculations with the current value of RHO are complete. Pick the\n            //   next values of RHO and DELTA.\n        }\n        case 680: {\n            printState(680); // XXX\n            if (rho > stoppingTrustRegionRadius) {\n                delta = HALF * rho;\n                ratio = rho / stoppingTrustRegionRadius;\n                if (ratio <= SIXTEEN) {\n                    rho = stoppingTrustRegionRadius;\n                } else if (ratio <= TWO_HUNDRED_FIFTY) {\n                    rho = FastMath.sqrt(ratio) * stoppingTrustRegionRadius;\n                } else {\n                    rho *= ONE_OVER_TEN;\n                }\n                delta = FastMath.max(delta, rho);\n                ntrits = 0;\n                nfsav = getEvaluations();\n                state = 60; break;\n            }\n\n            // Return from the calculation, after another Newton-Raphson step, if\n            //   it is too short to have been tried before.\n\n            if (ntrits == -1) {\n                state = 360; break;\n            }\n        }\n        case 720: {\n            printState(720); // XXX\n            if (fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= fsave) {\n                for (int i = 0; i < n; i++) {\n                    // Computing MIN\n                    // Computing MAX\n                    final double d3 = lowerBound[i];\n                    final double d4 = originShift.getEntry(i) + trustRegionCenterOffset.getEntry(i);\n                    final double d1 = FastMath.max(d3, d4);\n                    final double d2 = upperBound[i];\n                    currentBest.setEntry(i, FastMath.min(d1, d2));\n                    if (trustRegionCenterOffset.getEntry(i) == lowerDifference.getEntry(i)) {\n                        currentBest.setEntry(i, lowerBound[i]);\n                    }\n                    if (trustRegionCenterOffset.getEntry(i) == upperDifference.getEntry(i)) {\n                        currentBest.setEntry(i, upperBound[i]);\n                    }\n                }\n                f = fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex);\n            }\n            return f;\n        }\n        default: {\n            throw new MathIllegalStateException(LocalizedFormats.SIMPLE_MESSAGE, \"bobyqb\");\n        }}}\n    } // bobyqb\n\n    // ----------------------------------------------------------------------------------------\n\n    /**\n     *     The arguments N, NPT, XPT, XOPT, BMAT, ZMAT, NDIM, SL and SU all have\n     *       the same meanings as the corresponding arguments of BOBYQB.\n     *     KOPT is the index of the optimal interpolation point.\n     *     KNEW is the index of the interpolation point that is going to be moved.\n     *     ADELT is the current trust region bound.\n     *     XNEW will be set to a suitable new position for the interpolation point\n     *       XPT(KNEW,.). Specifically, it satisfies the SL, SU and trust region\n     *       bounds and it should provide a large denominator in the next call of\n     *       UPDATE. The step XNEW-XOPT from XOPT is restricted to moves along the\n     *       straight lines through XOPT and another interpolation point.\n     *     XALT also provides a large value of the modulus of the KNEW-th Lagrange\n     *       function subject to the constraints that have been mentioned, its main\n     *       difference from XNEW being that XALT-XOPT is a constrained version of\n     *       the Cauchy step within the trust region. An exception is that XALT is\n     *       not calculated if all components of GLAG (see below) are zero.\n     *     ALPHA will be set to the KNEW-th diagonal element of the H matrix.\n     *     CAUCHY will be set to the square of the KNEW-th Lagrange function at\n     *       the step XALT-XOPT from XOPT for the vector XALT that is returned,\n     *       except that CAUCHY is set to zero if XALT is not calculated.\n     *     GLAG is a working space vector of length N for the gradient of the\n     *       KNEW-th Lagrange function at XOPT.\n     *     HCOL is a working space vector of length NPT for the second derivative\n     *       coefficients of the KNEW-th Lagrange function.\n     *     W is a working space vector of length 2N that is going to hold the\n     *       constrained Cauchy step from XOPT of the Lagrange function, followed\n     *       by the downhill version of XALT when the uphill step is calculated.\n     *\n     *     Set the first NPT components of W to the leading elements of the\n     *     KNEW-th column of the H matrix.\n     * @param knew\n     * @param adelt\n     */\n    private double[] altmov(\n            int knew,\n            double adelt\n    ) {\n        printMethod(); // XXX\n\n        final int n = currentBest.getDimension();\n        final int npt = numberOfInterpolationPoints;\n\n        final ArrayRealVector glag = new ArrayRealVector(n);\n        final ArrayRealVector hcol = new ArrayRealVector(npt);\n\n        final ArrayRealVector work1 = new ArrayRealVector(n);\n        final ArrayRealVector work2 = new ArrayRealVector(n);\n\n        for (int k = 0; k < npt; k++) {\n            hcol.setEntry(k, ZERO);\n        }\n        for (int j = 0, max = npt - n - 1; j < max; j++) {\n            final double tmp = zMatrix.getEntry(knew, j);\n            for (int k = 0; k < npt; k++) {\n                hcol.setEntry(k, hcol.getEntry(k) + tmp * zMatrix.getEntry(k, j));\n            }\n        }\n        final double alpha = hcol.getEntry(knew);\n        final double ha = HALF * alpha;\n\n        // Calculate the gradient of the KNEW-th Lagrange function at XOPT.\n\n        for (int i = 0; i < n; i++) {\n            glag.setEntry(i, bMatrix.getEntry(knew, i));\n        }\n        for (int k = 0; k < npt; k++) {\n            double tmp = ZERO;\n            for (int j = 0; j < n; j++) {\n                tmp += interpolationPoints.getEntry(k, j) * trustRegionCenterOffset.getEntry(j);\n            }\n            tmp *= hcol.getEntry(k);\n            for (int i = 0; i < n; i++) {\n                glag.setEntry(i, glag.getEntry(i) + tmp * interpolationPoints.getEntry(k, i));\n            }\n        }\n\n        // Search for a large denominator along the straight lines through XOPT\n        // and another interpolation point. SLBD and SUBD will be lower and upper\n        // bounds on the step along each of these lines in turn. PREDSQ will be\n        // set to the square of the predicted denominator for each line. PRESAV\n        // will be set to the largest admissible value of PREDSQ that occurs.\n\n        double presav = ZERO;\n        double step = Double.NaN;\n        int ksav = 0;\n        int ibdsav = 0;\n        double stpsav = 0;\n        for (int k = 0; k < npt; k++) {\n            if (k == trustRegionCenterInterpolationPointIndex) {\n                continue;\n            }\n            double dderiv = ZERO;\n            double distsq = ZERO;\n            for (int i = 0; i < n; i++) {\n                final double tmp = interpolationPoints.getEntry(k, i) - trustRegionCenterOffset.getEntry(i);\n                dderiv += glag.getEntry(i) * tmp;\n                distsq += tmp * tmp;\n            }\n            double subd = adelt / FastMath.sqrt(distsq);\n            double slbd = -subd;\n            int ilbd = 0;\n            int iubd = 0;\n            final double sumin = FastMath.min(ONE, subd);\n\n            // Revise SLBD and SUBD if necessary because of the bounds in SL and SU.\n\n            for (int i = 0; i < n; i++) {\n                final double tmp = interpolationPoints.getEntry(k, i) - trustRegionCenterOffset.getEntry(i);\n                if (tmp > ZERO) {\n                    if (slbd * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) {\n                        slbd = (lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) / tmp;\n                        ilbd = -i - 1;\n                    }\n                    if (subd * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) {\n                        // Computing MAX\n                        subd = FastMath.max(sumin,\n                                            (upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) / tmp);\n                        iubd = i + 1;\n                    }\n                } else if (tmp < ZERO) {\n                    if (slbd * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) {\n                        slbd = (upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) / tmp;\n                        ilbd = i + 1;\n                    }\n                    if (subd * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) {\n                        // Computing MAX\n                        subd = FastMath.max(sumin,\n                                            (lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) / tmp);\n                        iubd = -i - 1;\n                    }\n                }\n            }\n\n            // Seek a large modulus of the KNEW-th Lagrange function when the index\n            // of the other interpolation point on the line through XOPT is KNEW.\n\n            step = slbd;\n            int isbd = ilbd;\n            double vlag = Double.NaN;\n            if (k == knew) {\n                final double diff = dderiv - ONE;\n                vlag = slbd * (dderiv - slbd * diff);\n                final double d1 = subd * (dderiv - subd * diff);\n                if (FastMath.abs(d1) > FastMath.abs(vlag)) {\n                    step = subd;\n                    vlag = d1;\n                    isbd = iubd;\n                }\n                final double d2 = HALF * dderiv;\n                final double d3 = d2 - diff * slbd;\n                final double d4 = d2 - diff * subd;\n                if (d3 * d4 < ZERO) {\n                    final double d5 = d2 * d2 / diff;\n                    if (FastMath.abs(d5) > FastMath.abs(vlag)) {\n                        step = d2 / diff;\n                        vlag = d5;\n                        isbd = 0;\n                    }\n                }\n\n                // Search along each of the other lines through XOPT and another point.\n\n            } else {\n                vlag = slbd * (ONE - slbd);\n                final double tmp = subd * (ONE - subd);\n                if (FastMath.abs(tmp) > FastMath.abs(vlag)) {\n                    step = subd;\n                    vlag = tmp;\n                    isbd = iubd;\n                }\n                if (subd > HALF && FastMath.abs(vlag) < ONE_OVER_FOUR) {\n                    step = HALF;\n                    vlag = ONE_OVER_FOUR;\n                    isbd = 0;\n                }\n                vlag *= dderiv;\n            }\n\n            // Calculate PREDSQ for the current line search and maintain PRESAV.\n\n            final double tmp = step * (ONE - step) * distsq;\n            final double predsq = vlag * vlag * (vlag * vlag + ha * tmp * tmp);\n            if (predsq > presav) {\n                presav = predsq;\n                ksav = k;\n                stpsav = step;\n                ibdsav = isbd;\n            }\n        }\n\n        // Construct XNEW in a way that satisfies the bound constraints exactly.\n\n        for (int i = 0; i < n; i++) {\n            final double tmp = trustRegionCenterOffset.getEntry(i) + stpsav * (interpolationPoints.getEntry(ksav, i) - trustRegionCenterOffset.getEntry(i));\n            newPoint.setEntry(i, FastMath.max(lowerDifference.getEntry(i),\n                                              FastMath.min(upperDifference.getEntry(i), tmp)));\n        }\n        if (ibdsav < 0) {\n            newPoint.setEntry(-ibdsav - 1, lowerDifference.getEntry(-ibdsav - 1));\n        }\n        if (ibdsav > 0) {\n            newPoint.setEntry(ibdsav - 1, upperDifference.getEntry(ibdsav - 1));\n        }\n\n        // Prepare for the iterative method that assembles the constrained Cauchy\n        // step in W. The sum of squares of the fixed components of W is formed in\n        // WFIXSQ, and the free components of W are set to BIGSTP.\n\n        final double bigstp = adelt + adelt;\n        int iflag = 0;\n        double cauchy = Double.NaN;\n        double csave = ZERO;\n        while (true) {\n            double wfixsq = ZERO;\n            double ggfree = ZERO;\n            for (int i = 0; i < n; i++) {\n                final double glagValue = glag.getEntry(i);\n                work1.setEntry(i, ZERO);\n                if (FastMath.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), glagValue) > ZERO ||\n                    FastMath.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), glagValue) < ZERO) {\n                    work1.setEntry(i, bigstp);\n                    // Computing 2nd power\n                    ggfree += glagValue * glagValue;\n                }\n            }\n            if (ggfree == ZERO) {\n                return new double[] { alpha, ZERO };\n            }\n\n            // Investigate whether more components of W can be fixed.\n            final double tmp1 = adelt * adelt - wfixsq;\n            if (tmp1 > ZERO) {\n                step = FastMath.sqrt(tmp1 / ggfree);\n                ggfree = ZERO;\n                for (int i = 0; i < n; i++) {\n                    if (work1.getEntry(i) == bigstp) {\n                        final double tmp2 = trustRegionCenterOffset.getEntry(i) - step * glag.getEntry(i);\n                        if (tmp2 <= lowerDifference.getEntry(i)) {\n                            work1.setEntry(i, lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i));\n                            // Computing 2nd power\n                            final double d1 = work1.getEntry(i);\n                            wfixsq += d1 * d1;\n                        } else if (tmp2 >= upperDifference.getEntry(i)) {\n                            work1.setEntry(i, upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i));\n                            // Computing 2nd power\n                            final double d1 = work1.getEntry(i);\n                            wfixsq += d1 * d1;\n                        } else {\n                            // Computing 2nd power\n                            final double d1 = glag.getEntry(i);\n                            ggfree += d1 * d1;\n                        }\n                    }\n                }\n            }\n\n            // Set the remaining free components of W and all components of XALT,\n            // except that W may be scaled later.\n\n            double gw = ZERO;\n            for (int i = 0; i < n; i++) {\n                final double glagValue = glag.getEntry(i);\n                if (work1.getEntry(i) == bigstp) {\n                    work1.setEntry(i, -step * glagValue);\n                    final double min = FastMath.min(upperDifference.getEntry(i),\n                                                    trustRegionCenterOffset.getEntry(i) + work1.getEntry(i));\n                    alternativeNewPoint.setEntry(i, FastMath.max(lowerDifference.getEntry(i), min));\n                } else if (work1.getEntry(i) == ZERO) {\n                    alternativeNewPoint.setEntry(i, trustRegionCenterOffset.getEntry(i));\n                } else if (glagValue > ZERO) {\n                    alternativeNewPoint.setEntry(i, lowerDifference.getEntry(i));\n                } else {\n                    alternativeNewPoint.setEntry(i, upperDifference.getEntry(i));\n                }\n                gw += glagValue * work1.getEntry(i);\n            }\n\n            // Set CURV to the curvature of the KNEW-th Lagrange function along W.\n            // Scale W by a factor less than one if that can reduce the modulus of\n            // the Lagrange function at XOPT+W. Set CAUCHY to the final value of\n            // the square of this function.\n\n            double curv = ZERO;\n            for (int k = 0; k < npt; k++) {\n                double tmp = ZERO;\n                for (int j = 0; j < n; j++) {\n                    tmp += interpolationPoints.getEntry(k, j) * work1.getEntry(j);\n                }\n                curv += hcol.getEntry(k) * tmp * tmp;\n            }\n            if (iflag == 1) {\n                curv = -curv;\n            }\n            if (curv > -gw &&\n                curv < -gw * (ONE + FastMath.sqrt(TWO))) {\n                final double scale = -gw / curv;\n                for (int i = 0; i < n; i++) {\n                    final double tmp = trustRegionCenterOffset.getEntry(i) + scale * work1.getEntry(i);\n                    alternativeNewPoint.setEntry(i, FastMath.max(lowerDifference.getEntry(i),\n                                                    FastMath.min(upperDifference.getEntry(i), tmp)));\n                }\n                // Computing 2nd power\n                final double d1 = HALF * gw * scale;\n                cauchy = d1 * d1;\n            } else {\n                // Computing 2nd power\n                final double d1 = gw + HALF * curv;\n                cauchy = d1 * d1;\n            }\n\n            // If IFLAG is zero, then XALT is calculated as before after reversing\n            // the sign of GLAG. Thus two XALT vectors become available. The one that\n            // is chosen is the one that gives the larger value of CAUCHY.\n\n            if (iflag == 0) {\n                for (int i = 0; i < n; i++) {\n                    glag.setEntry(i, -glag.getEntry(i));\n                    work2.setEntry(i, alternativeNewPoint.getEntry(i));\n                }\n                csave = cauchy;\n                iflag = 1;\n            } else {\n                break;\n            }\n        }\n        if (csave > cauchy) {\n            for (int i = 0; i < n; i++) {\n                alternativeNewPoint.setEntry(i, work2.getEntry(i));\n            }\n            cauchy = csave;\n        }\n\n        return new double[] { alpha, cauchy };\n    } // altmov\n\n    // ----------------------------------------------------------------------------------------\n\n    /**\n     *     SUBROUTINE PRELIM sets the elements of XBASE, XPT, FVAL, GOPT, HQ, PQ,\n     *     BMAT and ZMAT for the first iteration, and it maintains the values of\n     *     NF and KOPT. The vector X is also changed by PRELIM.\n     *\n     *     The arguments N, NPT, X, XL, XU, RHOBEG, IPRINT and MAXFUN are the\n     *       same as the corresponding arguments in SUBROUTINE BOBYQA.\n     *     The arguments XBASE, XPT, FVAL, HQ, PQ, BMAT, ZMAT, NDIM, SL and SU\n     *       are the same as the corresponding arguments in BOBYQB, the elements\n     *       of SL and SU being set in BOBYQA.\n     *     GOPT is usually the gradient of the quadratic model at XOPT+XBASE, but\n     *       it is set by PRELIM to the gradient of the quadratic model at XBASE.\n     *       If XOPT is nonzero, BOBYQB will change it to its usual value later.\n     *     NF is maintaned as the number of calls of CALFUN so far.\n     *     KOPT will be such that the least calculated value of F so far is at\n     *       the point XPT(KOPT,.)+XBASE in the space of the variables.\n     *\n     * @param lowerBound Lower bounds.\n     * @param upperBound Upper bounds.\n     */\n    private void prelim(double[] lowerBound,\n                        double[] upperBound) {\n        printMethod(); // XXX\n\n        final int n = currentBest.getDimension();\n        final int npt = numberOfInterpolationPoints;\n        final int ndim = bMatrix.getRowDimension();\n\n        final double rhosq = initialTrustRegionRadius * initialTrustRegionRadius;\n        final double recip = 1d / rhosq;\n        final int np = n + 1;\n\n        // Set XBASE to the initial vector of variables, and set the initial\n        // elements of XPT, BMAT, HQ, PQ and ZMAT to zero.\n\n        for (int j = 0; j < n; j++) {\n            originShift.setEntry(j, currentBest.getEntry(j));\n            for (int k = 0; k < npt; k++) {\n                interpolationPoints.setEntry(k, j, ZERO);\n            }\n            for (int i = 0; i < ndim; i++) {\n                bMatrix.setEntry(i, j, ZERO);\n            }\n        }\n        for (int i = 0, max = n * np / 2; i < max; i++) {\n            modelSecondDerivativesValues.setEntry(i, ZERO);\n        }\n        for (int k = 0; k < npt; k++) {\n            modelSecondDerivativesParameters.setEntry(k, ZERO);\n            for (int j = 0, max = npt - np; j < max; j++) {\n                zMatrix.setEntry(k, j, ZERO);\n            }\n        }\n\n        // Begin the initialization procedure. NF becomes one more than the number\n        // of function values so far. The coordinates of the displacement of the\n        // next initial interpolation point from XBASE are set in XPT(NF+1,.).\n\n        int ipt = 0;\n        int jpt = 0;\n        double fbeg = Double.NaN;\n        do {\n            final int nfm = getEvaluations();\n            final int nfx = nfm - n;\n            final int nfmm = nfm - 1;\n            final int nfxm = nfx - 1;\n            double stepa = 0;\n            double stepb = 0;\n            if (nfm <= 2 * n) {\n                if (nfm >= 1 &&\n                    nfm <= n) {\n                    stepa = initialTrustRegionRadius;\n                    if (upperDifference.getEntry(nfmm) == ZERO) {\n                        stepa = -stepa;\n                        // throw new PathIsExploredException(); // XXX\n                    }\n                    interpolationPoints.setEntry(nfm, nfmm, stepa);\n                } else if (nfm > n) {\n                    stepa = interpolationPoints.getEntry(nfx, nfxm);\n                    stepb = -initialTrustRegionRadius;\n                    if (lowerDifference.getEntry(nfxm) == ZERO) {\n                        stepb = FastMath.min(TWO * initialTrustRegionRadius, upperDifference.getEntry(nfxm));\n                        // throw new PathIsExploredException(); // XXX\n                    }\n                    if (upperDifference.getEntry(nfxm) == ZERO) {\n                        stepb = FastMath.max(-TWO * initialTrustRegionRadius, lowerDifference.getEntry(nfxm));\n                        // throw new PathIsExploredException(); // XXX\n                    }\n                    interpolationPoints.setEntry(nfm, nfxm, stepb);\n                }\n            } else {\n                final int tmp1 = (nfm - np) / n;\n                jpt = nfm - tmp1 * n - n;\n                ipt = jpt + tmp1;\n                if (ipt > n) {\n                    final int tmp2 = jpt;\n                    jpt = ipt - n;\n                    ipt = tmp2;\n//                     throw new PathIsExploredException(); // XXX\n                }\n                final int iptMinus1 = ipt - 1;\n                final int jptMinus1 = jpt - 1;\n                interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1));\n                interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1));\n            }\n\n            // Calculate the next value of F. The least function value so far and\n            // its index are required.\n\n            for (int j = 0; j < n; j++) {\n                currentBest.setEntry(j, FastMath.min(FastMath.max(lowerBound[j],\n                                                                  originShift.getEntry(j) + interpolationPoints.getEntry(nfm, j)),\n                                                     upperBound[j]));\n                if (interpolationPoints.getEntry(nfm, j) == lowerDifference.getEntry(j)) {\n                    currentBest.setEntry(j, lowerBound[j]);\n                }\n                if (interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)) {\n                    currentBest.setEntry(j, upperBound[j]);\n                }\n            }\n\n            final double objectiveValue = computeObjectiveValue(currentBest.toArray());\n            final double f = isMinimize ? objectiveValue : -objectiveValue;\n            final int numEval = getEvaluations(); // nfm + 1\n            fAtInterpolationPoints.setEntry(nfm, f);\n\n            if (numEval == 1) {\n                fbeg = f;\n                trustRegionCenterInterpolationPointIndex = 0;\n            } else if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {\n                trustRegionCenterInterpolationPointIndex = nfm;\n            }\n\n            // Set the nonzero initial elements of BMAT and the quadratic model in the\n            // cases when NF is at most 2*N+1. If NF exceeds N+1, then the positions\n            // of the NF-th and (NF-N)-th interpolation points may be switched, in\n            // order that the function value at the first of them contributes to the\n            // off-diagonal second derivative terms of the initial quadratic model.\n\n            if (numEval <= 2 * n + 1) {\n                if (numEval >= 2 &&\n                    numEval <= n + 1) {\n                    gradientAtTrustRegionCenter.setEntry(nfmm, (f - fbeg) / stepa);\n                    if (npt < numEval + n) {\n                        final double oneOverStepA = ONE / stepa;\n                        bMatrix.setEntry(0, nfmm, -oneOverStepA);\n                        bMatrix.setEntry(nfm, nfmm, oneOverStepA);\n                        bMatrix.setEntry(npt + nfmm, nfmm, -HALF * rhosq);\n                        // throw new PathIsExploredException(); // XXX\n                    }\n                } else if (numEval >= n + 2) {\n                    final int ih = nfx * (nfx + 1) / 2 - 1;\n                    final double tmp = (f - fbeg) / stepb;\n                    final double diff = stepb - stepa;\n                    modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);\n                    gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);\n                    if (stepa * stepb < ZERO && f < fAtInterpolationPoints.getEntry(nfm - n)) {\n                        fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));\n                        fAtInterpolationPoints.setEntry(nfm - n, f);\n                        if (trustRegionCenterInterpolationPointIndex == nfm) {\n                            trustRegionCenterInterpolationPointIndex = nfm - n;\n                        }\n                        interpolationPoints.setEntry(nfm - n, nfxm, stepb);\n                        interpolationPoints.setEntry(nfm, nfxm, stepa);\n                    }\n                    bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));\n                    bMatrix.setEntry(nfm, nfxm, -HALF / interpolationPoints.getEntry(nfm - n, nfxm));\n                    bMatrix.setEntry(nfm - n, nfxm,\n                                  -bMatrix.getEntry(0, nfxm) - bMatrix.getEntry(nfm, nfxm));\n                    zMatrix.setEntry(0, nfxm, FastMath.sqrt(TWO) / (stepa * stepb));\n                    zMatrix.setEntry(nfm, nfxm, FastMath.sqrt(HALF) / rhosq);\n                    // zMatrix.setEntry(nfm, nfxm, FastMath.sqrt(HALF) * recip); // XXX \"testAckley\" and \"testDiffPow\" fail.\n                    zMatrix.setEntry(nfm - n, nfxm,\n                                  -zMatrix.getEntry(0, nfxm) - zMatrix.getEntry(nfm, nfxm));\n                }\n\n                // Set the off-diagonal second derivatives of the Lagrange functions and\n                // the initial quadratic model.\n\n            } else {\n                zMatrix.setEntry(0, nfxm, recip);\n                zMatrix.setEntry(nfm, nfxm, recip);\n                zMatrix.setEntry(ipt, nfxm, -recip);\n                zMatrix.setEntry(jpt, nfxm, -recip);\n\n                final int ih = ipt * (ipt - 1) / 2 + jpt - 1;\n                final double tmp = interpolationPoints.getEntry(nfm, ipt - 1) * interpolationPoints.getEntry(nfm, jpt - 1);\n                modelSecondDerivativesValues.setEntry(ih, (fbeg - fAtInterpolationPoints.getEntry(ipt) - fAtInterpolationPoints.getEntry(jpt) + f) / tmp);\n//                 throw new PathIsExploredException(); // XXX\n            }\n        } while (getEvaluations() < npt);\n    } // prelim\n\n\n    // ----------------------------------------------------------------------------------------\n\n    /**\n     *     A version of the truncated conjugate gradient is applied. If a line\n     *     search is restricted by a constraint, then the procedure is restarted,\n     *     the values of the variables that are at their bounds being fixed. If\n     *     the trust region boundary is reached, then further changes may be made\n     *     to D, each one being in the two dimensional space that is spanned\n     *     by the current D and the gradient of Q at XOPT+D, staying on the trust\n     *     region boundary. Termination occurs when the reduction in Q seems to\n     *     be close to the greatest reduction that can be achieved.\n     *     The arguments N, NPT, XPT, XOPT, GOPT, HQ, PQ, SL and SU have the same\n     *       meanings as the corresponding arguments of BOBYQB.\n     *     DELTA is the trust region radius for the present calculation, which\n     *       seeks a small value of the quadratic model within distance DELTA of\n     *       XOPT subject to the bounds on the variables.\n     *     XNEW will be set to a new vector of variables that is approximately\n     *       the one that minimizes the quadratic model within the trust region\n     *       subject to the SL and SU constraints on the variables. It satisfies\n     *       as equations the bounds that become active during the calculation.\n     *     D is the calculated trial step from XOPT, generated iteratively from an\n     *       initial value of zero. Thus XNEW is XOPT+D after the final iteration.\n     *     GNEW holds the gradient of the quadratic model at XOPT+D. It is updated\n     *       when D is updated.\n     *     xbdi.get( is a working space vector. For I=1,2,...,N, the element xbdi.get((I) is\n     *       set to -1.0, 0.0, or 1.0, the value being nonzero if and only if the\n     *       I-th variable has become fixed at a bound, the bound being SL(I) or\n     *       SU(I) in the case xbdi.get((I)=-1.0 or xbdi.get((I)=1.0, respectively. This\n     *       information is accumulated during the construction of XNEW.\n     *     The arrays S, HS and HRED are also used for working space. They hold the\n     *       current search direction, and the changes in the gradient of Q along S\n     *       and the reduced D, respectively, where the reduced D is the same as D,\n     *       except that the components of the fixed variables are zero.\n     *     DSQ will be set to the square of the length of XNEW-XOPT.\n     *     CRVMIN is set to zero if D reaches the trust region boundary. Otherwise\n     *       it is set to the least curvature of H that occurs in the conjugate\n     *       gradient searches that are not restricted by any constraints. The\n     *       value CRVMIN=-1.0D0 is set, however, if all of these searches are\n     *       constrained.\n     * @param delta\n     * @param gnew\n     * @param xbdi\n     * @param s\n     * @param hs\n     * @param hred\n     */\n    private double[] trsbox(\n            double delta,\n            ArrayRealVector gnew,\n            ArrayRealVector xbdi,\n            ArrayRealVector s,\n            ArrayRealVector hs,\n            ArrayRealVector hred\n    ) {\n        printMethod(); // XXX\n\n        final int n = currentBest.getDimension();\n        final int npt = numberOfInterpolationPoints;\n\n        double dsq = Double.NaN;\n        double crvmin = Double.NaN;\n\n        // Local variables\n        double ds;\n        int iu;\n        double dhd, dhs, cth, shs, sth, ssq, beta=0, sdec, blen;\n        int iact = -1;\n        int nact = 0;\n        double angt = 0, qred;\n        int isav;\n        double temp = 0, xsav = 0, xsum = 0, angbd = 0, dredg = 0, sredg = 0;\n        int iterc;\n        double resid = 0, delsq = 0, ggsav = 0, tempa = 0, tempb = 0,\n        redmax = 0, dredsq = 0, redsav = 0, gredsq = 0, rednew = 0;\n        int itcsav = 0;\n        double rdprev = 0, rdnext = 0, stplen = 0, stepsq = 0;\n        int itermax = 0;\n\n        // Set some constants.\n\n        // Function Body\n\n        // The sign of GOPT(I) gives the sign of the change to the I-th variable\n        // that will reduce Q from its value at XOPT. Thus xbdi.get((I) shows whether\n        // or not to fix the I-th variable at one of its bounds initially, with\n        // NACT being set to the number of fixed variables. D and GNEW are also\n        // set for the first iteration. DELSQ is the upper bound on the sum of\n        // squares of the free variables. QRED is the reduction in Q so far.\n\n        iterc = 0;\n        nact = 0;\n        for (int i = 0; i < n; i++) {\n            xbdi.setEntry(i, ZERO);\n            if (trustRegionCenterOffset.getEntry(i) <= lowerDifference.getEntry(i)) {\n                if (gradientAtTrustRegionCenter.getEntry(i) >= ZERO) {\n                    xbdi.setEntry(i, MINUS_ONE);\n                }\n            } else if (trustRegionCenterOffset.getEntry(i) >= upperDifference.getEntry(i) &&\n                       gradientAtTrustRegionCenter.getEntry(i) <= ZERO) {\n                xbdi.setEntry(i, ONE);\n            }\n            if (xbdi.getEntry(i) != ZERO) {\n                ++nact;\n            }\n            trialStepPoint.setEntry(i, ZERO);\n            gnew.setEntry(i, gradientAtTrustRegionCenter.getEntry(i));\n        }\n        delsq = delta * delta;\n        qred = ZERO;\n        crvmin = MINUS_ONE;\n\n        // Set the next search direction of the conjugate gradient method. It is\n        // the steepest descent direction initially and when the iterations are\n        // restarted because a variable has just been fixed by a bound, and of\n        // course the components of the fixed variables are zero. ITERMAX is an\n        // upper bound on the indices of the conjugate gradient iterations.\n\n        int state = 20;\n        for(;;) {\n            switch (state) {\n        case 20: {\n            printState(20); // XXX\n            beta = ZERO;\n        }\n        case 30: {\n            printState(30); // XXX\n            stepsq = ZERO;\n            for (int i = 0; i < n; i++) {\n                if (xbdi.getEntry(i) != ZERO) {\n                    s.setEntry(i, ZERO);\n                } else if (beta == ZERO) {\n                    s.setEntry(i, -gnew.getEntry(i));\n                } else {\n                    s.setEntry(i, beta * s.getEntry(i) - gnew.getEntry(i));\n                }\n                // Computing 2nd power\n                final double d1 = s.getEntry(i);\n                stepsq += d1 * d1;\n            }\n            if (stepsq == ZERO) {\n                state = 190; break;\n            }\n            if (beta == ZERO) {\n                gredsq = stepsq;\n                itermax = iterc + n - nact;\n            }\n            if (gredsq * delsq <= qred * 1e-4 * qred) {\n                state = 190; break;\n            }\n\n            // Multiply the search direction by the second derivative matrix of Q and\n            // calculate some scalars for the choice of steplength. Then set BLEN to\n            // the length of the the step to the trust region boundary and STPLEN to\n            // the steplength, ignoring the simple bounds.\n\n            state = 210; break;\n        }\n        case 50: {\n            printState(50); // XXX\n            resid = delsq;\n            ds = ZERO;\n            shs = ZERO;\n            for (int i = 0; i < n; i++) {\n                if (xbdi.getEntry(i) == ZERO) {\n                    // Computing 2nd power\n                    final double d1 = trialStepPoint.getEntry(i);\n                    resid -= d1 * d1;\n                    ds += s.getEntry(i) * trialStepPoint.getEntry(i);\n                    shs += s.getEntry(i) * hs.getEntry(i);\n                }\n            }\n            if (resid <= ZERO) {\n                state = 90; break;\n            }\n            temp = FastMath.sqrt(stepsq * resid + ds * ds);\n            if (ds < ZERO) {\n                blen = (temp - ds) / stepsq;\n            } else {\n                blen = resid / (temp + ds);\n            }\n            stplen = blen;\n            if (shs > ZERO) {\n                // Computing MIN\n                stplen = FastMath.min(blen, gredsq / shs);\n            }\n\n            // Reduce STPLEN if necessary in order to preserve the simple bounds,\n            // letting IACT be the index of the new constrained variable.\n\n            iact = -1;\n            for (int i = 0; i < n; i++) {\n                if (s.getEntry(i) != ZERO) {\n                    xsum = trustRegionCenterOffset.getEntry(i) + trialStepPoint.getEntry(i);\n                    if (s.getEntry(i) > ZERO) {\n                        temp = (upperDifference.getEntry(i) - xsum) / s.getEntry(i);\n                    } else {\n                        temp = (lowerDifference.getEntry(i) - xsum) / s.getEntry(i);\n                    }\n                    if (temp < stplen) {\n                        stplen = temp;\n                        iact = i;\n                    }\n                }\n            }\n\n            // Update CRVMIN, GNEW and D. Set SDEC to the decrease that occurs in Q.\n\n            sdec = ZERO;\n            if (stplen > ZERO) {\n                ++iterc;\n                temp = shs / stepsq;\n                if (iact == -1 && temp > ZERO) {\n                    crvmin = FastMath.min(crvmin,temp);\n                    if (crvmin == MINUS_ONE) {\n                        crvmin = temp;\n                    }\n                }\n                ggsav = gredsq;\n                gredsq = ZERO;\n                for (int i = 0; i < n; i++) {\n                    gnew.setEntry(i, gnew.getEntry(i) + stplen * hs.getEntry(i));\n                    if (xbdi.getEntry(i) == ZERO) {\n                        // Computing 2nd power\n                        final double d1 = gnew.getEntry(i);\n                        gredsq += d1 * d1;\n                    }\n                    trialStepPoint.setEntry(i, trialStepPoint.getEntry(i) + stplen * s.getEntry(i));\n                }\n                // Computing MAX\n                final double d1 = stplen * (ggsav - HALF * stplen * shs);\n                sdec = FastMath.max(d1, ZERO);\n                qred += sdec;\n            }\n\n            // Restart the conjugate gradient method if it has hit a new bound.\n\n            if (iact >= 0) {\n                ++nact;\n                xbdi.setEntry(iact, ONE);\n                if (s.getEntry(iact) < ZERO) {\n                    xbdi.setEntry(iact, MINUS_ONE);\n                }\n                // Computing 2nd power\n                final double d1 = trialStepPoint.getEntry(iact);\n                delsq -= d1 * d1;\n                if (delsq <= ZERO) {\n                    state = 190; break;\n                }\n                state = 20; break;\n            }\n\n            // If STPLEN is less than BLEN, then either apply another conjugate\n            // gradient iteration or RETURN.\n\n            if (stplen < blen) {\n                if (iterc == itermax) {\n                    state = 190; break;\n                }\n                if (sdec <= qred * .01) {\n                    state = 190; break;\n                }\n                beta = gredsq / ggsav;\n                state = 30; break;\n            }\n        }\n        case 90: {\n            printState(90); // XXX\n            crvmin = ZERO;\n\n            // Prepare for the alternative iteration by calculating some scalars\n            // and by multiplying the reduced D by the second derivative matrix of\n            // Q, where S holds the reduced D in the call of GGMULT.\n\n        }\n        case 100: {\n            printState(100); // XXX\n            if (nact >= n - 1) {\n                state = 190; break;\n            }\n            dredsq = ZERO;\n            dredg = ZERO;\n            gredsq = ZERO;\n            for (int i = 0; i < n; i++) {\n                if (xbdi.getEntry(i) == ZERO) {\n                    // Computing 2nd power\n                    double d1 = trialStepPoint.getEntry(i);\n                    dredsq += d1 * d1;\n                    dredg += trialStepPoint.getEntry(i) * gnew.getEntry(i);\n                    // Computing 2nd power\n                    d1 = gnew.getEntry(i);\n                    gredsq += d1 * d1;\n                    s.setEntry(i, trialStepPoint.getEntry(i));\n                } else {\n                    s.setEntry(i, ZERO);\n                }\n            }\n            itcsav = iterc;\n            state = 210; break;\n            // Let the search direction S be a linear combination of the reduced D\n            // and the reduced G that is orthogonal to the reduced D.\n        }\n        case 120: {\n            printState(120); // XXX\n            ++iterc;\n            temp = gredsq * dredsq - dredg * dredg;\n            if (temp <= qred * 1e-4 * qred) {\n                state = 190; break;\n            }\n            temp = FastMath.sqrt(temp);\n            for (int i = 0; i < n; i++) {\n                if (xbdi.getEntry(i) == ZERO) {\n                    s.setEntry(i, (dredg * trialStepPoint.getEntry(i) - dredsq * gnew.getEntry(i)) / temp);\n                } else {\n                    s.setEntry(i, ZERO);\n                }\n            }\n            sredg = -temp;\n\n            // By considering the simple bounds on the variables, calculate an upper\n            // bound on the tangent of half the angle of the alternative iteration,\n            // namely ANGBD, except that, if already a free variable has reached a\n            // bound, there is a branch back to label 100 after fixing that variable.\n\n            angbd = ONE;\n            iact = -1;\n            for (int i = 0; i < n; i++) {\n                if (xbdi.getEntry(i) == ZERO) {\n                    tempa = trustRegionCenterOffset.getEntry(i) + trialStepPoint.getEntry(i) - lowerDifference.getEntry(i);\n                    tempb = upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i) - trialStepPoint.getEntry(i);\n                    if (tempa <= ZERO) {\n                        ++nact;\n                        xbdi.setEntry(i, MINUS_ONE);\n                        state = 100; break;\n                    } else if (tempb <= ZERO) {\n                        ++nact;\n                        xbdi.setEntry(i, ONE);\n                        state = 100; break;\n                    }\n                    // Computing 2nd power\n                    double d1 = trialStepPoint.getEntry(i);\n                    // Computing 2nd power\n                    double d2 = s.getEntry(i);\n                    ssq = d1 * d1 + d2 * d2;\n                    // Computing 2nd power\n                    d1 = trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i);\n                    temp = ssq - d1 * d1;\n                    if (temp > ZERO) {\n                        temp = FastMath.sqrt(temp) - s.getEntry(i);\n                        if (angbd * temp > tempa) {\n                            angbd = tempa / temp;\n                            iact = i;\n                            xsav = MINUS_ONE;\n                        }\n                    }\n                    // Computing 2nd power\n                    d1 = upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i);\n                    temp = ssq - d1 * d1;\n                    if (temp > ZERO) {\n                        temp = FastMath.sqrt(temp) + s.getEntry(i);\n                        if (angbd * temp > tempb) {\n                            angbd = tempb / temp;\n                            iact = i;\n                            xsav = ONE;\n                        }\n                    }\n                }\n            }\n\n            // Calculate HHD and some curvatures for the alternative iteration.\n\n            state = 210; break;\n        }\n        case 150: {\n            printState(150); // XXX\n            shs = ZERO;\n            dhs = ZERO;\n            dhd = ZERO;\n            for (int i = 0; i < n; i++) {\n                if (xbdi.getEntry(i) == ZERO) {\n                    shs += s.getEntry(i) * hs.getEntry(i);\n                    dhs += trialStepPoint.getEntry(i) * hs.getEntry(i);\n                    dhd += trialStepPoint.getEntry(i) * hred.getEntry(i);\n                }\n            }\n\n            // Seek the greatest reduction in Q for a range of equally spaced values\n            // of ANGT in [0,ANGBD], where ANGT is the tangent of half the angle of\n            // the alternative iteration.\n\n            redmax = ZERO;\n            isav = -1;\n            redsav = ZERO;\n            iu = (int) (angbd * 17. + 3.1);\n            for (int i = 0; i < iu; i++) {\n                angt = angbd * i / iu;\n                sth = (angt + angt) / (ONE + angt * angt);\n                temp = shs + angt * (angt * dhd - dhs - dhs);\n                rednew = sth * (angt * dredg - sredg - HALF * sth * temp);\n                if (rednew > redmax) {\n                    redmax = rednew;\n                    isav = i;\n                    rdprev = redsav;\n                } else if (i == isav + 1) {\n                    rdnext = rednew;\n                }\n                redsav = rednew;\n            }\n\n            // Return if the reduction is zero. Otherwise, set the sine and cosine\n            // of the angle of the alternative iteration, and calculate SDEC.\n\n            if (isav < 0) {\n                state = 190; break;\n            }\n            if (isav < iu) {\n                temp = (rdnext - rdprev) / (redmax + redmax - rdprev - rdnext);\n                angt = angbd * (isav + HALF * temp) / iu;\n            }\n            cth = (ONE - angt * angt) / (ONE + angt * angt);\n            sth = (angt + angt) / (ONE + angt * angt);\n            temp = shs + angt * (angt * dhd - dhs - dhs);\n            sdec = sth * (angt * dredg - sredg - HALF * sth * temp);\n            if (sdec <= ZERO) {\n                state = 190; break;\n            }\n\n            // Update GNEW, D and HRED. If the angle of the alternative iteration\n            // is restricted by a bound on a free variable, that variable is fixed\n            // at the bound.\n\n            dredg = ZERO;\n            gredsq = ZERO;\n            for (int i = 0; i < n; i++) {\n                gnew.setEntry(i, gnew.getEntry(i) + (cth - ONE) * hred.getEntry(i) + sth * hs.getEntry(i));\n                if (xbdi.getEntry(i) == ZERO) {\n                    trialStepPoint.setEntry(i, cth * trialStepPoint.getEntry(i) + sth * s.getEntry(i));\n                    dredg += trialStepPoint.getEntry(i) * gnew.getEntry(i);\n                    // Computing 2nd power\n                    final double d1 = gnew.getEntry(i);\n                    gredsq += d1 * d1;\n                }\n                hred.setEntry(i, cth * hred.getEntry(i) + sth * hs.getEntry(i));\n            }\n            qred += sdec;\n            if (iact >= 0 && isav == iu) {\n                ++nact;\n                xbdi.setEntry(iact, xsav);\n                state = 100; break;\n            }\n\n            // If SDEC is sufficiently small, then RETURN after setting XNEW to\n            // XOPT+D, giving careful attention to the bounds.\n\n            if (sdec > qred * .01) {\n                state = 120; break;\n            }\n        }\n        case 190: {\n            printState(190); // XXX\n            dsq = ZERO;\n            for (int i = 0; i < n; i++) {\n                // Computing MAX\n                // Computing MIN\n                final double min = FastMath.min(trustRegionCenterOffset.getEntry(i) + trialStepPoint.getEntry(i),\n                                                upperDifference.getEntry(i));\n                newPoint.setEntry(i, FastMath.max(min, lowerDifference.getEntry(i)));\n                if (xbdi.getEntry(i) == MINUS_ONE) {\n                    newPoint.setEntry(i, lowerDifference.getEntry(i));\n                }\n                if (xbdi.getEntry(i) == ONE) {\n                    newPoint.setEntry(i, upperDifference.getEntry(i));\n                }\n                trialStepPoint.setEntry(i, newPoint.getEntry(i) - trustRegionCenterOffset.getEntry(i));\n                // Computing 2nd power\n                final double d1 = trialStepPoint.getEntry(i);\n                dsq += d1 * d1;\n            }\n            return new double[] { dsq, crvmin };\n            // The following instructions multiply the current S-vector by the second\n            // derivative matrix of the quadratic model, putting the product in HS.\n            // They are reached from three different parts of the software above and\n            // they can be regarded as an external subroutine.\n        }\n        case 210: {\n            printState(210); // XXX\n            int ih = 0;\n            for (int j = 0; j < n; j++) {\n                hs.setEntry(j, ZERO);\n                for (int i = 0; i <= j; i++) {\n                    if (i < j) {\n                        hs.setEntry(j, hs.getEntry(j) + modelSecondDerivativesValues.getEntry(ih) * s.getEntry(i));\n                    }\n                    hs.setEntry(i, hs.getEntry(i) + modelSecondDerivativesValues.getEntry(ih) * s.getEntry(j));\n                    ih++;\n                }\n            }\n            final RealVector tmp = interpolationPoints.operate(s).ebeMultiply(modelSecondDerivativesParameters);\n            for (int k = 0; k < npt; k++) {\n                if (modelSecondDerivativesParameters.getEntry(k) != ZERO) {\n                    for (int i = 0; i < n; i++) {\n                        hs.setEntry(i, hs.getEntry(i) + tmp.getEntry(k) * interpolationPoints.getEntry(k, i));\n                    }\n                }\n            }\n            if (crvmin != ZERO) {\n                state = 50; break;\n            }\n            if (iterc > itcsav) {\n                state = 150; break;\n            }\n            for (int i = 0; i < n; i++) {\n                hred.setEntry(i, hs.getEntry(i));\n            }\n            state = 120; break;\n        }\n        default: {\n            throw new MathIllegalStateException(LocalizedFormats.SIMPLE_MESSAGE, \"trsbox\");\n        }}\n        }\n    } // trsbox\n\n    // ----------------------------------------------------------------------------------------\n\n    /**\n     *     The arrays BMAT and ZMAT are updated, as required by the new position\n     *     of the interpolation point that has the index KNEW. The vector VLAG has\n     *     N+NPT components, set on entry to the first NPT and last N components\n     *     of the product Hw in equation (4.11) of the Powell (2006) paper on\n     *     NEWUOA. Further, BETA is set on entry to the value of the parameter\n     *     with that name, and DENOM is set to the denominator of the updating\n     *     formula. Elements of ZMAT may be treated as zero if their moduli are\n     *     at most ZTEST. The first NDIM elements of W are used for working space.\n     * @param beta\n     * @param denom\n     * @param knew\n     */\n    private void update(\n            double beta,\n            double denom,\n            int knew\n    ) {\n        printMethod(); // XXX\n\n        final int n = currentBest.getDimension();\n        final int npt = numberOfInterpolationPoints;\n        final int nptm = npt - n - 1;\n\n        // XXX Should probably be split into two arrays.\n        final ArrayRealVector work = new ArrayRealVector(npt + n);\n\n        double ztest = ZERO;\n        for (int k = 0; k < npt; k++) {\n            for (int j = 0; j < nptm; j++) {\n                // Computing MAX\n                ztest = FastMath.max(ztest, FastMath.abs(zMatrix.getEntry(k, j)));\n            }\n        }\n        ztest *= 1e-20;\n\n        // Apply the rotations that put zeros in the KNEW-th row of ZMAT.\n\n        for (int j = 1; j < nptm; j++) {\n            final double d1 = zMatrix.getEntry(knew, j);\n            if (FastMath.abs(d1) > ztest) {\n                // Computing 2nd power\n                final double d2 = zMatrix.getEntry(knew, 0);\n                // Computing 2nd power\n                final double d3 = zMatrix.getEntry(knew, j);\n                final double d4 = FastMath.sqrt(d2 * d2 + d3 * d3);\n                final double d5 = zMatrix.getEntry(knew, 0) / d4;\n                final double d6 = zMatrix.getEntry(knew, j) / d4;\n                for (int i = 0; i < npt; i++) {\n                    final double d7 = d5 * zMatrix.getEntry(i, 0) + d6 * zMatrix.getEntry(i, j);\n                    zMatrix.setEntry(i, j, d5 * zMatrix.getEntry(i, j) - d6 * zMatrix.getEntry(i, 0));\n                    zMatrix.setEntry(i, 0, d7);\n                }\n            }\n            zMatrix.setEntry(knew, j, ZERO);\n        }\n\n        // Put the first NPT components of the KNEW-th column of HLAG into W,\n        // and calculate the parameters of the updating formula.\n\n        for (int i = 0; i < npt; i++) {\n            work.setEntry(i, zMatrix.getEntry(knew, 0) * zMatrix.getEntry(i, 0));\n        }\n        final double alpha = work.getEntry(knew);\n        final double tau = lagrangeValuesAtNewPoint.getEntry(knew);\n        lagrangeValuesAtNewPoint.setEntry(knew, lagrangeValuesAtNewPoint.getEntry(knew) - ONE);\n\n        // Complete the updating of ZMAT.\n\n        final double sqrtDenom = FastMath.sqrt(denom);\n        final double d1 = tau / sqrtDenom;\n        final double d2 = zMatrix.getEntry(knew, 0) / sqrtDenom;\n        for (int i = 0; i < npt; i++) {\n            zMatrix.setEntry(i, 0,\n                          d1 * zMatrix.getEntry(i, 0) - d2 * lagrangeValuesAtNewPoint.getEntry(i));\n        }\n\n        // Finally, update the matrix BMAT.\n\n        for (int j = 0; j < n; j++) {\n            final int jp = npt + j;\n            work.setEntry(jp, bMatrix.getEntry(knew, j));\n            final double d3 = (alpha * lagrangeValuesAtNewPoint.getEntry(jp) - tau * work.getEntry(jp)) / denom;\n            final double d4 = (-beta * work.getEntry(jp) - tau * lagrangeValuesAtNewPoint.getEntry(jp)) / denom;\n            for (int i = 0; i <= jp; i++) {\n                bMatrix.setEntry(i, j,\n                              bMatrix.getEntry(i, j) + d3 * lagrangeValuesAtNewPoint.getEntry(i) + d4 * work.getEntry(i));\n                if (i >= npt) {\n                    bMatrix.setEntry(jp, (i - npt), bMatrix.getEntry(i, j));\n                }\n            }\n        }\n    } // update\n\n    /**\n     * Performs validity checks.\n     *\n     * @param lowerBound Lower bounds (constraints) of the objective variables.\n     * @param upperBound Upperer bounds (constraints) of the objective variables.\n     */\n    private void setup(double[] lowerBound,\n                       double[] upperBound) {\n        printMethod(); // XXX\n\n        double[] init = getStartPoint();\n        final int dimension = init.length;\n\n        // Check problem dimension.\n        if (dimension < MINIMUM_PROBLEM_DIMENSION) {\n            throw new NumberIsTooSmallException(dimension, MINIMUM_PROBLEM_DIMENSION, true);\n        }\n        // Check number of interpolation points.\n        final int[] nPointsInterval = { dimension + 2, (dimension + 2) * (dimension + 1) / 2 };\n        if (numberOfInterpolationPoints < nPointsInterval[0] ||\n            numberOfInterpolationPoints > nPointsInterval[1]) {\n            throw new OutOfRangeException(LocalizedFormats.NUMBER_OF_INTERPOLATION_POINTS,\n                                          numberOfInterpolationPoints,\n                                          nPointsInterval[0],\n                                          nPointsInterval[1]);\n        }\n\n        // Initialize bound differences.\n        boundDifference = new double[dimension];\n\n        double requiredMinDiff = 2 * initialTrustRegionRadius;\n        double minDiff = Double.POSITIVE_INFINITY;\n        for (int i = 0; i < dimension; i++) {\n            boundDifference[i] = upperBound[i] - lowerBound[i];\n            minDiff = FastMath.min(minDiff, boundDifference[i]);\n        }\n        if (minDiff < requiredMinDiff) {\n            initialTrustRegionRadius = minDiff / 3.0;\n        }\n\n        // Initialize the data structures used by the \"bobyqa\" method.\n        bMatrix = new Array2DRowRealMatrix(dimension + numberOfInterpolationPoints,\n                                           dimension);\n        zMatrix = new Array2DRowRealMatrix(numberOfInterpolationPoints,\n                                           numberOfInterpolationPoints - dimension - 1);\n        interpolationPoints = new Array2DRowRealMatrix(numberOfInterpolationPoints,\n                                                       dimension);\n        originShift = new ArrayRealVector(dimension);\n        fAtInterpolationPoints = new ArrayRealVector(numberOfInterpolationPoints);\n        trustRegionCenterOffset = new ArrayRealVector(dimension);\n        gradientAtTrustRegionCenter = new ArrayRealVector(dimension);\n        lowerDifference = new ArrayRealVector(dimension);\n        upperDifference = new ArrayRealVector(dimension);\n        modelSecondDerivativesParameters = new ArrayRealVector(numberOfInterpolationPoints);\n        newPoint = new ArrayRealVector(dimension);\n        alternativeNewPoint = new ArrayRealVector(dimension);\n        trialStepPoint = new ArrayRealVector(dimension);\n        lagrangeValuesAtNewPoint = new ArrayRealVector(dimension + numberOfInterpolationPoints);\n        modelSecondDerivativesValues = new ArrayRealVector(dimension * (dimension + 1) / 2);\n    }\n\n    // XXX utility for figuring out call sequence.\n    private static String caller(int n) {\n        final Throwable t = new Throwable();\n        final StackTraceElement[] elements = t.getStackTrace();\n        final StackTraceElement e = elements[n];\n        return e.getMethodName() + \" (at line \" + e.getLineNumber() + \")\";\n    }\n    // XXX utility for figuring out call sequence.\n    private static void printState(int s) {\n        //        System.out.println(caller(2) + \": state \" + s);\n    }\n    // XXX utility for figuring out call sequence.\n    private static void printMethod() {\n        //        System.out.println(caller(2));\n    }\n\n    /**\n     * Marker for code paths that are not explored with the current unit tests.\n     * If the path becomes explored, it should just be removed from the code.\n     */\n    private static class PathIsExploredException extends RuntimeException {\n        /** Serializable UID. */\n        private static final long serialVersionUID = 745350979634801853L;\n\n        /** Message string. */\n        private static final String PATH_IS_EXPLORED\n            = \"If this exception is thrown, just remove it from the code\";\n\n        PathIsExploredException() {\n            super(PATH_IS_EXPLORED + \" \" + BOBYQAOptimizer.caller(3));\n        }\n    }\n}\n//CHECKSTYLE: resume all\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "2",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "2",
                "int"
            ],
            [
                "2",
                "int"
            ],
            [
                "2",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "2",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "2",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "2",
                "int"
            ],
            [
                "5",
                "int"
            ],
            [
                "3",
                "int"
            ],
            [
                "5",
                "int"
            ],
            [
                "2",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "lowerBound",
                "",
                "double[]"
            ],
            [
                "upperBound",
                "",
                "double[]"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "doOptimize",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "protected PointValuePair doOptimize()"
            ],
            [
                "getEvaluations",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public int getEvaluations()"
            ],
            [
                "getConvergenceChecker",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public ConvergenceChecker<PointValuePair> getConvergenceChecker()"
            ],
            [
                "getMaxEvaluations",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public int getMaxEvaluations()"
            ],
            [
                "getUpperBound",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public double[] getUpperBound()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "computeObjectiveValue",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "protected double computeObjectiveValue(double[] arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "optimizeInternal",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "protected transient PointValuePair optimizeInternal(int arg0, FUNC arg1, GoalType arg2, OptimizationData[] arg3) throws TooManyEvaluationsException"
            ],
            [
                "getLowerBound",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public double[] getLowerBound()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "public PointValuePair optimize(int arg0, FUNC arg1, GoalType arg2, double[] arg3)"
            ],
            [
                "getConvergenceChecker",
                "org.apache.commons.math3.optimization",
                "BaseOptimizer",
                "public abstract ConvergenceChecker<PAIR> getConvergenceChecker()"
            ],
            [
                "optimizeInternal",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "protected PointValuePair optimizeInternal(int arg0, FUNC arg1, GoalType arg2, double[] arg3)"
            ],
            [
                "getGoalType",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public GoalType getGoalType()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "public PointValuePair optimize(int arg0, FUNC arg1, GoalType arg2, double[] arg3, double[] arg4, double[] arg5)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public transient PointValuePair optimize(int arg0, FUNC arg1, GoalType arg2, OptimizationData[] arg3)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getStartPoint",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "public double[] getStartPoint()"
            ],
            [
                "equals",
                "",
                "double[]",
                "public boolean equals(Object);"
            ],
            [
                "toString",
                "",
                "double[]",
                "public String toString()"
            ],
            [
                "hashCode",
                "",
                "double[]",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "",
                "double[]",
                "public final native Class getClass();"
            ],
            [
                "clone",
                "",
                "double[]",
                "public T[] clone();"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "evaluations",
                "org.apache.commons.math3.optimization.direct",
                "BaseAbstractMultivariateOptimizer",
                "protected Incrementor evaluations;"
            ],
            [
                "length",
                "",
                "double[]",
                "public final int length;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    }
]